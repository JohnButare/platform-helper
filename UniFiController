#!/usr/bin/env bash
. app.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [api|backup|devices|port](api)
Manage the UniFi controller.

	api 			call a API command
	backup		backup the controller configuration
	devices		show UniFi device configuration
	port			configure port forwarding"
}

init()
{	
	defaultCommand="api"	
	site="default"
  cookie=$(mktemp)
	curl="curl --tlsv1 --cookie $cookie --cookie-jar $cookie --insecure"
}

argStart() { unset -v apiInitialized; }

cleanup()
{
	[[ $apiInitialized ]] && { apiCleanup || return; }
	return 0
}

#
# commands
#

devicesCommand() { UniFiController api "/stat/device" | jq; }

#
# API Command
#

apiUsage()
{
	echot "Usage: $(ScriptName) api [available|put] [URI](/stat/sta) [JSON]({})
Perform an API command.

Examples:
	/stat/sta - all client status
	/stat/health
	/stat/device"
}

apiArgStart() { uri="/stat/sta" json="{}"; }

apiArgs()
{
	(( $# > 0 )) && { ScriptArgGet "uri" -- "$@"; shift; }
	(( $# > 0 )) && { ScriptArgGet "json" -- "$@"; shift; }
	return 0
}

apiCommand() { api "$uri" "$json"; }
apiAvailableCommand() { apiInit; }
apiPutCommand() { apiPut "$uri" "$json"; }

#
# Backup Command
#

backupCommand()
{
	hilight "Backing up UniFiController..."

	# initialize
	apiInit || return
	local dest="$1" result; [[ ! $dest ]] && { dest="$(AppGetBackupDir)/unifi.controller.unf" || return; }
	[[ -f "$dest" ]] && { bak --move "$dest" || return; }

  # ask controller to do a backup, response contains the path to the backup file
  printf "backup..."
  result="$($curl --silent --data '{"cmd":"backup", "days": 0}' "$url/api/s/$site/cmd/backup")"
  path="$(echo $result | sed -n 's/.*\(\/dl.*unf\).*/\1/p')"

  # download the backup to the destinated output file
  echo "download..."
  $curl "$url$path" -o "$dest"
  echo "UnifiController backup of $server completed to $(FileToDesc "$dest")"
}

#
# Port Commands
#

apiUsage()
{
	echot "Usage: $(ScriptName) port [list|enable|disable](list)
Perform an API command.

	list					list all port forwarding rules
	enable PORT		enable specified port forwarding rule
	disable PORT		disable specified port forwarding rule"
}

portCommand() { portListCommand; }
portListCommand() { getPorts; }

portDisableArgs() { ScriptArgGet "port" -- "$@"; shift; }
portDisableCommand() { portEnable "$port" "false"; }
portEnableArgs() { ScriptArgGet "port" -- "$@"; shift; }
portEnableCommand() { portEnable "$port" "true"; }

# portEnable PORT true|false
portEnable()
{
	local port="$1" status="$2"
	local id; id="$(getPortId "$port")" || return
	apiPut "/rest/portforward/$id" '{ "enabled": '$status' }' | jq
}

# getPortId NAME - get the ID of the specified port forwarding rule
getPortId()
{
	local name="$1"
	local id; id="$(getPorts | jq ".data[] | select(.name == \"$name\")._id" | RemoveQuotes)" || return
	[[ "$id" == "null" ]] && unset id
	[[ ! $quiet && ! $id ]] && EchoErr "port forwarding rule '$name' not found"
	[[ $id ]] && echo "$id"
}

getPorts() { api "/list/portforward"; }


#
# API Helper
#

api()
{
	local uri="$1" json="$2"
	apiInit || return
	$curl --silent --data "$json" "$url/api/s/$site/$(echo "$uri" | RemoveFront "/")"
}

apiPut()
{
	local uri="$1" json="$2"
	apiInit || return
	$curl -X PUT --silent --data "$json" "$url/api/s/$site/$(echo "$uri" | RemoveFront "/")"
}

apiInit()
{
	[[ $apiInitialized ]] && return
	
	# get configuration
  user="$(credential get unifi user --fallback)" || return
  password="$(credential get unifi password --fallback)" || return
  url="$(credential get unifi url --fallback | RemoveTrailingSlash)" || return
  server="$(GetUriServer "$url")" || return
  port="$(GetUrlPort "$url")" || return

	! [[ $user && $password && $url ]] &&
		{ EchoErr "$(ScriptName): UniFi configuration is missing from the credential store"; return 1; }

	[[ $verbose ]] && ScriptErr "user='$user' url='$url' server='$server' port='$port'"

	# check if the API is available
	if ! IsAvailablePort "$server" "$port"; then
		[[ ! $quiet ]] && ScriptErr "The UniFi Controller server '$server' is not available on port '$port'" 
		return 1
	fi

	# initialize API
	if [[ $verbose ]]; then
  	$curl --silent --data '{"username":"'$user'", "password":"'$password'"}' "$url/api/login"
  else
  	$curl --silent --data '{"username":"'$user'", "password":"'$password'"}' "$url/api/login" > /dev/null
  fi
  local result="$?"

  # error
  if (( $result != 0 )); then
  	ScriptErr "unable to initialize API"
  	$curl --data '{"username":"'$user'", "password":"'$password'"}' "$url/api/login"
  	return 1
  fi

  apiInitialized="true"
}

apiCleanup()
{
	$curl --silent "$url/logout" > /dev/null
	rm -f "$cookie"
}

ScriptRun "$@"
