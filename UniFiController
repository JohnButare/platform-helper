#!/usr/bin/env bash
. app.sh || exit

run() {	init && args "$@" && "${command}Command"; cleanup; }

init()
{
	unset apiInitialized
	site="default"
  cookie=$(mktemp)
	curl="curl --tlsv1 --cookie $cookie --cookie-jar $cookie --insecure"
}

cleanup()
{
	[[ $apiInitialized ]] && { apiCleanup || return; }
	return 0
}

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manage the UniFi controller.

	-v, --verbose                   display detailed output"
}

args()
{
	local args=()
	unset -v verbose

	# commands
	ScriptCommand "apiCommand" "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in
			-h|--help) usage 0;;
			-v|--verbose) verbose="--verbose";;
			--) shift; otherArgs+=("$@"); set --; break;;
			*) ScriptOpt "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"

	(( $# == 0 )) && return || usage
}

#
# API Command
#

apiUsage()
{
	echot "Usage: $(ScriptName) api [URI](/stat/sta) [JSON]({})
Perform an API command.

Examples:
	/stat/sta - all client status
	/stat/health
	/stat/device"
}

apiArgStart() { uri="/stat/sta}" json="{}"; }

apiArgs()
{
	(( $# > 0 )) && { ScriptArgGet "uri" -- "$@"; shift; }
	(( $# > 0 )) && { ScriptArgGet "json" -- "$@"; shift; }
	return 0
}

apiCommand()
{
	apiInit || return
	$curl --silent --data "$json" "$url/api/s/$site/$(echo "$uri" | RemoveFront "/")" | jq
}

#
# Backup Command
#

backupCommand()
{
	local dest="$1" result; [[ ! $dest ]] && dest="$(AppGetBackupDir)/unifi.controller.unf"

	apiInit || return

  # ask controller to do a backup, response contains the path to the backup file
  printf "backup..."
  result="$($curl --silent --data '{"cmd":"backup"}' "$url/api/s/$site/cmd/backup")"
  path="$(echo $result | sed -n 's/.*\(\/dl.*unf\).*/\1/p')"

  # download the backup to the destinated output file
  echo "download..."
  $curl "$url$path" -o "$dest"
}

#
# API Helper
#

apiInit()
{
	[[ $apiInitialized ]] && return
	
  user="$(credential get unifi user)" || return
  password="$(credential get unifi password)" || return
  url="$(credential get unifi url | RemoveTrailingSlash)" || return

	! [[ $user && $password && $url ]] &&
		{ EchoErr "$(ScriptName): UniFi configuration is missing from the credential store"; return 1; }

	suppress="> /dev/null"; [[ $verbose ]] && suppress=""
  $curl --silent --data '{"username":"'$user'", "password":"'$password'"}' "$url/api/login" $suppress || return
  apiInitialized="true"
}

apiCleanup()
{
	$curl --silent "$url/logout" > /dev/null
	rm -f "$cookie"
}

run "$@"
