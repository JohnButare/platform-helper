#!/usr/bin/env bash
. app.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
Manage the UniFi controller."
}


init()
{
	unset apiInitialized
	defaultCommand="api"	
	site="default"
  cookie=$(mktemp)
	curl="curl --tlsv1 --cookie $cookie --cookie-jar $cookie --insecure"
}

cleanup()
{
	[[ $apiInitialized ]] && { apiCleanup || return; }
	return 0
}

#
# API Command
#

apiUsage()
{
	echot "Usage: $(ScriptName) api [URI](/stat/sta) [JSON]({})
Perform an API command.

Examples:
	/stat/sta - all client status
	/stat/health
	/stat/device"
}

apiArgStart() { uri="/stat/sta}" json="{}"; }

apiArgs()
{
	(( $# > 0 )) && { ScriptArgGet "uri" -- "$@"; shift; }
	(( $# > 0 )) && { ScriptArgGet "json" -- "$@"; shift; }
	return 0
}

apiCommand()
{
	apiInit || return
	$curl --silent --data "$json" "$url/api/s/$site/$(echo "$uri" | RemoveFront "/")" | jq
}

#
# Backup Command
#

backupCommand()
{
	local dest="$1" result; [[ ! $dest ]] && dest="$(AppGetBackupDir)/unifi.controller.unf"

	apiInit || return

  # ask controller to do a backup, response contains the path to the backup file
  printf "backup..."
  result="$($curl --silent --data '{"cmd":"backup", "days": 0}' "$url/api/s/$site/cmd/backup")"
  path="$(echo $result | sed -n 's/.*\(\/dl.*unf\).*/\1/p')"

  # download the backup to the destinated output file
  echo "download..."
  $curl "$url$path" -o "$dest"
  echo "Backup completed to $(FileToDesc "$dest")"
}

backupListCommand()
{
	apiInit || return
  result="$($curl --silent --data '{"cmd":"list-backups"}' "$url/api/s/$site/cmd/backup")"
}

#
# API Helper
#

apiInit()
{
	[[ $apiInitialized ]] && return
	
  user="$(credential get unifi user --fallback)" || return
  password="$(credential get unifi password --fallback)" || return
  url="$(credential get unifi url --fallback | RemoveTrailingSlash)" || return

	! [[ $user && $password && $url ]] &&
		{ EchoErr "$(ScriptName): UniFi configuration is missing from the credential store"; return 1; }

	if [[ $verbose ]]; then
  	$curl --silent --data '{"username":"'$user'", "password":"'$password'"}' "$url/api/login" || return
  else
  	$curl --silent --data '{"username":"'$user'", "password":"'$password'"}' "$url/api/login" > /dev/null || return
  fi
  apiInitialized="true"
}

apiCleanup()
{
	$curl --silent "$url/logout" > /dev/null
	rm -f "$cookie"
}

ScriptRun "$@"
