#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) adapter|current|cache|center|dns|find|gui|hosts|internet|name|profile|proxy|run|vpn|workgroup
Network commands."
}

init() 
{
	defaultCommand="center"

	wpadFile="/srv/apache-web/htdocs/autoproxy/wpad.dat"
	
	adapterKey='HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Networkâ€‹'
	profileKey='HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/NetworkList/Profiles/'

	proxyVars="http_proxy,https_proxy,ftp_proxy,HTTP_PROXY,HTTPS_PROXY,FTP_PROXY"
	noProxyVars="no_proxy,NO_PROXY"	
	allProxyVars="$proxyVars,$noProxyVars"
	aptFile="/etc/apt/apt.conf.d/proxy"	
}

#
# commands
#

runCommand() { ssh "$1" 'source /etc/profile; '"${@:2}"''; }
centerCommand() {	start control /name Microsoft.NetworkAndSharingCenter; }
cacheCommand() { IsAvailable "$1" || return; net use '\\'$1'\ipc$' >& /dev/null; }
guiCommand() { ! IsPlatform win && return; rundll32.exe shell32.dll,Control_RunDLL ncpa.cpl; }
nameCommand() { registry edit 'HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/NetworkList/Profiles'; }

#
# Adapter Commands
#

adapterUsage() { echot "Usage: $(ScriptName) adapter edit|list|name
Network adapter commands."; }

adapterCommand() { usage; }

adapterEditCommand() { registry edit "$adapterKey"; }

adapterListCommand()
{
	! IsElevated && { RunScript --elevate network adapter list "$@"; return; }
	powershell.exe Get-NetAdapter | RemoveCarriageReturn | RemoveEmptyLines | tail -n +3
}

adapterNameArgs()
{
	ScriptArgGet "old" -- "$@"; shift
	ScriptArgGet "new" -- "$@"; shift
}

adapterNameCommand()
{ 
	! IsElevated && { RunScript --elevate -- network adapter name "$old" "$new"; return; }
	powershell.exe Rename-NetAdapter -Name \"$old\" -NewName \"$new\"
}

#
# Current Commands
#

currentUsage()
{
	echot "Usage: $(ScriptName) current [find|name|status|servers|timeout|update](name)
Current network commands.

	find			find the network we are currently on
	server		find the first active server
	servers		list all servers for the current network
	status		status of the current network
	timeout		get or set the network host timeout
	update		update network settings for the network we are currently on

	-b,	--brief		show brief status messages (for use with app script)
	-t, --timeout	the network host timeout in milliseconds, defaults to 200"
}

currentArgStart() { unset -v brief timeoutSet; timeout="200"; }

currentOpt()
{
	case "$1" in
		-b|--brief) brief="--brief";;
		-t|--timeout|-t=*|--timeout=*) ScriptOptGet --integer "timeout" "$@" && timeoutSet="true";;
		*) return 1;;
	esac
}

currentArgEnd() { ! updateTimeout && return; AvailableTimeoutSet "$timeout"; }
currentCommand() { currentNameCommand; }
currentNameCommand() { name; }
currentStatusCommand() { printf "network=$(name)\nfile=$(UpdateGet "FileServer")\nproxy=$(UpdateGet "ProxyServer")\n"; }
currentTimeoutCommand() { [[ $quiet ]] && return; echo "The network host timeout is $(AvailableTimeoutGet) milliseconds"; }

updateTimeout() { [[ $timeoutSet || "$command" != "currentTimeout" ]]; }

#
# Current Find Command
#

currentFindCommand()
{
	local network; printf "network..."; network="$(findNetwork)" || return 
	local fileServer; printf "file..."; fileServer="$(findServer "$network" "file" --service="smb" $brief "${globalArgs[@]}")" || { EchoErr "none"; }
	local proxyServer; printf "proxy..."; proxyServer="$(findServer "$network" "proxy" $brief "${globalArgs[@]}")" || { EchoErr "none"; }
	printf "found network=$network\nfound file server=$fileServer\nfound proxy server=$proxyServer\n";
}

#
# Current Server Command
#

currentServerUsage()
{ 
	echot "Usage: $(ScriptName) current server TYPE
Return the first available server for the current network, i.e. network 'network current server wireguard --service=wg'.

	-s, --service		the service to validate, defaults to ping, see 'network find --help'"
}

currentServerArgStart() { unset -v service type; }

currentServerOpt()
{
	case "$1" in
		-s|--service|-s=*|--service=*) ScriptOptGet "service" "$@"; service="--service=$service";;
		*) return 1;;
	esac
}

currentServerArgs() { ScriptArgGet "type" -- "$@"; shift; }
currentServerCommand() { local name; name="$(name)" || return; findServer "$name" "$type" "$service"; }

#
# Current Servers Command
#

currentServersUsage()
{
	echot "Usage: $(ScriptName) current servers TYPE
Return all servers of the specified type for the current network."
}

currentServersArgStart() { unset -v type; }
currentServersArgs() { ScriptArgGet "type" -- "$@"; shift; }
currentServersCommand() { local name; name="$(name)" || return; getServersFromConfig "$name" "$type"; }

#
# Current Update Command
#

currentUpdateCommand()
{
	# get existing configuration
	local existingNetwork="$(UpdateGet "network")"  existingFileServer="$(UpdateGet "FileServer")" existingProxyServer="$(UpdateGet "ProxyServer")"

	# determine current network configuration
	local network
	doLog && { hilight "Determining network..."; echo "Existing network is ${existingNetwork:-unknown}"; }
	doLog && printf "network..."; network="$(findNetwork $brief)" || return

	# update resolv.conf - ensures name resolution is working to find other servers
	local resolvConf="$DATA/setup/resolv.conf.$network"
	{ ! IsPlatform wsl || [[ ! -f "$resolvConf" ]]; } && unset resolvConf
	if [[ $resolvConf ]] && ! cmp --quiet "$resolvConf" "/etc/resolv.conf"; then
		sudoc cp "$resolvConf" "/etc/resolv.conf" || return
	fi

	# find servers
	local fileServer; doLog && printf "file..."; fileServer="$(findServer "$network" file --service=smb $brief "${globalArgs[@]}")"
	local proxyServer; doLog && printf "proxy..."; proxyServer="$(findServer "$network" proxy $brief "${globalArgs[@]}")"

	# return if no changes are required
	[[ ! $force && "$network" == "$existingNetwork" && "$fileServer" == "$existingFileServer" && "$proxyServer" == "$existingProxyServer" ]] && return

	# update network configuration
	doLog && hilight "Setting the network to $network..."
	[[ $brief ]] && printf "network..."

	# save network
	UpdateSet "network" "$network" || return

	# save file server
	UpdateSet "FileServer" "$fileServer" || return

	# save proxy server
	UpdateSet "ProxyServer" "$proxyServer" || return
	if [[ $proxyServer ]]; then
		network proxy apt --enable "${globalArgs[@]}" || return
		ScriptEval network proxy vars --enable || return
	else
		network proxy apt --disable "${globalArgs[@]}" || return
		ScriptEval network proxy vars --disable || return
	fi

	# status
	if doLog; then
		network current status "${globalArgs[@]}" || return
		network proxy --status "${globalArgs[@]}" || return
	fi

	return 0
}

# findNetwork - find the first active network from the networks specified in the networks configuration variabke 
findNetwork()
{
	local networkIndex networks=(); StringToArray "$(ConfigGet "networks")" "," networks
	networkIndex="$(network find --service=dns "${networks[@]}" "${globalArgs[@]}" $brief)" || { echo "external"; return; }
	GetSshUser "${networks[$networkIndex]}" # return the name of the network (before @)
}

# findServer NETWORK TYPE SERVICE - find the first server of the specified type for the specified network  
findServer()
{
	local network="$1" type="$2" service="$3"

	# get servers of the specified type
	local serverIndex servers=(); StringToArray "$(getServersFromConfig "$network" "$type")" "," servers

	# no servers defined
	if [[ ! $servers ]]; then
		doLog && EchoErr "no '$type' services defined for '$network' network"
		return 1
	fi

	# find an active server
	serverIndex="$(RunLog network find "${servers[@]}" $brief $service "${globalArgs[@]}")" || return

	# return HOST:SERVICE of the server (DESCRIPTION@HOST:SERVICE)
	RemoveBefore "${servers[$serverIndex]}" "@" 
}

#
# find commands
#

findUsage()
{
	echot "Usage: $(ScriptName) find SERVER [SERVER...]
Find the first server that exposes a specific service.  Returns the zero based index of the found server.

- SERVER format is [DESCRIPTION@]HOST_OR_IP[:SERVICE], i.e. hagerman:10.10.10:DNS
- DESCRIPTION is used for information messages while checking
- SERVICE is a numeric port, or one of:
		ping - performs a UDP ping
		dns - checks port 53 and performs a DNS lookup
  	nfs - checks port 111
  	smb - checks port 445
  	ssh - checks port 22, or the port the port defined in the SSH configuration for the host
  	wg - checks the WireGuard UDP port for the current network, defaults to 51820

	-b,	--brief		show brief status messages
	-s, --service	the service to use if one is not specified, defaults to PING
	-u, --udp			check the port using UDP instead of TCP"
}

findArgStart() { unset -v brief timeoutSet; check="IsAvailablePort" defaultService="PING" timeout="200"; }

findOpt()
{
	case "$1" in
		-b|--brief) brief="--brief";;
		-s|--service|-s=*|--service=*) ScriptOptGet "defaultService" "service" "$@";;
		-t|--timeout|-t=*|--timeout=*) ScriptOptGet --integer "timeout" "$@" && timeoutSet="true";;
		-u|--udp) check="IsAvailablePortUdp";;
		*) return 1;;
	esac
}

findArgs()
{
	(( $# == 0 )) && { MissingOperand "server"; return 1; }
	servers=( "$@" ); (( shift+=$# ))
}

findArgEnd() { AvailableTimeoutSet "$timeout"; }

findCommand()
{
	[[ ! $brief && ! $quiet ]] && PrintErr "checking..."

	local server i="0"
	for server in "${servers[@]}"
	do
		# parse the server: DESCRIPTION@HOST_OR_IP:SERVICE
		local host="$(GetSshHost "$server")"
		local service="$(GetSshPort "$server")"; service="${service:-$defaultService}"; service="${service,,}"
		local description="$(GetSshUser "$server")"; description="${description:-$host}"; [[ "$description" != "$host" && $verbose ]] && description="$description ($host)"

		# check for a valid service
		! IsInteger "$service" && [[ "$service" != @(dns|ping|nfs|smb|ssh|wg) ]] && { ScriptErr "'$service' is not a valid service"; return 1; }

		# logging
		if [[ $verbose ]]; then
			PrintErr "$description..."
			IsAvailable "$host" && PrintErr "available..."
			PrintErr "$service..."
		elif [[ ! $brief && ! $quiet ]]; then
			PrintErr "$description..."
		fi

		# check the service
		if findCheck "$host" "$service" "$description"; then
			[[ ! $brief && ! $quiet ]] && EchoErr "found"
			echo "$i"
			return 0
		fi
		
		(( ++i ))
	done
 
	[[ ! $brief && ! $quiet ]] && EchoErr "none available"
	return 1
}

findCheck()
{
	local host="$1" service="$2" description="$3"

	# port number aliases
	case "$service" in
		nfs) service="111";;
		smb) service="445";;
		ssh) service="$(SshHelper config get "$host" port)";;
	esac

	case "$service" in
		dns) IsAvailablePort "$host" 53 && dig @$host bogus +time=1 +tries=1 >& /dev/null;;
		ping) IsAvailable "$host";;
		wg) local port="$(ConfigGetCurrent WireguardPort)"; [[ ! $port ]] && port="51820"; IsAvailablePortUdp "$host" "$port";;
		*) "$check" "$host" "$service";;
	esac
}

#
# DNS Commands
#

dnsUsage() { echot "Usage: $(ScriptName) adapter edit|list|name
Network adapter commands."; }

dnsCommand() { dnsFlushCommand; }

dnsFlushCommand() 
{ 
	case "$PLATFORM" in
		linux) sudoc systemd-resolve --flush-caches;;
		mac) sudoc killall -HUP mDNSResponder;;
		win) ipconfig /flushdns;;
	esac
}

#
# hosts command
#

hostsUsage() { EchoWrap "Usage: $(ScriptName) hosts [--wsl]
Edit the local system hosts file."; }

hostsArgStart() { unset -v wsl; }

hostsOpt() 
{
	case "$1" in
		-w|--wsl) wsl="true";;
		*) return 1
	esac
}

hostsCommand()
{
	local file="/etc/hosts"; IsPlatform win && [[ ! $wsl ]] && file="$WIN_ROOT/Windows/system32/Drivers/etc/hosts"
	sudoe "$file"
}

#
# internet command
#

internetUsage() { echot "Usage: $(ScriptName) internet [address|detail|host|provider](provider) [PORT|active]
Internet commands.  If no port is specified lookup our current active internet address.
If a numeric port is specified, lookup the internet address for the specified WAN port (usually 1 or 2).

	address						get the internet address
	host							get the hostname
	provider [short]	get the provider name"
}

internetArgs()
{
	[[ $1 ]] && { ScriptArgGet --integer "port" -- "$@"; }
	return 0
}

internetCommand() { internetProviderCommand; }

internetAddressCommand() 
{
	[[ ! $port ]] && { getActiveIp; return; }

	# get internet IP address using the UniFi Controller API
	if UniFiController ApiAvailable --quiet; then
		local devices; getDevices && getIp; return
	fi

	# get internet IP address using the router's ifconfig command
	local interface
	case "$port" in
		1) interface="eth2";; # Comcast
		2) interface="ppp1";; # Century Link
		*) ScriptErr "port '$port' is not valid"; return 1;;
	esac

	ssh router ifconfig "$interface" |& grep "^[ ]*inet addr:" | tr -s " " | cut -d" " -f 3 | cut -d: -f 2
}

internetDetailCommand()
{
	[[ ! $port ]] && port="1"

	local devices; getDevices || return
	local isActive; [[ "$(getIp)" == "$(getActiveIp)" ]] && isActive="true"

	echo "hostname="$(DnsResolve "$(getIp)")
	echo "address="$(getIp)
	echo "active=$([[ $isActive ]] && echo "true" || echo "false")"

	header "Geographic Information"
	local geoPort; [[ "$port" == "2" ]] && geoPort="2"
	echo "$devices" | jq '.data[] | select(.name == "router").geo_info.WAN'$geoPort''

	if [[ $isActive ]]; then
		header "Speedtest Status"
	 	cat device.json | jq '.data[] | select(.name == "router")."speedtest-status"'
	 fi
}


internetHostCommand()
{
	local address; address="$(internetAddressCommand)" || return
	DnsResolve "$address"
}

internetProviderCommand()
{
	local address; address="$(internetAddressCommand)" || return
	whois "$address" | grep "OrgTechName" | head -1 | cut -d: -f2 | RemoveSpaceFront
}

internetProviderShortCommand() { internetProviderCommand | GetWord - 1 | LowerCase; }

getActiveIp() { nslookup myip.opendns.com resolver1.opendns.com | grep Address | grep -v 53 | cut -d: -f2 | RemoveSpace; }
getDevices() { devices="$(UniFiController api "/stat/device")"; }
getIp() { echo "$devices" | jq '.data[] | select(.name == "router").wan'$port'.ip' | RemoveQuotes; }

#
# Profile Commands
#

profileUsage() { echot "Usage: $(ScriptName) profile edit|list|set
Network profile commands."; }

profileArgStart() { IsPlatform win && return; EchoErr "network: profile is only implemented for Windows"; return 1; }
profileCommand() { profileListCommand; }

profileEditCommand() { registry edit "$profileKey"; }

profileListCommand()
{
	! IsElevated && { RunScript --elevate network profile list "$@"; return; }

	local key keys name type category; IFS=$'\n' ArrayMake keys "$(registry get "$profileKey")"
	for key in "${keys[@]}"; do
		name="$(registry get "$key/ProfileName" | RemoveCarriageReturn)"
		type="$(registry get "$key/NameType" | RemoveCarriageReturn)"
		category="$(registry get "$key/Category" | RemoveCarriageReturn)"

		case "$type" in
			0x6) type="Wired";;
			0x17) type="VPN";;
			0x47) type="Wireless";;
			0xF3) type="Mobile Broadband";;
		esac

		case "$category" in
			0x0) category="public";;
			0x1) category="private";;
			0x2) category="work";;
		esac

		echo "$name: $category $type"
	done
}

profileSetArgs() { ScriptArgGet "name" -- "$@"; shift; }

# profile set - if there is only one network profile, set it's name and make it a private network
profileSetCommand()
{
	! IsElevated && { RunScript --elevate network profile set "$name"; pause; return; }

	local numProfiles="$(registry get "$profileKey" | RemoveEmptyLines | wc -l)"

	(( $numProfiles > 1 )) && { EchoErr "Cannot set the profile if more than one exists"; return 1; }

	local key="$(registry get "$profileKey" | RemoveEmptyLines | head -1)"
	registry set "$key/ProfileName" REG_SZ "$name" || return
	registry set "$key/Category" REG_DWORD "1" || return # private
}

#
# VPN Commands
#

vpnUsage() { echot "Usage: $(ScriptName) workgroup on|off|status
VPN commands."; }

vpnArgStart() { IsPlatform win && return; EchoErr "network: VPN is only implemented for Windows"; return 1; }
vpnCommand() { vpnStatusCommand; }
vpnStatusCommand() { rasdial.exe; }

vpnOnCommand()
{
	if [[ -d "$P/WireGuard" ]]; then
		elevate RunScript start "$P/WireGuard/wireguard.exe" /installtunnelservice "$P/WireGuard/Data/Configurations/$HOSTNAME.conf.dpapi"
	else
		rasdial.exe "vpn-$(ConfigGet "network")" "$USER" "$(credential get secure default)" || return
	fi
	currentUpdateCommand || return
}

vpnOffCommand()
{
	if [[ -d "$P/WireGuard" ]]; then
		elevate "$P/WireGuard/wireguard.exe" /uninstalltunnelservice "$HOSTNAME"
	else
		rasdial.exe "vpn-$(ConfigGet "network")" /disconnect || return
	fi
	currentUpdateCommand || return
}

#
# Workgroup Commands
#

workgroupUsage() { echot "Usage: $(ScriptName) workgroup name|set
SAMBA workgroup commands."; }

workgroupCommand() { workgroupNameCommand; }

workgroupNameCommand()
{ 
	if IsPlatform win; then
		net.exe config workstation | grep "Workstation domain" | RemoveCarriageReturn | awk '{ print $3; }'
	elif [[ -f "/etc/samba/smb.conf" ]]; then
		cat "/etc/samba/smb.conf" | grep -i "^[ 	]*workgroup[ 	]*=[ 	s]*" | cut -d "=" -f 2 | sed 's/ //g'
 	else
		echo "unknown"
	fi 
}

workgroupSetArgs() { [[ $1 ]] && ScriptArgGet "new" -- "$@"; return 0; }

workgroupSetCommand()
{
	local current="$(network workgroup name)"
	[[ ! $new ]] && { read -p "Enter new workgroup: " new; echo; }

	[[ ! $force && "$current" == "$new" ]] && return

	echo "The current workgroup is $current, setting the workgroup to $new..."

	if [[ -f "/etc/samba/smb.conf" ]]; then
		sudoc sed -i "s/^[        ]*workgroup[    ]*=.*$/workgroup = ${new}/" "/etc/samba/smb.conf" || return
	fi

	if IsPlatform win; then
		RunLog RunScript --elevate --pause-error -- powershell Add-computer -WorkgroupName "$new" || return
	fi
	
	return 0
}

#
# proxy commands
#

proxyUsage()
{ 
	echot "Usage: $(ScriptName) proxy [all|apt|vars](all)
Network proxy server commands.

	-e, --enable
	-d, --disable
	-s, --status"
}

proxyArgStart() { unset action; }

proxyOpt() 
{
	case "$1" in
		-d|--disable) action="disable";;
		-e|--enable) action="enable";;
		-s|--status) action="status";;
		*) return 1
	esac
}

proxyCommand() { proxyAllCommand; }

# all
proxyAllCommand() { [[ ! $action ]] && action="status"; proxyAll${action^}; }
proxyAllDisable() { proxyAptDisable && proxyVarsDisable; }
proxyAllEnable() { proxyAptEnable && proxyVarsEnable; }

proxyAllStatus()
{
	if [[ $verbose ]]; then
		header "Proxy Variables"; proxyVarsStatus
		isAptInstalled && { header "APT Proxy"; proxyAptStatus; }
	else
		echo "proxy variables=$(proxyVarsStatus)"
		isAptInstalled && echo "apt proxy=$(proxyAptStatus)"
	fi

	return 0
}

# apt
proxyAptCommand() { [[ ! $action ]] && action="status"; proxyApt${action^}; }
proxyAptDisable() { [[ ! -f "$aptFile" ]] && return; sudo rm "$aptFile"; }

proxyAptStatus()
{
	! isAptInstalled && return

	if [[ -f "$aptFile" ]]; then
		[[ $verbose ]] && cat "$aptFile" || echo "enabled"
	else
		echo "disabled"
	fi
}

proxyAptEnable()
{
	! isAptInstalled && return

	local proxyServer="$(UpdateGet "ProxyServer")"
	
	[[ ! $force ]] && [[ -f "$aptFile" ]] && grep -q "$proxyServer" "$aptFile" && return

	local r; [[ $brief || $quiet ]] && r="RunQuiet"
	echo "Acquire::http::Proxy \"http://$proxyServer\";
Acquire::https::Proxy \"http://$proxyServer\";" | $r sudo tee "$aptFile"
}

# wpad
proxyWpadCommand() { [[ ! $action ]] && action="status"; proxyWpad${action^}; }
proxyWpadEnable() { proxyWpadConfigure "enable"; }
proxyWpadDisable() { proxyWpadConfigure "disable"; }

proxyWpadStatus()
{
	local host hosts; IFS=$'\n' ArrayMakeC hosts GetServers nomad-client || return
	for host in localhost "${hosts[@]}"; do
		printf "$(GetHostname "$host"): "
		RunLog RunScript "${globalArgs[@]}" --ssh "$host" "$(cat <<-EOF
			if [[ ! -f "$wpadFile" ]]; then echo "missing"
			elif grep --quiet "PROXY" "$wpadFile"; then echo "enabled"
			elif grep --quiet "DIRECT" "$wpadFile"; then echo "disabled"
			else echo "invalid"
			fi
				EOF
			)" || return
	done
}

proxyWpadConfigure()
{
	local operation="$1"
	local src="$(CloudGet "$(ConfigGet confDir)/proxy/wpad.dat.$operation")"

	# validate
	[[ ! -f "$src" ]] && { ScriptErr "WPAD configuration file '$src' does not exist"; return 1; }
	[[ ! -f "$wpadFile" ]] && { ScriptErr "local web deployment directory does not exist"; return 1; }

	# deploy
	cp "$src" "$wpadFile" && inst ApacheSync
}

# vars

proxyVarsUsage()
{ 
	echot "Usage: $(ScriptName) proxy vars
Configure shell proxy variables.

	-e, --enable		set variables if a proxy server is specified, otherwise unset them
	-d, --disable		unset proxy vasriables
	-s, --status		show the status of the proxy variables"
}

proxyVarsCommand() { [[ ! $action ]] && action="enable"; proxyVars${action^}; }
proxyVarsDisable() { proxyVarsShow; }
proxyVarsEnable() { proxyVarsShow "$(UpdateGet "ProxyServer")"; }

# proxyVarsShow [server] - show proxy variables, if server is not specified proxy variables are unset
proxyVarsShow()
{
	local proxyServer="$1"

	if [[ $proxyServer ]]; then
		echo "export {$proxyVars}=\"http://$proxyServer\"; eval export {$noProxyVars}=\"$(ConfigGet "noProxy")\""
	else
		echo "unset {$allProxyVars}"
	fi
}

proxyVarsStatus()
{
	if (( $(export | grep -i 'proxy=\"http' | wc -l) > 1 )); then
		if [[ $verbose ]]; then
			export | grep "$(echo "$allProxyVars=" | sed 's/,/=\\|/g')"
		else
			echo "enabled"
		fi
	else
		echo "disabled"
	fi
}

#
# helper
#

doLog() { [[ ! $brief && ! $quiet ]]; } # return true if output should be logged

# name - return the current network name
name()
{ 
	# return the cached network name if exists
	local name; name="$(UpdateGet "network")" || return; 
	[[ $name ]] && { echo "$name"; return; }

	# no network name identified, try and update it
	network current update --quiet || return
	name="$(UpdateGet "network")" || return; 
	[[ $name ]] && { echo "$name"; return; }

	# unable to identify the network
	ScriptErr "unable to identify the current network"
	return 1
}

# getServersFromConfig NETWORK TYPE - get servers of the specified type for the specified network from configuration, 
# i.e "getServers hagerman file" would look for the hagermanFileServers configuration variable
getServersFromConfig()
{
	local network="$1" type="$2"
	ConfigGet "${network}$(UpperCaseFirst "$type")Servers"
}

isAptInstalled() { [[ -d "/etc/apt" ]]; }

ScriptRun "$@"
