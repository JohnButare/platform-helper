#!/bin/bash
. function.sh

init() 
{
	command='network'
}

usage()
{
	echot "\
usage: template [one|two|cd](one)
	check <network> 										perform the first command"
	exit $1
}

args()
{
	unset command
	while [ "$1" != "" ]; do
		case "$1" in
			-f|--file) shift; file="$1";;
			-s|--server) shift; server="$1";;
			-i|--interactive) interactive="-i";;
			-t|--test) test="-t";;
			-v|--verbose) verbose="-v";;
			-h|--help) usage 0;;
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(cache|check) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && { command="center"; }
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; 
}

centerCommand() {	start control /name Microsoft.NetworkAndSharingCenter; }

cacheCommand() { host available "$1" || return; net use '\\'$1'\ipc$' >& /dev/null; }

initializeCommand()
{
	return 0
}

checkCommand() 
{
	# TODO
	return 0
}

twoCommand() {  echo "command=$command"; }

subCommand()
{
	command="One"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Sub${s}Command && { command="$s"; shift; }
	[[ $# != 0 ]] && usage
	Sub${command}Command "$@"
}

SubOneCommand() { echo "command=Sub$command args=${#args[@]} file=\"$file\" server=\"$server\" interactive=$interactive verbose=$verbose test=$test"; }
SubTwoCommand() {  echo "command=Sub$command"; }

run "$@"
