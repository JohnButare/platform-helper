#!/usr/bin/env bash
. function.sh

init() 
{
	command='network'

	proxyServer="proxy.hagerman.butare.net" proxyPort="3128"
	noProxy="localhost,127.0.0.1,.hagerman.butare.net,.releases.ubuntu.com"

	wpadServer="nas3" wpadFile="/share/Web/autoproxy/wpad.dat"
}

usage()
{
	echot "\
usage: network cache center dns name run proxy
	dns flush
	proxy [apt|wpad|vars] 
		-e, --enable
		-d, --disable
		-s, --status"
	exit $1
}

args()
{
	unset command
	while [ "$1" != "" ]; do
		case "$1" in
			-h|--help) usage 0;;
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(cache|check|dns|proxy|run) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && { command="center"; }
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

runCommand() { ssh "$1" 'source /etc/profile; '"${@:2}"''; }
centerCommand() {	start control /name Microsoft.NetworkAndSharingCenter; }
cacheCommand() { IsAvailable "$1" || return; net use '\\'$1'\ipc$' >& /dev/null; }
nameCommand() { registry edit 'HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/NetworkList/Profiles'; }

dnsCommand()
{
	command="Flush"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Dns${s}Command && { command="$s"; shift; }
	[[ $# != 0 ]] && usage
	Dns${command}Command "$@"
}

DnsFlushCommand() 
{ 
	case "$PLATFORM" in
		win) ipconfig /flushdns;;
		mac) sudo killall -HUP mDNSResponder;;
	esac
}

proxyCommand()
{
	local proxy="$proxyServer:$proxyPort"
	local proxyVars="http_proxy,https_proxy,ftp_proxy,HTTP_PROXY,HTTPS_PROXY,FTP_PROXY"
	local noProxyVars="no_proxy,NO_PROXY"	
	local allVars="$proxyVars,$noProxyVars"
	local aptFile="/etc/apt/apt.conf.d/proxy"

	local command="Vars"
	[[ "$1" =~ ^(apt|wpad|vars)$ ]] && { command="$(ProperCase "$1")"; shift; }

	local subCommand
	case "$1" in
		-d|--disable) subCommand="Disable"; shift;;
		-e|--enable) subCommand="Enable"; shift;;
		-s|--status) subCommand="Status"; shift;;
	esac

	[[ $# != 0 ]] && UnknownOption "$1"

	Proxy${command}${subCommand}Command "$@"
}

ProxyVarsEnableCommand()
{
	! IsAvailable "$proxyServer" && { ProxyVarsDisableCommand; return; }
	echo "export {$proxyVars}=\"http://$proxy/\"; eval export {$noProxyVars}=\"$noProxy\""
}

ProxyVarsDisableCommand() {	echo "export -n {$allVars}; unset {$allVars}"; }
ProxyVarsStatusCommand() { (( $(export | egrep -i 'proxy=\"http' | wc -l) > 1 )) && echo "enabled" || echo "disabled"; }

ProxyAptEnableCommand()
{
	[[ -f "$aptFile" ]] && return
	echo "Acquire::http::Proxy \"http://$proxy\";
Acquire::https::Proxy \"https://$proxy\";" | sudo tee "$aptFile"
}

ProxyAptDisableCommand() { [[ -f "$aptFile" ]] && sudo rm "$aptFile"; }
ProxyAptStatusCommand() { [[ -f "$aptFile" ]] && echo "enabled" || echo "disabled"; }

ProxyWpadEnableCommand() { scp "$CLOUD/network/proxy/wpad.dat.enable" "$wpadServer:$wpadFile"; }
ProxyWpadDisableCommand() { scp "$CLOUD/network/proxy/wpad.dat.disable" "$wpadServer:$wpadFile"; }
ProxyWpadStatusCommand() { ssh $wpadServer cat "$wpadFile" | grep "PROXY" > /dev/null && echo "enabled" || echo "disabled"; }

run "$@"
