#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [all|closest|select](closest) [OPTION]... FILE
Find an installation file or directory from known locations.  
Searches INSTALL_DIR if defined.  

	-a, --all					return all found directories
	-e, --eval				return variables to evaluate (installDir and file)
	-f, --force				do not use cached installation directory
	    --hint DIR 		first directory to search
	-q, --quiet				do not display status messages
	-s, --select			select the install location
			--suppress		suppress error messages
	-t, --timeout			the network timeout to use, in milliseconds, default to $(AvailableTimeoutGet)			
	-v, --verbose			display detailed output"
}

init()
{
	declare -Ag dirs
	defaultCommand="closest"
	preferredServers=( ender rp1 rp2 ) # 10G/2.5G servers
}

argStart() { unset -v all eval file hint suppress timeout; }

opt()
{
	case "$1" in "") : ;;
		--all|-a) command="all";;
		--eval|-e) eval="true" quiet="--quiet";;
		--hint) ScriptOptGet "hint" "$@";;
		--select|-s) command="select";;
		--timeout|--timeout=*|-t|-t=*) ScriptOptGet --integer "timeout" "$@" && timeout="--timeout=$timeout";;
		--suppress) suppress="true";;
		*) return 1;;
	esac
}

args() { [[ $1 ]] && ScriptArgGet "file" -- "$@"; shift; true; }
argEnd() { [[ "$command" == @(all|select) ]] && all="true"; return 0; }

#
# commands
#

allCommand()
{	
	quiet="--quiet"

	addDirs || return
	checkServerAvailability || return

	for key in "${closestKeys[@]}"; do
		echo "${dirs["$key"]}"
	done
}

closestCommand() { findClosest && returnData; }
selectCommand() { findSelect && returnData; }

#
# helper
#

printStatus() { [[ $quiet || $verbose ]] && return; PrintErr "$1"; }
returnData() { [[ $eval ]] && ScriptReturn installDir file || printf "$file"; }
status() { [[ $quiet ]] && return; EchoErrEnd "$1"; }

addDirs()
{
	[[ $hint ]] && { addLocalDir "$hint" "$hint" && return; }

	# add local directories
	addLocalDirs && return

	# domain
	local f="addDirs$(GetDomain | UpperCaseFirst)"
	[[ "$f" != "addDirs" ]] && IsFunction "$f" && { "$f" && return; }

	# internet
	# addDirHost "ln1.butare.net" "root/usr/local/data/install" "ssh" && return
	addDirHost "ssh.butare.net" "root/usr/local/data/install" "608" && return

	return 0
}

addDirsHagerman()
{
	addDirHost "ender.hagerman.butare.net" "public/install" && return
	addDirHost "rp1.butare.net" "public/install" && return
	addDirHost "rp2.butare.net" "public/install" && return
	return 1
}

addDirsSandia()
{
	addDirHost "snl.sandia.gov" "Collaborative/MCS-NGE/install" && return
	# addDirHost "s1081454" "install" && return # rack
	# addDirHost "s1071466" "install" && return # desktop
}

addLocalDirs()
{
	local p="public/install"

	# local drive
	addLocalDir "local" "$DATA/install" && return

	# cloud provider
	CloudConf --quiet && addLocalDir "cloud" "$CLOUD/data/install" && return

	# domain
	local f="addLocalDirs$(GetDomain | UpperCaseFirst)"
	[[ "$f" != "addLocalDirs" ]] && IsFunction "$f" && { "$f" && return; }

	# mounted drives
	if drive mount all $quiet; then
		local desc drive drives; IFS=$'\n' ArrayMake drives "$(drive mounts)"
		for drive in "${drives[@]}"; do
			if [[ -d "$drive/$p" ]]; then
				drive IsDrive "$drive" && desc="drive-$(drive label "$drive")" || desc="drive-$(GetFileName "$drive")"
				addLocalDir "$desc" "$drive/$p" && return
			fi
		done
	fi

	# VMware Host
	IsVmwareVm && addLocalDir "host-drive-d" "//vmware-host/Shared Folders/d/users/public/install" && return

	return 1
}

addLocalDirsSandia()
{
	# use OneDrive if it is not configured properly
	local dir="$WIN_HOME/OneDrive - Sandia National Laboratories/install"
	[[ -d ~/OneDrive || ! -d "$dir" ]] && return 1
	addLocalDir "cloud-temp" "$dir"
}

# addDirHost HOST SUFFIX PROTCOL - if HOST is available using PROTOCOL (nfs|smb|ssh) add directory //HOST/SUFFIX
addDirHost()
{
	local host="$1" suffix="$2" protocol="${3:-smb}"

	# return if host is not available using the specified protocol
	log1 "checking '//$host:$protocol/$suffix'..."
	unc IsAvailable "$host" --protocol="$protocol" $timeout $verboseLess || return

	# get a host description if needed
	local desc
	if [[ "$protocol" == "22" ]]; then desc=" (ssh)"
	elif IsInteger "$protocol"; then desc=" (ssh $protocol)"
	elif [[ $protocol ]]; then desc=" (${protocol,,})"
	fi
	
	# add the UNC direcory
	addDir "$(RemoveDnsSuffix "$host")$desc" "//$host/$suffix:$protocol" 
}

# addDirLocal NAME DIR - if DIR exists add it
addLocalDir()
{
	local name="$1" dir="$2"
	[[ ! -d "$dir" ]] && return 1
	addDir "$name" "$dir"
}

# addDir NAME DIR - add candidate directory
# - return 1 to continue searching (searching for all locations) and 0 to stop searching
addDir()
{
	local name="$1" dir="$2"
	log1 "adding '$name' ($(FileToDesc "$dir"))..."	
	dirs["$name"]="$dir"
	[[ ! $all ]]
}

checkDir()
{
	local dir="$1"

	log1 "checking $(FileToDesc "$dir")..."
	IsUncPath "$dir" && { dir="$(unc mount "$dir" --no-host-check $timeout "${globalArgs[@]}")" || return; }

	log1 "checking $(FileToDesc "$dir")/$file..."
	if [[ -e "$dir/$file" ]]; then
		log1 "found in $(FileToDesc "$dir")..."
		installDir="$dir"
		file="$dir/$file"
		return 0
	fi
	return 1
}

checkServerAvailability()
{
	printStatus "checking..." 

	for key in "${!dirs[@]}"; do
		local dir="${dirs["$key"]}" server protocol

		# initialize
		log1 "checking $dir...."
		server="$(GetUncServer "$dir")"
		unset dirs["$key"] # remove the existing entry
		
		# add normal directory with 0 response time
		[[ ! $server || "$server" == "vmware-host" ]] && { addLocalDir "0-$key" "$dir"; continue; }

		# get server response time
		local protocol; GetUncProtocol "$dir" protocol
		local port; port="$(unc get port --protocol="$protocol")" || continue
		local responseTime="$(PortResponse "$server" "$port")" && { addDir "$responseTime-$key" "$dir"; }

		# status
		printStatus "." 
	done

	[[ "${#dirs[@]}" == "0" ]] && return 0

	shopt -s lastpipe

	# sort the array by response time
	printf '%s\0' "${!dirs[@]}" | sort --numeric --zero-terminated | ${G}xargs -0n1 | readarray -t closestKeys

	return 0
}

findClosest()
{
	local dir key server

	[[ $hint ]] && { checkDir "$hint" && return; }	
	[[ ! $force && $INSTALL_DIR ]] && { checkDir "$INSTALL_DIR" && return; }

	addDirs || return

	# check local dirs	
	for key in "${!dirs[@]}"; do
		dir="${dirs["$key"]}"
		GetUncServer "$dir" server; [[ $server ]] && continue		
		checkDir "$dir" && return
		unset dirs["$key"]
	done

	# get available servers
	checkServerAvailability || return

	# if no servers are available update the current network and try again
	if [[ ! $closestKeys ]]; then
		log1 "updating current network"
		network current update --quiet || return
		log1 "network set to '$(NetworkCurrent)'"
		addDirs || return
		checkServerAvailability || return
	fi

	# check preferred servers
	for key in "${closestKeys[@]}"; do
		server="${key#*-}"
		if IsInArray "$server" preferredServers; then
			printStatus "$server..." 
			checkDir "${dirs["$key"]}" && { status "found"; return 0; }
		fi
	done

	# check closet servers
	for key in "${closestKeys[@]}"; do
		printStatus "${key#*-}..." 
		checkDir "${dirs["$key"]}" && { status "found"; return 0; }
	done

	status "not found"
	[[ ! $suppress ]] && EchoErr "FindInstallFile: Could not locate ${file:-the installation directory}"
	return 1
}

findSelect()
{
	addDirs || return
	checkServerAvailability || return

	local items=( )
	for key in "${closestKeys[@]}"; do
		local dir="${dirs["$key"]}" desc="${key#*-}" ms="${key%%-*}ms away"
		items+=( "$desc" "$ms" )
		unset dirs["$key"]; addDir "$desc" "$dir"
	done

	if (( ${#items[@]} == 0 )); then
		status "not found"
		[[ ! $suppress ]] && EchoErr "FindInstallFile: could not locate any installation servers"
		return 1
	fi

	while true; do

		# display selection dialog
		local result=$(dialog --stdout --backtitle "Select Installation Location" \
	  	--menu "Choose the location to search for:\n$file" $(($LINES-5)) 50 $(($LINES)) "${items[@]}")
		[[ "$result" == "" ]] && return 1

		# check select location
		[[ ! $quiet ]] && clear
		printStatus "checking...$result ("$(FileToDesc "${dirs[$result]}")")..."; log1
		checkDir "${dirs[$result]}" && { status "found"; return; }

		# install location not found
		status "not found"
		if [[ ! $suppress ]]; then			
			EchoErr "FindInstallFile: ${file:-the installation directory} is not located on $result"
			[[ ! $quiet ]] && pause
		fi
		
	done
}

ScriptRun "$@"
