#!/usr/bin/env bash
. function.sh || return

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init()
{
	declare -Ag dirs
	preferredServers=( nas3 ) # 10G servers
}

usage()
{
	echot "\
usage: FindInstallFile FILE
	Find an installation file or directory from known locations.  Searches 
	INSTALL_DIR if defined.  

	-a, --all					return all found directories
	-e, --eval				return variables to evaluate (installDir and file)
	-f, --force				do not use cached installation directory
	-h, --hint DIR 		first directory to search
	-q, --quiet				do not display status messages
	-s, --select			select the install location
			--suppress		suppress error messages
			--help 				display this help and exit"
	exit $1
}

args()
{
	unset command fileSuffix
	unset eval force hint quiet suppress # argumrnts

	command="closest"

	while [ "$1" != "" ]; do
		case "$1" in
			-a|--all) command="all";;
			-e|--eval) eval="true" quiet="--quiet";;
			   --help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			-f|--force) force="true";;
			-h|--hint) hint="$2"; shift;;
			-q|--quiet) quiet="--quiet";;
			-s|--select) command="select";;
			   --suppress) suppress="true";;
			*)
				! IsOption "$1" && [[ ! $fileSuffix ]] && { fileSuffix="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	args=("$@")
}

#
# commands
#

allCommand()
{	
	quiet="--quiet"

	addDirs || return
	checkServerAvailability || return

	for key in "${closestKeys[@]}"; do
		echo "${dirs["$key"]}"
	done
}

closestCommand() { local file; findClosest && returnData; }
selectCommand() { local file; findSelect && returnData; }

#
# helper
#

addDir() { dirs["$1"]+="$2"; }
printStatus() { [[ ! $quiet ]] && PrintErr "$1"; }
returnData() { [[ $eval ]] && ScriptReturn installDir file || printf "$file"; }
status() { [[ ! $quiet ]] && EchoErr "$1"; return 0; }

addDirs()
{
	[[ $hint ]] && { addDir "$hint" "$hint" || return; }

	addLocalDirs || return

	# Wiggin
	local d="butare.net" s="public/documents/data/install"
	addDirHost "nas3.$d" "$s" && return										# nas3 local
	addDirHost "nas3.$d" "root/share/$s" "608" && return	# nas3 remote
	addDirHost "nas1.$d" "$s" && return										# nas1 local
	
	return 0
}

# addDirHost HOST PROTCOL SUFFIX DESC - if HOST is available using PROTOCOL (nfs|smb|ssh) add directory //HOST/SUFFIX.
# Return 1 to continue searching and 0 to stop searching.
addDirHost()
{
	local host="$1" suffix="$2" protocol="$3"
	local protocolArg; [[ $protocol ]] && { protocolArg="--protocol=$protocol"; suffix="$suffix:$protocol"; }

	# return if host is not available using the specified protocol
	unc IsAvailable "$host" "$protocolArg" || return 1

	# get a host description if needed
	local desc
	if [[ "$protocol" == "22" ]]; then desc=" (ssh)"
	elif IsInteger "$protocol"; then desc=" (ssh $protocol)"
	elif [[ $protocol ]]; then desc=" (${protocol,,})"
	fi
	
	# add the UNC direcory
	addDir "$(RemoveDnsSuffix "$host")$desc" "//$host/$suffix"

	# return 1 (keep checking) if we are selecting from all available locations
	[[ "$command" != "select" ]]
}

addLocalDirs()
{
	local p="public/documents/data/install"

	# local drive
	[[ -d "$DATA/install" ]] && addDir "local" "$DATA/install"

	# mounted drives
	local desc drive drives

	drive mount all $quiet
	IFS=$'\n' drives=( $(drive mounts) )

	for drive in "${drives[@]}"; do
		if [[ -d "$drive/$p" ]]; then
			drive IsDrive "$drive" && desc="drive-$(drive label "$drive")" || desc="drive-$(GetFileName "$drive")"
			addDir "$desc" "$drive/$p"
		fi
	done

	# VMware Host
	IsVmwareVm && [[ -d "//vmware-host/Shared Folders/d/users/public/install/" ]] && addDir "host-drive-d" "//vmware-host/Shared Folders/d/users/public/install"

	# Synology DSM NAS
	[[ -d "/volume1/$p" ]] && addDir "dsm-host" "/volume1/$p"

	# QNAP NAS
	[[ -d "/share/Public/documents/data/install" ]] && addDir "qnap-host" "/share/Public/documents/data/install"

	return 0
}

checkDir()
{
	local dir="$1"

	IsUncPath "$dir" && { dir="$(unc mount "$dir" --no-host-check)" || return; }

	if [[ -e "$dir/$fileSuffix" ]]; then
		installDir="$dir"
		file="$dir/$fileSuffix"
		return 0
	fi
	return 1
}

checkServerAvailability()
{
	local pingTime

	printStatus "checking..." 

	for key in "${!dirs[@]}"; do
		local dir="${dirs["$key"]}" server
		unset dirs["$key"]
		GetUncServer "$dir" server; [[ ! $server || "$server" == "vmware-host" ]] && { addDir "0-$key" "$dir"; continue; }
		pingTime="$(PingResponse "$server")" && { addDir "$pingTime-$key" "$dir" || return; }
		printStatus "." 
	done

	[[ "${#dirs[@]}" == "0" ]] && return 0

	shopt -s lastpipe

	# sort the array by ping time
	printf '%s\0' "${!dirs[@]}" | sort --numeric --zero-terminated | xargs -0n1 | readarray -t closestKeys

	return 0
}

findClosest()
{
	local dir key server

	[[ $hint ]] && { checkDir "$hint" && return; }	
	[[ ! $force && $INSTALL_DIR ]] && { checkDir "$INSTALL_DIR" && return; }

	addDirs ||return

	# check local dirs	
	for key in "${!dirs[@]}"; do
		dir="${dirs["$key"]}"
		GetUncServer "$dir" server; [[ $server ]] && continue
		checkDir "$dir" && return
		unset dirs["$key"]
	done

	checkServerAvailability || return
	
	# check preferred servers
	for key in "${closestKeys[@]}"; do
		server="${key#*-}"
		if IsInArray "$server" preferredServers; then
			printStatus "$server..." 
			checkDir "${dirs["$key"]}" && { status "found"; return 0; }
		fi
	done

	# check closet servers
	for key in "${closestKeys[@]}"; do
		printStatus "${key#*-}..." 
		checkDir "${dirs["$key"]}" && { status "found"; return 0; }
	done

	status "not found"
	[[ ! $suppress ]] && EchoErr "FindInstallFile: Could not locate ${fileSuffix:-the installation directory}"
	return 1
}

findSelect()
{
	addDirs || return
	checkServerAvailability || return

	local items=( )
	for key in "${closestKeys[@]}"; do
		local dir="${dirs["$key"]}" desc="${key#*-}" ms="${key%%-*}ms away"
		items+=( "$desc" "$ms" )
		unset dirs["$key"]; addDir "$desc" "$dir"
	done

	if (( ${#items[@]} == 0 )); then
		status "not found"
		[[ ! $suppress ]] && EchoErr "FindInstallFile: could not locate any installation servers"
		return 1
	fi

	while true; do
		local result=$(dialog --stdout --backtitle "Select Installation Location" \
	  	--menu "Choose the location to search for:\n$fileSuffix" $(($LINES-5)) 50 $(($LINES)) "${items[@]}")
		[[ "$result" == "" ]] && return 1
		[[ ! $quiet ]] && clear
		printStatus "checking...$result ("${dirs[$result]}")..."
		checkDir "${dirs[$result]}" && { status "found"; return; }

		status "not found"		
		if [[ ! $suppress ]]; then			
			EchoErr "FindInstallFile: ${fileSuffix:-the installation directory} is not located on $result"
			[[ ! $quiet ]] && pause
		fi
	done
}

run "$@"
