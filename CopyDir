#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: CopyDir SRC DEST
Copy the SRC directory to DEST.

	SRC 		The source file or directory.  
					  If SRC is a directory with a trailing / it's contents are put in the DEST directory.
					  If SRC does not have a trailing / the SRC directory is copied to the DEST directory.

	DEST 		The destination directory.

	-a, --archive				archive a directory
	-d, --delete				delete files that do not exist in the target directory
	-e, --exclude=list	comma separated list of files to exclude
	-nm, --no-metadata	do not transfer any file metadata
	-r, --recursive			copy directories recursively
			--rsync					force use of rsync"
}

init() { defaultCommand="copy"; }

#
# copy command
#

copyArgStart()
{
	unset -v archive delete exclude recursive rsync
	unset -v src dest
	exclude=".git" metadata="true"
}

copyOpt() 
{
	case "$1" in
		--archive|-a) archive="true" recursive="true";; 
		--delete|-d) delete="true";;
		--exclude|--exclude=*|-e|-e=*) ScriptOptGet "exclude" "$@"; shift;;
		--no-metadata|-nm) unset metadata;;
		--recursive|-r) recursive="true";;
		--rsync) rsync="true";;
		*) return 1
	esac
}

copyArgs()
{
	ScriptArgGet "src" -- "$@"; shift
	ScriptArgGet "dest" -- "$@"; shift
}

copyCommand() { copy "$src" "$dest"; }

#
# Helper
#

copy()
{
	local src="$1" dest="$2"

	# check if the source exists
	[[ ! -e "$src" ]] && { EchoErr "CopyDir: source \"$src\" does not exist"; return 1; }

	# create destination parent directory if needed
	local parent="$(GetFullPath "$dest" | EnsureDir | GetParentDir)"
	[[ $parent && ! -d "$parent" ]] && { ${G}mkdir --parents "$parent" || return; }

	# Windows drives copy much more quickly with robocopy
	if [[ ! $rsync ]]; then
		local isSrcWin; drive IsWin "$src" && isSrcWin="true"
		local isDestWin; [[ $parent ]] && drive IsWin "$parent" && isDestWin="true"
	fi
	
	# if the src and dest end with the same directory, ensure src ends with a slash so the directory is not duplicated in the dest
	local lastDirsMatch; [[ "$(GetLastDir "$src")" == "$(GetLastDir "$dest")" ]] && lastDirsMatch="true"

	[[ $recursive && $lastDirsMatch ]] && src="$(RemoveTrailingSlash "$src")/"

	if [[ $isSrcWin || $isDestWin ]]; then
		CopyDirWin
	else
		CopyDirRsync
	fi
}

CopyDirRsync()
{
	# options

	o=(--info=progress2)

	if [[ $metadata ]]; then
		o+=(--times) 													# preserve times, required for incremental sync
		o+=(--links --perms --group --owner) 	# preserve other metadata
	fi

	[[ $archive ]] && o+=( --archive ) # archive implies -rlptgoD, i.e. --recursive --links --perms --times --group --owner --devices --specials
	[[ $delete ]] && o+=(--delete)
	[[ $exclude ]] && o+=(--exclude="$exclude")
	[[ $recursive ]] && o+=(--recursive)
	[[ $verbose ]] && o+=(--verbose)

	local result limitMemory

	# when large files are transferred WSL 2 expands Hyper-V memory until host memory is full
	IsPlatform wsl && [[ -d "/sys/fs/cgroup/memory" ]] && limitMemory="true"

	# limit the file cache memory used, otherwise all host memory will be consumed	
	if [[ $limitMemory ]]; then

		if InPath cgcreate; then
			sudoc cgcreate -g memory:backup || exit
		elif [[ ! -d "/sys/fs/cgroup/memory/backup" ]]; then
			sudo mkdir "/sys/fs/cgroup/memory/backup" || exit
		fi

		sudoc env ppid=$$ bash -c '	
			echo 256M > /sys/fs/cgroup/memory/backup/memory.limit_in_bytes || exit
			echo $ppid > /sys/fs/cgroup/memory/backup/tasks || exit
		'
	fi

	# perform the copy
	if [[ $recursive || -f "$src" ]]; then
		RunLog rsync "${o[@]}" "$src" "$dest"
	else
		RunLog rsync "${o[@]}" "$src/"* "$dest"
	fi
	result="$?"

	FileCacheFlush || return
	[[ $limitMemory ]] && InPath cgdelete && { sudoc cgdelete -g memory:backup || return; }

	return "$result"
}

CopyDirWin()
{
	# xcopy options
	o=(/e /j) 			# recursive, unbuffered IO
	o+=(/njh /ndl) 	# logging - no header, no directory list, show file progress
	[[ $archive ]] && o+=(/COPYALL)
	[[ $delete ]] && o+=(/PURGE)
	[[ $exclude ]] && o+=(/XD $exclude )
	[[ $verbose ]] && o+=(/V)
	[[ $(drive type --quiet "$src") =~ FAT || $(drive type "$dest") =~ FAT ]] && o+=(/FFT) # 2 second window to compensate for FAT file system

	src="$(GetFullPath "$src")" || return

	# mimic rsync - if the source does not end with a slash, create the final directory of the source in the dest
	[[ ! $lastDirsMatch && ! -f "$src" && ! "$src" =~ /$ ]] && dest="$(RemoveTrailingSlash "$dest")/$(GetLastDir "$src")"

	# get files to copy if needed
	local files=()
	[[ -f "$src" ]] && { files="$(GetFileName "$src")"; GetFilePath "$src" src; }

	robocopy.exe "$(utw "$src")" "$(utw "$dest")" "${files[@]}" "${o[@]}"
	(( $? < 8 ))
}

ScriptRun "$@"
