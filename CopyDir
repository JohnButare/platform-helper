#!/usr/bin/env bash
. function.sh || exit

run() {	init && args "$@" && CopyDir "${args[@]}"; }

init() { :; }

usage()
{
	echot "usage: CopyDir SRC DEST

	SRC 		The source file or directory.  
					  If SRC is a directory with a trailing / it's contents are put in the DEST directory.
					  If SRC does not have a trailing / the SRC directory is copied to the DEST directory.

	DEST 		The destination directory.

	-a, --archive			archive a directory
	-d, --delete			delete files that do not exist in the target directory
	-r, --recursive		copy directories recursively
	-v, --verbose			maximize logging"; exit $1; 
}

args()
{
	unset help recursive sudo 

	exclude=".git" args=( ) o=(--info=progress2)
	o+=(--links --perms --times --group --owner) # preserve metadata
	
	# arguments
	for arg in "$@"; do
		[[ ! $1 ]] && { shift; continue; } # ignore empty options
		
		if [[ $1 == @(-a|--archive) ]]; then
			o+=( --archive ) # archive implies -rlptgoD, or --recursive --links --perms --times --group --owner --devices --specials
			recursive="true"
			IsPlatform win && sudo="sudoc" # required for preserving metadata in Windows
			shift; continue
		fi

		[[ $1 == @(-d|--delete) ]] && { o+=(--delete); shift; continue; }
		[[ $1 == @(-h|--help) ]] && usage 0
		[[ $1 == @(-r|--recursive) ]] && { o+=(--recursive); recursive="true"; shift; continue; }
		[[ $1 == @(-v|--verbose) ]] && { o+=(--verbose); shift; continue; }
		args+=("$1"); shift
	done

	IsPlatform win && [[ $archive ]] && sudo="sudoc" 

	o+=(--exclude="$exclude")

	(( ${#args[@]} != 2 )) && usage 1

	return 0
}

CopyDir()
{	
	local made result src="$1" dest="$2"

	# check if the source exists
	[[ ! -e "$src" ]] && { EchoErr "CopyDir: source \"$src\" does not exist"; return 1; }

	# create destination parent directory if needed
	local parent="$(GetParentDir "$dest")"
	[[ $parent && ! -d "$parent" ]] && { ${G}mkdir --parents "$parent" || return; }

	# recursive copy or src is a file
	if [[ $recursive || -f "$src" ]]; then
		$sudo rsync "${o[@]}" "$src" "$dest"

	# non-recursive directrory copy - the source must be individual files
	else
		$sudo rsync "${o[@]}" "$src/"* "$dest"

	fi
	result=$?

	return $result
}

run "$@"
