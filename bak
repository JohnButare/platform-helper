#!/bin/bash
. function.sh

usage()
{
	echot "\
usage: bak [/dest <destination dir>] <file> [<file>]...
	Backup files specified by pattern to the bak directory
	-d, --dest <dir>				backup directory location
	-l, --local							backup locally to the public data backup directory 
	-m, --move							move the file instead of copying it
	-q, --quiet							hide status messages"
	exit $1
}

init() { stamp="$(GetDateStamp)"; }

args()
{
	unset destination local move quiet files
	while [ "$1" != "" ]; do
		case "$1" in
			-d|--dest) dest="$2"; shift;;
			-l|--local) local="--local";;
			-m|--move) move="--move";;
			-q|--quiet) quiet="--quiet";;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				! IsOption "$1" && { files+=( "$1" ); shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $files ]] && MissingOperand "file"
	args=("$@")
}

run() 
{	
	init; args "$@"; 
	for file in "${files[@]}"; do BakFile "$file" || return; done
}

BakFile()
{
	local file="$1" fileName bakDir
	GetFileName "$file" fileName

	[[ ! -f "$file" ]] && { EchoErr "$fileName does not exist"; return 1; }

	GetBakDir "$file" "$fileName" || return

	if [[ $move ]]; then
		[[ ! $quiet ]] && printf "Removing $fileName to $bakDir..."
		mv "$file" "$bakDir" || return
		[[ ! $quiet ]] && printf "done\n"
		return 0
	fi

	[[ ! $quiet ]] && printf "Backing up $fileName to $bakDir..."
	cp -r "$file" "$bakDir" || return
	[[ ! $quiet ]] && printf "done\n"
	return 0
}

GetBakDir()
{
	local file="$1" fileName="$2" dir

	GetFilePath "$file" dir
	
	bakDir="$dir/bak"
	if [[ $local ]]; then 
		bakDir="$PUB/Documents/data/bak"
	elif [[ $dest ]]; then 
		bakDir="$dest/bak"
	fi

	[[ ! -d "$bakDir" ]] && { mkdir "$bakDir" || return; }

	local i=1
	while [[ -f "$bakDir/$stamp.$i/$fileName" ]]; do (( ++i )); done
	bakDir="$bakDir/$stamp.$i"
	[[ ! -d "$bakDir" ]] && { mkdir "$bakDir" || return; }
	return 0
}

run "$@"
