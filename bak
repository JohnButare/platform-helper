#!/usr/bin/env bash
. script.sh

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [FILE]...
Backup specified files to the .bak directory.
	
	-d, --dest DIR		backup to the specified directory
	-l, --local				backup to $DATA/.bak
	-m, --move				move the file instead of copying it"
}

init() { defaultCommand="backup"; stamp="$(GetDateStamp)"; }
argStart() { unset -v destination local move files; }

opt()
{
	case "$1" in
		-d|--dest) ScriptOptGet "destDir" "$@" && ScriptCheckDir "$destDir"; destDir="$(RemoveTrailingSlash "$destDir")";;
		-l|--local) local="--local";;
		-m|--move) move="--move";;
		*) return 1;;
	esac
}

args() { files=( "$@" ); shift="$#"; }
backupCommand() {	for file in "${files[@]}"; do backupFile "$file" || return; done; }

backupFile()
{
	local file="$1"
	local fileName="$(GetFileName "$file")" bakDir
	local dir="$(GetFilePath "$file")"

	log1 "backing up '$file'"

	[[ -d "$file" ]] && return 0;
	[[ ! -f "$file" ]] && { EchoErr "$fileName does not exist"; return 1; }

	# determine the backup directory
	bakDir="$dir/.bak"; [[ ! $dir ]] && bakDir=".bak"

	if [[ $local ]]; then 
		bakDir="$DATA/.bak"
	elif [[ $destDir ]]; then 
		bakDir="$destDir"
	fi
	log1 "backup directory=$file"
	[[ ! -d "$bakDir" ]] && { mkdir "$bakDir" || return; }

	# find a unique filename
	local i=1 dest
	while dest="$bakDir/$(GetFileName "$file").$stamp.$i" && [[ -f "$dest" ]]; do (( ++i )); done
	log1 "backup destination=$dest"

	# move file
	if [[ $move ]]; then
		[[ ! $quiet ]] && printf "Moving $fileName to $(FileToDesc "$dest")..."
		Runlog mv "$file" "$dest" || return
		[[ ! $quiet ]] && printf "done\n"
		return 0
	fi

	# copy file
	[[ ! $quiet ]] && printf "Backing up $fileName to $(FileToDesc "$dest")..."
	cp -r "$file" "$dest" || return
	[[ ! $quiet ]] && printf "done\n"
	return 0
}

ScriptRun "$@"