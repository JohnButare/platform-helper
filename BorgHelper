#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
Additional BorgBackup functionality.
	
	backup			backup files
	dir					return the backup directory
	environment	return environment variables
	list				list backups
	mount				mount a backup
	passphrase	return the passphrase used to encrypt backups
	repo				return the repository URL
	run					run borg as $backupUser
	status			show borg configuration status
	umount			unmount a backup
	vorta				run vorta as $backupUser

	-H,	--host=HOST		the borg backup host
	-u,	--user=USER		the borg backup user"
}

init()
{
	borgArgs=( ); [[ $verbose ]] && borgArgs+=( "--verbose" )
	backupDir="$DATA/appdata/borg"
	backupUser="root"
	mountDir="$HOME/Volumes/backup"
	vars=( BORG_PASSPHRASE BORG_REPO )
}

argStart() { unset -v host; }

opt()
{
	case "$1" in
		-H|--host|-H=*|--host=*) ScriptOptGet "backupHost" "host" "$@";;
		-u|--user|-u=*|--user=*) ScriptOptGet "backupUser" "user" "$@";;
		*) return 1;;
	esac
}

#
# Other Commands
#

environmentCommand() { setEnvironment && ScriptReturn --export $verbose "${vars[@]}"; }
dirCommand() { getBackupDir; }
listCommand() { setEnvironment && runBorg list; }
passphraseCommand() { getPassphrase; }
repoCommand() { getRepo; }

statusCommand()
{
	setEnvironment || return
	echo "host=$BORG_HOST"
	echo "directory=$BORG_DIR"
	echo "repo=$BORG_REPO"
}

#
# Backup Command
#

backupUsage()
{
		echot "\
Usage: $(ScriptName) backup [PATH [PATH ...]]
Backup files

	-n,	--name=NAME		name of the backup"
}

backupArgStart() { name="files"; }

backupOpt()
{
	case "$1" in
		-n|--name|-n=*|--name=*) ScriptOptGet "name" "$@";;
		*) return 1;;
	esac
}

backupArgs() { backupArgs=( "$@" ); shift="$#"; }

backupCommand()
{
	setEnvironment || return
	hilight "Backing up $name to $BORG_REPO..."
	repoValidate && runBorg create ::$name'-{now:%Y-%m-%d_%H:%M:%S}' "${backupArgs[@]}" --stats --progress
}

#
# Mount/Unmount Command
#

mountUsage()
{
		echot "\
Usage: $(ScriptName) mount [ARCHIVE]
Mount backup repository or archive to $mountDir."
}

mountArgStart() { unset -v archive; }
mountArgs() { [[ $# == 0 ]] && return; ScriptArgGet "archive" -- "$@"; shift; }

mountCommand()
{
	setEnvironment || return
	[[ ! -d "$mountDir" ]] && { mkdir --parents "$mountDir" || return; }
	borg mount "$archive" "$mountDir" 
}

umountCommand()
{
	setEnvironment || return
	[[ ! -d "$mountDir" ]] && return
	borg umount "$mountDir" 
}


#
# Run Command
#

runUsage()
{
		echot "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
Run borg as $backupUser."
}

runArgs() { runArgs=( "$@" ); shift="$#"; }
runCommand() { runBorg "${runArgs[@]}"; }

#
# Vorta Command
#

vortaCommand()
{
	setEnvironment || return
	[[ $verbose ]] && EchoErr "borg $@ ${borgArgs[@]} ${otherArgs[@]}"
	sudoc BORG_PASSPHRASE="$BORG_PASSPHRASE" BORG_REPO="$BORG_REPO" \
		SSH_AUTH_SOCK="$SSH_AUTH_SOCK" SSH_AGENT_PID="$SSH_AGENT_PID" \
		vorta "${otherArgs[@]}" &
}

#
# helper
#

checkRepo()
{
	# check if the backupHost is correect
	[[ $backupHost && "$backupHost" != "$(GetSshHost "$BORG_REPO")" ]] && return 1

	[[ $BORG_REPO ]]
}

getBackupDir()
{
	local host; host="$(getBackupHost)" || return
	IsLocalHostIp "$host" && echo "$backupDir" || echo "//$host/root$backupDir"
}

getBackupHost()
{
	[[ $backupHost ]] && { echo $backupHost; return; }
	network current server backup --quiet
}

getBackupHosts() {	network current servers backup --quiet; }

getPassphrase()
{
	[[ $BORG_PASSPHRASE && ! $force ]] && { echo "$BORG_PASSPHRASE"; return; }
	credential get borg passphrase --fallback
}

getRepo()
{
	checkRepo && [[ ! $force ]] && { echo "$BORG_REPO"; return; }
	echo "$backupUser@${backupHost:-$(getBackupHost)}:$backupDir/$HOSTNAME"
}

repoValidate()
{
	setEnvironment || return

	ssh -T "$backupUser@$BORG_HOST" "$(cat <<-EOF
		export BORG_PASSPHRASE="$BORG_PASSPHRASE"
		[[ -d "$BORG_DIR" ]] || borg init --encryption=repokey --make-parent-dirs "$BORG_DIR"
		EOF
	)"
}

runBorg()
{
	setEnvironment || return
	[[ $verbose ]] && EchoErr "borg $@ ${borgArgs[@]} ${otherArgs[@]}"
	sudoc BORG_PASSPHRASE="$BORG_PASSPHRASE" BORG_REPO="$BORG_REPO" \
		SSH_AUTH_SOCK="$SSH_AUTH_SOCK" SSH_AGENT_PID="$SSH_AGENT_PID" \
		borg "$@" "${borgArgs[@]}" "${otherArgs[@]}"
}

setEnvironment()
{
	local passphrase; passphrase="$(getPassphrase)" || return
	local repo; repo="$(getRepo)" || return
	export BORG_DIR="$(GetSshPort "$repo")"
	export BORG_HOST="$(GetSshHost "$repo")"
	export BORG_PASSPHRASE="$passphrase"
	export BORG_REPO="$repo"
}

ScriptRun "$@"
