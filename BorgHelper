#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script color || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
$(ScriptName) commands.
	
Common commands:
	backup			backup files
	compact			compact repository
	restore			restore files
	init				initialize the repository
	ls					list backup archives
	remote			run BorgHelper on a remote host
	repo				repository commands
	rm					remove a backup
	run					run borg
	status			show status

Common options:
	-H,  --host=HOST						host which contains the backup repository
	-r,  --repository=NAME			name of the backup repository, defaults to '$backupRepoDefault'"
}

usageVerbose()
{ 
	ScriptUsageEcho "
Other commands:
	environment	return environment variables
	mount				mount a backup
	unmount			unmount a backup
	vorta				run vorta

Other options:
	-bd, --backup-dir=DIR			location of the backup archive on the backup host, defaults to '$backupDirDefault'
	-P,	 --passphrase=HOST		repository passphrase
	-u,	 --user=USER					backup user, defaults to '$backupUserDefault'"
}

init()
{
	backupDirDefault="$ADATA/borg"
	backupUserDefault="root"
	backupRepoDefault="$(DnsResolve --quiet "$HOSTNAME")" || backupRepoDefault="$HOSTNAME"; 
	borgPath="/usr/local/bin/borg"
	encryptionDefault="repokey-blake2"
	mountDir="$(drive dir user)/backup"
	vars=( BORG_PASSPHRASE BORG_REPO )
}

argStart() { unset -v backupDir backupPassphrase backupRepo backupUser hostArg hostOpt hosts; }

argEnd()
{
	borgVerboseArg=( ); [[ $verbose ]] && borgVerboseArg+=( "--verbose" )

	# set command specific forces
	unset forceEnvironment
	if [[ $force ]]; then
		if [[ "$command" == @(environment) ]]; then forceEnvironment="true"
		fi
	fi

	return 0
}

opt()
{
	ScriptOptHost "$@" && return
	case "$1" in
		-bd|--backup-dir|-bd=*|--backup-dir=*) ScriptOptGet "backupDir" "dir" "$@";;
		-P|--passphrase|-P=*|--passphrase=*) ScriptOptGet "backupPassphrase" "passphrase" "$@";;
		-r|--repository|-r=*|--repository=*) ScriptOptGet "backupRepo" "repo" "$@";;
		-u|--user|-u=*|--user=*) ScriptOptGet "backupUser" "user" "$@";;
		*) return 1;;
	esac
}

#
# other commands
#

environmentCommand() { setBorgEnvironment "$hostArg" && ScriptReturn --export "${vars[@]}"; }
initCommand() { hilight "Creating '$BORG_REPO'..."; runBorg init --encryption=$encryptionDefault; }
lsUsage() { echot "Usage: $(ScriptName) ls -- [OPTION]...\nList backups, for example:\n\nBorgHelper ls -- --prefix 'web-'\nBorgHelper ls -- --glob-archives web"; }
lsCommand() { runBorg list; }
rmUsage() { echot "Usage: $(ScriptName) rm -- [OPTION]...\nRemove backups, for example:\n\nBorgHelper -- ::tmp\nBorgHelper rm -- --prefix 'web-'\nBorgHelper ls -- --glob-archives web"; }
rmCommand() { runBorg delete; }
vortaCommand() { runBorg vorta; }

statusCommand()
{
	setBorgEnvironment  "$hostArg" || return
	echo "borg will use the '${GREEN}$backupRepo${RESET}' repository on '${GREEN}$host${RESET}'"
	log1 "user=$backupUser dir=$backupDir\nBORG_REPO=$BORG_REPO"
	return 0
}

#
# backup command
#

backupUsage()
{
		echot "\
Usage: $(ScriptName) backup [PATH [PATH ...]]
Backup files.

	-a,	--archive=NAME							name of the archive, defaults to archive (see 'borg help placeholders')
	-H, --host=[all|HOSTS](first)		comma separated list of hosts to backup to
	-nc, --no-check									do not check if the repository is initialized
	-p,	--prune=N										prune backups leaving the last N backups"
}

backupArgStart() { archive="archive" archiveSuffix="-{now:%Y-%m-%d_%H:%M:%S}"; unset -v host noCheck noSuffix prune pruneArg; }

backupOpt()
{
	case "$1" in
		-a|--archive|-a=*|--archive=*) ScriptOptGet "archive" "$@";;
		-nc|--no-check) noCheck="--no-check";;
		-ns|--no-suffix) noSuffix="--no-suffix" archiveSuffix="";;
		-p|--prune|-p=*|--prune=*) ScriptOptGet --integer "prune" "$@"; pruneArg="--prune=$prune";;
		*) return 1;;
	esac
}

backupArgs() { backupArgs=( "$@" "${otherArgs[@]}" ); shift="$#"; }

backupCommand()
{	
	log1 "backup $(description)"
	SshAgentConf "${globalArgs[@]}" || return
	[[ ! $hostArg ]] &&  { backupDo; return; }
	GetHostsApp "file" && ForAllHosts backupDo --header "Borg Backup"
}

backupDo()
{
	setBorgEnvironment "$host" || return

	# status
	local message="backing up the '$archive' archive to the '$backupRepo' repository on '$host' (${backupArgs[@]})"
	log1 "backup $(description): $message"
	[[ ! $quiet ]] && EchoWrap "${message^}..."

	# ensure the repository exists
	repoCheck || return

	# delete an existing archive if we are not using a unique suffix
	[[ ! $suffix ]] && { archiveDeleteIfExists "$archive" || return; } 

	# backup
	local args=("${backupArgs[@]}"); [[ ! $quiet ]] && args+=(--stats --progress)
	runBorgRoot create ::$archive"$archiveSuffix" "${args[@]}" || return
	[[ ! $quiet ]] && echo

	# if we are not using a unique suffix there is nothing to prune
	[[ ! $suffix ]] && return

	# prune
	if [[ $prune ]]; then
		echo "Pruning to $prune backups..."
		RunLog borg prune --keep-last $prune --prefix "$archive-" || return
	fi

	# status
	[[ $quiet ]] && return
	[[ ! $prune ]] && echo "Backups..."
	borg list --prefix "$archive-" || return
	echo
	
}

#
# compact
#

compactUsage() { echot "Usage: $(ScriptName) compact [all]\Compact repository"; }
compactCommand() { runBorg compact; }

compactAllCommand()
{
	local repo repos; IFS=$'\n' ArrayMakeC repos GetDirs "$backupDirDefault" || return
	
	for repo in "${repos[@]}"; do
		header "Compacting $(GetFileName "$repo")"
		runBorg compact --progress "$repo"
	done
}

#
# mount/unmount command
#

mountUsage()
{
		echot "\
Usage: $(ScriptName) mount [ARCHIVE]
Mount backup repository or archive to $mountDir."
}

mountArgStart() { unset -v archive; }
mountArgs() { (( ! $# )) && return; ScriptArgGet "archive" -- "$@"; }

mountCommand()
{
	# create the mount directory
	[[ ! -d "$mountDir" ]] && { mkdir --parents "$mountDir" || return; }

	# unmount existing borg backup
	isMounted && [[ $force ]] && { unmountCommand || return; }

	# mount the borg backup
	! isMounted && { borg mount "$archive" "$mountDir" || return; }

	# return the mounted directory
	echo "$mountDir"
}

unmountCommand()
{
	{ [[ ! -d "$mountDir" ]] || ! isMounted; } && return
	borg umount "$mountDir" || return
}

isMounted() { findmnt --list --source=borgfs --target="$mountDir" >& /dev/null; }

#
# remote command
#

remoteUsage() { ScriptUsageEcho "Usage: $(ScriptName) remote HOST -- ARGUMENTS...\nrun BorgHelper on a remote host."; }
remoteArgStart() { unset -v remoteHost; }
remoteArgs() { ScriptArgGet "remoteHost" "host" -- "$@"; }

remoteCommand()
{
	log1 "remote $(description)"
	
	# validate the host
	! SshIsAvailablePort "$remoteHhost" && { ScriptErr "'$remoteHost' is not available"; return 1; }

	# set Borg environment variables for SshHelper
	setBorgEnvironment  "$hostArg" || return

	# run the remote command
	RunLog SshHelper "$remoteHost" --borg --credential-manager --hashi "${globalArgs[@]}" -- BorgHelper "${otherArgs[@]}" "${globalArgs[@]}"
}

#
# repo command
#

repoUsage() { echot "Usage: $(ScriptName) repo ls\nBorg repository commands."; }
repoCommand() { usage; }
repoLsCommand() { setBorgRepo "$hostArg" && sshRun "$host" ls -1 "$backupDir"; }

#
# restore command
#

restoreUsage() { ScriptUsageEcho "Usage: $(ScriptName) extract -- [OPTION]...
Extract files, for example:

Options:
	-a,	 --archive=NAME		name of the archive, defaults to archive
	-d,	 --dir=DIRECTORY	directory to restore to, defaults to current directory	

Examples:
	BorgHelper extract -- ::ProxyManager-2021-11-03_23:14:58"; }


restoreArgStart() { dir="$PWD"; unset -v archive host; borgArgs=(); }

restoreOpt()
{
	case "$1" in
		-a|--archive|-a=*|--archive=*) ScriptOptGet "archive" "$@"; borgArgs+=("::$archive");;
		-d|--dir|-d=*|--dir=*) ScriptOptGet "dir" "$@";;
		*) return 1;;
	esac
}

restoreCommand()
{
	log1 "restore $(description)"
	[[ $dir ]] && { cd "$dir" || return; }
	runBorg extract "${borgArgs[@]}"
}

#
# run command
#

runUsage()
{
		echot "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
Run borg as root."
}

runArgs() { runArgs=( "$@" ); shift="$#"; }
runCommand() { runBorg "${runArgs[@]}"; }

#
# helper
#

archiveDelete() { runBorgRoot delete ::"$1"; }
archiveDeleteIfExists() { ! archiveExists "$1" && return; archiveDelete "$1"; }
archiveExists() { local archive="$1" result; result="$(runBorgRoot list --short --glob-archives "$archive")" && [[ "$result" == "$archive" ]]; }
description() { echo "on '$HOSTNAME' as '$USER'"; }
isBorgBaseHost() { [[ "$host" =~ borgbase\.com$ ]]; }
repoCheck() { [[ $noCheck ]] || repoExists || repoInit; }
repoExists() { [[ ! "$backupDir" || $test ]] && return; runSsh "$host" "mkdir --parents \"$backupDir\" && [[ -d \"$backupDir$backupRepo\" ]]"; }
repoInit() { runBorgRoot init --encryption=$encryptionDefault; }
runBorgRoot() { runRoot borg "$@" "${borgVerboseArg[@]}"; }
runSsh() { ssh "$@"; }

# runBorg COMMAND [ARGS]... - initialize the SSH agent and Borg, then run a Borg command as root with other arguments (passsed after --)
runBorg()
{
	SshAgentConf "${globalArgs[@]}" && setBorgEnvironment "$hostArg" && runBorgRoot "$@" "${otherArgs[@]}"
}

# runRoot COMMAND [ARGS]... - run a Borg command as root
runRoot()
{
	# run directly if already root
	IsRoot && { "$@"; return; }

	# mac does not set root HOME variable
	local env; IsPlatform mac && env=HOME="$USERS/root"

	# run using:
	# - sudoc: to elevate using credential manager
	# - BORG variables: borg configuration
	# - SSH variables: allows borg to use the current users ssh-agent SSH keys
	sudoc \
		$env BORG_PASSPHRASE="$BORG_PASSPHRASE" BORG_REPO="$BORG_REPO" BORG_REMOTE_PATH="$borgPath" BORG_RELOCATED_REPO_ACCESS_IS_OK="$BORG_RELOCATED_REPO_ACCESS_IS_OK" \
		SSH_AUTH_SOCK="$SSH_AUTH_SOCK" SSH_AGENT_PID="$SSH_AGENT_PID" \
		"$@"
}

# setBorgEnvironment [HOST] - set BORG_PASSPHRASE and BORG_REPO
setBorgEnvironment()
{
	log2 "setting the environment"
	export BORG_RELOCATED_REPO_ACCESS_IS_OK="yes"
	setBorgPassphrase && setBorgRepo "$1" && log2 "setBorgEnvironment: BORG_REPO='$BORG_REPO'"
}

# setBorgPassphrase - set BORG_PASSPHRASE
setBorgPassphrase()
{
	local passphrase="${backupPassphrase:-$BORG_PASSPHRASE}"
	[[ $forceEnvironment || ! $passphrase ]] && { passphrase="$(credential get borg passphrase --fallback "${globalArgs[@]}")" || return; }
	export BORG_PASSPHRASE="$passphrase"
}

# setBorgRepo [HOST] - set BORG_REPO and host environment variables
setBorgRepo()
{
	host="$1"

	# do not use BORG_REPO for configuration if forcing or if configuration has been supplied from options
	[[ $forceEnvironment ]] && unset BORG_REPO
	[[ $backupDir || $hostArg || $backupUser || $backupRepo ]] && unset BORG_REPO

	# backup host alias
	case "${host,,}" in
		bb|borgbase) backupRepo="${backupRepo:-$backupRepoDefault}"
			case "${backupRepo,,}" in
				oversoul) host="mk099950.repo.borgbase.com";;
				pi1) host="h7gnr153.repo.borgbase.com";;
				pi2) host="q3d82g14.repo.borgbase.com";;
				pi3) host="gw3jk69x.repo.borgbase.com";;
				rosie) host="kx172994.repo.borgbase.com";;
				*) ScriptErr "No backup host specified for repository '$backupRepo'"; return 1;;
			esac;;
		db|dropbox) CloudConf && host="ender.butare.net" backupDir="${backupDir:-$CLOUD/apps/BorgBackup}" backupUser="jjbutare"
	esac

	# get the backup host from BORG_REPO if needed
	[[ ! $host && $BORG_REPO ]] && host="$(GetSshHost "$BORG_REPO")"
	
	# discover the backup host if needed
	[[ ! $host ]] && { host="$(GetServer file)" || return; }

	# ensure we have a backup host
	[[ ! $host ]] && { ScriptErr "unabl to get a backup host"; return 1; }

	# ensure the host is a fully qualified domain name and resolve aliases (prevents extra borg prompting)
	host="$(DnsResolve "$host")" || return

	# ensure the host is available
	HostAvailable "$host" || return

	# get the backup dir from BORG_REPO if needed or use the default
	[[ ! $backupDir && $BORG_REPO ]] && backupDir="$(GetSshPort "$BORG_REPO" | RemoveTrailingSlash | GetFilePath)"	
	backupDir="$(EnsureDir "${backupDir:-$backupDirDefault}")"

	# get the backup repo from BORG_REPO if needed or use the default
	[[ ! $backupRepo && $BORG_REPO ]] && backupRepo="$(GetSshPort "$BORG_REPO" | RemoveTrailingSlash | GetFileName)"	
	backupRepo="${backupRepo:-$backupRepoDefault}"

	# get the backup user from BORG_REPO if needed or use the default
	[[ ! $backupUser && $BORG_REPO ]] && backupUser="$(GetSshUser "$BORG_REPO")"	
	backupUser="${backupUser:-$backupUserDefault}"
		
	# BorgBase special handling: u578g3w0@u578g3w0.repo.borgbase.com:repo
	if isBorgBaseHost; then
		backupUser="$(RemoveDnsSuffix "$host")"
		backupDir="" backupRepo="repo"
	fi

	# set the BORG_REPO environment variable
	export BORG_REPO="$backupUser@$host:$backupDir$backupRepo"
}

ScriptRun "$@"
