#!/usr/bin/env bash
. function.sh || exit
. bootstrap-config.sh || exit

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init() 
{
	winVersion="20201"
	adkDir="$P32/Windows Kits/10/Assessment and Deployment Kit"
	cloudDir="$CLOUD/network/WinPE"
	imageManager="$adkDir/Deployment Tools/WSIM/imgmgr.exe" 
	peDir="$DATA/appdata/WinPE"
	winPeDir="$WIN_ROOT/WinPE_amd64"

	if [[ ! -d "$adkDir" ]]; then
		EchoErr "adk: the Windows Assessment and Deployment Kit is not installed"
		exit 1
	fi

	[[ ! -d "$peDir" ]] && { mkdir --parents "$peDir" || return; }

	return 0
}

usage()
{
	echot "\
usage: adk configure|pe
	Windows Application and Development Kit utilities

	configure 	configure the unattended Windows installation file

	pe [make|bak|commit|discard|mount|iso|copy|nbcopy](make)
		make 			perform all the steps to make and deploy the WinPE image
		copy 			Copy and extract the WinPE ISO to the appdata directory for better disk performance
		nbcopy 		Copy the extracted the WinPE ISO to the netboot.xyz asset directory"

	exit $1
}

args()
{
	declare -g args=() windowStyle="hidden"; unset -v command file # clears the variable

	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-h|--help) usage 0;;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; command="${1,,}"; shift; continue; }
				! IsOption "$1" && [[ "$command" == @(pe) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	command="${command:-pe}"
	args=("$@")
}

#
# helper
#

checkCloudDir() 
{ 
	[[ -d "$cloudDir" ]] && return 0
	EchoErr "adk: cloud backup directory ($cloudDir) does not exist"
	return 1
}

getNetBootPeDir() { nbDir="$(unc mount //$fileServer/root/usr/local/data)"; }

#
# commands
#

configureCommand()
{
	checkCloudDir || return
	getNetBootPeDir || return

	# copy catalog files
	local dir="$peDir/configure"; 
	[[ ! -d "$dir" ]] && { mkdir --parents "$dir" || return; }
	[[ ! -f "$dir/install_Windows 10 Pro.clg" ]] && { cp "$cloudDir/configure/"*.clg "$dir" || return; }
	[[ ! -f "$dir/install.wim" ]] && { CopyFileProgress "$nbDir/appdata/netbootxyz/windows/$winVersion/sources/install.wim" "$dir" || return; }

	# run the image manager
	pushd "$cloudDir/configure" || return
	"$imageManager" autounattend.xml -d distribution
	popd || return

	# copy the new unattend.xml file
	cp "$cloudDir/configure/autounattend.xml" "$nbDir/appdata/netbootxyz/windows/$winVersion" || return
}

#
# pe command
#

peCommand()
{
	local command; CheckSubCommand pe "$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"
	$command "$@"
}

peMakeCommand()
{
	if [[ ! -d "$winPeDir" ]]; then
		hilight "Creating pe directory..."
		pe create || return
	fi

	hilight "Mounting boot image..."
	pe mount || return

	if IsElevated; then
		echo "Make modifications then exit this shell..."
		( cd "$winPeDir/mount"; zsh; )
	else
		start --elevate wt.exe -d "$winPeDir/mount"
		pause "Make modifications in the elevated terminal then press any key to continue..."
	fi

	if ! ask "Do you want to commit the changes to the boot image" -dr n; then
		hilight "Discarding changes to the boot image..."
		pe discard || return		
		exit 1
	fi	 
	
	hilight "Commiting changes to the boot image..."
	pe commit || return

	hilight "Creating the boot ISO..."
	pe iso || return

	hilight "Copying and extracting the PE image to $peDir..."
	PeCopyCommand || return

	hilight "Updating the netboot.xyz WinPE image..."
	PeNbcopyCommand || return
}

PeBakCommand()
{	
	checkCloudDir || return
	CopyFileProgress "$winPeDir/media/sources/boot.wim" "$cloudDir" || return
}

PeCopyCommand()
{
	CopyFileProgress "$winPeDir/WinPE_amd64.iso" "$peDir" || return
	7z x "$peDir/WinPE_amd64.iso" -o"$peDir/WinPE_amd64" -y || return
}

PeNbcopyCommand()
{
	getNetBootPeDir || return

	local dest="$nbDir/appdata/netbootxyz/windows/WinPE/x64"

	# copy the Windows PE network boot files
	local nbPeDir="$nbDir/appdata/netbootxyz/windows/WinPE/x64"
	mkdir --parents "$nbPeDir" || return
	CopyDir --recursive "$peDir/WinPE_amd64/" "$nbPeDir" || return

	# copy the Windows PE ISO image
	local nbIsoDir="$nbDir/appconfig/netbootxyz/menus/ipxe"
	mkdir --parents "$nbIsoDir" || return
	CopyFileProgress "$peDir/WinPE_amd64.iso" "$nbIsoDir" || return
}

PeCommitCommand() { pe commit; }
PeDiscardCommand() { pe discard; }
PeMountCommand() { pe mount; }
PeIsoCommand() { pe iso; }

#
# helper
#

pe()
{
	local prefix; ! IsElevated && prefix="RunScript --elevate"
	$prefix cmd.exe /c WinPe.cmd "$1"
}

run "$@"
