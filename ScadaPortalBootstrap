#!/usr/bin/env bash
. function.sh || exit

# this script will check the ping
# check we (ICS Dev AD) have access
# and grant sys_cs access
# we can give the output to jeff if there are issues

usage()
{
	echot "/
usage: ScadaPortalBootstrap [ENVIRONMENT] [-s|--script]
	Bootstrap a SCADA Portal environment.   Must be run as a member of ICS Dev AD"
	exit $1
}

args()
{
	unset script
	while (( $# != 0 )); do
		case "$1" in
			-s|--script) script=true;;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
		esac
		shift
	done
	command="${command:-development}"
	args=("$@")
	prod=""; [[ "$command" == "production" || "$command" == "prod" ]] && prod="true"
}

init()
{
	return 0
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}" || return; }

updateAdministratorsGroup()
{
	local server="$1" account="sys_cs"

	[[ "$prod" ]] && account="sys_csProd" # use sys_csProd as the production build account

	addToAdministratorsGroup "$server" "$account" || return 												# CI system
	addToAdministratorsGroup "$server" "Global SCADA Admins" || return; 						# production service access
	[[ "$prod" ]] || { addToAdministratorsGroup "$server" "ICS Dev AD" || return; } # developer administrator access
}

addToAdministratorsGroup()
{
	local server="$1" group="$2"

	if [[ $script ]]; then
		echo psexec -h '\\'$server net LocalGroup Administrators \"$group\"
		return 0
	fi


	echo -n "$group..."
	psexec -h '\\'$server net LocalGroup Administrators "$group" /add >& /dev/null
	return 0
}

checkAccess()
{
	local server="$1"

	echo -n "unc..."
	if ! net use '\\'$server'\c$' >& /dev/null; then # if we can access c$ share we are an administrator
		echo "ERROR: $server UNC is not accessible as $(whoami), add \"ICS Dev AD\" to the Administrators group"
		#net use '\\'$server'\c$'
		return 1
	fi

	return 0
}

pingServer()
{
	local server="$1"

	echo -n "ping..."
	if ! ping -n 1 $server >& /dev/null; then
		echo "ERROR: $server is not available"
		return 1
	fi

	return 0
}

checkServer()
{
	local server="$1"

	if [[ ! "$script" ]]; then
		echo -n "$server: "
		pingServer "$server" || return
		checkAccess "$server" || return
	fi

	updateAdministratorsGroup "$server" || return

	[[ "$script" ]] || echo "done"
}

checkServers() 
{ 
	[[ "$script" ]] && echo "Run the following command on the BK1 SQL Server:"
	for server in $1; do checkServer $server ; done;
	[[ "$script" ]] && echo '\\CsisBuild.intel.com\install\Microsoft\SQL Server\image\2017\setup.exe /action=install /q /IACCEPTSQLSERVERLICENSETERMS /FEATURES=SQLEngine,Replication /InstanceName=MSSQLSERVER /SQLUSERDBDIR=C:\MSSQL\Data /SQLUSERDBLOGDIR=C:\MSSQL\Log /SQLBACKUPDIR=C:\MSSQL\Backup /INSTALLSHAREDDIR="C:\Program Files\Microsoft SQL Server" /SQLSYSADMINACCOUNTS="AMR\AD_JJBUTARE" "AMR\JJBUTARE" "AMR\ICS Dev" "AMR\ICS Dev AD" "BUILTIN\ADMINISTRATORS"'
}

prodCommand() { productionCommand; }; productionCommand() { checkServers "RasDev1Web1"; }
pfCommand() { pathFindingCommand; }; pathFindingCommand() { checkServers "RasPF1FmsPrCimf RasPF1FmsBkCimf RasPF1FmsEmus RasPF1Web1 RasPF1PrSqls RasPF1BkSqls"; }
devCommand() { developmentCommand; }; developmentCommand() { checkServers "RasDevFmsPrCimf RasDevFmsBkCimf RasDevFmsEmus RasDev1Web1 RasDev1PrSqls RasDev1BkSqls"; }
dqaCommand() { developmentQualityAssuranceCommand; }; developmentQualityAssuranceCommand() { checkServers "rasdqaweb1"; }
prodCommand() { productionCommand; }; productionCommand() { checkServers "RasDev1Web1"; }

run "$@"
