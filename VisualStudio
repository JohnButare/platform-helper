#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [cd|close|init|IsInstalled|IsRunning|profile|program|restart|start|startup](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start"
	versions=( 2022 2019 2017 2015 2013 2012 )

	# version - public version number
	vsBaseDir="$P32/Microsoft Visual Studio"
	if [[ -d "$P/Microsoft Visual Studio/2022/Preview" ]]; then version="2022" vsBaseDir="$P/Microsoft Visual Studio"
	elif [[ -d "$P/Microsoft Visual Studio/2022" ]]; then version="2022" vsBaseDir="$P/Microsoft Visual Studio"
	elif [[ -d "$P32/Microsoft Visual Studio/2019" ]]; then version="2019"
	elif [[ -d "$P32/Microsoft Visual Studio/2017" ]]; then version="2017"
	elif [[ -d "$P32/Microsoft Visual Studio 14.0" ]]; then version="2015"
	elif [[ -d "$P32/Microsoft Visual Studio 12.0" ]]; then version="2013"
	elif [[ -d "$P32/Microsoft Visual Studio 11.0" ]]; then version="2012"
	else return 1
	fi

	# vsVersion - internal version number
	vsName="$version"
	case "$vsName" in
		2022) vsVersion="17.0";;
		2019) vsVersion="16.0";;
		2017) vsVersion="15.0";;
		2015) vsVersion="14.0";;
		2013) vsVersion="12.0";;
		2012) vsVersion="11.0";;
	esac

	# edition	
	if [[ -d "$vsBaseDir/$version/Preview" ]]; then vsEdition="Preview"; 
	elif [[ -d "$vsBaseDir/$version/Enterprise" ]]; then vsEdition="Enterprise"; 
	elif [[ -d "$vsBaseDir/$version/Professional" ]]; then vsEdition="Professional"; 
	elif [[ -d "$vsBaseDir/$version/Community" ]]; then vsEdition="Community"; 
	else return 1
	fi

	# other
	vsDir="$vsBaseDir/$version/$vsEdition"
	vsPath="$vsDir/Common7/IDE:$vsDir/Team Tools/Performance Tools"
	vsIde="$vsDir/Common7/IDE/devenv.exe"
	vsRegistryKey='HKCU\Software\Microsoft\VisualStudio\'"$vsVersion"
	vsVars="$vsDir/vc/VcVarsAll.bat"
	vsData="$UDATA/app/Visual Studio $vsName"
	title=".*- Microsoft Visual Studio.*"
	program="$vsIde"
	cd="$vsDir"
}

cdCommand() { echo "$vsDir"; }
closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startupCommand() { startCommand; }

initCommand()
{
	vars=( vsName vsVersion vsDir vsPath vsIde vsRegistryKey vsVars vsData ) 
	ScriptReturn "${vars[@]}"
}

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand() 
{	
	AppInstallCheck || return
	local command="${profileArgs[0]}"
	[[ "$command" == "restore" ]] && echo "- Tools, Import and Export Settings..., No, just import new settings, overwriting my existing settings, Browse..., check All Settings"
	[[ "$command" == "save" ]] &&  echo "- Tools, Export settings..., check All Setings"
	profile --app "VisualStudio$vsVersion" --method "$vsIde" --save-extension "vssettings" "${profileArgs[@]}" || return
}

#
# Start Command
#

startArgStart() { unset -v new; }

startOpt()
{
	case "$1" in
		-n|--new) new="true";;
		*) return 1
	esac
}

startArgs() { startArgs=( "$@" ); shift="$#"; }

startCommand()
{
	AppInstallCheck || return

	if [[ $new ]] || ! IsRunningCommand; then
		start "$program" "${startArgs[@]}"
	else
		WinSetState "$title" maximize
	fi
}

ScriptRun "$@"
