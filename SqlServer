#!/usr/bin/env bash
. app.sh || exit

usage() {	echot "usage: SqlServer [2012|2008R2|2008] [COMMAND](studio)
  backup|restore|service|studio|profiler
  cd [data]|studio|cmd|log config|RsConfig
  db backup|restore [/?]
  ExecuteSql [-S server_name[\instance_name]] [-d database] [-U user] [-P password] [-E] [file_name[,file_name]] 
  profile dir|SaveDir|backup|restore [<profile name>|default](latest)
  RsConfig - Reporting services configuration

  -a, --ad 					use an administrator (ad_) account
  -n, --no-host-check	do not check if host is available
  -h, --host 				host to connect to"; exit $1; }

serviceUsage() { echot "\
usage: SqlServer service COMMAND [NoCheckHost] [instance <instance>](express|default) 
	start|stop|restart|auto|demand|disable|enable|status|detail
	instance: <name>|default|express

	-a, --all						all services
	-i, --instance NAME	use the named instance"; exit $1; }

backupUsage() {	echot "\
usage: SqlServer backup [/?] database [BakFile](<database>.bak.7z) [server](localhost)
  BakFile - name of the file to backup up to, or directory to backup to
  server - server to backup database from, requires 7z in path for compression"; exit $1; }

restoreUsage() { echot "\
usage: restore [/?] BakFile [server](localhost) [RestoreSql](Database Restore.sql)
  BakFile- database backup file to restore, uncompressed if required.
  server - server to restore database to, requires c$ access
  RestoreSql - SQL used to perform the restore.  In the SQL, data_dir and
    bak_file are substituted with appropriate values."; exit $1; }

args()
{
	unset ad command help host hostArg hostDesc noHostCheck version
	versions=( 2014 2012 2008r2 2008 )
	while (( $# != 0 )); do
		case "$1" in
			--ad|-a) ad="--ad";;
			--host|-h) host="$2"; hostArg="--host $host"; hostDesc=" on $host"; shift;;
			--no-host-check|-n) noHostCheck="--no-host-check";;
			--help) help="--help";;
			ExecuteSql) command="ExecuteSql";; RsConfig) command="RsConfig";;
			*)
				! IsOption "$1" && IsInArray "$1" versions && { version="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(cd) ]] && break
				break
		esac
		shift
	done

	[[ ! $command ]] && { command="studio"; }
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	args=( "$@" )
}

init()
{ 	
	if [[ ! $version ]]; then
		if [[ -d "$P/Microsoft SQL Server/120" ]]; then
			version=2014
		elif [[ -d "$P/Microsoft SQL Server/110" ]]; then
			version=2012
		elif [[ -d "$P/Microsoft SQL Server/100" ]]; then
			version=2008r2
		elif [[ -f "$WINDIR/system32/SQLServerManager10.msc" ]]; then
			version=2008
		fi
	fi

	case "$version" in
		2014) versionNum=12; dataVersionNum=12;;
		2012) versionNum=11; dataVersionNum=11;;
		2008r2) versionNum=10; dataVersionNum=10_50;;
		2008) versionNum=10; dataVersionNum=10;;
	esac

	allServices=( SqlBrowser MsDtsServer${versionNum}0 SqlWriter 	
		"SQL Server Distributed Replay Controller" "SQL Server Distributed Replay Client" )
	configManager="$WINDIR/system32/SQLServerManager${versionNum}.msc"
	projectDir="$UDATA/sql"
	rsConfig="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/rsConfigTool.exe"
	sqlCmd="$P/Microsoft SQL Server/${versionNum}0/Tools/Binn/sqlCmd.EXE"
	sqlStudio="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/ManagementStudio/Ssms.exe"
	sqlProfiler="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/Profiler.exe"
	sqlTemp="$TEMP/temp.sql"
	program="$sqlStudio"

	if [[ "$version" == @(2008r2|2008) ]]; then
		allServices=( SqlBrowser MsDtsServer${versionNum}0 SqlWriter MsSqlServerADHelper100 )
		sqlStudio="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/VSShell/Common7/IDE/Ssms.exe"
	fi
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }
configCommand() { start "$configManager"; }

cdCommand()
{
	[[ $# > 0 && ( $# != 1 || "$1" != "data" ) ]] && usage 1

	if [[ "$1" == "data" ]]; then
		GetDataDir || { EchoErr "SqlServer: unable to locate the data directory$hostDesc"; return 1; }
		echo "$dataDir"
	else
		echo "$projectDir"	
	fi
}

serviceCommand()
{
	local command all instance services
	while (( $# != 0 )); do
		case "$1" in
			--all|-a) all="--all";;
			--instance|-i) instance="$2"; shift;;
			*) 
					[[ ! $command ]] && { CheckSubCommand service "$1"; shift; continue; }
					serviceUsage 1;;
		esac
		shift
	done
	[[ ! $command ]] && { MissingOperand "service command"; }
	CheckHost || return
	GetInstance "$instance" || return
	[[ $all ]] && services=( "${allInstanceServices[@]}" "${allServices[@]}" ) ||
		services=( "${instanceServices[@]}" )
	Service${command}Command "$@"
}

ServiceAutoCommand() { DoServiceCommand; } 
ServiceDemandCommand() { DoServiceCommand; } 
ServiceDetailCommand() { DoServiceCommand; } 
ServiceDisableCommand() { DoServiceCommand; } 
ServiceEnableCommand() { DoServiceCommand; } 
ServiceRestartCommand() { DoServiceCommand; } 
ServiceStartCommand() { DoServiceCommand; } 
ServiceStatusCommand() { DoServiceCommand; } 
ServiceStopCommand() { DoServiceCommand; } 

DoServiceCommand()
{
	local startType

	local description="${host}${instanceDisplayName}"

	for service in "${services[@]}"; do
		startType="$(service StartType "$service" $hostArg --no-host-check)" || continue
		[[ "$command" == @(start|stop|restart) && "$startType" == "DISABLED" ]] && continue
		service "$command" "$service" $hostArg --wait --no-service-check --no-host-check || return
	done
}

CheckHost()
{
	if [[ ! $noHostCheck && $host && "$host" != @(|localhost|$COMPUTERNAME) ]]; then
		! HostUtil available "$host" && { EchoErr "SqlServer: $host is not available"; return 1; }
	fi
	
	if ! service exist MsSqlServer $host --no-host-check; then
		EchoErr "SqlServer: SQL Server is not installed$hostDesc"
		return 1
	fi
}

GetInstance()
{
	local name="$1"
	instanceFriendlyName="$name"

	case "$name" in
		"")
			instanceDisplayName=''
			instanceServices=( 'MSSQL$SQLEXPRESS' "MsSqlServer" )
			allInstanceServices=( "${instanceServices[@]}" 'SQLAgent$SQLEXPRESS' "SQLSERVERAGENT" "MsSqlServerOLAPService" "ReportServer" "MSSQLFDLauncher" );;
		default)
			instanceDisplayName=''
			instanceServices=( "MsSqlServer" "SQLSERVERAGENT" )
			allInstanceServices=( "${instanceServices[@]}" "MsSqlServerOLAPService" "ReportServer" "MSSQLFDLauncher" );;
		express)
			instanceDisplayName='\SQLEXPRESS'
			instanceServices=( 'MSSQL$SQLEXPRESS' )
			allInstanceServices=( "${instanceServices[@]}" 'SQLAgent$SQLEXPRESS' );;
		*)
			instanceDisplayName='\MSSQLSERVER'"$name"
			instanceServices=( 'MSSQL$MSSQLSERVER'"$name" )
			allInstanceServices=( "${instanceServices[@]}" 'SQLAgent$MSSQLSERVER'"$name" 'MSOLAP$MS'"$name" 'ReportServer$MSSQLSERVER'"$name" 'MSSQLFDLauncher$MSSQLSERVER'"$name" );;
	esac
}

GetDataDir()
{
	CheckHost || return
	ScriptEval os FindDirs $host || return

	dirs=(
		"$_DataDrive/Program Files/Microsoft SQL Server/MSSQL11.MSSQLSERVER/MSSQL/Data"
		"$_DataDrive/Program Files/Microsoft SQL Server/MSSQL10_50.MSSQLSERVER/MSSQL/Data"
		"$_DataDrive/Program Files/Microsoft SQL Server/MSSQL10.MSSQLSERVER/MSSQL/Data"
		"$_DataDrive/Program Files/Microsoft SQL Server/MSSQL.1/MSSQL/Data"
		"$_DataDrive/Program Files/Microsoft SQL Server/MSSQL/Data"
		)

	for dataDir in "${dirs[@]}"; do
		[[ -d "$dataDir" ]] && return 0
	done

	return 1
}

startCommand() { studioCommand; }
studioCommand() { startProgram "$sqlStudio" "$@"; }
profilerCommand() { startProgram "$sqlProfiler" /Slocalhost "$@"; }
closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } # task close|CloseKill [--wait] [--title "$title"] "$program"; ProcessKill "$program"; SendKeys "$title" "!FX"; 
IsInstalledCommand() { [[ -f "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
restartCommand() { closeCommand && startCommand; }

startProgram()
{
	local program="$1"; shift
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start "$program" "$@"
}

profileCommand() 
{
	local connectionDir="$APPDATA/Microsoft/Microsoft SQL Server/${versionNum}0/Tools/Shell"

	if [[ "$1" == @(save) && "$1" != "dir" ]] && grep PersistLoginNameAndPassword "$connectionDir/RegSrvr.xml" > /dev/null; then
		echo "Saved passwords must be removed from these connections:"
		grep --context=10 "PersistLoginNameAndPassword" "$connectionDir/RegSrvr.xml" | grep "RegisteredServers:Name"
		return 1	
	fi

	[[ "$1" == @(save|restore) ]] && ! IsElevated && { sudo SqlServer profile "$@"; return; }
	
	[[ "$1" == @(save|restore) ]] && echo -e "Aliases..."
	profile --app "SqlServerAliases" --method "HKLM/SOFTWARE/Wow6432Node/Microsoft/MSSQLServer/Client/ConnectTo" "$@" || return; 

	[[ "$1" == @(save|restore) ]] && echo -e "\nConnections..."
	profile --app "SqlServerConnections" --method "$connectionDir" --files "RegSrvr.xml" "$@" || return;

	[[ "$1" == @(save|restore) && "$1" != "dir" ]] && echo -e "\nEnvironment settings...
- Tools, Import and Export Settings..., Export|Import selected environment settings"
	[[ "$1" != "dir" ]] && { profile --app "SqlServer" --method "$sqlStudio" --save-extension "vssettings" "$@" || return; }
}

run "$@"