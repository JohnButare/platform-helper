#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) IsActive|IsInstalled|version
Docker helper commands.
	
	IsActive			return true if the Docker Swarm node is active
	IsInstalled		return true if Docker is installed"
}

init()
{
	defaultCommand="start"

	case "$PLATFORM_OS" in
		mac) program="$P/Docker.app";;
		win) program="$P/Docker/Docker/Docker Desktop.exe";;
	esac

	return 0
}

#
# commands
#

isActiveCommand() { isActive; }
isInstalledCommand() { isInstalled; }
startupCommand() { [[ ! $force ]] && isRunningCommand && return; startCommand; }

closeCommand()
{ 
	! isRunningCommand && return
	docker$EXE desktop stop & # never returns in windows
}

isRunningCommand()
{
	IsPlatform mac,win && { InPath docker && docker ps &> /dev/null; return; }
	service --quiet running docker
}

startCommand()
{
	AppInstallCheck || return
	if IsPlatform linux; then service start docker
	elif IsPlatform win; then start "$program" "${startArgs[@]}" && FileWait $quiet "/usr/bin/docker"
	fi
}

versionCommand()
{
	! AppInstallCheck && return
	case "$PLATFORM_OS" in
		linux) docker --version | cut -d" " -f3 | RemoveEnd ",";;
		mac) defaults read "$P/Docker.app/Contents/Info.plist" "CFBundleShortVersionString";;
		win) CanElevate && registry get "HKLM/Software/Microsoft/Windows/CurrentVersion/Uninstall/Docker Desktop/DisplayVersion" | RemoveCarriageReturn;;
	esac
}

#
# IsHealthy Command
#

isHealthyUsage() { echot "\
Usage: $(ScriptName) IsHealthy NAME
Check the health status of container NAME.  Returns healthy (return code 0) or unhealthy (return code 1)."; }

isHealthyArgStart() { unset name; }
isHealthyArgs() { ScriptArgGet "name" -- "$@"; shift; }

isHealthyCommand()
{
	local status; status="$(docker inspect --format='{{.State.Health.Status}}' "$name")" || return
	echo "$name is $status"
	[[ "$status" == "healthy" ]] && return 0 || return 2
}

#
# helper
#

isActive() { isInstalled && docker node inspect pi1 |& grep '"Availability": "active"' >& /dev/null; }

isInstalled()
{
	if IsPlatform mac,win; then [[ -e "$program" ]]
	else service exists docker
	fi
}

ScriptRun "$@"
