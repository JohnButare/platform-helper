#!/bin/bash
. app.sh

usage() {	echot "usage: templateApp [start|startup|close|restart|cd](start)
  profile dir|SaveDir|backup|restore [<profile name>|default](latest)
	service start|stop|restart|auto|demand|disable|enable|status [NoCheckHost] [host]"; exit $1; }

init()
{ 
	title=".* - Sublime Text 2"
	program="$P/Sublime Text 2/sublime_text.exe"
	cd="$DOC/data/templates"

	ProfileApp="ObjectDock"
	ProfileMethod="<dir|exe|registry key|$program>"
	ProfileFiles="*.ini *.xml"
	ProfileSaveExtension="bcpkg"
}

args()
{
	unset var
	command='start'
	while [[ "$1" != "" ]]; do
		case "$1" in
			-h|--help) usage 0;;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";; # case-insensitive aliases
			*)
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(start|startup|profile|service) ]] && break
				echoerr "Unknown argument $1"; usage 1;
		esac
		shift
	done
	args=( "$@" )
}

startCommand()
{
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start "$program" "$@"
	#task start --duplicate --title "$title" "$program" "$@"
}

startupCommand()
{
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start --minimize "$program" "$@"
	#task start --fast --wait --title "$FastStartTitle" "$program" "\"$(utw "$FastStart")\""
	#task start --wait --minimize "$program" --title "$title" "$program" "$@"
	#WinSetState "$title" minimize
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
IsInstalledCommand() { [[ -f "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; } # task IsRunning --title "$title" "$program"; WinExists "$title";
closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
# task close|CloseKill [--wait] [--title "$title"] "$program"; ProcessKill "$program"; SendKeys "$title" "!FX"; 
restartCommand() { closeCommand && startCommand; }
cdCommand() { echo "$cd"; }
#profile() {	tc profile.btm "$@" || usage; }

serviceCommand()
{
	command="status"
	ServiceGetArgs || return
	Service${command}Command "$@"
}

# TODO: no separate arguments for each command, just pass command to service
ServiceGetArgs()
{
	:
	# [[ $# > 0 ]] && ProperCase "$1" s; IsFunction Service${s}Command && { command="$s"; shift; }
	# [[ $# != 0 ]] && usage

	# iff %# gt 0 .and. IsLabel Service%1 then
	# 	set command=%1
	# 	shift & goto ServiceGetArgs
	# endiff

	# iff "%1" == "NoCheckHost" then
	#   set NoCheckHost=NoCheckHost
	#   shift & goto ServiceGetArgs
	# endiff

	# iff %# != 0 then
	# 	set host=%1
	# 	shift
	# endiff

	# if %# != 0 goto usage
}

# :ServiceStart
# :ServiceStop
# :ServiceRestart
# :ServiceAuto
# :ServiceDemand
# :ServiceDisable
# :ServiceEnable
# :ServiceStatus
# :ServiceBriefStatus
# call service %command wait %NoCheckHost ServiceName %host
# return

run "$@"