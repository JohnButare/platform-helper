#!/usr/bin/env bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: numlock [set on|off]|[boot on|off|status](set)
	Show or set the boot status of numlock key"
	exit $1
}

args()
{
	unset -v file
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(boot|set) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	args=("$@")
}

init() 
{ 
	userKey="HKEY_CURRENT_USER/Control Panel/Keyboard/InitialKeyboardIndicators"
	defaultKey="HKEY_USERS/.DEFAULT/Control Panel/Keyboard/InitialKeyboardIndicators"
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

bootCommand()
{
	local command; CheckSubCommand boot "$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"
	Boot${command}Command "$@"
}

BootOnCommand() { SetBoot 2 || return; SetOnCommand || return; BootStatusCommand; }
BootOffCommand() { SetBoot 0 || return; SetOffCommand || return; BootStatusCommand;}
BootStatusCommand() { Log "$(tr -d '\000' < "/proc/registry/$userKey")"; }

SetBoot()
{
	registry set "$userKey" REG_SZ "$1" || return
	IsElevated && { registry set "$defaultKey" REG_SZ "$1" || return; }
	return 0
}

Log()
{
	local state="unspecified"
	case "$1" in
		0) state="off";;
		2) state="on";;
	esac
	echo "NumLock will be $state when the system starts."
}

setCommand()
{
	local command; CheckSubCommand set "$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"
	Set${command}Command "$@"
}

SetOnCommand() { SetKeyState NumLock on; }
SetOffCommand() { SetKeyState NumLock off; }

run "$@"
