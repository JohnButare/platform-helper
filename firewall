#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
usage: firewall [console|disable|enable|enabled|group|log|panel|rule|status](console)
Firewall commands.

 	-s, --suppress			suppress errors if the firewall service is not running"
 	exit $1
}

init() { defaultCommand="console"; }
argStart() { unset -v suppress; }

opt()
{
	case "$1" in
		-s|--suppress) suppress="true";;
		*) return 1;;
	esac
}

panelCommand() { rundll32.exe shell32.dll,Control_RunDLL "$WINDIR/System32/Firewall.cpl"; }
consoleCommand() { start wf.msc; }
enableCommand() { checkElevated || return; netsh.exe advfirewall set currentprofile state on; }
disableCommand() { checkElevated || return; netsh.exe advfirewall set currentprofile state off; }
statusCommand() { netsh.exe advfirewall show currentprofile; }
enabledCommand() { netsh.exe firewall show state | grep -i "Operational Mode" | grep Enable > /dev/null; }

#
# Group Command
#

groupUsage()
{
	echot "Usage: $(ScriptName) group enable|disable NAME
Firewall group commands."
}

groupArgStart() { unset -v name; }
groupArgs() { ScriptArgGet "name" -- "$@"; }
groupArgEnd() { checkElevated || return; }
groupCommand() { usage; }

# Get-NetFirewallRule -DisplayGroup "File and Printer Sharing" -Direction Inbound | Where { $_.Profile -like "Private" } | Set-NetFirewallRule -Profile Private -Enable True
groupEnableCommand() 
{
	powershell 'Get-NetFirewallRule -DisplayGroup "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable True'
	# netsh.exe advfirewall firewall set rule group="$name" new enable=yes; # sets for all profiles
}

groupDisableCommand()
{
	powershell 'Get-NetFirewallRule -DisplayGroup "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable False'
	# netsh.exe advfirewall firewall set rule group="$name" new enable=no # sets for all profiles
}

#
# Log Command
#

logUsage()
{
	echot "Usage: $(ScriptName) log [HOST]
Show the firewall log."
}

logArgStart() { unset -v host; }
logArgs() { (( ! $# )) && return; ScriptArgGet "host" -- "$@"; }

logCommand()
{
	local p; [[ $host ]] && p="//$host/admin\$" || { checkElevated || return; p="$WINDIR"; }
	local file="$p/system32/LogFiles/Firewall/pfirewall.log"
	[[ ! -f "$p" ]] && { ScriptErr "cannot access `$file`: No such file"; return 1; }
	TextEdit "$file" || return
}

#
# Rule Command
#

ruleUsage() 
{ 
	echot "Usage: $(ScriptName) rule add|disable|delete|enable|exist|status NAME
Firewall rule commands."
}

ruleArgStart() { unset -v name; }
ruleArgs() { ScriptArgGet "name" -- "$@"; }
ruleArgEnd() { checkElevated; }
ruleCommand() { usage; }
ruleDeleteCommand() { ! ruleExistCommand && return; netsh.exe advfirewall firewall delete rule name="$name"; }
ruleExistCommand() { ruleStatusCommand > /dev/null;}
ruleStatusCommand() { netsh.exe advfirewall firewall show rule name="$name"; }

ruleAddArgStart() { unset -v rules; }
ruleAddArgs() { [[ ! $0 ]] && usage; rules=("$@" "${otherArgs[@]}"); (( shift+=$# )); return 0; }

ruleAddUsage() 
{ 
	echot "Usage: $(ScriptName) rule add NAME RULES
Add a firewall rule."
}

ruleAddCommand()
{ 
	local command="add" new; ruleExistCommand && { command="set"; new="new"; }
	printf "firewall: adding rule $name..."	
	netsh.exe advfirewall firewall $command rule name="$name" $new "${rules[@]}"
}

ruleEnableCommand()
{ 
	! ruleExistCommand && return
	powershell 'Get-NetFirewallRule -DisplayName "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable True'
	# netsh.exe advfirewall firewall set rule name="$name" new enable=yes # sets for all profiles
}

ruleDisableCommand()
{
	! ruleExistCommand && return
	powershell 'Get-NetFirewallRule -DisplayName "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable False'
	# netsh.exe advfirewall firewall set rule name="$name" new enable=no # sets for all profiles
}

#
# Hyper-V Rule Command
#

hvruleUsage() { echot "Usage: $(ScriptName) hvrule add|disable|delete|enable|exist|list|status NAME\nHyper-V firewall rule commands."; }
hvruleArgStart() { unset -v name; }
hvruleArgs() { [[ "${commandNames[1]}" == @(list) ]] && return; ScriptArgGet "name" -- "$@"; }
hvruleArgEnd() { [[ "${commandNames[1]}" == @(check|exist|list|status) ]] && return; checkElevated; }
hvruleCommand() { usage; }
hvruleDeleteCommand() { ! hvruleExistCommand && return; powershell 'Remove-NetFirewallHyperVRule -DisplayName "'$name'"'; }
hvruleExistCommand() { hvruleStatusCommand >& /dev/null;}
hvruleListUsage() { echot "Usage: $(ScriptName) hvrule list [name]\nList Hyper-V firewall rules."; }
hvruleListCommand() { powershell Get-NetFirewallHyperVRule | grep '^DisplayName' | cut -d":" -f2; }
hvruleListNameCommand() { powershell Get-NetFirewallHyperVRule | grep '^Name' | cut -d":" -f2; }
hvruleStatusCommand() { powershell 'Get-NetFirewallHyperVRule -DisplayName "'$name'"'; }

hvruleAddUsage() { echot "Usage: $(ScriptName) hvrule add NAME -- RULES\nAdd a Hyper-V firewall rule.  Rules are from the New-NetFirewallHyperVRule command (https://learn.microsoft.com/en-us/powershell/module/netsecurity/new-netfirewallhypervrule)."; }

hvruleAddCommand()
{ 
	hvruleDeleteCommand || return
	printf "firewall: adding rule $name..."	
	powershell 'New-NetFirewallHyperVRule -Name "'$name'" -DisplayName "'$name'" -VMCreatorId "{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}" '"${otherArgs[@]}"
}

hvruleEnableCommand()
{ 
	! ruleExistCommand && return
	powershell 'New-NetFirewallHyperVRule -DisplayName "'$name'" -VMCreatorId "{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}" -Enabled true'
}

hvruleDisableCommand()
{
	! ruleExistCommand && return
	powershell 'New-NetFirewallHyperVRule -DisplayName "'$name'" -VMCreatorId "{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}" -Enabled false'
}

#
# helper
#

serviceRunning() { [[ "$(service state MpsSvc)" == "RUNNING" ]]; }

checkElevated()
{
	checkServiceRunning || return
	IsElevated && return
	RunScript --elevate --pause-error -- firewall "${originalArgs[@]}"; exit
}

checkServiceRunning()
{
	( serviceRunning || [[ $suppress ]] ) && return 0
	echo "firewall: service is not running"
	return 1
}

ScriptRun "$@"
