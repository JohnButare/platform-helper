#!/usr/bin/env bash
. function.sh || exit

usage()
{
	echot "\
usage: firewall [console|disable|enable|enabled|log|panel|rule|status](console)
 Manipulate the Windows firewall
 	group enable|disable
 	rule add|delete|enable|disable|exists|status
 	-h, --host HOST			the host to use
 	-s, --suppress			suppress errors if the firewall service is not running"
 	exit $1
}

ruleUsage() 
{ 
	echot "\
usage: firewall COMMAND NAME
	add NAME RULES 	add a rule
	enable|disable|delete|exist|status manipulate a rule"
	exit $1
}

args()
{
	unset command host suppress

	originalArgs=( "$@" ) 
	
	while (( $# != 0 )); do
		case "$1" in
			-h|--host) host="$2"; shift;;
			-s|--suppress) suppress="--suppress";;
			--help) help="--help";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(group|rule) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && { command="console"; }
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	args=("$@")
}

init() { :; }
run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }
panelCommand() { start firewall.cpl; }
consoleCommand() { start wf.msc; }
enableCommand() { netsh.exe advfirewall set currentprofile state on; }
disableCommand() { netsh.exe advfirewall set currentprofile state off; }
statusCommand() { netsh.exe advfirewall show currentprofile; }
enabledCommand() { netsh.exe firewall show state | grep -i "Operational Mode" | grep Enable > /dev/null; }

logCommand()
{
	local p; [[ $host ]] && p="//$host/admin\$" || p="$WINDIR"
	local file="$p/system32/LogFiles/Firewall/pfirewall.log"
	[[ ! -f "$p" ]] && { EchoErr "firewall: cannot access \`$file\`: No such file"; return 1; }
	TextEdit "$file"
}

ServiceRunning() { [[ "$(service state MpsSvc)" == "RUNNING" ]]; }

checkServiceRunning()
{
	( ServiceRunning || [[ $suppress ]] ) && return 0
	echo "firewall: service is not running"
	return 1
}

groupCommand()
{
	checkServiceRunning || return
	! IsElevated && { elevate RunScript --pause-error firewall "${originalArgs[@]}"; return; }

	local command; CheckSubCommand group "$1"; shift
	local name="$1"; shift; [[ ! $name ]] && MissingOperand "name"; 
	[[ "$command" != "add" && $# != 0 ]] && UnknownOption "$1"
	Group${command}Command "$@"
}

# Get-NetFirewallRule -DisplayGroup "File and Printer Sharing" -Direction Inbound | Where { $_.Profile -like "Private" } | Set-NetFirewallRule -Profile Private -Enable True
GroupEnableCommand() 
{
	powershell.exe 'Get-NetFirewallRule -DisplayGroup "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable True'
	# netsh.exe advfirewall firewall set rule group="$name" new enable=yes; # sets for all profiles
}

GroupDisableCommand()
{
	powershell.exe 'Get-NetFirewallRule -DisplayGroup "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable False'
	# netsh.exe advfirewall firewall set rule group="$name" new enable=no # sets for all profiles
}

ruleCommand()
{
	checkServiceRunning || return
	! IsElevated && { elevate RunScript --pause-error firewall "${originalArgs[@]}"; return; }

	local command; CheckSubCommand rule "$1"; shift
	local name="$1"; shift; [[ ! $name ]] && MissingOperand "name"; 
	[[ "$command" != "add" && $# != 0 ]] && UnknownOption "$1"
	Rule${command}Command "$@"
}

RuleAddCommand()  
{ 
	local command="add" new; RuleExistCommand && { command="set"; new="new"; }
	printf "firewall: adding rule $name..."	
	netsh.exe advfirewall firewall $command rule name="$name" $new "$@"
}

RuleDeleteCommand() { ! RuleExistCommand && return; netsh.exe advfirewall firewall delete rule name="$name"; }
RuleExistCommand() { RuleStatusCommand > /dev/null;}
RuleStatusCommand() { netsh.exe advfirewall firewall show rule name="$name"; }

RuleEnableCommand()
{ 
	! RuleExistCommand && return
	powershell.exe 'Get-NetFirewallRule -DisplayName "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable True'
	# netsh.exe advfirewall firewall set rule name="$name" new enable=yes # sets for all profiles
}

RuleDisableCommand()
{
	! RuleExistCommand && return
	powershell.exe 'Get-NetFirewallRule -DisplayName "'$name'" -Direction Inbound | Where { $_.Profile -like "*Private*" } | Set-NetFirewallRule -Profile Private -Enable False'
	# netsh.exe advfirewall firewall set rule name="$name" new enable=no # sets for all profiles
}

run "$@"
