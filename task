#!/usr/bin/env bash
. function.sh

init() 
{
	unset task title duplicate fast maxmin option wait
	TaskCommands="start|restart|close|kill|CloseKill|IsRunning|info"
	command='start'
	delay=30
}

usage()
{
	echot "\
usage: task [manager|scheduler](start)
	$TaskCommands <task> [<arguments>]
	-b, --brief 					brief status messages
	-d, --duplicate				allow a duplicate instance of the task
	-f, --fast						start the task hidden for fast subsequent loading
	-t, --title <title>		the window title of the task
	-w, --wait						wait for the task to open or close
	--hide, --maximize, --minimize, --restore, --show, --showmaximized, --showminimized
	--showna, --shownoactive, --shownormal, --maxmin"
	exit $1
}

args()
{
	while (( $# != 0 )); do
		case "$1" in
			--brief|-b) brief="--brief";;
			--duplicate|-d) duplicate="true";;
			--fast|-f) fast="true"; option=--hide;;
			--help) usage 0;;
			--hide|--maximize|--minimize|--restore|--show|--showmaximized|--showminimized|--showna|--shownoactive|--shownormal) option="$1";;
			--maxmin) maxmin="true"; option=--maximize;;
			--title|-t) shift; title="$1";;
			--wait|-w) wait="true";;
			IsRunning) command=IsRunning;; CloseKill) command=CloseKill;;
			*)
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				! IsOption "$1" && [[ ! $task ]] && IsTaskCommand "$command" && { task="$1"; shift; break; }
				UnknownOption "$1"
		esac
		shift
	done

	args=( "$@" )
	{ IsTaskCommand && [[ ! $task ]]; } && MissingOperand "task"
	GetFileNameWithoutExtension "$task" TaskName
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
IsTaskCommand() { [[ "$1" == @($TaskCommands) ]]; }

startCommand()
{
	[[ ! $duplicate ]] && IsProcessRunning "$task" && return 0
	start $option "$task" "$@"

	[[ ! $wait && ! $maxmin ]] && return
	WaitFor start || return

	[[ $maxmin && $title ]] && WinSetState "$title" minimize

	if [[ $fast && $title ]]; then
		case "$TaskName" in
			"winword") # if hidden minimized, will unhide when Word windows are opened
				WinSetState "$title" restore || return
				WinSetState "$title" hide || return;;
			"firefox") # Firefox will reappear when hidden if not minimized
				WinSetState "$title" minimize || return
				WinSetState "$title" hide || return;;
			*) WinVisible "$title" && { WinSetState "$title" hide || return; };;
		esac
	fi

	# Don't let the hidden window stay active (so we don't type in it)
  [[ $fast && "$(WinGetTitle)" == *${title}* ]] && WinSetState --activate "Program Manager"
}

closeCommand()
{
	! IsProcessRunning "$task" && return;
	if [[ $title ]]; then
		WinSetState --activate "$title" && WinSetState --close "$title"
	else
		ProcessClose "$task"
	fi;
	[[ $wait ]] && WaitFor close
}

killCommand()
{
	! IsProcessRunning "$task" && return;
	! ProcessKill "$task" && return
	[[ $wait ]] && WaitFor close	
}

CloseKillCommand()
{
	closeCommand
	[[ $wait ]] && WaitFor close
	killCommand
}

restartCommand()
{
	closeCommand || return
	[[ $wait ]] && { WaitFor close || return; }
	startCommand
}

WaitFor() # [start|close](start)
{
	action="${1-start}"
	[[ "$action" == "start" ]] && ActionPast="started" || ActionPast="closed"

	# Outlook - WinExists $title returns true right after start, then false after about 250ms, then true again after full startup
	[[ "$TaskName" == "outlook" && $title && "action" == "start" ]] && sleep .250

	CheckTask "$action" && return
	[[ ! $brief ]] && printf "Waiting $delay seconds for $TaskName to $action."

	for ((i=0; i<$delay; ++i))
	do
		read -n 1 -t 1 && { echo "cancelled after $i seconds"; return 1; }
		printf "."
		CheckTask "$action" && { [[ ! $brief ]] && echo "$TaskName $ActionPast in $i seconds"; return 0; }
	done
	
	echo "$TaskName did not $action in $delay seconds"
	return 1	
}

CheckTask() 
{ 
	if [[ "${1-start}" == "start" ]]; then
		IsProcessRunning "$task" [[ $title ]] && WinExists "$title"
	else 
		! IsProcessRunning "$task";
	fi; 
} 

IsRunningCommand()
{
	IsProcessRunning "$task" && return 0
	[[ ! $title ]] && return 1
	WinExists "$title"
}

schedulerCommand() { mmc taskschd.msc; }
infoCommand() { tasklist.exe /v | grep -i "${TaskName}.exe"; }

managerCommand() { RunPlatform manager; }
managerLinux() { gnome-system-monitor & }
managerWin() { start cmd.exe /c taskmgr.exe; }

run "$@"
