#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: HostUtil file|name|version
	file cd|view|edit|update			manipulate the local host name files
	name <host>										get the real name of host
	version												display host information"
	exit $1
}


args()
{
	unset command host

	while [ "$1" != "" ]; do
		case "$1" in
			--help|-h) usage 0;;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				! IsOption "$1" && [[ ! $host && "$command" == @(name) ]] && { host="${1,,}"; shift; continue; }	
	 			[[ "$command" == @(file) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && MissingOperand "command"
	args=("$@")
}

run() {	args "$@"; ${command}Command "${args[@]}"; }

nameCommand()
{
	IsLocalHost "$host" && { echo "$HOSTNAME"; return 0; }

	# cached names
	case "$host" in
		nas1) echo "nas1"; return 0;; 
	esac

	name="$(ssh $host hostname)"
	[[ ! $name ]] && name="$host"
	name="${name,,}" # remove spaces
	name="${name%%\.*}" # remove DNS suffix
	echo "$name"	
}

#
# host file
#

fileCommand()
{
	local hostFileDir="/etc"; IsPlatform win && hostFileDir="$WINDIR/system32/drivers/etc"
	local command="file"; [[ $# > 0 ]] && ProperCase "$1" command; IsFunction File${command}Command && shift;
	[[ $# != 0 ]] && UnknownOption "$1"
	File${command}Command "$@"
}

FileCdCommand() { echo "$hostFileDir"; }
FileEditCommand() {	sudo edit "$hostFileDir/hosts"; }

#
# host version
#

versionCommand() {  RunPlatform version || return; }

versionMac()
{
	local version="$(system_profiler SPSoftwareDataType | grep "System Version" | cut -f 10 -d" ")"
	local build="$(system_profiler SPSoftwareDataType | grep "System Version" | cut -f 11 -d" " | sed 's/(//' | sed 's/)//' )"
	local codeName

	case "$version" in
		"10.15") codeName="Mojave";;
		"10.16") codeName="Catalina";;
		*) codeName="?";;
	esac

	echo "macOS $version ($codeName build $build)"
}

versionDebian()
{
	local platform="$PLATFORM $PLATFORM_LIKE $PLATFORM_ID"

	if ! InPath lsb_release; then
		echo "$platform"
		return 0
	fi

	local release="$(lsb_release -a |& grep Description | cut -f 2-)"
	local codeName="$(lsb_release -a |& grep Codename | cut -f 2-)"

	echo "$release ($codeName, $platform)"
}

versionRaspbian()
{
	cpu=$(</sys/class/thermal/thermal_zone0/temp)
	echo "CPU Temperature $((cpu/1000))'C"
}

versionWin()
{
	local r="HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion"
	local releaseId="$(registry get "$r/ReleaseID" | RemoveCarriageReturn)"
	local ubr="$(HexToDecimal "$(registry get "$r/UBR" | RemoveCarriageReturn)")"
	local build="$(registry get "$r/CurrentBuild" | RemoveCarriageReturn)"

	echo "Windows Version $releaseId (OS Build $build.$ubr, WSL $(IsWsl2 && echo 2 || echo 1) $PLATFORM_LIKE-$PLATFORM_ID)"
}

run "$@"
