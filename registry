#!/usr/bin/env bash
. script.sh

usage()
{
	ScriptUsage "$1" "\
usage: registry [32|64](64) COMMAND
	KEY 						KEY/
	VALUE						KEY/VALUE
	KEY ALIAS				HKCR|HKCU|HKU|HKCC|run|RunOnce|urun
 	TYPE 						REG_SZ|REG_MULTI_SZ|REG_EXPAND_SZ|REG_DWORD|REG_QWORD|REG_BINARY|REG_NONE

 	edit KEY 											edit the specified registry key using regedit
  exist|get|delete KEY|VALUE		delete or query the specified registry key
  export KEY FILE 							export regitry key to file
  import FILE										import registry entries from a file
  IsKey KEY											check if key is a registry key
  reg			 											run 32 or 64 bit version of reg.exe
  register|unregister FILE 			register or unregister the registry entries in a DLL											
  set KEY [TYPE](REG_SZ) DATA"
	exit $1
}

init() 
{
	[[ "$PLATFORM" != "win" ]] && return 1
	! CanElevate && { ScriptErrQuiet "no registry permission"; return 1; }
	
	unset key value data dataType
	bits="64"
	title="Registry Editor"

	program32="$WINDIR/syswow64/RegEdit.exe"
	program64="$WINDIR/RegEdit.exe"

	reg32="$WINDIR/syswow64/reg.exe"
	reg64="$WINDIR/system32/reg.exe"
}

args()
{ 
	[[ "$1" == @(32|64) ]] && { bits="$1"; ((++shift)); }
	return 0
}

argEnd()
{
	EvalVar program$bits program
	EvalVar reg$bits reg
}

#
# commands
#

regArgs() { regArgs="$@"; ((shift+=$#)); }
regCommand() { "$reg" "${regArgs[@]}"; }

registerArgs() { ScriptArgGet "file" -- "$@" && ScriptCheckFile "$file"; }
registerCommand() { RunScript --elevate $verbose -- regsvr32.exe /s \"$(utw "$file")\"; }

unregisterArgs() { ScriptArgGet "file" -- "$@" && ScriptCheckFile "$file"; }
unregisterCommand() { RunScript --elevate $verbose -- regsvr32.exe /s /u \"$(utw "$file")\"; }

deleteArgs() { getKeyValueArg "$@"; }

deleteCommand()
{
	! existCommand && return 0; # return if the registry key is already deleted
	! IsElevated && { RunScript --elevate $verbose -- registry "${originalArgs[@]}"; return; }
	"$reg" delete "$wkey" "${value[@]}" /f >& /dev/null
}

editArgs() { getKeyArg "$@"; }

editCommand()
{
	# Start the registry program manually so the correct key is opened (x64 key or x86 virtual key)
	start --elevate "$program" || return
	start --elevate regjump.exe "$wkey"
}

existsArgs() { getKeyValueArg "$@"; }
existCommand() { "$reg" query "$wkey" "${value[@]}" >& /dev/null; }

exportArgs() { getKeyArg "$@"; shift; ScriptArgGet "file" -- "$@"; }

exportCommand() 
{	
	! IsElevated && { RunScript --elevate registry "${originalArgs[@]}"; return; }
	"$program" /e "$(utw "$file")" "$wkey"
}

getArgs() { getKeyValueArg "$@"; }

getCommand()
{
	if [[ $value ]]; then
		result="$( "$reg" query "$wkey" "${value[@]}" 2>&1 )" || return
		echo "$result" | sed -n '3p' | cut -d" " -f 13-
	else
		"$reg" query "$wkey" | tr '\\' '/' | RemoveCarriageReturn
	fi
}

isKeyArgs() { ScriptArgGet "key" -- "$@"; }

isKeyCommand()
{
	local validPrefixes=( HKCR HKCU HKLM HKU HKCC HKEY_CLASSES_ROOT HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS HKEY_CURRENT_CONFIG )
	prefix="${key%%/*}"
	IsInArray "$prefix" validPrefixes
}

importArgs() { ScriptArgGet "file" -- "$@" && ScriptCheckFile "$file"; }

importCommand()
{	
	! IsElevated && { RunScript --elevate registry "${originalArgs[@]}"; return; }
	"$program" /s "$(utw "$file")"
}

setArgStart() { unset -v dataType; data=(); }
setArgs()
{
	# key
	getKeyValueArg "$@"; shift;

	# dataType
	if [[ "$1" == +(REG_SZ|REG_MULTI_SZ|REG_EXPAND_SZ|REG_DWORD|REG_QWORD|REG_BINARY|REG_NONE) ]]; then
		dataType=( /t "$1" ); ((++shift)); shift
	fi

	# data
	[[ $1 ]] && { data=(/d "$1"); ((++shift)); shift; }

	return 0
}

setCommand()
{
	! IsElevated && { RunScript --elevate $verbose -- registry "${originalArgs[@]}"; return; }
	"$reg" add "$wkey" "${value[@]}" "${dataType[@]}" /f "${data[@]}" #2>&1 
}

#
# helper
#

getKeyArg()
{
	[[ $# == 0 ]] && MissingOperand "key"
	key="$(BackToForwardSlash "$1")" # make sure arguments are in POSIX (forward slash) format (/)
	mapKeyAlias "$key"
	((++shift))
}

getKeyValueArg()
{
	[[ $# == 0 ]] && MissingOperand "key"

	# make sure arguments are in POSIX format (forward slash) format (/)
	local keyValue="$(BackToForwardSlash "$1")"

	# remove value - text after last forward slash
	mapKeyAlias "${keyValue%*/*}"

	# get the value after the last /
	value="${keyValue##*/}" # get value - text before last forward slash
	[[ "$value" == "$keyValue" ]] && value=""	
	if [[ "$value" == "(Default)" ]]; then
		value=( /v "" )
	elif [[ $value ]]; then
		value=( /v "$value" )
	else
		unset value
	fi

	((++shift))
}

mapKeyAlias()
{
	key="$1"

	case "$key" in
		run) key="HKLM/Software/Microsoft/Windows/CurrentVersion/Run";;
		RunOnce) key="HKLM/Software/Microsoft/Windows/CurrentVersion/RunOnce";;
		urun) key="HKCU/Software/Microsoft/Windows/CurrentVersion/Run";;
	esac

	key="${key/#HKCR/HKEY_CLASSES_ROOT}"
	key="${key/#HKCU/HKEY_CURRENT_USER}"
	key="${key/#HKLM/HKEY_LOCAL_MACHINE}"
	key="${key/#HKU/HKEY_USERS}"
	key="${key/#HKCC/HKEY_CURRENT_CONFIG}"

	key="${key}/" # key in POSIX format (/)
	wkey="${key////\\}" # key in Windows format (\)
}

ScriptRun "$@"
