#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: registry [32|64] COMMAND
  KEY 		ALIAS(run,urun)|KEY/|KEY/VALUE|KEY/
 	TYPE 		REG_SZ|REG_MULTI_SZ|REG_EXPAND_SZ|REG_DWORD|REG_QWORD|REG_BINARY|REG_NONE

  edit KEY 				edit the specified registry key using regedit
  exist|get|delete KEY delete or query the specified registry key
  export KEY FILE export regitry key to file
  import FILE			import registry entries from a file
  IsKey KEY				check if key is a registry key
  reg			 				run 32 or 64 bit version of reg.exe
  set KEY [TYPE](REG_SZ) DATA"
	exit $1
}

init() 
{
	unset key value data dataType
	bits="64"
	title="Registry Editor"

	program32="$WINDIR/syswow64/RegEdit.exe"
	program64="$WINDIR/RegEdit.exe"

	reg32="$WINDIR/syswow64/reg.exe"
	reg64="$WINDIR/system32/reg.exe"
}

args()
{
	while [ "$1" != "" ]; do
		case "${1,,}" in
			32|64) bits="$1";;
			-h|--help) usage 0;;
			IsKey) command="IsKey";;
			*)
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				{ ! IsOption "$1" && [[ ! $key && "$command" == @(delete|exist|get|set|IsKey) ]]; } && { GetKeyValueArg "$@"; shift; continue; }
				{ ! IsOption "$1" && [[ ! $key && "$command" == @(edit|export) ]]; } && { GetKeyArg "$@"; shift; continue; }
				{ ! IsOption "$1" && [[ "$command" == "set" ]]; } && { { GetDataType "$@" || GetData "$@"; } && { shift; continue; }; }
				[[ "$command" == @(export|import|reg) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	args=( "$@" )
	EvalVar program$bits program
	EvalVar reg$bits reg
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

editCommand()
{
	[[ ! $key ]] && { start "$program"; return; }
	
	! IsElevated && { sudo --hide registry $bits edit "$key"; return; }
	
	# Start the registry program so the correct key is opened (x64 key or x86 virtual key)
	task start --wait --title "$title" "$program"

	RegJump.exe "$wkey"
}

importCommand()
{
	local file="$1"; shift; [[ ! file ]] && { MissingOperand "FILE"; }
	[[ ! -f "$file" ]] && { EchoErr "registry: cannot access \"$file\": No such file or directory"; return 1; }
	[[ $# != 0 ]]	&& usage 1
	start "$program" /s "$file"
}

exportCommand()
{
	local file="$1"; shift
	[[ ! $key ]] && { MissingOperand "KEY"; }
	[[ ! file ]] && { MissingOperand "FILE"; }
	[[ ! -f "$file" ]] && { EchoErr "registry: cannot access \"$file\": No such file or directory"; return 1; }
	[[ $# != 0 ]]	&& usage 1
	start "$program" /e "$file" "$key"
}

closeCommand()
{
	! IsTaskRunning $program && return 0
	WinClose "$title"
}

deleteCommand()
{	
	"$reg" delete "$wkey" "${value[@]}" /f >& /dev/null
}

# TODO: use /proc/registry for speed?
getCommand()
{
	if [[ $value ]]; then
		result="$( "$reg" query "$wkey" "${value[@]}" 2>&1 )" || return
		echo "$result" | sed -n '3p' | cut -d" " -f 13-
	else
		"$reg" query "$wkey"
	fi
}

existCommand()
{
	"$reg" query "$wkey" "${value[@]}" >& /dev/null
}

setCommand()
{
	"$reg" add "$wkey" "${value[@]}" "${dataType[@]}" /f "${data[@]}" #2>&1 
}

regCommand()
{
	"$reg" "$@"
}

MapKeyAlias()
{
	case "$1" in
		run) key="HKLM/Software/Microsoft/Windows/CurrentVersion/Run";;
		urun) key="HKCU/Software/Microsoft/Windows/CurrentVersion/Run";;
		*) key="$1"
	esac
	key="${key}/" # key in POSIX format (/)
	wkey="${key////\\}" # key in Windows format (\)
}

GetKeyArg()
{
	[[ $# == 0 ]] && MissingOperand "key"
	key=$(wtu "$1") # make sure arguments are in POSIX format
	MapKeyAlias "$key"
}

GetKeyValueArg()
{
	[[ $# == 0 ]] && MissingOperand "key"
	local keyValue=$(wtu "$1") # make sure arguments are in POSIX format

	MapKeyAlias "${keyValue%*/*}"

	# get the value after the last /
	value="${keyValue##*/}"
	[[ "$value" == "$keyValue" ]] && value=""
	if [[ "$value" == "(Default)" ]]; then
		value=( /v "" )
	elif [[ $value ]]; then
		value=( /v "$value" )
	else
		unset value
	fi
}

GetDataType()
{
	[[ $dataType || "$1" != +(REG_SZ|REG_MULTI_SZ|REG_EXPAND_SZ|REG_DWORD|REG_QWORD|REG_BINARY|REG_NONE) ]] && return 1
	dataType=( /t "$1" )
}

GetData()
{
	[[ $data ]] && return 1
	data=(/d "$1") || data=()
}

IsKeyCommand()
{
	local validPrefixes=( HKCR HKCU HKLM HKU HKCC HKEY_CLASSES_ROOT HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS HKEY_CURRENT_CONFIG )
	prefix="${key%%/*}"
	echo $prefix
	IsInArray "$prefix" validPrefixes
}

run "$@"
