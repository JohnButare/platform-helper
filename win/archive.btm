@echo off
SetLocal

REM Initialize
set JavaArchiveExtensions=xpi ear jar war
set RegularArchiveExtensions=7z zip 
set ArchiveExtensions=%RegularArchiveExtensions %JavaArchiveExtensions

set ArchiveFiles=
for %extension in (%ArchiveExtensions) set ArchiveFiles=%ArchiveFiles *.%extension

REM Arguments
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

set command=
iff %# gt 0 then
  set command=%1
  shift
endiff

iff not IsLabel %command goto usage

REM Run command
gosub %command
quit %_?

:usage
text 
Archive, compression, and encryption utility.
usage: archive ExtractRecursive ExtractDir
  ExtractRecursive file [dest](CWD) - extract file and all archive files inside it recursively
    /xf <archives> - # separated list of files to exclude from the recursive extract
  ExtractDir file SrcDir [DestDir] - extract SrcDir from the specified archvie file to DestDir
  IsArchive file - return 1 if file is an archive
	
endtext
quit 1

:ExtractDir

REM Arguments

if %# == 0 goto usage
set ArchiveFile=%@UnQuote[%1]
shift

if %# == 0 goto usage
set SrcDir=%@UnQuote[%1]
shift

set DestDir=%_cwd
iff %# != 0 then
	set DestDir=%1
	shift
endiff

if %# != 0 goto usage

REM Existence checks

iff not IsFile "%ArchiveFile" then
	echo %ArchiveFile does not exist.
	return 1
endiff

iff not IsDir "%DestDir" then
	echo %DestDir does not exist.
	return 1
endiff

iff IsDir "%DestDir\%SrcDir" then
	echo Source directory %SrcDir already exists in %DestDir.
	return 1
endiff

REM Setup the working directory
set WorkingDir=%DestDir\ArchiveTemp_%@time[%time]
md /s "%WorkingDir"

REM Copy the archive file to a local directory
echo Copying %@FileName[%ArchiveFile]...
copy /g "%ArchiveFile" "%WorkingDir"
set ArchiveFile=%WorkingDir\%@FileName[%ArchiveFile]

REM Extract the SrcDir
7z.exe x "%ArchiveFile" -o"%WorkingDir" -ir!"%SrcDir"

REM Verify existence of the SrcDir in the extracted archive
set SrcDirFull=%@FindDir["%WorkingDir" "%SrcDir"]
iff "%SrcDirFull" == "" then
	echo Could not find %SrcDir in the archive.
	call DelDir "%WorkingDir"
	return 1
endiff

REM Move the SrcDir to the DestDir
mv "%SrcDirFull" "%DestDir"

REM Cleanup
call DelDir "%WorkingDir"

return 0

:ExtractRecursive

REM Initialize
set top=true
set DeleteTopArchiveFile=

REM Arguments

if %# == 0 goto usage
set file=%@UnQuote[%1]
shift

set DestDir=%_cwd
iff %# != 0 then
	set DestDir=%1
	shift
endiff

iff "%1" == "/xf" then
  set ExcludeArchives=%@UnQuote[%@replace[#, ,%@quote[%2]]]
  shift 2
endiff

if %# != 0 goto usage

set DestDir=%@full[%DestDir]
iff not IsDir "%DestDir%" then
	echo Directory %DestDir does not exist.
	return 1
endiff

REM Make sure the archive file is in the destination directory for speed
iff not IsFile "%DestDir\%@FileName[%file]" then
	echo Copying %@FileName[%file]...
	copy /g "%file" "%DestDir"
	set DeleteTopArchiveFile=true
endiff
set file=%DestDir\%@FileName[%file]

set NumArchives=0
gosub ExtractRecurse
echo Extracted the contents of %NumArchives compressed files.

return

:ExtractRecurse
echo.
echo ************************************************************************************************
echo * Processing %@right[-%@len[%DestDir],%@full[%file]]
echo ************************************************************************************************

iff not IsFile "%file" then
  echo File %file does not exist.
  return 1
endiff

set NumArchives=%@eval[%NumArchives + 1]

pushd %@path[%file]
set ArchiveFile=%@FileName[%file]
set ArchiveName=%@name[%file]
set ArchiveExt=%@ext[%ArchiveFile]

REM Drop extensions for regular archive extensions in the extracted folder name 
REM Examples:  name.zip extracts to name, name.ear extracts to name.ear.extracted temporarily to avoid naming conflicts and is then renamed to name.ear 
iff %@IsInList[%ArchiveExt% %RegularArchiveExtensions] == 1 then
	set ExtractDirName=%ArchiveName
	set DesiredExtractDirName=%ArchiveName
else
	set ExtractDirName=%ArchiveFile%.extracted
	set DesiredExtractDirName=%ArchiveFile%%
endiff

REM Remove  extraction directory if present
iff IsDir "%ExtractDirName" then
	call ask `%ExtractDirName% already exists.  Do you want to delete it?` y
	if %? == 0 quit 1
	call DelDir "%ExtractDirName%"
endiff

7z.exe x -o"%ExtractDirName%" "%ArchiveFile%"
iff %? != 0 then
  call ask `Extract error %result.  Continue with extraction? ` y 10
  if %? == 0 quit %?
endiff

REM Delete the archive file
iff defined DeleteTopArchiveFile .or. not defined top then
	del /q "%ArchiveFile%" 
endiff

REM Rename the extracted directory to the preferred name if the archive file is not the target desired name
iff not IsDir "%DesiredExtractDirName%" .and. not IsFile "%DesiredExtractDirName%" then

  ren /q "%ExtractDirName%" "%DesiredExtractDirName%"
	iff %? != 0 then
		echo Waiting to try again (file in use)....
		sleep 1
		ren /q "%ExtractDirName%" "%DesiredExtractDirName%"
		if %? != 0 quit %?
	endiff
	
	set ExtractDirName=%DesiredExtractDirName%
	
endiff

REM Change to the compressed folder 
cd "%ExtractDirName"
if %? != 0 quit %?

REM If the comrpessed folder only contains  one directory that is the same name as the compressed file, move it's contents up
iff %@NumFiles[.] == 1 .and. IsDir "%ArchiveName" then

	REM Move the content of the directory up
	iff %@NumFiles[%ArchiveName] gt 0 then
		*cd "%ArchiveName"
		mv * ..
		*cd ..
	endiff
	
	REM Remove the directory
	rd "%ArchiveName"
	if %? != 0 quit %?
	
endiff

REM We are no longer on the top directory
set top=

REM Extract all files with an archive extension
for /r %file in (%ArchiveFiles) (
	iff %@IsInList[%@quote[%@FileName[%file]] wild %ExcludeArchives] == 0 then
		gosub ExtractRecurse
	endiff
)

popd

return

:IsArchive

set ext=%@ext[%@UnQuote[%$]]
if "%ext" == "" set ext=%@UnQuote[%$]

return %@IsInList["%ext" %ArchiveExtensions]
