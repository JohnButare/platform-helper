@echo off
SetLocal

REM Initialize
set ToolsDir=%programs\Debugging Tools for Windows (%@OsArchitecture[])
set WinDbg=%ToolsDir\windbg.exe
set DbgHelp=%@if[ IsFile "%ToolsDir\dbghelp.dll",%ToolsDir\dbghelp.dll,%WinDir\system32\dbghelp.dll]
set SymbolServerSupported=%@if[ IsFile "%ToolsDir\dbghelp.dll",true,]
set SymStore=%ToolsDir\SymStore
set SymCheck=%ToolsDir\SymChk.exe

set DebugTools=VisualStudio ProcessExplorer

set SymbolDir=
set LocalSymbolDir=%PublicData\symbols
set MicrosoftSymbolDir=%LocalSymbolDir\MicrosoftPublicSymbols
set VsSymbolCacheDir=%LocalSymbolDir

REM symbol alias does not work on the symbol server
switch %ComputerName
case oversoul .or. azSedevstg1
  set SymbolServer=%ComputerName
default
  set SymbolServer=symbols
endswitch
set LanSymbolDir=\\%SymbolServer\symbols

set MicrosoftSymbolServer=http://msdl.microsoft.com/download/symbols

call VisualStudio init
set VsKey=%VsRegistryKey\Debugger

set ProcessExplorerKey=HKCU\Software\Sysinternals\Process Explorer

REM Arguments
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

set command=symbols
iff %# gt 0 .and. IsLabel %1 then
  set command=%1
  shift
endiff

iff not IsLabel %command goto usage

REM Run command
gosub %command
set result=%_?

EndLocal /d _NT_SYMBOL_PATH _NT_SOURCE_PATH

quit %result

:usage
text 
usage: debugging [command](symbols)
  global|DrWatson|WinDbg|WinDbgClip|kd|KernelDump|KernelZoom|kz|LiveKd - start various debuggers
  configure [all|ProcessExplorer|VisualStudio](all)
  symbols [cd|info|init|internet|update](info)
endtext
quit 1

:global
start /pgm "%programs32\Debugging Tools for Windows\gflags.exe"
return

:WinDbg
start /pgm "%WinDbg" %$
return

:WinDbgClip
echo %@ClipW[%WinDbg] >& nul:
return

:LiveKd
start /pgm LiveKd.exe
return


:DrWatson
start /pgm drwtsn32.exe
return

:kd
start /pgm kd.exe
return

:KernelDump
start /pgm kdump kd.exe -z
return 

:KernelZoon
:kz
start /pgm kernrate -z ntoskrnl -z hal
return

:ValidateLanSymbolServer

iff %@IsHostAvailable[%SymbolServer] == 1 then
	call host prepare %SymbolServer
	iff IsDir "%LanSymbolDir" then
		return 0
	endiff
endiff
	
echo The symbol server %SymbolServer is not available.
quit 1

:ValidateSymCheck

iff not IsFile "%SymCheck" then
	echo Debugging tools for windows is not installed.
	quit 1
endiff

return

:configure

set command=All
iff %# gt 0 then
	set command=Configure%1
	shift
endiff
if not IsLabel %command goto usage

gosub %command
return %_?

return

:ConfigureAll
for DebugTool in (%DebugTools) gosub Configure%DebugTool
return

:ConfigureVisualStudio

REM Return if VisualStudio is not installed
if %@RegQuery[%VsKey\SourceServerExtractToDirectory] == -1 return 1

gosub InitSymbolDir

call MakeDir "%VsSymbolCacheDir"
call registry.btm 32 set %VsKey\SymbolCacheDir REG_SZ %VsSymbolCacheDir

echo Visual Studio, Debug, Options and Settings..., Symbols, check Microsoft Symbol Servers
REM call registry.btm 32 set %VsKey\SymbolPath REG_SZ %MicrosoftSymbolDir*%MicrosoftSymbolServer
REM call registry.btm 32 set %VsKey\SymbolPathState REG_SZ 10

call registry.btm 32 set %VsKey\SourceServerExtractToDirectory REG_SZ %SymbolDir\source

return 0

:ConfigureProcessExplorer

REM Intitialize
set PeSymbolPath=%@RegQuery["%ProcessExplorerKey\SymbolPath"]
set PeDbgHelp=%@RegQuery["%ProcessExplorerKey\DbgHelpPath"]

REM Return if process explorer is not installed or the symbol path has not changed
iff  "%PeSymbolPath" == "-1" .or. ("%PeSymbolPath" == "%_NT_SYMBOL_PATH" .and. "%PeDbgHelp" == "%DbgHelp") then
	return 0
endiff

gosub InitSymbolDir

call app close ProcessExplorer
	
call registry.btm 32 set "%ProcessExplorerKey\SymbolPath" REG_SZ %_NT_SYMBOL_PATH
call registry.btm 32 set "%ProcessExplorerKey\DbgHelpPath" REG_SZ %DbgHelp
	
return

:symbols

set command=SymbolsInfo
iff %# gt 0 then
	set command=Symbols%1
	shift
endiff
if not IsLabel %command goto usage

gosub %command
return %_?

:InitSymbolDir

if "%SymbolDir" != "" return 0

REM Use the symbol server if available, otherwise use the local symbol dir
iff %@IsHostAvailable[%SymbolServer] == 1 then
	set SymbolDir=%LanSymbolDir
	call host prepare %SymbolServer
else
	set SymbolDir=%LocalSymbolDir
endiff

return

:SymbolsInit

REM Create local directories
if not exist "%LocalSymbolDir" md /s "%LocalSymbolDir"
if not exist "%LocalSymbolDir\source" md /s "%LocalSymbolDir\source"

gosub InitSymbolDir

REM Update the symbol and source paths
call SetVar _NT_SYMBOL_PATH "%@if[ defined SymbolServerSupported,srv*,]%SymbolDir"
call SetVar _NT_SOURCE_PATH "srv*%SymbolDir\source"

REM Initialize tools
gosub ConfigureAll

return 0

:SymbolsInternet

gosub InitSymbolDir
set _NT_SYMBOL_PATH=%_NT_SYMBOL_PATH;srv*%MicrosoftSymbolDir*%MicrosoftSymbolServer

return

:SymbolsInfo

echo _NT_SYMBOL_PATH=%_NT_SYMBOL_PATH
echo _NT_SOURCE_PATH=%_NT_SOURCE_PATH

iff %@RegQuery["%VsKey\SourceServerExtractToDirectory"] != -1 then
	echo.
	echo Visual Studio
	echo   path=%@RegQuery["%VsKey\SymbolPath"]
	echo   path state=%@RegQuery["%VsKey\SymbolPathState"]
	echo   cache dir=%@RegQuery["%VsKey\SymbolCacheDir"]
	echo   Source extract dir=%@RegQuery["%VsKey\SourceServerExtractToDirectory"]
endiff

iff %@RegQuery["%ProcessExplorerKey\SymbolPath"] != -1 then
  echo.
  echo Process Explorer
	echo   symbol path=%@RegQuery["%ProcessExplorerKey\SymbolPath"]
	echo   debug help path=%@RegQuery["%ProcessExplorerKey\DbgHelpPath"]
endiff

return

:SymbolsCd
if %# != 0 goto usage
cdd "%LanSymbolDir"
return

:SymbolsUpdate

gosub ValidateSymCheck
gosub ValidateLanSymbolServer

echo Updating symbol server with symbols from this computer....
"%SymCheck" /r "%system" /s "srv*%LanSymbolDir*%MicrosoftSymbolServer"

return 0
