#!/usr/bin/env bash
. function.sh

# bootstrap-remote [REMOTE|DIR](pi@pi1) - bootstrap a remote system

init()
{
	. "${BASH_SOURCE[0]%/*}/bootstrap-config.sh" || return
	remote="${1:-pi@pi1}"
}

run()
{
	init "$@" || return
	if ChrootHelper installed && ChrootHelper exists "$1"; then
		bootstrapChroot
	else
		bootstrapSsh
	fi
}

copyFiles() { scp "$BIN/bootstrap-init" "$BIN/bootstrap-config.sh" "$1"; }

bootstrapSsh()
{
	local host="$(GetSshHost "$remote")"
	
	power on "$host" || return
	sshWait || return
	sshConfigure || return

	while true; do 
		copyFiles "$remote:/tmp" || return # /tmp cleared on reboot
		sshUser || return
		ssh -Y -t $remote bash -l "/tmp/bootstrap-init --restart" && return # connect using X forwarding to allow use of the credential store			
		sshWait || return 
	done
}

sshConfigure()
{
	ssh $remote ls '~/.ssh >& /dev/null' && return
	ssh $remote '[[ -d ~/.ssh ]] || mkdir ~/.ssh' || return
	scp ~/.ssh/* ''$remote':~/.ssh' || return
}

# sshUser - if the user in the configuration exists use it
sshUser() { ssh $remote getent passwd $user >& /dev/null && remote="$user@$host"; return 0; } 

# sshWait - wait for the host to become available (after initial boot or reboot)
sshWait() 
{
	IsLocalAddress "$host" && { host=$(MdnsResolve "$host") || return; remote="$(SshUser "$remote")$host"; }
	IsAvailablePort "$host" 22 && return
	WaitForPort "$host" 22 || return
	return 0
}

bootstrapChroot()
{
	local dist="$remote" dir="$(ChrootHelper dir "$remote")"

	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }
	copyFiles "/tmp" || return; copyFiles "$dir/tmp" || return # some distributions mount our tmp
	ChrootHelper run "$dist" -s /bin/bash -d /tmp "/tmp/bootstrap-init" # -u $USER
}

run "$@"
