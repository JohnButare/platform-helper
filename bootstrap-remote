#!/usr/bin/env bash
# bootstrap-remote -> bootstrap-init -> bootstrap -> inst
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) prepare|run
Bootstrap a remote system.

	-cf,	--config-file=FILE	the configuration file to use"
}
		
init() { 	defaultCommand="run" configFile="$BIN/bootstrap-config.sh"; }

opt()
{
	case "$1" in
		-c|--config-file|-c=*|--config-file=*) ScriptOptGet "configFile" "$@" && ScriptCheckFile "$configFile";;
		*) return 1;;
	esac
}

#
# Prepare Command
#

prepareCommand()
{
	. "$configFile" || return

	cat <<-EOF
		Preparation:
		- docker
			apt-get update && apt install -y sudo apt-utils curl dialog openssh-client openssh-server
			adduser $user --gecos "" && sudo usermod -aG sudo $user && login $user
			mkdir ~/.ssh && scp -P $bootstrapProtocol $bootstrapHost:~/.ssh/"*" ~/.ssh && chown $user ~/.ssh/*; chmod 700 ~/.ssh/*
			[[ -f /assets/sshd_config ]] && sudo sed -i 's/^AllowUsers .*/AllowUsers git '"$user"'/' /assets/sshd_config && sudo /etc/init.d/ssh restart
	EOF
}

#
# Run Command
#

runUsage()
{
	echot "Usage: $(ScriptName) run TARGET
Run bootstrap on target.  Target is a remote host ([USER]@HOST[:PORT]), a chroot, or a WSL distribution."
}

runArgs() { ScriptArgGet "target" -- "$@"; shift; }

runArgEnd()
{
	bash="bash"
	bootstrapUser="$(ConfigGet "user" "$configFile")"; bootstrapUser="${bootstrapUser:-$USER}"
	coreFiles=( "$BIN/bootstrap-init" "$configFile" )
	userDefault="$USER"
}

runCommand()
{
	header "bootstrap-remote"
	
	if ChrootHelper installed && ChrootHelper exists "$target"; then
		type="chroot"
	elif wsl dist exists "$target"; then
		type="wsl"
	else
		type="ssh"
	fi

	RunFunction bootstrap "${type^}"
}

#
# chroot - bootstrap a chroot
#

bootstrapChroot()
{
	local dist="$target"
	local dir="$(ChrootHelper dir "$dist")"

	[[ $verbose ]] && echo "chroot dir=$dir"
	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }

	# copy core files
	copyCoreFiles "$dir/tmp" || return
	copyCoreFiles "tmp" || return # some chroots mount our tmp directory

	# run bootstrap-init
	runBootstrap || return
}

#
# SSH - bootstrap a remote host using SSH
#

bootstrapSsh()
{
	local host="$(GetSshHost "$target")"
	local port="$(GetSshPort "$target")"; port="${port:-$(SshHelper config "$host" port)}"
	local user="$(GetSshUser "$target")"; user="${user:-$userDefault}"

	local isHostLocal; GetIpAddress --quiet "$host" | IsIpLocal && isHostLocal="true"
	local sshArgs=( -p "$port" -oStrictHostKeyChecking=no )
	local scpArgs=( -P "$port" -oStrictHostKeyChecking=no )

	sshBootHost || return	
	sshConfigure || return
	runInit || return
	IsPlatform openwrt,ubiquiti --host && return
	
	while true; do 
		sshCheckBootstrapUser || return
		sshCopyCoreFiles || return
		runBootstrap && return
		sshReconnect || return		
	done
}

sshBootHost() # wait for the host to become available (after initial boot or reboot)
{
	# power on local hosts
	[[ $isHostLocal ]] && ! IsAvailablePort "$host" "$port" && { power on "$host" || return; }

	# resolve .local address - mDNS resolution does not work using SSH in Windows
	IsMdnsName "$host" && { host=$(MdnsResolve "$host") || return; }

	sshWait || return
	ScriptEval HostGetInfo "$target" || return
}

# sshCheckUser - if the bootstrap user exists use it
sshCheckBootstrapUser() 
{ 
	# bootstrap user already being used
	[[ "$bootstrapUser" == "$user" ]] && return

	# check if the bootstrap user exists
	hilight "${GREEN}Checking for bootstrap user $bootstrapUser..."
	! run getent passwd "$bootstrapUser" >& /dev/null && { echo "Bootstrp user $bootstrapUser does not exist"; return; }

	# the bootstrap user exists
	user="$bootstrapUser"
	echo "Bootstrap user $bootstrapUser exists and will be used for further configuration"
	sshConfigure || return
} 

sshConfigure()
{
	IsPlatform openwrt,ubiquiti --host && return

	hilight "Checking SSH configuration for $user..."
	run 'bash -s' <<-EOF && { echo "SSH is configured for $user"; return; }
		[[ -f "\$HOME/.ssh/authorized_keys" && -f "\$HOME/.ssh/known_hosts" ]] && exit 0
		[[ ! -d "\$HOME/.ssh" ]] && mkdir "\$HOME/.ssh"
		exit 1
	EOF

	echo "Configuring ssh for $user..."
	scp "${scpArgs[@]}" "$HOME/.ssh/"* ''"$user@$host"':~/.ssh' || return
}

sshCopyCoreFiles()
{
	hilight "Copying core files..."
	scp "${scpArgs[@]}" "${coreFiles[@]}" "$user@$host:/tmp" || return

	# ensure bootstrap user can update core files
	# - on Ubuntu, other users cannot modify files if ubuntu owns them, even if the file has other write permissions
	# - ignore errors, the bootstrap user can't change the file permissions and that is OK
	run 'bash -s' <<-EOF && return
		chmod ugo+rwx "/tmp/bootstrap-*" >& /dev/null
		chown root "/tmp/bootstrap-*" >& /dev/null
	EOF

	return 0
}

sshReconnect()
{
	hilight "Reconnecting to $host..."
	sleep 4
	sshWait || return 
}

sshWait()
{
	IsAvailablePort "$host" "$port" && return
	WaitForPort "$host" "$port" || return
}

#
# WSL - bootstrap a WSL distribution
#

bootstrapWsl()
{
	local dist="$target" dir="/tmp"

	if [[ "$(wsl get name)" != "$dist" ]]; then
		hilight "Mounting share..."
		dir="$(unc mount "//$(wsl get share)/$dist/tmp")" || return
	fi

	# copy core files
	copyCoreFiles "$dir" || return

	# run bootstrap-init
	runBootstrap || return
}

#
# helper
#

copyCoreFiles()
{
	local dir="$1"

	hilight "Copying core files..."

	cp "${coreFiles[@]}" "$dir" || return 
	run chmod ugo+rwx "/tmp/bootstrap-*" || return
}

installMicro()
{
	IsPlatform mips --host && return
	MicroHelper install "$host" || return
}

runInit()
{
	RunFunction runInit "${_platformLike^}" || return
}

runInitOpenwrt() { installMicro; }
runInitUbiquiti() { installMicro; }

runInitMac()
{
	local brew="/usr/local/bin/brew"; IsPlatform arm --host && brew="/opt/homebrew/bin/brew"

	run 'bash -s' <<-EOF
		[[ ! -f "$brew" ]] && /bin/bash -c "\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || exit
		eval "\$($brew shellenv)"
		! brew list bash >& /dev/null && { brew install bash || exit; }
		! InPath gmkdir && { brew install coreutils || exit; }
		exit 0
	EOF
}

runInitQnap()
{
	bash="/opt/bin/bash"

	run 'bash -s' <<-EOF
		export PATH=/opt/bin:\$PATH
		[[ ! -d "/opt/bin" ]] && { wget -O - "http://bin.entware.net/x64-k3.2/installer/generic.sh" | sudo /bin/sh || exit; }
		[[ ! -f "/opt/bin/stat" ]] && { sudo opkg install bash coreutils-stat iputils-ping || exit; }
		grep -q "$user" /etc/passwd | grep "/opt/bin/bash" && { sudo usermod --shell "/opt/bin/bash" "$user" || exit; }
		exit 0
	EOF
}

runBootstrap()
{
	local restart; [[ "$type" == "ssh" ]] && restart="--restart"

	hilight "Running bootstrap on $host..."
	runi "/tmp/bootstrap-init" "/tmp/$(GetFileName "$configFile")" "${globalArgs[@]}" $restart
}

# run command on host
run() { RunFunction run "${type^}" -- "$@"; }
runChroot() { ChrootHelper run "$dist" -s "/bin/bash" -d /tmp "$@"; }
runSsh() { ssh "$user@$host" "${sshArgs[@]}" -- "$@"; }
runWsl() { wsl.exe -d "$dist" "$@"; }

# run command on host interactively
runi() { RunFunction runi "${type^}" -- "$@"; }
runiChroot() { ChrootHelper run "$dist" -s /bin/bash -d /tmp "$bash" -l "$@"; }
runiSsh() { ssh -Yt "$user@$host" "${sshArgs[@]}" -- "$bash" -l "$@"; }
runiWsl() { wsl.exe -d "$dist" "$bash" -l "$@"; }

ScriptRun "$@"
