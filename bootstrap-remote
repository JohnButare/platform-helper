#!/usr/bin/env bash
. script.sh

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... TARGET [SSH_PORT](22)
Bootstrap a remote system.
Target is a remote host ([USER]@HOST), a chroot, or a WSL distribution.
		
	-cf,	--config-file=FILE	the configuration file to use"
}

init()
{
	defaultCommand="run"
	bootstrapUser="$(ConfigGet "user" "$configFile")"; bootstrapUser="${bootstrapUser:-$USER}"
	configFile="$BIN/bootstrap-config.sh"
	coreFiles=( "$BIN/bootstrap-init" "$configFile" )
	portDefault="22"
	userDefault="$USER"
}

opt()
{
	case "$1" in "") : ;;
		-c|--config-file|-c=*|--config-file=*) ScriptOptGet "configFile" "$@" && ScriptCheckFile "$configFile";;
		*) return 1;;
	esac
}

args()
{
	ScriptArgGet "target" -- "$@"; shift
	IsInteger "$1" && { ScriptArgGet "portDefault" -- "$@"; shift; }
	return 0
}

runCommand()
{
	header "bootstrap-remote"
	
	if ChrootHelper installed && ChrootHelper exists "$target"; then
		type="chroot"
	elif wsl dist exists "$target"; then
		type="wsl"
	else
		type="ssh"
	fi

	RunFunction bootstrap "${type^}"
}

#
# chroot - bootstrap a chroot
#

bootstrapChroot()
{
	local dist="$target"
	local dir="$(ChrootHelper dir "$dist")"

	[[ $verbose ]] && echo "chroot dir=$dir"
	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }

	# copy core files
	copyCoreFiles "$dir/tmp" || return
	copyCoreFiles "tmp" || return # some chroots mount our tmp directory

	# run bootstrap-init
	runBootstrap || return
}

#
# SSH - bootstrap a remote host using SSH
#

bootstrapSsh()
{
	local host="$(GetSshHost "$target")"
	local port="$(GetSshPort "$target")"; port="${user:-$portDefault}"
	local user="$(GetSshUser "$target")"; user="${user:-$userDefault}"

	local isHostLocal; GetIpAddress --quiet "$host" | IsIpLocal && isHostLocal="true"
	local sshArgs=( -p "$port" -oStrictHostKeyChecking=no )
	local scpArgs=( -P "$port" -oStrictHostKeyChecking=no )

	sshBootHost || return
	sshConfigure || return

	while true; do 

		hilight "Copying core files..."
		scp "${scpArgs[@]}" "${coreFiles[@]}" "$user@$host:/tmp" || return

		sshCheckUser || return
		runBootstrap && return

		hilight "Reconnecting to $host..."
		sleep 2
		sshWait || return 
		
	done
}

sshBootHost() # wait for the host to become available (after initial boot or reboot)
{
	# power on local hosts
	[[ $isHostLocal ]] && ! IsAvailablePort "$host" "$port" && { power on "$host" || return; }

	# resolve .local address - mDNS resolution does not work using SSH in Windows
	IsMdnsName "$host" && { host=$(MdnsResolve "$host") || return; }

	sshWait || return
}

sshWait()
{
	IsAvailablePort "$host" "$port" && return
	WaitForPort "$host" "$port" || return
}

# sshCheckUser - if the user specified in the configuration exists make sure we use it
sshCheckUser() 
{ 
	[[ "$bootstrapUser" == "$user" ]] && return
	run getent passwd "$bootstrapUser" >& /dev/null && user="$bootstrapUser"
	return 0
} 

sshConfigure()
{
	run 'bash -s' <<-EOF && return
		[[ -f "\$HOME/.ssh/authorized_keys" ]] && exit 0
		[[ ! -d "\$HOME/.ssh" ]] && mkdir "\$HOME/.ssh"
		exit 1
	EOF

	hilight "Configuring ssh..."
	scp "${scpArgs[@]}" "$HOME/.ssh/"* ''"$user@$host"':~/.ssh' || return
}

#
# WSL - bootstrap a WSL distribution
#

bootstrapWsl()
{
	local dist="$target" dir="/tmp"

	if [[ "$(wsl get name)" != "$dist" ]]; then
		hilight "Mounting share..."
		dir="$(unc mount "//$(wsl get share)/$dist/tmp")" || return
	fi

	# copy core files
	copyCoreFiles "$dir" || return

	# run bootstrap-init
	runBootstrap || return
}

#
# helper
#

copyCoreFiles()
{
	local dir="$1"

	hilight "Copying core files..."

	cp "${coreFiles[@]}" "$dir" || return 
	run chmod +x "/tmp/bootstrap-*" || return
}

runBootstrap()
{
	local restart; [[ "$type" == "ssh" ]] && restart="--restart"

	hilight "Running bootstrap on $host..."
	runi "/tmp/bootstrap-init" "/tmp/$(GetFileName "$configFile")" "${globalArgs[@]}" $restart
}

# run

run() { RunFunction run "${type^}" -- "$@"; }

runChroot() { ChrootHelper run "$dist" -s /bin/bash -d /tmp "$@"; }
runSsh() { ssh "$user@$host" "${sshArgs[@]}" -- "$@"; }
runWsl() { wsl.exe -d "$dist" "$@"; }

# run interactive

runi() { RunFunction runi "${type^}" -- "$@"; }

runiChroot() { ChrootHelper run "$dist" -s /bin/bash -d /tmp bash -l "$@"; }
runiSsh() { ssh -Yt "$user@$host" "${sshArgs[@]}" -- bash -l "$@"; }
runiWsl() { wsl.exe -d "$dist" bash -l "$@"; }

ScriptRun "$@"
