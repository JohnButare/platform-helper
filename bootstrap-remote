#!/usr/bin/env bash
. function.sh

# bootstrap-remote HOST|DIR [SSH_PORT](22) [CONFIG_FILE] - bootstrap a remote system

init()
{
	host="$(GetSshHost "$1")"; shift; [[ ! $host ]] && MissingOperand "host"
	port="22"; IsInteger "$2" && { port="$2"; shift; }
	configFile="$BIN/bootstrap-config.sh"; [[ -f "$2" ]] && { configFile="$(GetFullPath "$2")"; shift; }

	sshArgs=( -p $port -oStrictHostKeyChecking=no )
	scpArgs=( -P $port -oStrictHostKeyChecking=no )
	coreFiles=( "$BIN/bootstrap-init" "$configFile" )

	user="$(GetSshUser "$host")"; user="${user:-$USER}"
	bootstrapUser="$(ConfigGet "user" "$configFile")"; bootstrapUser="${bootstrapUser:-$USER}"
}

run()
{
	init "$@" || return
	if ChrootHelper installed && ChrootHelper exists "$1"; then
		bootstrapChroot
	else
		bootstrapSsh
	fi
}

#
# chroot - bootstrap a chroot host
#

bootstrapChroot()
{
	local dist="$host" dir="$(ChrootHelper dir "$host")"

	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }

	# copy core files
	hilight "Copying core files..."
	cp "${coreFiles[@]}" "/tmp" || return # some chroots mount our tmp directory
	cp "${coreFiles[@]}" "$dir/tmp" || return 

	# run bootstrap-init in the chroot
	ChrootHelper run "$dist" -s /bin/bash -d /tmp "/tmp/bootstrap-init" "/tmp/$(GetFileName "$configFile")" # -u $USER
}

#
# SSH - bootstrap a remote host using SSH
#

bootstrapSsh()
{
	local result isHostLocal="$(IsIpLocal "$(GetIpAddress "$host")")" # host is local to the current network

	sshBootHost || return
	sshConfigure || return

	while true; do 

		hilight "Copying core files..."
		scp "${scpArgs[@]}" "${coreFiles[@]}" "$user@$host:/tmp" || return

		sshCheckUser || return

		# connect using X forwarding to allow use of the credential store
		sshDo -Yt -- bash -l "/tmp/bootstrap-init /tmp/$(GetFileName "$configFile") --restart"
		result="$?"; [[ "$result" != "100" ]] && return "$result"

		hilight "Reconnecting to $host..."
		sleep 2
		sshWait || return 
		
	done
}

sshBootHost() # wait for the host to become available (after initial boot or reboot)
{
	! IsAvailable "$host" && [[ $isHostLocal ]] && { power on "$host" || return; }

	# resolve a .local address now in case mDNS resolution does not work using SSH
	IsMdnsName "$host" && { host=$(MdnsResolve "$host") || return; }

	sshWait || return
}

sshWait()
{
	IsAvailablePort "$host" $port && return

	if [[ $isHostLocal ]]; then
		WaitForAvailable "$host" || return
	else
		WaitForPort "$host" $port || return
	fi
}

# sshCheckUser - if the user specified in the configuration exists make sure we use it
sshCheckUser() 
{ 
	[[ "$bootstrapUser" == "$user" ]] && return
	sshDo -- getent passwd "$bootstrapUser" >& /dev/null && user="$bootstrapUser"
	return 0
} 

sshConfigure()
{
	sshDo 'bash -s' <<-EOF && return
		[[ -f "\$HOME/.ssh/authorized_keys" ]] && exit 0
		[[ ! -d "\$HOME/.ssh" ]] && mkdir "\$HOME/.ssh"
		exit 1
	EOF

	hilight "Configuring ssh..."
	scp "${scpArgs[@]}" "$HOME/.ssh/"* ''"$user@$host"':~/.ssh' || return
}

sshDo() { ssh "$user@$host" "${sshArgs[@]}" "$@"; }

run "$@"
