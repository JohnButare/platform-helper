#!/usr/bin/env bash
. function.sh

# bootstrap-remote HOST|DIR [SSH_PORT](22) - bootstrap a remote system

init()
{
	. "${BASH_SOURCE[0]%/*}/bootstrap-config.sh" || return

	remote="${1}"; [[ ! $remote ]] && MissingOperand "host"
	port="${2:-22}"
	sshArgs=( $remote -p $port -oStrictHostKeyChecking=no )
	scpArgs=( -P $port -oStrictHostKeyChecking=no )
	coreFiles=( "$BIN/bootstrap-init" "$BIN/bootstrap-config.sh" )
}

run()
{
	init "$@" || return
	if ChrootHelper installed && ChrootHelper exists "$1"; then
		bootstrapChroot
	else
		bootstrapSsh
	fi
}

#
# chroot - bootstrap a chroot host
#

bootstrapChroot()
{
	local dist="$remote" dir="$(ChrootHelper dir "$remote")"

	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }

	# copy core files
	hilight "Copying core files..."
	cp "${coreFiles[@]}" "/tmp" || return # some chroots mount our tmp directory
	cp "${coreFiles[@]}" "$dir/tmp" || return 

	# run bootstrap-init in the chroot
	ChrootHelper run "$dist" -s /bin/bash -d /tmp "/tmp/bootstrap-init" # -u $USER
}

#
# SSH - bootstrap a remote host using SSH
#

bootstrapSsh()
{
	local host="$(GetSshHost "$remote")" remoteUser="$(GetSshUser "$remote")" result
	
	remoteUser="${remoteUser:-$USER}"

	sshBootHost || return
	sshConfigure || return

	while true; do 

		hilight "Copying core files..."
		scp "${scpArgs[@]}" "${coreFiles[@]}" "$remote:/tmp" # /tmp cleared on reboot

		sshCheckUser || return

		ssh "${sshArgs[@]}" -Yt -- bash -l "/tmp/bootstrap-init --restart" # connect using X forwarding to allow use of the credential store
		result="$?"; [[ "$result" != "100" ]] && return "$result"

		hilight "Reconnecting to $host..."
		sleep 2
		sshWait || return 
		
	done
}

sshBootHost() # wait for the host to become available (after initial boot or reboot)
{
	! IsAvailable "$host" && { power on "$host" || return; }

	# resolve a .local address now in case mDNS resolution does not work using SSH
	if IsMdnsName "$host"; then
		host=$(MdnsResolve "$host") || return
		remote="$(sshCheckUser "$remote"):$host"
	fi

	sshWait || return
}

sshWait()
{
	IsAvailablePort "$host" $port && return	
	WaitForPort "$host" $port || return
}

sshConfigure()
{
	ssh "${sshArgs[@]}" 'bash -s' <<EOF && return
[[ -f "\$HOME/.ssh/authorized_keys" ]] && exit 0
[[ ! -d "\$HOME/.ssh" ]] && mkdir "\$HOME/.ssh"
exit 1
EOF

	hilight "Configuring ssh..."
	scp "${scpArgs[@]}" "$HOME/.ssh/"* ''$remote':~/.ssh' || return
}

# sshCheckUser - if the user specified in the configuration exists make sure we use it
sshCheckUser() 
{ 
	[[ "$user" == "$remoteUser" ]] && return
	ssh "${sshArgs[@]}" -- getent passwd $user >& /dev/null && remote="$user@$host"
	return 0
} 

run "$@"
