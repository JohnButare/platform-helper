#!/usr/bin/env bash
. function.sh

# bootstrap-remote [HOST|DIR](pi@pi1) [SSH_PORT](22) - bootstrap a remote system

init()
{
	. "${BASH_SOURCE[0]%/*}/bootstrap-config.sh" || return
	remote="${1:-pi@pi1}"
	port="${2:-22}"
	coreFiles=( "$BIN/bootstrap-init" "$BIN/bootstrap-config.sh" )
}

run()
{
	init "$@" || return
	if ChrootHelper installed && ChrootHelper exists "$1"; then
		bootstrapChroot
	else
		bootstrapSsh
	fi
}

#
# chroot - bootstrap a chroot host
#

bootstrapChroot()
{
	local dist="$remote" dir="$(ChrootHelper dir "$remote")"

	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }

	# copy core files
	cp "${coreFiles[@]}" "/tmp" || return # some chroots mount our tmp directory
	cp "${coreFiles[@]}" "$dir/tmp" || return 

	# run bootstrap-init in the chroot
	ChrootHelper run "$dist" -s /bin/bash -d /tmp "/tmp/bootstrap-init" # -u $USER
}

#
# SSH - bootstrap a remote host using SSH
#

bootstrapSsh()
{
	local host="$(GetSshHost "$remote")" remoteUser="$(GetSshUser "$remote")" result
	
	remoteUser="${remoteUser:-$USER}"

	sshBootHost || return
	sshConfigure || return

	while true; do 
		scp -P $port "${coreFiles[@]}" "$remote:/tmp" # /tmp cleared on reboot
		sshCheckUser || return
		ssh -Y -t $remote -p $port bash -l "/tmp/bootstrap-init --restart" # connect using X forwarding to allow use of the credential store
		result="$?"; [[ "$result" != "100" ]] && return "$result"
		sshWait || return 
	done
}

sshBootHost() # wait for the host to become available (after initial boot or reboot)
{
	! IsAvailable "$host" && { power on "$host" || return; }

	# resolve a .local address now in case mDNS resolution does not work using SSH
	if IsLocalAddress "$host"; then
		host=$(MdnsResolve "$host") || return
		remote="$(sshCheckUser "$remote"):$host"
	fi

	sshWait || return
}

sshWait()
{
	IsAvailablePort "$host" $port && return	
	WaitForPort "$host" $port || return
}

sshConfigure()
{
	ssh $remote -p $port ls '~/.ssh/authorized_keys >& /dev/null' && return # return if SSH is already configured

	ssh $remote -p $port '[[ -d ~/.ssh ]] || mkdir ~/.ssh' || return
	scp -P $port ~/.ssh/* ''$remote':~/.ssh' || return
}

# sshCheckUser - if the user specified in the configuration exists make sure we use it
sshCheckUser() 
{ 
	[[ "$user" == "$remoteUser" ]] && return
	ssh $remote getent passwd $user >& /dev/null && remote="$user@$host"
	return 0
} 

run "$@"
