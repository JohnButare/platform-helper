#!/usr/bin/env bash
. script.sh || exit

usage() { ScriptUsage "$1" "Usage: $(ScriptName) [prepare|run](run)"; }
init() { defaultCommand="run" config="$BIN/bootstrap-config.sh"; }

#
# Prepare Command
#

prepareUsage() { echot "Usage: $(ScriptName) prepare\nShow steps to prepare a host."; }

prepareCommand()
{
	local user="$(ConfigGet "user" "$config")"
	local host="$HOST"
	local port="$(SshHelper config get "$HOST" port)"

	cat <<-EOF
		Preparation:
		- Docker
			apt-get update && apt install -y sudo apt-utils curl dialog openssh-client openssh-server
			adduser $user --gecos "" && sudo usermod -aG sudo $user && login $user
			mkdir ~/.ssh && scp -P $port $host:~/.ssh/"*" ~/.ssh && chown $user ~/.ssh/*; chmod 700 ~/.ssh/*
			[[ -f /assets/sshd_config ]] && sudo sed -i 's/^AllowUsers .*/AllowUsers git '"$user"'/' /assets/sshd_config && sudo /etc/init.d/ssh restart
		- SSH
			sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' && systemctl restart sshd
		- Raspberry Pi OS password: pi/raspberry
		- Ubuntu password: ubuntu/ubuntu
	EOF
}

#
# Run Command
#

runUsage()
{
	echot "Usage: $(ScriptName) run TARGET
Bootstrap a remote system.  Target is a remote host ([USER]@HOST[:PORT]), a chroot, or a WSL distribution.
	
flow: bootstrap-remote -> bootstrap-init -> bootstrap -> inst
	
example:
	cls; bootstrap-remote casaos@zima1
	cls; bootstrap-remote ubuntu@pi9 --bin=//ender.hagerman.butare.net/system/usr/local/data/bin
	cls; bootstrap-remote rosie-lvm1 --bin=//rosie.hagerman.butare.net/root/usr/local/data/bin:22
	cls; bootstrap-remote ln1 --bin=//ssh.butare.net/root/usr/local/data/bin:608

	-b,	--bin=UNC				bin directory UNC, defaults to bootstrapBin in the configuration file
	-f, --config=FILE		the configuration file to use, defaults to bootstrap-config.sh
	-i, --install=DIR		application installation directory, defaults to search with FindInstallFile"
}

runArgStart() { unset -v bin installDir; }

runOpt() 
{
	case "$1" in
		-b|--bin|-b=*|--bin=*) ScriptOptGet "bin" "$@" || return;;
		-c|--config|-c=*|--config-file=*) ScriptOptGet "config" "$@" && ScriptCheckFile "$config";;
		-i|-i=*|--install|--install=*) ScriptOptGet "install" "$@";;
		*) return 1
	esac
}

runArgs() { ScriptArgGet "target" -- "$@"; shift; }

runArgEnd()
{
	bash="bash"
	user="$(ConfigGet "user" "$config")"; user="${user:-$USER}"
	coreFiles=( "$BIN/bootstrap-init" "$config" )
}

runCommand()
{
	header "bootstrap-remote"
	
	if ChrootHelper installed && ChrootHelper exists "$target"; then
		type="chroot"
	elif wsl dist exists "$target"; then
		type="wsl"
	else
		type="ssh"
	fi

	RunFunction bootstrap "${type^}"
}

# runChroot - bootstrap a chroot
bootstrapChroot()
{
	local dist="$target"
	local dir="$(ChrootHelper dir "$dist")"

	log1 "chroot dir=$dir"
	[[ ! -d "$dir" ]] && { EchoErr "$dist root directory "$dir" does not exist"; return 1; }

	# copy core files
	copyCoreFiles "$dir/tmp/bootstrap/" || return
	copyCoreFiles "/tmp/bootstrap/" || return # some chroots mount our tmp directory

	# run bootstrap-init
	bootstrapRun || return
}

# runSsh - bootstrap a remote host using SSH
bootstrapSsh()
{
	local host="$(GetSshHost "$target")"
	local port="$(GetSshPort "$target")"; port="${port:-$(SshHelper config get "$host" port)}"
	local sshUser="$user"; [[ "$target" =~ @ ]] && sshUser="$(GetSshUser "$target")"

	local isHostLocal; GetIpAddress --quiet "$host" | IsIpLocal && isHostLocal="true"
	local sshCommonArgs=( -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ) # trust new hosts, don't modify known_hosts
	local sshArgs=( -p "$port" "${sshCommonArgs[@]}" )
	local scpArgs=( -P "$port" "${sshCommonArgs[@]}" )
	local rsyncSshArgs="ssh ${sshCommonArgs[@]}"
	local rsyncArgs=( --rsh "$rsyncSshArgs" )

	sshBootHost || return	
	sshCheckUserPassword "$sshUser" || return
	sshCheckUser || return
	sshGetHostInfo || return
	sshConfigure "$sshUser" || return
	bootstrapInit || return
	IsPlatform openwrt,ubiquiti --host && return
	
	while true; do 
		sshCheckUser || return
		sshCopyCoreFiles || return
		bootstrapRun && return
		sshReconnect || return		
	done
}

# runWsl - bootstrap a WSL distribution
bootstrapWsl()
{
	local dist="$target" dir="/tmp"

	if [[ "$(wsl get name)" != "$dist" ]]; then
		hilight "Mounting share..."
		dir="$(unc mount "//$(wsl get share)/$dist/tmp")" || return
	fi

	copyCoreFiles "$dir" && bootstrapRun
}

#
# Bootstrap Helper
#

bootstrapInit() { RunPlatform bootstrapInit --host; }
bootstrapInitOpenwrt() { installMicro; }
bootstrapInitUbiquiti() { installMicro; }

bootstrapInitMac()
{
	local brew="/usr/local/bin/brew"; bash="/usr/local/bin/bash" 
	IsPlatform arm --host && brew="/opt/homebrew/bin/brew" bash="/opt/bin/bash"

	# host specific configuration
	IsPlatform mac --host && sshArgs+=(-t)

	# initialize
	run "$(cat <<-EOF
		[[ ! -f "$brew" ]] && { /bin/bash -c "\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || exit; }
		eval "\$($brew shellenv)"
		! brew list bash >& /dev/null && { brew install bash || exit; }
		! which -p gmkdir >&/dev/null && { brew install coreutils || exit; }
		exit 0
		EOF
	)"
}

bootstrapInitQnap()
{
	bash="/opt/bin/bash"

	# initialize
	run 'bash -s' <<-EOF
		export PATH=/opt/bin:\$PATH
		[[ ! -d "/opt/bin" ]] && { wget -O - "http://bin.entware.net/x64-k3.2/installer/generic.sh" | sudo /bin/sh || exit; }
		[[ ! -f "/opt/bin/stat" ]] && { sudo opkg install bash coreutils-stat iputils-ping || exit; }
		grep -q "$user" /etc/passwd | grep "/opt/bin/bash" && { sudo usermod --shell "/opt/bin/bash" "$user" || exit; }
		exit 0
	EOF
}

bootstrapRun()
{
	local restart; [[ "$type" == "ssh" ]] && restart="--restart"

	hilight "Running bootstrap on $host..."
	runi "/tmp/bootstrap/bootstrap-init" "/tmp/bootstrap/$(GetFileName "$config")" "$bin" "${globalArgs[@]}" $restart
}

#
# SSH Helper
#

sshGetHostInfo()
{
	hilight "Getting host '$host' information..."
	ScriptEval HostGetInfo --trust $verbose "$sshUser@$host"; 
}

sshBootHost() # wait for the host to become available (after initial boot or reboot)
{
	# power on local hosts
	[[ $isHostLocal ]] && ! IsAvailablePort "$host" "$port" && { power on "$host" || return; }

	# resolve .local address - mDNS resolution does not work using SSH in Windows
	IsMdnsName "$host" && { host=$(MdnsResolve "$host") || return; }

	sshWait || return
}

# sshCheckUser - if the preferred user exists on the host, use it for SSH
sshCheckUser() 
{ 
	# return if the preferred user is already the SSH user
	[[ "$user" == "$sshUser" ]] && return

	hilight "Checking for $user on $host..."
	! run getent passwd "$user" >& /dev/null && { echo "User $user does not exist on $host..."; return; }

	# the user exists on the host, use it for SSH
	echo "User $user exists on $host and will be used for further SSH commands..."
	sshUser="$user" && sshConfigure
}

# sshCheckUserPassword USER - check if user password is expired and change it if needed
sshCheckUserPassword()
{
	local user="$1"

	local tries=10
	for (( i = 1; i <= $tries; i++ )); do

		# if SSH failed, sleep before retry
		(( i != 1 )) && sleep 4; 

		hilight "Checking user '$user' password expiration (try $i of $tries)..."

		# run a simple SSH command
		local result; result="$(run ls 2>&1)" && return

		# if the password has expired login interactively to change it
		if echo "$result" | grep -q "password has expired"; then
			echo "Changing user '$user' password..."
			runSsh # will prompt for password change
			return
		fi

	done
}

# sshConfigure USER - configure SSH for the SSH user
sshConfigure()
{
	local user="$1"

	# return if configuration is not needed
	IsPlatform openwrt,ubiquiti --host && return

	# add Ubuntu SSH connection performance fix
	local other;
	IsPlatformAll piKernel,ubuntu --host && other+="$(cat <<-EOF
		sudo sed -i "s/^session\soptional\spam_motd.so\s*motd=\/run\/motd.dynamic$/#session optional pam_motd.so motd=\/run\/motd.dynamic/" "/etc/pam.d/sshd" || exit
		EOF
	)"

	hilight "Checking SSH configuration..."
	run 'bash -s' <<-EOF && { echo "SSH is configured for $user"; return; }
		[[ -f "\$HOME/.ssh/authorized_keys" && -f "\$HOME/.ssh/known_hosts" ]] && exit 0
		[[ ! -d "\$HOME/.ssh" ]] && { mkdir "\$HOME/.ssh" || exit; }
		$other
		exit 1
	EOF

	echo "Configuring SSH for $user..."
	scp "${scpArgs[@]}" "$HOME/.ssh/"* ''"$user@$host"':~/.ssh' || return
}

# sshCopyCoreFiles - copy core files into /tmp/bootstrap
sshCopyCoreFiles()
{
	hilight "Copying core files..."

	run 'bash -s' <<-EOF || return
		[[ -d "/tmp/bootstrap" ]] && exit
		mkdir "/tmp/bootstrap" || exit
		chmod o+w "/tmp/bootstrap" || exit
	EOF

	# copy core files - allow updates by other users
	rsync "${rsyncArgs[@]}" --port=$port --perms --chmod=ugo+w --recursive "${coreFiles[@]}" "$sshUser@$host:/tmp/bootstrap/" || return
}

sshReconnect()
{
	hilight "Reconnecting to $host..."
	sleep 4
	sshWait || return 
}

sshWait()
{
	IsAvailablePort "$host" "$port" && return
	WaitForPort "$host" "$port" || return
}

#
# helper
#

# copyCoreFiles DIR - copy core files to the directory
copyCoreFiles()
{
	local dir="$1"

	hilight "Copying core files..."

	# create destination directory
	[[ ! -d "$dir" ]] && { mkdir "$dir" || return; }

	# copy core files - allow updates by other users
	local umask="$(umask)"; umask 0
	cp "${coreFiles[@]}" "$dir" && umask "$umask"
}

# installMicro - install the Micro editor on the host
installMicro()
{
	IsPlatform mips --host && return
	MicroHelper install "$host" || return
}

# run command on host
run() { RunFunction run "${type^}" -- "$@"; }
runChroot() { ChrootHelper run "$dist" -s "/bin/bash" -d /tmp "$@"; }
runSsh() { SshAgentConf "${globalArgs[@]}" && ssh "$sshUser@$host" "${sshArgs[@]}" -- "$@"; }
runWsl() { wsl.exe -d "$dist" "$@"; }

# run command on host interactively
runi() { RunFunction runi "${type^}" -- "$@"; }
runiChroot() { ChrootHelper run "$dist" -s /bin/bash -d /tmp "$bash" -l "$@"; }
runiSsh() { ssh -Yt "$sshUser@$host" "${sshArgs[@]}" -- "$bash" -l "$@"; }
runiWsl() { wsl.exe -d "$dist" "$bash" -l "$@"; }

ScriptRun "$@"
