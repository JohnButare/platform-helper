#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script color || exit

usage()
{
	ScriptUsage "$1" "Usage: $(ScriptName) [cleanup|gui](cleanup)
Cleanup files and configuration on the host.

	-w, --what LIST	comma seperated list of items to update
	-s, --skip LIST	comma seperated list of items to skip

items: $(echo "${defaultItems[@]}")"
	exit $1
}

init()
{	
	defaultCommand="cleanup"	
	defaultItems=( apt bak borg brew dnf docker files journal mcfly ruby sync update volumes )
	otherItems=( interactive )
	allItems=( "${defaultItems[@]}" "${otherItems[@]}" )
}

argStart() { unset -v skipArg whatArg; skip=() what=() ; }

opt()
{
	case "$1" in
		-s|--skip|-s=*|--skip=*) ScriptArgItems "skip" "allItems" "$@" || return;;
		-w|--what|-w=*|--what=*) ScriptArgItems "what" "allItems" "$@" || return;;
		*) return 1;;
	esac
}

#
# commands
#

guiCommand()
{
	IsPlatform mac && { start "CleanMyMac X.app"; return; }
	IsPlatform win && { start "$P/CleanMyPC/CleanMyPC.exe"; return; }
	return 0
}

#
# cleanup command
#

cleanupCommand()
{
	local errors=0 item

	[[ ! $what ]] && what=( "${defaultItems[@]}" )

	for item in "${what[@]}"; do
		IsInArray "$item" skip && continue
		local cache="host-cleanup-$item"; ! UpdateNeeded "$cache" && continue
		"cleanup${item^}" || { log1 "error cleaning $item"; (( ++errors )); continue; }
		UpdateDone "$cache" || return
	done

	return "$errors"
}

cleanupBak() { DelDir --contents --hidden "$DATA/.bak"; }
cleanupBorg() { ! InPath borg && return; hilight "cleaning Borg..." && BorgHelper compact all;  }
cleanupBrew() { ! IsPlatform brew && return; hilight "cleaning Homebrew..." && brew cleanup; }
cleanupDnf() { ! InPath dnf && return; sudoc dnf clean all; }
cleanupMcfly() { command rm "$TMP/mcfly.*" >& /dev/null; return 0; }
cleanupRuby() { ! which gem >& /dev/null && return; hilight "cleaning Ruby..." && sudoc gem cleanup; }
cleanupSync() { fd --hidden --no-ignore '\..*_sync.txt' $DATA $UDATA $HOME/.ssh | xargs --no-run-if-empty rm; }
cleanupVolumes() { hilight "cleaning volumes..."; unc unmount all || return;  [[ -d "$(drive dir user)" ]] && rmdir "$(drive dir user)/"* >& /dev/null; return 0; }
cleanupUpdate() { DelDir --contents --hidden "$DATA/update"; }

cleanupApt()
{
	! IsPlatform apt && return
	hilight "cleaning apt..."
	sudoc apt-get clean -y || return 	# cleanup downloaded package files in /var/cache/apt/archives
	sudoc apt autoremove -y || return
	InPath wajig && { wajig purgeremoved || return; }
	return 0
}

cleanupDocker()
{
	! InPath docker && return
	! docker ps >& /dev/null && return

	hilight "cleaning Docker..."

	# get dangling images
	local images; images="$(docker images -f "dangling=true" -q)"
	[[ ! $images ]] && return

	# cleanup dangling images	
	hilight "cleaning Docker..."
	docker rmi "$images"
}

# files
cleanupFiles()
{
	hilightp "cleaning files..."
	cleanupFilesTmp && RunPlatform cleanupFiles
	hilight "done";
}

cleanupFilesTmp()
{
	local t
	log1 "cleanup file tmp"
	t="$TMP"; ! IsPlatform mac && [[ -d "$t" ]] && { rm -fr "$t/"* >& /dev/null; hilightp "."; }
	t="/tmp"; [[ "$TMP" != "$t" && -d "$t" ]] && { rm -fr "$t/bootstrap/"* >& /dev/null; hilightp "."; }
	t="$(PlatformTmp)"; [[ -d "$t" ]] && { rm -fr "$t/"* >& /dev/null; hilightp "."; }
	return 0
}

cleanupFilesWin()
{
	log1 "cleanup file win"
	[[ -d "$UADATA/Temp" ]] && { log1 "$UADATA/Temp..."; rm -fr "$UADATA/Temp/"* >& /dev/null; hilightp "."; }
	[[ -d "$WIN_ROOT/temp" ]] && { log1 "$WIN_ROOT/temp..."; rm -fr "$WIN_ROOT/temp/"* >& /dev/null; hilightp "."; }
	[[ -d "$WINDIR/Temp" ]] && { log1 "$WINDIR/Temp"; rm -fr "$WINDIR/Temp/"* >& /dev/null; hilightp "."; }
	return 0
}

# interactive
cleanupInteractive() { RunPlatform cleanupInteractive; }

cleanupInteractiveWin()
{
	ask 'Cleanup old windows versions' && { elevate CleanMgr.exe /AUTOCLEAN || return; }
	ask 'Cleanup path' && { os path || return; }
	ask 'Cleanup startup programs' && { start --elevate autoruns || return; }
	ask 'Cleanup scheduled tasks' && { start --elevate task scheduler || return; }
	ask 'Cleanup remaining files' && { elevate CleanMgr.exe /VERYLOWDISK || return; }
	return 0
}

cleanupJournal()
{
	! IsPlatform systemd && return
	hilight "cleaning systemd journal..."
	sudo journalctl --rotate && sudo journalctl --vacuum-time=2d
}

ScriptRun "$@"