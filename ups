#!/usr/bin/env bash
. app.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [monitor|reset|set|status](status)
Manage a UPS."
}

init()
{	
	defaultCommand="status"
	ups="GeekPi"; [[ -S /tmp/pisugar-server.sock ]] && ups="PiSugar"
	return 0
}

#
# Commands
#

resetUsage() { EchoWrap "Usage: $(ScriptName) reset\nReset the UPS to factory defaults."; }
resetCommand() { ask "Are you sure you want to reset the UPS to factory defaults" && RunFunction reset$ups; }
resetGeekPi() { python3 "$BIN/GeekPiUpsWrite.py" 27 1; }

#
# Get Command
#

getUsage()
{
	EchoWrap "\
Usage: $(ScriptName) get KEY VALUE
get a value from the UPS, where valid keys are:

	GeekPi 	REGISTER|AutoOn|protect|restart|shutdown
	PiSugar alarm_repeat|model
					battery|battery_charging|battery_charging_range|battery_led_amount|battery_v"
}

getArgStart() { unset -v key; }
getArgs() { ScriptArgGet "key" -- "$@"; }
getCommand() { get "$key"; }
get() { local arg; for arg in "$@"; do RunFunction get$ups -- "$arg" || return; done; }
getPiSugar() { echo "get $1" | nc -q 0 127.0.0.1 8423; }
getPiSugarValue() { getPiSugar "$1" | cut -d":" -f2 | RemoveSpaceTrim; }
	
getGeekPi()
{
	local register register1 register2; keyLookup || return
	[[ ! $register2 ]] && { python3 "$BIN/GeekPiUpsRead.py" "$register1"; return; }
	python3 "$BIN/GeekPiUpsRead2.py" "$register1" "$register2"
}

#
# Monitor Command
#

monitorUsage() { EchoWrap "Usage: $(ScriptName) reset\Check the UPS battery and shutdown the system when the battery is low."; }

monitorCommand() { RunFunction monitor$ups; }
monitorHeader() { echo "************************* UPS Battery Check ($(date)) *************************"; }

monitorGeekPi()
{
	local protectVolts=3600; [[ $test ]] && protectVolts=4000
	local shutdownSeconds=

 	monitorHeader || return

	# enable Raspberry Pi power on when UPS power is restored
	ups set AutoOn 1 > /dev/null || return

	# Set the threshold of UPS automatic power-off to prevent damage caused by battery over-discharge, unit: mV.
	ups set protect $protectVolts > /dev/null || return

	# show UPS status
	statusCommand || return
	echo

	# check the battery voltage
	local batteryVolts; batteryVolts="$(python3 "$BIN/GeekPiUpsBatteryVoltage.py")" || return
	local shutdownVolts=$(( protectVolts + 300 ))

	if (( batteryVolts < shutdownVolts )); then

		echo "The battery is low ($batteryVolts mV), shutting down the system..."
		ups set shutdown 30 || return
	  [[ ! $test ]] && { power off || return; }

	  printf "waiting for system shutdown..."
	  while true; do 
	  	printf "."
	  	sleep 1
	  done

	else
		if [[ $verbose ]]; then
			echo "The battery voltage is $batteryVolts mV, shutdown at $shutdownVolts mV."
		else
			echo "The battery has sufficient capacity."
		fi
		
	fi
}

monitorPiSugar()
{ 	
 	# check if on battery
 	local hasPower; hasPower="$(getPiSugarValue "battery_power_plugged")" || return
 	[[ "$hasPower" == "true" ]] && return

	# header
	monitorHeader || return

	# show UPS status
	[[ $verbose ]] && { statusCommand || return; echo; }

	# check the battery voltage
	local batteryLevel; batteryLevel="$(getPiSugarValue "battery" | cut -d"." -f1)" || return
	local safeShutdownLevel; safeShutdownLevel="$(getPiSugarValue "safe_shutdown_level")" || return

	# return if the battery level is ok
	(( batteryLevel >= safeShutdownLevel )) && { echo "The battery level ($batteryLevel%) is sufficient.  It is above the safe shutdown level of $safeShutdownLevel%."; return; }
 
 	# shutdown
	echo "The battery is level ($batteryLevel%) is below the safe level ($safeShutdownLevel%), shutting down the system..."
	[[ ! $test ]] && shutdown now
	SleepStatus 30
}

#
# Set Command
#

setUsage()
{
	EchoWrap "\
Usage: $(ScriptName) set KEY VALUE
Set a value on the UPS, where valid keys are:

	GeekPi 	REGISTER|AutoOn|protect|restart|shutdown
	PiSugar battery_charging_range|safe_shutdown_level"
}

setArgStart() { unset -v key value; }
setArgs() { ScriptArgGet "key" -- "$@"; shift; ScriptArgGet "value" -- "$@"; }
setCommand() { RunFunction set$ups; }
setPiSugar() { echo "set_$key $value" | nc -q 0 127.0.0.1 8423; }

setGeekPi()
{
	local register register1 register2; keyLookup || return
	[[ ! $register2 ]] && { python3 "$BIN/GeekPiUpsWrite.py" "$register1" "$value"; return; }
	python3 "$BIN/GeekPiUpsWrite2.py" "$register1" "$register2" "$value"
}

#
# Status Commands
#

statusUsage()
{
	EchoWrap "\
Usage: $(ScriptName) status
Show UPS status.

	-m|--monitor		monitor status"
}

statusArgStart() { unset -v monitor; }

statusOpt()
{
	case "$1" in
		-m|--monitor) monitor="--monitor";;
		*) return 1;;
	esac
}

statusCommand()
{
	if [[ $monitor ]]; then watch -n 1 ups status;
	else statusDo;
	fi
}

statusDo() { RunFunction status$ups; }
statusGeekPi() { python3 "$BIN/GeekPiUpsStatus.py"; }
statusPiSugar() { get model battery battery_power_plugged battery_v temperature battery_allow_charging battery_charging_range rtc_time safe_shutdown_level safe_shutdown_delay; }

#
# helper
#

keyLookup()
{
	local key="$1"

	case "${key,,}" in
		autoon) register1=25;;
		protect) register1=17 register2=18;;
		restart) register1=26;;
		shutdown) register1=24;;
	esac
}

ScriptRun "$@"
