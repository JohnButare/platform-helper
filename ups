#!/usr/bin/env bash
. app.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [monitor|reset|set|status](status)
Manage a UPS."
}

init() { defaultCommand="status"; }

#
# Commands
#

resetUsage() { EchoWrap "Usage: $(ScriptName) reset\nReset the UPS to factory defaults."; }
resetCommand() { ask "Are you sure you want to reset the UPS to factory defaults" && python3 "$BIN/UpsWrite.py" 27 1; }

#
# Get Command
#

getUsage() { EchoWrap "Usage: $(ScriptName) get REGISTER|AutoOn|protect|restart|shutdown|AutoOn"; }
getArgStart() { unset -v register register1 register2; }
getArgs() { registerArgGet "$@"; shift; }

getCommand()
{
	[[ ! $register2 ]] && { python3 "$BIN/UpsRead.py" "$register1"; return; }
	python3 "$BIN/UpsRead2.py" "$register1" "$register2"
}

#
# Monitor Command
#

monitorUsage() { EchoWrap "Usage: $(ScriptName) reset\Check the UPS battery and shutdown the system when the battery is low."; }

monitorCommand()
{
	local protectVolts=3700; [[ $test ]] && protectVolts=4000
	local shutdownSeconds=

 	echo "************************* UPS Battery Check ($(date)) *************************"

	# enable Raspberry Pi power on when UPS power is restored
	ups set AutoOn 1 > /dev/null || return

	# Set the threshold of UPS automatic power-off to prevent damage caused by battery over-discharge, unit: mV.
	ups set protect $protectVolts > /dev/null || return

	# show UPS status
	statusCommand || return
	echo

	# check the battery voltage
	local batteryVolts; batteryVolts="$(python3 "$BIN/UpsBatteryVoltage.py")" || return
	
	if (( batteryVolts < protectVolts + 200 )); then

		echo "The battery is low ($batteryVolts mV), shutting down the system..."
		ups set shutdown 30 || return
	  [[ ! $test ]] && { os down || return; }

	  printf "Waiting for system shutdown..."
	  while true; do 
	  	printf "."
	  	sleep 1
	  done

	else
		if [[ $verbose ]]; then
			echo "The battery voltage is $batteryVolts mV, which is more than 200 mV above protection voltage of $protectVolts mV."
		else
			echo "The battery has sufficient capacity."
		fi
		
	fi
}

#
# Set Command
#

setUsage()
{
	EchoWrap "\
Usage: $(ScriptName) set REGISTER|AutoOn|protect|restart|shutdown VALUE"
}

setArgStart() { unset -v register  register1 register2 value; }
setArgs() { registerArgGet "$@"; shift; ScriptArgGet "value" -- "$@"; }

setCommand()
{
	[[ ! $register2 ]] && { python3 "$BIN/UpsWrite.py" "$register1" "$value"; return; }
	python3 "$BIN/UpsWrite2.py" "$register1" "$register2" "$value"
}

#
# Status Commands
#

statusUsage()
{
	EchoWrap "\
Usage: $(ScriptName) status
Show UPS status.

	-m|--monitor		monitor status"
}

statusArgStart() { unset -v monitor; }

statusOpt()
{
	case "$1" in
		-m|--monitor) monitor="--monitor";;
		*) return 1;;
	esac
}

statusCommand()
{
	if [[ $monitor ]]; then watch -n 1 ups status;
	else statusDo;
	fi
}

statusDo() { python3 "$BIN/UpsStatus.py"; }

#
# helper
#

registerArgGet()
{
	ScriptArgGet "register" -- "$@"

	case "${register,,}" in
		autoon) register1=25;;
		protect) register1=17 register2=18;;
		restart) register1=26;;
		shutdown) register1=24;;
	esac
}


ScriptRun "$@"
