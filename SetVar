#!/bin/bash
. function.sh || exit

usage()
{
	echot "\
usage: SetVar VAR [VALUE]
	Set user or system variable in the Windows registry.  If no value is specified the value is deleted.
	-d, --delete			Delete the variable
  -s, --system			Set a system variable system wide (default is user)
  -p, --path				The variable refers to a semi-colon separated path, 
										the value is a directory"
	exit $1
}

args()
{
	unset var value delete isPath system
	while (( $# != 0 )); do
		case "$1" in
			-d|--delete) delete="true";;
			-s|--system) system="-m";;
			-p|--path) isPath="true";;
			*)
				! IsOption "$1" && [[ ! $var ]] && { var="$1"; shift; continue; }
				! IsOption "$1" && [[ ! $value ]] && { value="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $var ]] && MissingOperand "var"
	[[ ! $delete ]] && ! IsDeclared value && MissingOperand "value"
}

run()
{
	args "$@"
	
	if [[ $system ]]; then
		key="HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment\\$var"
	else
		key="HKCU\Environment\\$var"
	fi

	if [[ $delete ]]; then
		registry delete "$key"
		return
	fi

	local newValue="$value"

	[[ $isPath ]] && { SetPath || return; }

	if ! setx "$var" "$newValue" $system >& /dev/null; then # 
		printf "Unable to set the $var variable: " > /dev/stderr
		setx "$var" "$newValue" $system
		return
	fi

	[[ $isPath ]] && local $var="${!var}:$(wtu "$value")" || local $var="$value"
	ScriptReturn --export $var
}

SetPath()
{
	local oldValue=$(registry get "$key") parts
	newValue="$(utw "$value")"
	StringToArray "${oldValue//\\/\\\\}" ";" parts
	IsInArray "$newValue" parts && exit 0
	[[ $oldValue ]] && newValue="$oldValue;$newValue"
	return 0
}

run "$@"
