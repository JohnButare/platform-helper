#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script PlatformVars || exit

usage()
{
	ScriptUsage "$1" "\
usage: wsl config|disk|dist|get|help|install|IsInstalled|ls|port|profile|set|shutdown|supports|update|version|wslg
Windows Subsystem for Linux (WSL) commands."
}

init()
{ 
	[[ ! -d "$DATA/appdataw/" ]] && { inst AppDir || return; }
	wslDir="$DATA/appdataw/wsl"
	wslConfig="$WIN_HOME/.wslconfig"
	wslDistConfig="/etc/wsl.conf"
	wslgConfig="$WIN_ROOT/ProgramData/Microsoft/WSL/.wslgconfig" # https://github.com/microsoft/wslg/wiki/WSLg-Configuration-Options-for-Debugging
	shortcutDir="$PROGRAMDATA/Microsoft/Windows/Start Menu/Programs/Operating System/Other/WSL/"
}

#
# commands
#

isInstalledCommand() { InPath "wsl.exe"; }
lsCommand() { w --list --verbose | Utf16toAnsi | RemoveCarriageReturn; }
shutdownCommand() { sync; wsl.exe --shutdown; } # sync prevents file corruption, ~/.zsh_history is likely to corrupt
downCommand() { shutdownCommand; }
offCommand() { shutdownCommand; }
terminateCommand() { shutdownCommand; }
versionCommand() { getVersionCommand; }

#
# config command
#

configUsage() { echot "Usage: $(ScriptName) config [NAME](edit)\nReturn the WSL global configuration named element."; }
configCommand() { configEditCommand; }

configEditUsage() { echot "Usage: $(ScriptName) config [dist|wsl|wslg](wsl)\nReturn the WSL global configuration named element."; }
configEditCommand() { configEditWslCommand; }
configEditDistCommand() { sudoe "$wslDistConfig"; }
configEditWslCommand() { TextEdit "$wslConfig"; }
configEditWslgCommand() { TextEdit "$wslgConfig"; }

configGetArgs() { ScriptArgGet "name" -- "$@"; }
configGetCommand() { configGet "$name"; }
configGet() { cat "$wslConfig" | grep "^$1" | cut -d"=" -f2; }

#
# disk command
#

diskUsage() { echot "Usage: $(ScriptName) disk mount|unmount
Disk commands."; }

diskArgStart() { unset -v disk; }

diskArgs() { (( $# == 0 )) && return; ScriptArgGet "disk" -- "$@"; }

diskCommand() { usage; }

diskMountUsage() { echot "Usage: $(ScriptName) disk mount [NUMBER](first offline)
Mount the specified Windows disk number in WSL."; }

diskMountCommand()
{
	supportsMount || return

	# get the disk to mount
	[[ ! $disk ]] && disk="$(drive win GetOffline | head -1)"
	
	if [[ ! $disk ]]; then
		EchoErr "wsl: there are no offline disks to mount.  Use \`drive win offline NUM\` to offline a disk for use in WSL"
		drive win list
		return 1
	fi

	# run elevated
	! IsElevated && { RunScript $verbose --elevate -- wsl mount "$disk"; return; }

	# get the existing block devices
	local devices; IFS=$'/n' ArrayMake "$(devices lsblk -no NAME)"

	# mount the disk
	w --mount '\\.\PHYSICALDRIVE'$disk'' --bare || return

	# start LVM service and scan for volumes - systemd run the udev service which creates LVM devices automatically
	if InPath vgscan && ! IsSystemd ; then
		service start lvm2 || return
		sudo vgscan --mknodes || return
	fi

	# wait for the block device to be mounted and return it
	sleep 2
	lsblk -no NAME | grep -v "$(ArrayDelimit devices $'\n')"
}

diskUnmountUsage() { echot "Usage: $(ScriptName) disk unmount [NUMBER]
Unmount the specified Windows disk number."; }

diskUnmountCommand()
{
	supportsMount || return

	if IsElevated; then
		wsl.exe --unmount '\\.\PHYSICALDRIVE'$disk'' || return
	else
		RunScript $verbose --elevate -- wsl disk unmount "$disk" || return
	fi
}

#
# distribution commands
#

distUsage() { echot "Usage: $(ScriptName) dist backup|copy|default|delete|exists|kill|restore|run|shortcut|summary|user [NAME](current)"; }
distArgs() { distArgGetDefault "$@" || return; }
distCommand() { usage; }
distDefaultCommand() { w --set-default "$dist"; }
distExistsCommand() { distExists; }
distKillCommand() { w -d "$dist" sync; w --terminate "$dist"; } # sync prevents file corruption, ~/.zsh_history is likely to corrupt
distShortcutCommand() { distShortcut; }
distSummaryCommand() { lxr summary -n "$dist" | Utf16toAnsi | RemoveCarriageReturn; }

# backup

distBackupCommand()
{
	local file="$(utw "$wslDir/image/$dist-$(GetTimeStamp).tar.gz")"

	# initialize
	initDirs || return

	# checks
	[[ "$dist" == "$(distName)" ]] && { ScriptErr "cannot backup the current distribution"; return 1; }

	# stop the distribution
	if distIsRunning; then
		[[ $noPrompt ]] && hilight "Stopping the '$dist' distribution..." || { ask -dr n "Stop the '$dist' distribution" || return; }
		distKillCommand || return
	fi

	# backup
	w --export "$dist" "$file" || return
	src="$(wtu "$file")" # src variable for restore
	echo "'$dist' backed up to '$src'"
}

# copy

distCopyUsage() { echot "Usage: $(ScriptName) copy SRC DEST
Copy a distribution."; }

distCopyArgs() { ScriptArgGet "dest" -- "$@"; }

distCopyCommand()
{ 
	local user; user="$(userGetCommandCommand "$src")" || return
	backupCommand || return

	dist="$dest"
	distExists && { echo "The distribution '$dist' already exists"; deleteCommand || return; }
	restoreCommand || return
	userSetCommand  || return
}

# delete

distDeleteCommand()
{
	# checks
	[[ "$dist" == "$(distName)" ]] && { ScriptErr "cannot delete the current distribution"; return 1; }

	# distribution directory
	local dir="$(distDir)"
	[[ ! -d "$dir" ]] && { ScriptErr "the '$dist' distribution directory was not found"; return 1; }

	# ask to delete
	[[ $noPrompt ]] && hilight "Deleting the '$dist' distribution..." || { ask -dr n "Delete the '$dist' distribution" || return; }

	# delete
	[[ $test ]] && return
	distKillCommand && w --unregister "$dist" && rm -fr "$dir"
}

# restore

distRestoreUsage()
{
	echot "Usage: $(ScriptName) dist restore DIST [SRC](ubuntu-focal)
Restore restore a WSL image commands."

EchoWrap "\nSRC is an image file, or the name of a image in $wslDir, \
$(distImageDir | FileToDesc), or https://github.com/DDoSolitary/LxRunOffline/wiki."
}

distRestoreArgs() { (( $# == 0 )) && src="ubuntu-focal" || ScriptArgGet "src" -- "$@"; }

distRestoreCommand()
{
	local image; image="$(distImageDir)" || return

	# initialize
	initDirs || return

	# checks
	[[ "$dist" == "$(distName)" ]] && { ScriptErr "cannot restore to the current distribution"; return 1; }

	# delete an existing distribution
	distExists && { distDeleteCommand || return; }

	# src argument
	file="$src"

	# check if src is a cached file
	[[ ! -f "$file" ]] && file="$wslDir/image/$src.tar.gz"

	# check for src in each distribution in the image directory
	[[ ! -f "$file" ]] && file="$(find "$image" -iname "$src.tar.gz" | head -1)"

	# find src from install directory - 
	if [[ ! -f "$file" ]]; then
		file="$(ls "$image/$d/$d-$v-"* |& head -1)"
	fi

	# check for an LxRunoffline distribution - https://github.com/DDoSolitary/LxRunOffline/wiki
	if [[ ! -f "$file" ]]; then
		local d v; IFS='-' read d v <<<"$src" # assume src is in the format distribution-version, i.e. ubuntu-focal
		file="$wslDir/image/$src.tar.gz"
		hilight "Downloading $src..."
		curl --location "http://lxrunoffline.apphb.com/download/$d/$v" -o "$file"

		# validate - Fedora-rawhide is not gzipped and import fails with "Unspecified error"
		if ! tar --list --gunzip --file "$file" >& /dev/null; then
			EchoErr "'$(GetFileName "$file")' is not a valid WSL image"
			rm -f "$file" || return
			return 1
		fi

	fi

	# validate the installation file
	if [[ ! -f "$file" ]]; then
		ScriptErr "could not find the installation for '$src'"
		return 1
	fi

	hilight "Restoring $(GetFileName "$file") as $dist..."

	printf "importing..."
 	wsl.exe --import "$dist" "$(utw "$wslDir/$dist")" "$(utw "$file")" --version 2 || return
 	echo "done"

	distShortcut || return
	user="$USER" distUserSetCommand || return
}

# run

distRunUsage() { echot "Usage: $(ScriptName) dist run [NAME](current)\n\n	-r,	--run=USER		run as the specified user"; }
distRunArgStart() { unset -v user userArg; }
distRunOpt() { getUserArg "$@"; }
distRunCommand() { w --distribution "$dist" "${userArg[@]}" "${otherArgs[@]}"; }

# user
 
distUserUsage()
{ 
	echot "Usage: $(ScriptName) dist user get|set [DIST](current)
Get or set the default user for the specified distribution.

	-u,	--user=[UID|NAME]($USER)		the name or uid to set as the default user"; 
}

distUserArgStart() { user="$USER"; }
distUserOpt() { getUserArg "$@"; }
distUserCommand() { distUserGetCommand; }
distUserGetCommand() { getDefaultUser; }

distUserSetCommand()
{
	local dir; [[ "$(distName)" != "$dist" ]] && { dir="$(unc mount --no-host-check "//$(wslShare)/$dist")" || return; }
	local uid="$user"

	! IsInteger "$uid" && uid="$(grep -i "^$user:" "$dir/etc/passwd" | head -1 | cut -d: -f3)"
	[[ ! $uid ]] && { ScriptErr "could not find uid for user '$user' in distribution '$dist'"; return 1; }

	local currentUid="$(getDefaultUser)" || return
	[[ ! $force && "$uid" == "$currentUid" ]] && return

	printf "Changing the default used from UID $currentUid to UID $uid..."
	if lxrOk; then
		lxr set-uid -n "$dist" -v "$uid"
	else
		powershell "Get-ItemProperty Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss\*\ DistributionName | Where-Object -Property DistributionName -eq $dist | Set-ItemProperty -Name DefaultUid -Value $uid"
	fi	
	echo "done"
}

#
# get command
#

getUsage() { echot "Usage: $(ScriptName) get dir|name|FractionalScaling|share|ImageDir|version [all|wslg]
Get WSL configuration"; }

getCommand() { usage; }
getDirCommand() { printf "$wslDir"; }
getNameCommand() { distName; }
getShareCommand() { wslShare; }
getImagedirCommand() { distImageDir; }
getVersionCommand() { w --version | Utf16toAnsi | RemoveCarriageReturn | grep "^WSL version:" | cut -d: -f2 | RemoveSpace; }
getVersionAllCommand() { w --version | Utf16toAnsi | RemoveCarriageReturn; }
getVersionWslgCommand() { w --version | Utf16toAnsi | RemoveCarriageReturn | grep "^WSLg version:" | cut -d: -f2 | RemoveSpace; }

getFractionalscalingCommand()
{
	[[ ! -f "$wslgConfig" ]] && echo "off"
	[[ "$(grep "WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING" "$wslgConfig" | cut -d"=" -f 2)" == "false" ]] && echo "on" || echo "off"
}


#
# help commands
#

helpUsage() { echot "Usage: $(ScriptName) help lxr|wsl"; }
helpCommand() { helpLxrCommand; helpWslCommand; }
helpLxrCommand() { lxr |& Utf16to8; }
helpWslCommand() { w --help | Utf16to8; }

#
# profile command
#

profileUsage() { ScriptUsageEcho "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	[[ -f "$wslConfig" || "${profileArgs[0]}" != @(save) ]] && { profile $noPrompt --app "wsl-config" --method "$WIN_HOME" --files ".wslconfig" "${profileArgs[@]}" || return; }
	[[ -f "/etc/wsl.conf" || "${profileArgs[0]}" != @(save) ]] && { profile --sudo $noPrompt --app "wsl-conf" --method "/etc" --files "wsl.conf" "${profileArgs[@]}" || return; }
	return 0
}

#
# set command
#

setUsage() { echot "Usage: $(ScriptName) set FractionalScaling on|off\nSet WSL configuration."; }
setCommand() { usage; }

setFractionalscalingUsage() { echot "Usage: $(ScriptName) set FractionalScaling on|off
If off, X applications will only scale when the monitor scale is 200% due to RDP client scaling quality issues.
For the change to take effect the distribution must be restarted."; }

setFractionalscalingCommand() { usage; }

setFractionalscalingOnCommand()
{
	! IsElevated && { RunScript $verbose --elevate -- wsl set FractionalScaling on; return; }
	configInitWslg || return
	sed -i "s/^WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=true$/WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=false/" "$wslgConfig" || return
}

setFractionalscalingOffCommand()
{
	! IsElevated && { RunScript $verbose --elevate -- wsl set FractionalScaling off; return; }
	configInitWslg || return
	sed -i "s/^WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=false$/WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=true/" "$wslgConfig" || return
}

#
# install commands
#

installUsage() { echot "Usage: $(ScriptName) install [bootstrap|dns|systemd](bootstrap)"; }
installArgs() { [[ "$command" != @(install|installBootsrap) ]] && return; distArgGetDefault "$@"; }
installCommand() { installBootstrapCommand; }

# install bootstrap command

installBootstrapUsage() { echot "Usage: $(ScriptName) install bootstrap [DIST](current)
Bootstrap the WSL distribution."; }

installBootstrapCommand() { bootstrap-remote "$dist" "${globalArgs[@]}"; }

# install DNS command

installDnsUsage() { echot "Usage: $(ScriptName) install dns
Manually specify DNS configuration for WSL."; }

installDnsCommand()
{
	! IsPlatform wsl2 && { ScriptErr "name resolution only needs to be fixed in WSL 2"; return 1; }
	[[ -f "/etc/wsl.conf" ]] && grep -q "generateResolvConf = false" "/etc/wsl.conf" && return

	# disable resolv.conf generation in wsl.conf
	printf "[network]\ngenerateResolvConf = false\n" | sudo tee -a "/etc/wsl.conf"

	# update resolve.conf - must be done while the distribution is not running
	RunProcess.exe cmd /c "pause && wsl -d $(distName) network current update && wt.exe"
	dist="$(distName)" distKillCommand || return
}

# install systemd command

installSystemdCommand()
{
	ghq get https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git || return
	"$HOME/ghq/github.com/DamionGans/ubuntu-wsl2-systemd-script/ubuntu-wsl2-systemd-script.sh" || return
}

#
# port commands
#

portUsage() { echot "Usage: $(ScriptName) port [all|add|delete|exists|ls]\nWSL port forwarding commands."; }

portUsage()
{ 
	echot "Usage: $(ScriptName) port [all|list]
WSL port forwarding commands.  Mirrored mode is preferred and is primaryly sypported using the firewall hvrule.

	-m, --mirrored		force mirrored networking configuration
	-n, --nat					force NAT networking configuration"
}

portArgInit() { unset mode; }
portOpt() 
{
	case "$1" in
		-m|--mirrored) mode="mirrored";;
		-n|--nat) mode="nat";;
		*) return 1
	esac
}

portArgEnd() { 	[[ $mode ]] && return; supportsMirrored && mode="mirrored" || mode="nat"; }
portCommand() { usage; }

# port list command
portLsUsage() { echot "Usage: $(ScriptName) list\nList WSL port forwarding rules."; }
portLsCommand() { portLs${mode^}; }
portLsMirrored() { powershell "Get-NetFirewallHyperVRule -VMCreatorId '{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}'" | grep "^DisplayName" | RemoveCarriageReturn| cut -d":" -f2 | sed 's/ //g'; }
portLsNat() { netsh.exe interface portproxy show all; }

#
# port add command
#

portAddUsage() { echot "Usage: $(ScriptName) port add NAME DISPLAY_NAME PORT\nAdd a WSL port forwarding rule."; }
portAddArgStart() { unset name displayName port; }
portAddArgs() { ScriptArgGet "name" -- "$@" && shift && ScriptArgGet "displayName" "display name" -- "$@" && ScriptArgGet --integer "port" -- "$@"; }
portAddCommand() { portAdd "$name" "$displayName" "$port"; }

# portAddRule NAME DISPLAY_NAME PORT
portAdd()
{
	local name="$1" displayName="$2" port="$3" exists; portExists "$name" && exists="true"
	[[ ! $force && $exists ]] && return
	[[ $exists ]] && { portDelete "$name" || return; }
	ps 'New-NetFirewallHyperVRule -Name \"'$name'\" -DisplayName \"'$displayName'\" -Direction Inbound -VMCreatorId \"{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}\" -Protocol TCP -LocalPorts '$port
}

#
# port all command
#

portAllUsage()
{ 
	echot "Usage: $(ScriptName) port [all|list]
WSL port forwarding commands.

	-e, --enable			enable port forwarding
	-d, --disable			disable port forwardning
	-s, --status			return true if port forwarding is enabled"
}

portAllArgStart() { unset action; }

portAllOpt() 
{
	case "$1" in
		-d|--disable) action="disable";;
		-e|--enable) action="enable";;
		-s|--status) action="status";;
		*) return 1
	esac
}

portAllCommand() { portAll${action^}${mode^}; }

portAllEnableMirrored() { portAdd "SshServer" "SSH Server" 22; }
portAllEnableNat() { ps WslPortForward.ps1 $(GetIpAddress); }

portAllDisableMirrored() { portDelete "SshServer"; }

portAllStatusMirrored() { portAllStatus; }
portAllStatusNat() { portAllStatus; }

portAllDisableNat()
{
	local commands="$(netsh.exe interface portproxy show all | grep '^[0-9]' | tr -s " " | cut -d" " -f1,2 | awk '{ print "elevate netsh.exe interface portproxy delete v4tov4 listenport=" $2 " listenaddress=" $1 "" }')"
	eval "$commands"
}

# portStatusCommand - check if SSH port 22 is being forwarded  
# - in Windows the port may show as open even if the port is not being forwarded
# - turn off host key checking to avoid prompting (we trust ourself)
portAllStatus()
{
	SshAgentConf --quiet "${globalArgs[@]}" || return
	ssh -o "ConnectTimeout=1" -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" "$(GetIpAddress)" -p 22 "true" >& /dev/null
}

#
# port delete command
#

portDeleteUsage() { echot "Usage: $(ScriptName) port delete NAME\Delete the port forwarding rule."; }
portDeleteArgStart() { unset name; }
portDeleteArgs() { ScriptArgGet "name" -- "$@"; }
portDeleteCommand() { portDelete "$name"; }
portDelete() { ! portExists "$1" && return; ps "Remove-NetFirewallHyperVRule -Name \"${1}\""; }

#
# port exists command
#

portExistsUsage() { echot "Usage: $(ScriptName) port exists NAME\nReturn true if the port forwarding rule exists."; }
portExistsArgStart() { unset name; }
portExistsArgs() { ScriptArgGet "name" -- "$@"; }
portExistsCommand() { portExists "$name"; }
portExists() { portLsMirrored | grep --ignore-case --quiet "^${1}$"; }

#
# supports command
#

supportsUsage() { echot "Usage: $(ScriptName) supports mirrored|mount|store|update|x
Return true if the specified feature is supported in this version of WSL."; }

supportsCommand() { usage; }
supportsMirroredUsage() { echot "Usage: $(ScriptName) supports mirrored\nReturn true if WSL supports mirrored networking."; }
supportsMirroredCommand() { supportsMirrored; }
supportsMountCommand() { supportsMount; }
supportsStoreCommand() { supportsStore; }
supportsUpdateCommand() { supportsUpdate; }
supportsXCommand() { supportsX; }

supports() { wsl.exe --help | Utf16to8 | grep -q '\-\-'"$1"; return "${PIPESTATUS[2]}"; }
supportsError() { [[ $quiet ]] && return; ScriptErr "$1"; }
supportsMirrored() { [[ "$(configGet networkingMode | LowerCase)" = "mirrored" ]]; }
supportsMount() { supports "mount" && return; supportsError "mounting drives is not implemented in this version of WSL"; return 1; }
supportsStore() { [[ "$(FindInPath "wsl.exe")" =~ WindowsApps ]]; }
supportsUpdate() { supports "update" && return; supportsError "update is not implemented in this version of WSL"; return 1; }
supportsX() { (( $(os build) > 21362 )) && return; supportsError "X is not implemented in this version of WSL"; return 1; }

#
# update command
#

updateCommand()
{
	! supports "update" && return
	! IsElevated && { RunScript --elevate "${globalArgs[@]}" -- wsl.exe --update; return; }
	w --update
}

#
# WSLg commands
#

wslgUsage() { echot "Usage: $(ScriptName) wslg disable|enable|status"; }
wslgCommand() { usage; }
wslgEnableCommand() { configInitWsl && sed -i "s/^guiApplications=false$/guiApplications=true/" "$wslConfig" && [[ "$(wslgStatusCommand)" == "true" ]]; }
wslgDisableCommand() { configInitWsl && sed -i "s/^guiApplications=true$/guiApplications=false/" "$wslConfig" && [[ "$(wslgStatusCommand)" == "false" ]]; }
wslgStatusCommand() { configInitWsl && cat "$wslConfig" | grep "^guiApplications" | cut -d"=" -f2; }

#
# helper
#

distDir() { wtu "$(wsl dist summary "$dist" | grep "Installation directory" | cut -d: -f 2- | cut -d" " -f 2)"; }
distExists() { list | cut -d" " -f1 | grep -q "^${dist}$"; }
distFirst() { list "$1" | head -1 | awk '{ print $1; }'; }
distImageDir() { FindInstallFile "platform/linux/wsl/image"; }
distIsRunning() { [[ "$(list | grep "^$dist" | awk '{ print $2; }')" == "Running" ]]; }
distValidate() { distExists && return; [[ ! $quiet ]] && EchoErr "Distribution '$dist' does not exist"; return 1; }
distVersion() { list | grep "^$dist" | awk '{ print $3; }'; }
initDirs() { [[ -d "$wslDir/image" ]] && return; mkdir --parents "$wslDir/image"; }
ps() { RunScript --elevate "${globalArgs[@]}" -- powershell.exe "$@"; }

configInitWsl()
{
	[[ -f "$wslConfig" ]] && return	
	cat <<-EOF > "$wslConfig" || return
		[wsl2] 
		guiApplications=false	
	EOF
}

configInitWslg()
{
	[[ -f "$wslgConfig" ]] && return
	cat <<-EOF > "$wslgConfig" || return
		[system-distro-env]
		WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=true
	EOF
}

distArgGetDefault()
{ 
	(( $# == 0 )) && { dist="$(distName)"; return; }
	dist="$1"; ((++shift));
	[[ "$command" == @(distExists|distRestore) ]] && return || distValidate
}

distName()
{ 
	[[ $WSL_DISTRO_NAME ]] && { echo "$WSL_DISTRO_NAME"; return; }

	# WSL_DISTRO_NAME is not passed by default when using su/sudo/login
	local name="$(utw / | cut -d'\' -f4)"; [[ $name ]] &&  { echo "$name"; return; }
	ScriptErr "unable to find the default WSL distribution"; return 1
}

distShortcut()
{
	[[ ! -d "$shortcutDir" ]] && { mkdir --parents "$shortcutDir" || return; }
	MakeShortcut "wsl.exe" "$shortcutDir/$dist" "-d $dist" "$(utw $(FindInPath wsl.exe))" || return
}

getDefaultUser()
{
	if lxrOk; then
		lxr get-uid -n "$dist" | Utf16toAnsi | RemoveCarriageReturn; 
	else
		powershell "(Get-ItemProperty Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss\* | Where-Object -Property DistributionName -eq $dist).DefaultUid" | RemoveCarriageReturn
	fi	
}

list() { lsCommand | cut -b 3- | ${G}tail --lines=+2 ; } # remove header and default distribution * }
lxr() { ! lxrOk && return; ( cd /; RunLog LxRunOffline.exe "$@"; ); }
lxrOk() { InPath LxRunOffline.exe; }
wslShare() { supports "mount" && printf "wsl.localhost"; }
w() { IsPlatform win && ( cd /; wsl.exe "$@"; ); } # cd to local directory to fix invalid argument error running programs from SMB mounted shares

getUserArg() 
{
	case "$1" in
		-u*|--user=*|--user) ScriptOptGet user "$@" || return; userArg=(--user "$user");;
		*) return 1
	esac
}

ScriptRun "$@"
