#!/usr/bin/env bash
. function.sh

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init()
{ 
	wslDir="$DATAD/data/wsl"
	shortcutDir="$PROGRAMDATA/Microsoft/Windows/Start Menu/Programs/Operating System/Other/WSL/"
	defaultDistro="ubuntu-focal" defaultVersion="1"

	mkdir --parents "$wslDir/image" || return
	mkdir --parents "$shortcutDir" || return
}

usage()
{
	echot "\
usage: wsl dir|IsRunning|name|summary|version [DIST](current)
	First letter of commands can be used, i.e. wsl v

	kill DIST - kill the distribution
	list|ListPlain - list distributions, plain to remove formatting
	run|run1|run2 [-u|--user] - run a distribtion, specify a number to run the first WSL distribution listed

	backup DIST - backup the distribution
	copy DIST NEW - copy the distribution
	delete DIST - delete the distribution
	init DIST - run bootstrap-init
	restore DIST [SRC](ubuntu-focal) [VERSION](1) - restore distribution, SRC is a file or distribution (ubuntu-disco)

	GetDefaultUser DIST - get the default user sid of the specified distribution 
	SetDefaultUser [DIST](current) [USER]($USER) - set the default user of the distribution 

	FixDnsNameLookup - fix DNS name lookup in WSL 2
	SetVersion DIST VERSION - set the version of a distribtuin
	shortcut DIST [NAME](DIST) - create a shortcut for the distribution
	help - show wsl.exe and LxRunOffline.exe help

	-np, --no-prompt	   	suppress prompts

examples:

wsl restore Ubuntu-20.04 ubuntu-focal 2"

	exit $1
}

args()
{
	command="" noPrompt="" args=()
	
	while [ "$1" != "" ]; do
		case "$1" in
			-h|--help) usage 0;;
			-np|--no-prompt) noPrompt="true"; ask() { :; };;
			backup|b) command="backup";;
			FixDnsNameLookup) command="fixDnsNameLookup";;
			GetDefaultUser|gdu) command="getDefaultUser";;
			help|h) command="help";;
			IsRunning|ir) command="isRunning";;
			kill|k) command="kill";;
			list|l) command="list";;
			name|n) command="name";;
			ListPlain|lp) command="listPlain";;
			run|r) command="run";;
			SetDefaultUser|sdu) command="setDefaultUser";;
			SetVersion|sv) command="setVersion";;
			summary|s) command="summary";;
			version|v) command="version";;
			*) 
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				args+=("$1")
		esac
		shift
	done

	[[ ! $command ]] && usage 1
	return 0
}

distFirst() { listPlainCommand "$1" | head -1 | awk '{ print $1; }'; }
distExists() { [[ $1 && "$(listPlainCommand "$1" | cut -d" " -f1 | grep "^${1}$")" ]]; }
distArg() { dist="$1"; distExists "$dist" && return; EchoErr "Distribution $dist does not exist"; exit 1; }

distDefaultArg() # return 0 (true) if an arg is used
{
	[[ $1 ]] && { distArg "$1"; return 0; } # arg was used

	dist="$(nameCommand)"
	[[ ! $dist ]] && { EchoErr "Could not find the default WSL distribution"; exit 1; }

	return 1 # arg was not used
}


# fix invalid argument issue when running from SMB mounted shares
w() { ( cd /; wsl.exe "$@"; ); }
lxr() { ( cd /; lxrunoffline.exe "$@"; ); }

#
# Commands
#

dirCommand() { wtu "$(wsl summary ${1:-$(nameCommand)} | grep "Installation directory" | cut -d: -f 2- | cut -d" " -f 2)"; }
isRunningCommand() { distDefaultArg "$1" && shift; [[ "$(wsl ListPlain | grep "$dist" | awk '{ print $2; }')" == "Running" ]]; }
killCommand() { w --terminate "$1"; }
listCommand() { w --list --verbose | Utf16toAnsi | RemoveCarriageReturn; }
listPlainCommand() { listCommand | cut -b 3- | tail +2 ; } # remove header and default distribution *
nameCommand() { [[ $WSL_DISTRO_NAME ]] && echo "$WSL_DISTRO_NAME" || utw / | cut -d'\' -f4; } # WSL_DISTRO_NAME not set when using su/sudo
runCommand() { w --distribution "$@"; }
run1Command() { runCommand "$(listPlainCommand | grep 1$ | head -1 | awk '{ print $1; }')" "$@"; }
run2Command() { runCommand "$(listPlainCommand | grep 2$ | head -1 | awk '{ print $1; }')" "$@"; }
summaryCommand() { lxr summary -n "${1:-$(nameCommand)}" | Utf16toAnsi | RemoveCarriageReturn; }
setVersionCommand() { w --set-version "$1" "$2"; }
helpCommand() { w --help | Utf16to8; lxr |& Utf16to8; }

backupCommand()
{
	local dist; distArg "$1"
	local file="$(utw "$wslDir/image/$dist-$(GetTimeStamp).tar.gz")"

	isRunningCommand "$dist" && { EchoErr "The $dist distribution must be stopped to be backed up"; return 1; }
	w --export "$dist" "$file" || return
	BACKUP_FILE="$(wtu "$file")"
}

copyCommand()
{ 
	local dist; distArg "$1" || return
	local src="$dist" dest="$2" destDir="$(utw "$wslDir/$2")" 
	local version="$(versionCommand $src)" uid="$(getDefaultUserCommand "$src")"

	distExists "$dest" && { echo "The distribution $dest already exists"; wsl delete "$dest" || return; }
	backupCommand "$src" || return
	restoreCommand "$dest" "$BACKUP_FILE" "$version" || return
	lxr set-uid -n "$dest" -v "$uid" || return
}

deleteCommand()
{
	local dist; distArg "$1" || return
	local dir="$(dirCommand "$dist")"

	[[ ! -d "$dir" ]] && { EchoErr "The $dist distribution directory was not found"; return 1; }

	! ask -dr n "Delete the $dist distribution" && return

	killCommand "$dist" || return
	w --unregister "$dist" || return
	rm -fr "$dir" || return
}

initCommand()
{
	local dist; distArg "$1" || return
	cmd.exe /c 'copy '$(utw $BIN/bootstrap-init)' \\wsl$\'$dist'\tmp' || return
	cmd.exe /c 'copy '$(utw $BIN/bootstrap-config.sh)' \\wsl$\'$dist'\tmp' || return
	lxr run -n "$dist" -w -c "bash -c \". /tmp/bootstrap-init\""
}

restoreCommand() # DIST [SRC](ubuntu-focal) [VERSION](1)
{
	local dist src version

	while [ "$1" != "" ]; do		
		[[ "$1" == @(1|2) ]] && { version="$1"; shift; continue; }
		[[ ! $dist && ! -f "$1" ]] && { dist="$1"; shift; continue; }
		[[ ! $src ]] && { src="$1"; shift; continue; }
		UnknownOption "$1"
	done
	[[ ! $dist ]] && { EchoErr "A distribution name was not specified"; exit 1; }
	src="${src:-$defaultDistro}" version="${version:-$defaultVersion}"

	local cachedFile="$wslDir/image/$src.tar.gz" file="${src}"

	# find src from a locally cached file
	[[ ! -f "$file" ]] && file="$cachedFile"

	# find src from install directory
	if [[ ! -f "$file" ]]; then
		local i d v; IFS='-' read d v <<<"$src"; # d=distribution v=version	
		i="$(i dir)" && file="$(ls "$i/LINUX/wsl/image/$d/$d-$v-"* |& head -1)"
	fi

	# find src from LxRunOffline download site - https://github.com/DDoSolitary/LxRunOffline/wiki
	if [[ ! -f "$file" ]]; then
		file="$cachedFile"
		curl -L "http://lxrunoffline.apphb.com/download/$d/$v" -o "$file"
		! tar -tzf "$file" >& /dev/null && rm "$file"
	fi

	if [[ ! -f "$file" ]]; then
		EchoErr "Could not find the installation for $src"
		return 1
	fi

	wsl.exe --import "$dist" "$(utw "$wslDir/$dist")" "$(utw "$file")" --version "$version" || return
	shortcutCommand "$dist" || return
}

getDefaultUserCommand() 
{ 
	local dist; distDefaultArg "$1" && shift
	lxr get-uid -n "$dist" | Utf16toAnsi | RemoveCarriageReturn
}

setDefaultUserCommand()
{
	local dist; distDefaultArg "$1" && shift
	local uid="${1:-$USER}"

	! IsInteger "$uid" && uid="$(grep -i "$uid" "/etc/passwd" | head -1 | cut -d: -f3)"
	[[ ! $uid ]] && { EchoErr "Could not find user $USER"; return 1; }

	local currentUid="$(getDefaultUserCommand "$dist")" || return
	[[ "$uid" == "$currentUid" ]] && return

	echo "Chaning the default used from UID $currentUid to UID $uid..."
	lxr set-uid -n "$dist" -v "$uid"
}

shortcutCommand()
{ 
	local dist="$1" name="${2:-$dist}"; [[ ! $dist ]] && usage;
	MakeShortcut "wsl.exe" "$shortcutDir/$name" "-d $dist" "$(utw $(FindInPath wsl.exe))" || return
}

versionCommand()
{
	[[ $# == 0 ]] && { IsPlatform wsl1 && echo 1 || echo 2; return; }

	local dist; distArg "$1" || return	
	listPlainCommand | grep ^test1 | awk '{ print $3; }'
}

fixDnsNameLookupCommand()
{
	! IsPlatform wsl2 && { EchoErr "Name resolution only needs to be fixed in WSL 2"; return 1; }

	if ! grep "generateResolvConf = false" "/etc/wsl.conf" >& /dev/null; then
		printf "[network]\ngenerateResolvConf = false\n" | sudo tee -a "/etc/wsl.conf"
		clipw "wsl.exe -d $(wsl name) -e bash -l wsl FixDnsNameLookup"
		pause "When WSL is terminated execute the contents of the clipboard..."
		killCommand "$(nameCommand)" || return
		exit
	fi

	# fix /etc/resolv.conf which is a link to a missing file after the restart
	if ! grep "nameserver 192.168.100.2" "/etc/resolv.conf" >& /dev/null; then
		sudo rm -f "/etc/resolve.conf" || return
		printf "nameserver 192.168.100.2\nsearch hagerman.butare.net\n" | sudo tee "/etc/resolv.conf" || return
	fi

	return 0
}

run "$@"
