#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]...  [COMMAND]...
$(ScriptName) commands.

	program commands: close|IsInstalled|IsRunning|profile|program|restart|search|start|startup|vars|version
	api commands: api|check|namespace|search|token

	-r, --root		use the root namespace for API calls
	-t, --team		use a team token for API calls"
}

init()
{
	unset -v apiInitialized program baseDir rootDir userDir rootDirPattern
	defaultCommand="start" tokenCacheFile="dropbox-token-$USER"

	# platform configuration
	case "$PLATFORM_OS" in
		linux)
			program="$P/Dropbox/dropbox"
			baseDir="$HOME"
			rootDirPattern="* Dropbox"
			rootDir="$(FindDir "$baseDir" "$rootDirPattern" | head -1)"
			;;
		mac)
			program="$P/Dropbox.app"; [[ ! -d "$program" ]] && program="$UADATA/Dropbox/Dropbox.app"
			baseDir="$HOME/Library/CloudStorage"
			rootDirPattern="Dropbox-*"
			rootDir="$(FindDir "$baseDir" "$rootDirPattern" | head -1)"
			;;
		win)
			program="$P32/Dropbox/Client/Dropbox.exe"
			baseDir="$WIN_HOME"
			rootDirPattern="* Dropbox"
			rootDir="$(FindDir "$baseDir" "$rootDirPattern" | head -1)"
			;;
	esac

	# other configuration
	userDir="$rootDir/$(UserFullName)"; [[ ! -d "$userDir" ]] && userDir="$rootDir"
	homeDir="$HOME/Dropbox"
	UpdateInit || return
}

argStart() { unset -v root rootNamespaceId team token; }

opt()
{
	case "$1" in
		--root|-r) root="--root";;
		--team|-t) team="--team";;
		*) return 1;;
	esac
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { AppInstallCheck && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }
varsUsage() { echot "Usage: $(ScriptName) vars\nReturn Dropbox configuration variables: program baseDir homeDir rootDir rootDirPattern userDir"; }
varsCommand() { AppInstallCheck && ScriptReturn "program" "baseDir" "homeDir" "rootDir" "rootDirPattern" "userDir"; }
versionCommand() { AppInstallCheck && AppVersion "$program" | cut -d"." -f1-3; }

#
# API command
#

apiUsage()
{
	EchoWrap "Usage: $(ScriptName) api [URI]($uri) [JSON]($json)
Perform an API command."
}

apiArgStart() { uri="/check/user"; json='{"query": "ok"}'; }

apiArgs()
{
	(( $# > 0 )) && { ScriptArgGet "uri" -- "$@"; shift; }
	(( $# > 0 )) && { ScriptArgGet "json" -- "$@"; shift; }
	return 0
}

apiCommand() { api "$uri" "$json"; }

#
# API Helper
#

api()
{
	local uri="$1" json="$2"

	# initialize the API
	apiInit || return

	# get API arguments
	local args=()
	args+=(--header "Authorization: Bearer $token")
	[[ $root ]] && args+=(--header 'Dropbox-API-Path-Root: {".tag": "namespace_id", "namespace_id": "'$rootNamespaceId'"}')

	# perform the API call
	local result; result="$(RunLog curl --silent -X POST "https://api.dropboxapi.com/2/$uri" "${args[@]}" \
		--header "Content-Type: application/json" \
		--data "$json")" || return

	# validate and show result
	JsonValidate "$result" "error" "error_summary" && printf "$result"
}

apiInit()
{
	[[ $apiInitialized ]] && return
	
	log1 "getting the API configuration from the credential store"

	[[ $root ]] && { rootNamespaceId="$(credential get dropbox RootNamespaceId --fallback)" || return; }	

	# get the team token
  if [[ $team ]]; then
  	token="$(credential get dropbox TeamToken --fallback)" || return
  	apiInitialized="true"
  	return
  fi

  # get the token
  token="$(credential get dropbox token --fallback --quiet)" || return
  tokenIsValid && return

	# get application information
	local appKey appSecret; initAppInfo || retuirn

  # get the refresh token
  local refreshToken="$(credential get dropbox RefreshToken --fallback --quiet)" || return

	# refresh the token
	log1 "refreshing the token using refreshToken=$refreshToken"
	local response; response="$(curl --silent "https://api.dropbox.com/oauth2/token" \
    -d "grant_type=refresh_token" \
    -d "refresh_token=$refreshToken" \
    -d "client_id=$appKey" \
    -d "client_secret=$appSecret")" || return
	JsonValidate "$response" "error" "error_description" || return

	# save the token
	tokenSave "$response" || return
}

#
# Check Command
#

checkCommand()
{
	[[ ! $json ]] && json='{"query": "ok"}'
	api "check/user" "$json" || return
}

#
# Namespace Commands
#

namespaceCommand() { namespaceListCommand; }

namespaceListCommand()
{
	[[ ! $json ]] && json='{"limit": 1}'
	api "team/namespaces/list" "$json" || return
}

#
# Search Command
#

searchUsage()
{
	EchoWrap "Usage: $(ScriptName) search QUERY
Search for files and folders.

	-e, --extensions EXTENSIONS		comma separated list of extensions to search for
	    --files										search for files only
	-j, --json										return search results as JSON
	-o, --open										select and open the file
	-r, --recent									recent files (less than 1 month old)
	-w, --word										search for Word files"
}

searchArgStart() { unset -v extensions filesOpt jsonOpt open recent word; uri="/check/user"; json='{"query": "ok"}'; }
searchArgs() { ScriptArgGet "search" -- "$@"; shift; }

searchOpt()
{
	case "$1" in
		--extensions|--extensions=*|-e|-e=*) ScriptOptGet "extensions" "$@"; StringToArray "$extensions" "," extensions;;
		--files) filesOpt=', "filename_only": true';;
		--json|-j) jsonOpt="--json";;
		--open|-o) open="--select";;
		--recent|-r) recent="after:$(${G}date -d '1 month ago' +'%Y-%m-%d') ";;
		--word|-w) extensions=(docx);;
		*) return 1;;
	esac
}

# https://www.dropbox.com/developers/documentation/http/documentation#files-search
searchCommand()
{
	PrintErr "searching..."
	local files=(); IFS=$'\n' ArrayMakeC files search || return
	EchoErrEnd "done"

	# no files found
	(( ${#files} == 0 )) && return

	# show files if not opening
	[[ ! $open ]] && { ArrayDelimit files '\n'; return; }

	# open a single file
	(( ${#files[@]} == 1 )) && { CloudConf && open "$CLOUD/${files[0]}"; return; }

	# select and open a file
	local file; file="$(ArrayDelimit files '\n' | fzf)" || return
	[[ ! $file ]] && return
	CloudConf && start "$CLOUD/$file"; 
}

search()
{
	[[ $extensions ]] && extensions=', "file_extensions": ['$(ArrayDelimit --quote extensions)']'

	local json; json="$(cat <<-EOF
			{ 
				"options": {
					"max_results": 1000 
					$extensions
					$filesOpt
				},
				"query":"${recent}$(QuoteQuotes "$search")"
			}
			EOF
		)"

	local result; result="$(api "files/search_v2" "$json")" || return
	[[ $jsonOpt ]] && printf "$result" || JsonGetKey "$result" '.matches[].metadata.metadata.path_display'
}

#
# Token Commands
#

tokenCommand() { usage; }

tokenAuthorizeUsage()
{
	EchoWrap "Usage: $(ScriptName) token authorize IsValid
Token authentication commands."
}

tokenAuthorizeCommandUsage()
{
	EchoWrap "Usage: $(ScriptName) token authorize
Prompt user for authorization and get a new token."
}

tokenAuthorizeCommand()
{
	# get application information
	local appKey appSecret; initAppInfo || retuirn

	# get the authorization code
	start "https://www.dropbox.com/oauth2/authorize?client_id=$appKey&response_type=code&token_access_type=offline" || return
	local authorizationCode; authorizationCode="$(ask text "Authorization Code")" || return

	# get the token
	local response; response="$(curl --silent "https://api.dropbox.com/oauth2/token" \
    -d "code=$authorizationCode" \
    -d "grant_type=authorization_code" \
    -d "client_id=$appKey" \
    -d "client_secret=$appSecret")" || return

	# save the refresh token
	local refreshToken="$(JsonGetKey "$response" "refresh_token")"; [[ "$refreshToken" == "null" ]] && { ScriptErr "unable to get the refresh token"; return 1; }
	CredentialSetBoth dropbox RefreshToken "$refreshToken" "${globalArgs[@]}" || return

	# save the token
	tokenSave "$response" || return
}

tokenSave()
{
	local response="$1"
	JsonLog "$response" 1

	# save the token	
	token="$(JsonGetKey "$response" "access_token")"; [[ "$token" == "null" ]] && { ScriptErr "unable to get the access token"; return 1; }	
	CredentialSetBoth dropbox token "$token" "${globalArgs[@]}" || return

	# save the token expiration seconds
	expiresInSeconds="$(echo "$response" | jq ".expires_in" 2> /dev/null | RemoveQuotes)" || return
	UpdateSet "$tokenCacheFile" "$(tokenGetExpirationInSeconds "$expiresInSeconds")" || return

	# logging
	log1 "token=$token refreshToken=$refreshToken expiresInSeconds=$expiresInSeconds"
}

tokenIsValidCommand() { apiInit && tokenIsValid; }

tokenIsValid()
{
	local expiresInSeconds="$(tokenGetExpirationInSeconds "$(UpdateGet "$tokenCacheFile")")"
	[[ $token ]] && [[ -f "$updateDir/$tokenCacheFile" ]] && (( $(GetFileModSeconds "$updateDir/$tokenCacheFile") + expiresInSeconds > $(GetSeconds --no-nanoseconds) ))
}

# tokenGetExpirationInSeconds SECONDS - return SECONDS if it is an interger, otherwise return the default token expiration time
tokenGetExpirationInSeconds()
{
	local expiresInSeconds="$1" expiresInSecondsDefault="14400"
	! IsInteger "$expiresInSeconds" && expiresInSeconds="$expiresInSecondsDefault"
	echo "$expiresInSecondsDefault"
}

#
# helper
#

initAppInfo()
{	
	appKey="$(credential get dropbox AppKey --fallback)" || return
	appSecret="$(credential get dropbox AppSecret --fallback)" || return
}

ScriptRun "$@"
