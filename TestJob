#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [DIR]... [OPTION]...
Run batch job tests.  Run using 'RunScript --hashi --ssh-agent --hashi TestJob'."
}

init() { defaultCommand="run"; }

runCommand()
{
	local destHost="pi1" countTo="4" result

	header "Test Job"
	#configuration && testCredential && testScp && testSsh && testBackupLocal && testBackupRemote && count
	testBackupRemote
	result="$?"
	
	(( $result == 0 )) && hilight "success" || echo "${RED}fail${reset}"
	return "$result"
}

configuration()
{
	hilight "Configuration..."
	echo "HOSTNAME=$HOSTNAME"
	echo "USER=$USER"
	echo "PATH=$PATH"
	echo

	hilight "SSH Agent status..."
	SshAgent status "${globalArgs[@]}" || return
	echo

	hilight "Hashi status..."
	hashi config status "${globalArgs[@]}" || return
	echo
}

count()
{
	hilight "Counting up to $countTo..."
	for (( i = 0; i <= $countTo; i++ )); do
		echo "$i"
		sleep 1
	done
	echo
}

testCredential()
{
	hilight "Testing credentials..."
	credential manager status "${globalArgs[@]}" || return
	echo "test/check=$(credential get test check "${globalArgs[@]}")"
	echo
}

testScp()
{
	hilight "Testing scp to $destHost..."
	srcFile="/tmp/now_src.txt"
	destFile="/tmp/now_dest.txt"
	GetTimeStamp > "$srcFile" || return
	scp "$srcFile" "$destHost:$destFile" || return
	echo
}

testSsh()
{
	hilight "Testing ssh to $destHost..."
	ssh "$destHost" cat "$destFile" || return
	echo
}

testBackupLocal()
{
	hilight "Testing local backup..."
	local archive="TestJobLocal"
	BorgHelper backup "/tmp" --archive="$archive" "${globalArgs[@]}" || return
	backupFinish "$archive" || return
}

testBackupRemote()
{
	hilight "Testing remote backup..."

	local archive="TestJobRemote"; RunLog BorgConf "${globalArgs[@]}" || return
	RunLog SshHelper --borg --interactive --pseudo-terminal "$destHost" "${globalArgs[@]}" -- BorgHelper backup "/tmp" --archive "$archive" "${globalArgs[@]}" || return
	backupFinish "$archive" --repository "$destHost" || return
}

backupFinish()
{
	local archive="$1"; shift; BorgConf "$@" || return
	echo

	# prune
	hilight "Pruning $archive..."
	borg prune --keep-last 2 --prefix "$archive-" || return
	echo

	# status
	hilight "Backup status..."
	echo "BORG_REPO=$BORG_REPO"
	borg list --prefix "$archive-" || return
	echo
}

ScriptRun "$@"