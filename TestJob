#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [DIR]... [OPTION]...
Run batch job tests.  Assumes:
1) the SSH agent is configured (SshAgentStart --quiet)
2) Hashi tools are configured (ScriptEval hashi config environment)

This can be accomplished by tunning the script with with 'RunScript --ssh-agent --hashi'"
}

init() { defaultCommand="run"; }

runCommand()
{
	local destHost="pi1" countTo="4" result

	header "Test Job"
	configuration && testCredential && testScp && testSsh && testBackupLocal && testBackupRemote && count
	result="$?"
	
	(( $result == 0 )) && hilight "success" || echo "${RED}fail${reset}"
	return "$result"
}

configuration()
{
	hilight "Configuration..."
	echo "HOSTNAME=$HOSTNAME"
	echo "USER=$USER"
	echo "PATH=$PATH"
	echo

	hilight "SSH Agent status..."
	SshAgent status "${globalArgs[@]}" || return
	echo

	hilight "Hashi status..."
	hashi status "${globalArgs[@]}" || return
	echo
}

count()
{
	hilight "Counting up to $countTo..."
	for (( i = 0; i <= $countTo; i++ )); do
		echo "$i"
		sleep 1
	done
	echo
}

testCredential()
{
	hilight "Testing credentials..."
	echo "credential type=$(credential type "${globalArgs[@]}")" || return
	echo "test/key1=$(credential get test key1 "${globalArgs[@]}")"
	echo
}

testScp()
{
	hilight "Testing scp to $destHost..."
	srcFile="/tmp/now_src.txt"
	destFile="/tmp/now_dest.txt"
	GetTimeStamp > "$srcFile" || return
	scp "$srcFile" "$destHost:$destFile" || return
	echo
}

testSsh()
{
	hilight "Testing ssh to $destHost..."
	ssh "$destHost" cat "$destFile" || return
	echo
}

testBackupLocal()
{
	hilight "Testing local backup..."
	local archive="TestJobLocal"
	BorgHelper backup "/tmp" --archive="$archive" "${globalArgs[@]}" || return
	backupFinish "$archive" || return
}

testBackupRemote()
{
	hilight "Testing remote backup..."
	local archive="TestJobRemote"
	local passphrase; passphrase="$(credential get borg passphrase "${globalArgs[@]}")" || return
	RunLog SshHelper --interactive --pseudo-terminal "$destHost" "${globalArgs[@]}" -- BorgHelper backup "/tmp" --archive "$archive" --passphrase="$passphrase" "${globalArgs[@]}" || return
	backupFinish "$archive" --repository "$destHost" || return
}

backupFinish()
{
	local archive="$1"; shift; ScriptEval BorgHelper environment "$@" || return
	echo

	# prune
	echo "Pruning $archive..."
	borg prune --keep-last 2 --prefix "$archive-" || return
	echo

	# status
	echo "Backup status..."
	echo "BORG_REPO=$BORG_REPO"
	borg list --prefix "$archive-" || return
	echo
}

ScriptRun "$@"