#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [DIR]... [OPTION]...
Run batch job tests.  Run using 'RunScript --hashi --ssh-agent --hashi TestJob'."
}

init() { defaultCommand="run"; }

runCommand()
{
	local backupHost="backup3.butare.net" destHost="pi1" countTo="4" result

	header "Test Job"
	configuration && testCredential && testScp && testSsh && testBackupLocal && testBackupRemote && count
	result="$?"
	
	(( $result == 0 )) && hilight "success" || echo "${RED}fail${reset}"
	return "$result"
}

configuration()
{
	hilight "Configuration..."
	echo "HOSTNAME=$HOSTNAME"
	echo "USER=$USER"
	echo "PATH=$PATH"
	echo

	hilight "SSH Agent status..."
	SshAgent status "${globalArgs[@]}" || return
	echo

	hilight "Hashi status..."
	hashi config status "${globalArgs[@]}" || return
	echo
}

count()
{
	hilight "Counting up to $countTo..."
	for (( i = 0; i <= $countTo; i++ )); do
		echo "$i"
		sleep 1
	done
	echo
}

testCredential()
{
	hilight "Testing credentials..."
	credential manager status "${globalArgs[@]}" || return
	echo "test/check=$(credential get test check "${globalArgs[@]}")"
	echo
}

testScp()
{
	hilight "Testing scp to $destHost..."
	srcFile="/tmp/now_src.txt"
	destFile="/tmp/now_dest.txt"
	GetTimeStamp > "$srcFile" || return
	scp "$srcFile" "$destHost:$destFile" || return
	echo
}

testSsh()
{
	hilight "Testing ssh to $destHost..."
	ssh "$destHost" cat "$destFile" || return
	echo
}

testBackupLocal()
{
	hilight "Testing local backup..."; local archive="TestJobLocal"
	backupStart && BorgHelper backup "/tmp" --archive="$archive" "${globalArgs[@]}" && backupFinish "$archive"
}

testBackupRemote()
{
	hilight "Testing remote backup..."; local archive="TestJobRemote"
	backupStart "$destHost" && RunLog BorgHelper remote "$destHost" "${globalArgs[@]}" -- \
		backup "/tmp" --archive="$archive" --repository="$destHost" --backup-host="$backupHost" && backupFinish "$archive" --repository "$destHost"
}

backupStart()
{
	BorgConf --repository="${1:-$HOSTNAME}" --backup-host="$backupHost" && BorgHelper status 
}

backupFinish()
{
	local archive="$1"; shift

	# prune
	hilight "Pruning $archive..."
	borg prune --keep-last 2 --prefix "$archive-" || return
	echo

	# status
	hilight "Backup status..."
	borg list --prefix "$archive-" || return
	echo
}

ScriptRun "$@"