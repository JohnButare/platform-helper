#!/bin/bash
. app.sh

# setup examples:
#   cygwin download 			# view and download the latest updates, or download new packages
#   cygwin install 				# install latest updates
# 	cygwin download -q 		# get latest updates with no prompting
# 	cygwin install -q 		# install latest updates with no prompting
#   cygwin download -q -P attr,cron	# download the attr and cron packages silently
#   cygwin install -q -P attr,cron	# download the attr and cron packages silently
#		cygwin close || return; cygwin install || return # install packages which require Cygwin programs closed
# 	cygwin setup -q --download --root /cygdrive/c/Temp # re-download core packages that are installed on the local system

usage() {	
echot "\
usage: cygwin COMMAND
	cleanup				cleanup directories
  close 				close Cygwin programs
  (re)download 	download Cygwin installation files to package local 
  install 			install Cygwin from local pacakge store
  setup					start the Cygwin setup program
	-P|--packages <package,...>
	-C|--categories <categories,...>
	-q|--quiet  		run in quiet mode without prompting"
	exit $1
}

downloadUsage() { helpCommnad; }
installUsage() { helpCommand; }
setupUsage() { helpCommand; }

init()
{ 
	installDir="$P/Cygwin"
	bin="$InstallDir/bin"
	downloadSite="http://mirrors.kernel.org/sourceware/cygwin/"
	defaultPackages="dialog,git,git-gui,gitk,git-completion,openssh,util-linux,vim"
	setupArgs=( --no-shortcuts --site "$downloadSite" --root "$installDir" )
}

args()
{
	unset help setup packageDir 
	quiet="--package-manager"
	while [[ "$1" != "" ]]; do
		case "$1" in
			-q|--quiet) quiet="--quiet-mode";;
			-h|--help) help="true";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(download|install|setup) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
RunSetup() {	FindSetup || return; start -d="$tmp" "$setup" "${setupArgs[@]}" "$@"; }
setupCommand() { RunSetup "$@"; }
installCommand() { RunSetup $quiet --local-install "$@"; }
downloadCommand() { RunSetup $quiet --download "$@"; }
helpCommand() { FindSetup || return; "$setup" --help; exit $?; }

redownloadCommand()
{
	FindSetup || return
	DelDir --content --ask "$packageDir"
	RunSetup -q --download --root /cygdrive/c/Temp -P "$defaultPackages"
}

closeCommand()
{
	pskill ssh-agent >& /dev/null
	service stop sshd

	while true; do
		bashCount=$(( $(pslist bash |& egrep "^bash" | wc -l) - 4 ))
		(( bashCount == 0 )) && break
		pause "Manually close $bashCount bash shells then process any key..."
	done
	echo "Once setup has started, close this terminal"
}

FindSetup()
{
	[[ $setup ]] && return
	local base
	base="$(FindInstallFile Cygwin)" || return
	setup="$base/setup/setup-x64.exe"
	packageDir="$base/package-x64"
	setupArgs+=( --local-package-dir "$packageDir" )
}

cleanupCommand()
{
	# cleanup files in /
	local files=( "/Cygwin.bat" "/Cygwin-Terminal.ico" "/Cygwin.ico" )
	for file in "${files[@]}"; do 
		rm -f "$file" || return
	done
}

run "$@"
