#!/usr/bin/env bash
. app.sh

# setup examples:
#   cygwin download 			# view and download the latest updates, or download new packages
#   cygwin install 				# install latest updates
# 	cygwin download -q 		# get latest updates with no prompting
# 	cygwin install -q 		# install latest updates with no prompting
#   cygwin download -q -P attr,cron	# download the attr and cron packages silently
#   cygwin install -q -P attr,cron	# download the attr and cron packages silently
#		cygwin close || return; cygwin install || return # install packages which require Cygwin programs closed
# 	cygwin setup -q --download --root /cygdrive/c/Temp # re-download core packages that are installed on the local system

usage() {	
echot "\
usage: cygwin COMMAND
	cleanup				cleanup directories
  close|open		prepare Cygwin for updating
  (re)download 	download Cygwin installation files to package local 
  FixCompletion	optimize bash completion load time
  install 			install packages from the local pacakge store
  new 					install new packages
  default		  	install default packages
  setup					start the Cygwin setup program
	-P|--packages <package,...>
	-C|--categories <categories,...>
	-q|--quiet  		run in quiet mode without prompting"
	exit $1s
}

downloadUsage() { helpCommnad; }
installUsage() { helpCommand; }
setupUsage() { helpCommand; }

init()
{ 
	installDir="$P/Cygwin"
	bin="$InstallDir/bin"
	downloadSite="http://mirrors.kernel.org/sourceware/cygwin/"
	setupArgs=( --no-shortcuts --site "$downloadSite" --root "$installDir" )

	# packages: update here and in bootstrap.cmd
	# - popt - required for cygstart, cygutils dependency is not correct
	# - openssh - required for ssh-agent
	# - libiconv - required for man
	local corePackages="dialog,openssh,openssl,util-linux,wget,popt,libiconv"
	local gitPackages="git,git-gui,gitk,git-completion,tig"
	local rubyPackages="ruby,ruby-pkg-config,gcc-core,make,libcrypt-devel,libffi6,libffi-devel,cygwin32-libffi"
	local otherPackages="nano,vim,whois"
	defaultPackages="$corePackages,$rubyPackages,$gitPackages,$otherPackages"
}

args()
{
	unset help setup packageDir 
	quiet="--package-manager"
	while [[ "$1" != "" ]]; do
		case "$1" in
			-q|--quiet) quiet="--quiet-mode";;
			-h|--help) help="true";;
			FixCompletion) command="FixCompletion";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(download|install|new|setup) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=( "$@" )
}

RunSetup()
{	
	FindSetup || return
	export SEE_MASK_NOZONECHECKS=1 # disable Open File Secirity Warning
	start "$setup" "${setupArgs[@]}" "$@"
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
helpCommand() { FindSetup || return; "$setup" --help; exit $?; }
setupCommand() { RunSetup "$@"; }

newCommand() { RunSetup $quiet --download --local-install "$@"; InstallFinal; }
installCommand() { RunSetup $quiet --local-install "$@"; InstallFinal; }
InstallFinal() { pause; echo -n "Cleaning up..."; cygwin cleanup || return; echo "done"; }
defaultCommand() { RunSetup $quiet --local-install -P "$defaultPackages"; InstallFinal; }

FixCompletionCommand()
{
	printf "Optimizing bash completion load time..."
	[[ ! -d /etc/bash_completion.d/hold ]] && { mkdir /etc/bash_completion.d/hold || return; }
	mv /etc/bash_completion.d/!(hold) /etc/bash_completion.d/hold || return
	mv /etc/bash_completion.d/hold/@(bash-builtins|coreutils|git|rsync|ssh) /etc/bash_completion.d || return
	echo "done"
}

downloadCommand() { RunSetup $quiet --download "$@"; }

redownloadCommand()
{
	FindSetup || return
	DelDir --contents --ask "$packageDir"
	RunSetup -q --download --root /cygdrive/c/Temp -P "$defaultPackages"
}

openCommand()
{
	service exist sshd && service start sshd
	SshAgent startup
}

closeCommand()
{
	SshAgent cleanup || return
	service exist sshd && { service stop sshd || return; }

	while true; do
		bashCount=$(( $(pslist bash |& egrep "^bash" | wc -l) - 4 ))
		(( bashCount == 0 )) && break
		pause "Manually close $bashCount bash shells then process any key..."
	done
	echo "Once setup has started, close this terminal"
}

FindSetup()
{
	[[ $setup ]] && return
	local base
	base="$(FindInstallFile Cygwin)" || return
	setup="$base/setup/setup-x64.exe"
	packageDir="$base/package-x64"
	setupArgs+=( --local-package-dir "$packageDir" )
}

cleanupCommand()
{
	service exist sshd && service start sshd
	
	# cleanup files in /
	local files=( "/Cygwin.bat" "/Cygwin-Terminal.ico" "/Cygwin.ico" )
	for file in "${files[@]}"; do 
		rm -f "$file" || return
	done
}

run "$@"
