#!/usr/bin/env bash
. app.sh

# - setup: https://www.cygwin.com/install.html
# - arguments: https://www.cygwin.com/faq.html#faq.setup.cli
#   --download: download from internet, faster, proxy settings must be correct, for this reason
#     the install and package commands use --download even though they do not need to

# setup examples:
#   cygwin download 			# view and download the latest updates, or download new packages
#   cygwin install 				# install latest updates
# 	cygwin download -q 		# get latest updates with no prompting
# 	cygwin install -q 		# install latest updates with no prompting
#   cygwin download -q -P attr,cron	# download the attr and cron packages silently
#   cygwin install -q -P attr,cron	# download the attr and cron packages silently
#		cygwin close || return; cygwin install || return # install packages which require Cygwin programs closed
# 	cygwin setup -q --download --root /cygdrive/c/Temp # re-download core packages that are installed on the local system

usage() {	
echot "\
usage: cygwin COMMAND
	cleanup				cleanup directories
  close|open		prepare Cygwin for updating
  config 				edit Cygwin configuration file (net-method=IE,Direct,Proxy)
  (re)download 	download Cygwin installation files to package local 
  FixCompletion	optimize bash completion load time
  install 			install packages from the local pacakge store
  new 					install new packages
  package NAME	install a package collection
  setup					start the Cygwin setup program
	-P|--packages <package,...>
	-C|--categories <categories,...>
	-q|--quiet  		run in quiet mode without prompting"
	exit $1
}

downloadUsage() { helpCommnad; }
installUsage() { helpCommand; }
setupUsage() { helpCommand; }

init()
{ 
	downloadSite="http://mirrors.kernel.org/sourceware/cygwin/"
	setupArgs=( --no-shortcuts --site "$downloadSite" --root "$(utw "$P/Cygwin")" )

	# corePackages: copy to bootstrap.cmd
	# - expect - required for SshAgent
	# - openssh - required for ssh-agent
	# - libiconv - required for man
	corePackages="bash-completion,bash-completion-devel,dialog,expect,nano,openssh,openssl,util-linux,wget"
	otherPackages="libiconv,whois,tmux,zip,unzip,nc,procps-ng" # nc=netcat procps-ng=top
	gitPackages="git,git-gui,gitk,git-completion,tig,gettext" # stash error in Git Extensions without gettext
	pythonPackages="python3"
	rubyPackages="ruby,rubygems,ruby-devel,rubygems-doc,ruby-pkg-config,gcc-core,make,libcrypt-devel,libffi6,libffi-devel,cygwin32-libffi"
	allPackages="$corePackages,$otherPackages,$gitPackages,$pythonPackages,$rubyPackages"

	xPackages="xorg-server,xinit,startx,startwin,xorg-docs,xlaunch,"
}

args()
{
	unset help setup packageDir
	quiet="--package-manager"
	while [[ "$1" != "" ]]; do
		case "$1" in
			-q|--quiet) quiet="--quiet-mode";;
			-h|--help) help="true";;
			FixCompletion) command="FixCompletion";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(download|install|new|setup|package) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=( "$@" )
}

RunSetup()
{	
	FindSetup || return

	# disable Open File Secirity Warning
	export SEE_MASK_NOZONECHECKS=1 

	# proxy
	local proxy=
	ScriptEval intel SetProxy || return
	[[ $http_proxy ]] && proxy="--proxy ${http_proxy/http:\/\//}"
	start "$setup" $proxy "${setupArgs[@]}" "$@"
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
helpCommand() { FindSetup || return; "$setup" --help; exit $?; }
setupCommand() { RunSetup "$@"; }

newCommand() { RunSetup $quiet --download --local-install "$@"; InstallFinal; }
installCommand() { RunSetup $quiet --download --local-install "$@"; InstallFinal; } # use --download to prevent slowness
InstallFinal() { pause; echo -n "Cleaning up..."; cygwin cleanup || return; echo "done"; }

packageCommand() 
{ 
	[[ $# != 1 ]] && { usage 1; }
	local name="$1"; local packages="${name}Packages"; packages="${!packages}"

	if [[ ! $packages ]]; then
		EchoErr "$name is not a valid package collection"
		return 1
	fi

	RunSetup $quiet --download --download --local-install -P "$packages" # use --download to prevent slowness
	InstallFinal
}

FixCompletionCommand()
{
	local keep="bash-builtins|coreutils|git|hub|rsync|ssh"

	[[ ! -d /etc/bash_completion.d ]] && return

	printf "Optimizing bash completion load time..."
	
	[[ ! -d /etc/bash_completion.d/hold ]] &&
		{ mkdir /etc/bash_completion.d/hold || return; }

	ls /etc/bash_completion.d/!(hold) >& /dev/null &&
		{ mv /etc/bash_completion.d/!(hold) /etc/bash_completion.d/hold || return; }

	ls /etc/bash_completion.d/hold/@($keep) >& /dev/null &&
		{ mv /etc/bash_completion.d/hold/@($keep) /etc/bash_completion.d || return; }

	echo "done"
}

downloadCommand() { RunSetup $quiet --download "$@"; }

redownloadCommand()
{
	FindSetup || return
	DelDir --contents --ask "$packageDir"
	RunSetup -q --download --root /cygdrive/c/Temp -P "$allPackages"
}

openCommand()
{
	service exist sshd && service start sshd
	SshAgent startup
}

closeCommand()
{
	SshAgent cleanup || return
	service exist sshd && { service stop sshd || return; }

	while true; do
		bashCount=$(( $(pslist bash |& egrep "^bash" | wc -l) - 4 ))
		(( bashCount == 0 )) && break
		pause "Manually close $bashCount bash shells then process any key..."
	done
	echo "Once setup has started, close this terminal"
}

FindSetup()
{
	[[ $setup ]] && return
	local base
	base="$(FindInstallFile Cygwin)" || return
	setup="$base/setup/setup-x86_64.exe"
	packageDir="$base/package-x64"
	setupArgs+=( --local-package-dir "$packageDir" )
}

cleanupCommand()
{
	service exist sshd && service start sshd
	
	# cleanup files in /
	local files=( "/Cygwin.bat" "/Cygwin-Terminal.ico" "/Cygwin.ico" )
	for file in "${files[@]}"; do 
		rm -f "$file" || return
	done
}

configCommand() { TextEdit "/etc/setup/setup.rc"; }

run "$@"
