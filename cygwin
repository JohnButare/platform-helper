#!/bin/bash
. app.sh

# arguments: setup.exe --help, -q|--quiet-mode, -P|--packages <command separated package list>
#   -M|--package-manager package manager
# example: cygwin close || return; cygwin setup --quiet-mode --packages attr || return

usage() {	
echot "\
usage: cygwin [close|download|setup|start] (setup)
  close - close Cygwin programs
  download - download new or updated Cygwin binaries to the local store
  setup [-P|--packages <package,...>] [-C|--categories <categories,...>] 
  	Install packages from local store"
	-q|--quiet  		run in quiet mode without prompting
	exit $1
}

init()
{ 
	installDir="$P/Cygwin"
	bin="$InstallDir/bin"
	downloadSite="http://mirrors.kernel.org/sourceware/cygwin/"
	setupArgs=( --no-shortcuts --site "$downloadSite" --root "\"$(utw "$installDir")\"" )
}

args()
{
	unset setup packageDir
	while [[ "$1" != "" ]]; do
		case "$1" in
			-h|--help) usage 0;;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(download|setup) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='setup'
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
RunSetup() {	FindSetup || return; cygstart -d "$tmp" "$setup" "${setupArgs[@]}" "$@"; }
downloadCommand() { RunSetup --package-manager --download "$@"; }
startCommand() { RunSetup "$@"; }

setupCommand()
{
	FindSetup || return
	RunSetup --package-manager --local-install "$@"
}

closeCommand()
{
	pskill ssh-agent >& /dev/null
	service stop sshd

	while true; do
		bashCount=$(( $(pslist bash |& egrep "^bash" | wc -l) - 4 ))
		(( bashCount == 0 )) && break
		pause "Manually close $bashCount bash shells then process any key..."
	done
	echo "Once setup has started, close this terminal"
}

FindSetup()
{
	[[ $setup ]] && return

	# FindPublicDoc data/install/Cygwin/setup/setup-x64.exe
	
	setup="/cygdrive/e/data/install/Cygwin/setup/setup-x64.exe"
	packageDir="/cygdrive/e/data/install/Cygwin/package-x64"

	setupArgs+=( --local-package-dir "\"$(utw "$packageDir")\"" )
}

run "$@"