#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|environment|IsInstalled|IsRunning|IsSignedin|program|restart|signin|start|startup|status](start)
$(ScriptName) commands."
}

init()
{
	case "$PLATFORM" in
		mac) program="TBD";;
		win) program="$UADATA/1Password/app/8/1Password.exe";;
		*) unset program;;
	esac

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
environmentCommand() { initSession && ScriptReturn --export OP_SESSION_my; }
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsTaskRunning "$(GetFileName "$program")"; }
isSignedinCommand() {	 quiet="true" initSession && echo -n "" | op signin --session $OP_SESSION_my >& /dev/null; } # validates the session quickly
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
statusCommand() { isSignedinCommand && echo "signed in" || echo "not signed in"; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { isInstalledCommand && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }

signinCommand()
{	
	[[ ! $force ]] && isSignedinCommand && return

	# validate we can get the password from the a user
	if ! IsStdIn; then
		[[ ! $quiet ]] && ScriptErr "a terminal is required to read the password."
		return 1
	fi

	# get login information
	local url; url="$(credGet url)" || return
	local email; email="$(credGet email)" || return
	local key; key="$(credGet SecretKey)" || return
	local session="$(getSession)"
	local args=(); [[ $session ]] && args+=(--session "$OP_SESSION_my")

	# signin
	unset OP_SESSION_my
	eval "$(op signin "$url" "$email" "$key" --cache "${args[@]}")" || return
	[[ ! $OP_SESSION_my ]] && return 1

	# save and return the new session
	credSet "session" "$OP_SESSION_my" || return
	ScriptReturn --export OP_SESSION_my
}

#
# helper
#

credExists() { credential 1Password exists "$1" --fallback --exclude-managers=op "${globalArgs[@]}"; }
credGet() { credential gets 1Password "$1" --fallback --exclude-managers=op "${globalArgs[@]}"; }
credSet() { credential set 1Password "$1" "$2" --fallback --exclude-managers=op "${globalArgs[@]}" > /dev/null; }

getSession()
{
	[[ $OP_SESSION_my && ! $force ]] && { echo "$OP_SESSION_my"; return; }
	credExists "session" && { credGet "session"; return; }
	return 0
}

initSession()
{
	local session; session="$(getSession)" || { [[ ! $quiet ]] && ScriptErr "not signed in"; return 1; }
	export OP_SESSION_my="$session"
}
									 
ScriptRun "$@"
