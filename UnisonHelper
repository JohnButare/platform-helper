#!/usr/bin/env bash
. app.sh || exit

usage() { ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... IsInstalled|profile|program|start|sync
$(ScriptName) commands."
}

init()
{
	program="$(FindInPath "unison")"
	gui="$(FindInPath "unison-gtk")"
	return 0
}

isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profile $noPrompt --app "Unison" --method "$HOME/.unison" --files "*.prf" "${profileArgs[@]}"; }
programCommand() { echo "$program"; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { [[ -f "$gui" ]] && start "$gui" "${startArgs[@]}"; }
versionCommand() { AppInstallCheck && "$program" -version | cut -d" " -f3; }

#
# Sync Command
#

syncUsage()
{
	echot "Usage: $(ScriptName) sync SRC_DIR DEST_HOST [DEST_DIR](SRC_DIR)
Syncronize the directory to the host.

	-H, --host HOST		if specified, synchronize the source from the specified host
	    --no-props	 	do not syncronize properties (permissions or attributes)
	-r, --root				run Unison as root

Synchronization direction:
	-do, --dest-older		assume destination files are than the local source files
	-so, --src-older		assume local files are older than the destination files"
}

syncArgStart() { unset destHost destDir method noProps remoteHost root rootArg srcDir; }

syncArgs()
{
	ScriptArgGet "srcDir" -- "$@"; shift
	ScriptArgGet "destHost" -- "$@"; shift; (( $# == 0 )) && return
 	ScriptArgGet "destDir" -- "$@"; shift
}

syncOpt() 
{
	case "$1" in
		--host|--host=*|-H|-H=*) ScriptOptGet "remoteHost" "$@" && hostValidate "$remoteHost";;
		--no-props) noProps="--no-props";;
		--root|-r) rootArg="--root" root="root@";;

		--dest-older|--destination-older|-do) method="--dest-older";;
		--src-older|--source-older|-so) method="--src-older";;
		*) return 1
	esac
}

syncCommand()
{
	# local sync
	[[ ! $remoteHost ]] && { sync; return; }

	# synchronization direction
	[[ "$method" == "--src-older" ]] && args+=(-force "$destDir")
	[[ "$method" == "--dest-older" ]] && args+=(-force "$srcDir")

	RunLog SshHelper connect "$remoteHost" --interactive --credential --hashi --ssh-agent "${globalArgs[@]}" -- "$(cat <<-EOF
		SshAgentConf && UnisonHelper sync "$srcDir" "$destHost" "$destDir" $rootArg $noProps ${globalArgs[@]} -- ${otherArgs[@]}
		EOF
	)" || return

}

sync()
{
	# validate
	{ hostValidate "$destHost" && ScriptCheckDir "$srcDir"; } || return

	# arguments
	local args=(-servercmd "/usr/local/bin/unison")
	[[ $force ]] && args+=(-force "$srcDir")
	[[ $noPrompt ]] && args+=(-batch)
	[[ $noProps ]] && args+=(-dontchmod -perms=0)

	# run
	local sudo=(); [[ $root ]] && sudo=(sudor --)
	RunLog "${sudo[@]}" unison "$srcDir" "ssh://$root$destHost/${destDir:-$srcDir}" -auto "${args[@]}" "${otherArgs[@]}"
}

#
# helper
#

hostValidate() { local host="$1"; SshIsAvailablePort "$host" && return; ScriptErr "'$host' is not available"; return 1; }

ScriptRun "$@"
