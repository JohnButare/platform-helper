#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script mozilla || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [bookmarks|close|extension|IsInstalled|IsRunning|profile|program|restart|start|startup|vars|version](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start"
	unset program configDir profileDir

	# platform configuration
	case "$PLATFORM_OS" in
		linux) 
			program="$P/firefox/firefox"			
			if [[ ! -f "$program" ]]; then program="/usr/bin/firefox"
			elif [[ ! -f "$program" ]]; then program="/usr/lib/firefox/firefox"
			elif [[ ! -f "$program" ]]; then program="/usr/lib/firefox-esr/firefox-esr"
			elif [[ ! -f "$program" ]]; then program="/snap/firefox/current/firefox"
			fi
			;;
		mac)
			program="$P/Firefox.app"
			configDir="$HOME/Library/Application Support/Firefox"
			extensionDir="$(GetFullPath "$configDir/../Mozilla/Extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}")"
			;;
		win)
			program="$P/Mozilla Firefox/firefox.exe"
			[[ ! -f "$program" ]] && program="$WIN_HOME/PortableApps/FirefoxPortable/App/Firefox64/firefox.exe"
			configDir="$(GetFullPath "$UADATA/../Roaming/Mozilla/Firefox")"
			extensionDir="$(GetFullPath "$configDir/../Extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}")"
			;;
	esac

	# other
	profileDir="$(getProfileDir)"
	extensionDirProfile="$profileDir/extensions"
	
	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() {  IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { isInstalledCommand && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }
varsUsage() { echot "Usage: $(ScriptName) vars\nReturn Firefox configuration variables: program configDir profileDir"; }
varsCommand() { ScriptReturn "program" "configDir" "profileDir"; }

versionCommand()
{
	AppInstallCheck || return
	if IsPlatform win; then "$program" -v | cut -d" " -f3 | RemoveCarriageReturn | ${G}sed 's/esr//'
	else AppVersion "$program" | ${G}sed 's/esr//'
	fi
}

#
# bookmarks commands
#

bookmarksUsage() { echot "Usage: $(ScriptName) bookmarks [json|markdown](json)"; }
bookmarksArgStart() { AppInstallCheck; }
bookmarksCommand() { bookmarksJsonCommand; }
bookmarksJsonUsage() { echot "Usage: $(ScriptName) bookmarks json\nReturn the latest bookmark backup as JSON."; }

bookmarksJsonCommand()
{
	local dir="$profileDir/bookmarkbackups"	
	local file; file="$dir/$(command ls -Art "$dir" | ${G}tail --lines=1)"
	lz4jsoncat "$file"
}

bookmarksMarkdownCommand()
{
	bookmarksJsonCommand | jq -r '
  def bookmark($iconuri; $title; $uri):
     if $iconuri != null then "![\($iconuri)]" else "" end +
     "[\($title)](\($uri))";

  def bookmarks:
    (objects | to_entries[]
     | if .value | type == "array" then (.value | bookmarks)
                                   else .value end ) //
    (arrays[] | [bookmarks] | " - \(.[0])", "  \(.[1:][])" );

  (.. | .children? | arrays)
    |= map(if .uri != null then {bookmark: bookmark(.iconuri; .title; .uri)}
                           else {title} end +
           {children})
  | del(..| select(length == 0))     # remove empty children and empty titles
  | del(..| select(length == 0))     # remove objects that got empty because of previous deletion
  | del(..| objects | select(has("title") and (.children | length == 0)))   # remove objects with title but no children
  | .children                        # remove root level
  | bookmarks'
}

#
# profile command
#

profileUsage()
{
	echot "\
Usage: $(ScriptName) profile [dir]
	[all|bonjourr|config|extensions|stg](all) save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."
}

profileArgStart() { AppInstallCheck; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profileAllCommand; }
profileDirCommand() { echo "$profileDir"; }
profileExtensionsCommand() { profileExtensionsDo "firefox" "other/Mozilla/Firefox/extensions"; }

profileAllCommand()
{
	# restore profile for restricted domains - Firefox Sync is used for non-restricted domains
	IsDomainRestricted && { { profileConfigCommand && profileExtensionsCommand && profileBounjourrCommand; } || return; }

	# other
	profileConfigCommand && profileStgCommand
}

profileBounjourrCommand()
{
	[[ "${profileArgs[0]}" == @(save|restore) ]] && hilight "Bounjourr..."
	case "${profileArgs[0]}" in
		save) echo "- New tab, gear, Settings Management, Export, Export as file";;
		restore) echo "- New tab, gear, Settings Management, Import, Import as file, click Drop file to import settings";;
	esac

	profile $noPrompt --app "Firefox Bounjourr" --method "firefox" --save-extension "json" --editor "${profileArgs[@]}" || return
}

profileConfigCommand()
{
	[[ "${profileArgs[0]}" != @(restore) ]] && return

	hilight "Configuration..."
	firefox close || return; sleep 2
	firefoxConfigAdd 'user_pref("browser.tabs.closeWindowWithLastTab", false);' || return
	firefoxConfigAdd 'user_pref("signon.rememberSignons", false);' || return
}

# firefoxConfigAdd TEXT - add text to Firefox configuration (prefs.js) if not present
firefoxConfigAdd()
{
	local text="$1" file="$profileDir/prefs.js"
	qgrep "^${text}$" "$file" && return
	echo "$text" >> "$file"
}

profileStgCommand()
{
	[[ "${profileArgs[0]}" == @(save|restore) ]] && hilight "Simple Tab Groups..."
	case "${profileArgs[0]}" in
		save) echo "- Simple Tab Groups, gear, Backup, check Include tab fav-icons in backup, Create backup";;
		restore) echo "- Simple Tab Groups, gear, Backup, Restore backup";;
	esac

	profile $noPrompt --app "Firefox SimpleTabGroups" --method "firefox" --save-extension "json" "${profileArgs[@]}" || return
}

ScriptRun "$@"
