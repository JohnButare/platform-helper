#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [bookmarks|close|extension|IsInstalled|IsRunning|profile|program|restart|start|startup|vars|version](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start" 
	unset program configDir profileDir

	# platform configuration
	case "$PLATFORM_OS" in
		linux) 
			program="$P/firefox/firefox"			
			if [[ ! -f "$program" ]]; then program="/usr/bin/firefox"
			elif [[ ! -f "$program" ]]; then program="/usr/lib/firefox/firefox"
			elif [[ ! -f "$program" ]]; then program="/usr/lib/firefox-esr/firefox-esr"
			elif [[ ! -f "$program" ]]; then program="/snap/firefox/current/firefox"
			fi
			;;
		mac)
			program="$P/Firefox.app"
			configDir="$HOME/Library/Application Support/Firefox"
			extensionDir="$(GetFullPath "$configDir/../Mozilla/Extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}")"
			;;
		win)
			program="$P/Mozilla Firefox/firefox.exe"
			[[ ! -f "$program" ]] && program="$WIN_HOME/PortableApps/FirefoxPortable/App/Firefox64/firefox.exe"
			configDir="$(GetFullPath "$UADATA/../Roaming/Mozilla/Firefox")"
			extensionDir="$(GetFullPath "$configDir/../Extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}")"
			;;
	esac

	# profileDir - use default-esr first (default profile is legacy)
	local p="$configDir/profiles.ini"
	if [[ $(${G}grep '\[Profile[^0]\]' "$p") ]] && profileDir="$configDir/$(grep -E '^\[Profile|^Path|^Name' "$p" | ${G}grep -1 '^Name=default-esr$' | ${G}grep '^Path' | cut -c6- | RemoveCarriageReturn)" && [[ $profileDir ]]; then :
	elif [[ $(${G}grep '\[Profile[^0]\]' "$p") ]] && profileDir="$configDir/$(grep -E '^\[Profile|^Path|^Default' "$p" | ${G}grep -1 '^Default=1' | ${G}grep '^Path' | cut -c6- | RemoveCarriageReturn)" && [[ $profileDir ]]; then :
	else profileDir="$configDir/$(${G}grep 'Path=' "$p" | ${G}sed 's/^Path=//' | RemoveCarriageReturn)"
	fi

	# other
	extensionDirProfile="$profileDir/extensions"
	
	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { isInstalledCommand && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }
varsUsage() { echot "Usage: $(ScriptName) vars\nReturn Firefox configuration variables: program configDir profileDir"; }
varsCommand() { ScriptReturn "program" "configDir" "profileDir"; }

versionCommand()
{
	AppInstallCheck || return
	if IsPlatform win; then "$program" -v | cut -d" " -f3 | RemoveCarriageReturn
	else AppVersion "$program"
	fi
}

#
# bookmarks commands
#

bookmarksUsage() { echot "Usage: $(ScriptName) bookmarks [json|markdown](json)"; }
bookmarksCommand() { bookmarksJsonCommand; }

bookmarksJsonUsage() { echot "Usage: $(ScriptName) bookmarks json\nReturn the latest bookmark backup as JSON."; }

bookmarksJsonCommand()
{
	local dir="$profileDir/bookmarkbackups"
	local file; file="$dir/$(command ls -Art "$dir" | tail -n 1)"
	lz4jsoncat "$file"
}

bookmarksMarkdownCommand()
{
	bookmarksJsonCommand | jq -r '
  def bookmark($iconuri; $title; $uri):
     if $iconuri != null then "![\($iconuri)]" else "" end +
     "[\($title)](\($uri))";

  def bookmarks:
    (objects | to_entries[]
     | if .value | type == "array" then (.value | bookmarks)
                                   else .value end ) //
    (arrays[] | [bookmarks] | " - \(.[0])", "  \(.[1:][])" );

  (.. | .children? | arrays)
    |= map(if .uri != null then {bookmark: bookmark(.iconuri; .title; .uri)}
                           else {title} end +
           {children})
  | del(..| select(length == 0))     # remove empty children and empty titles
  | del(..| select(length == 0))     # remove objects that got empty because of previous deletion
  | del(..| objects | select(has("title") and (.children | length == 0)))   # remove objects with title but no children
  | .children                        # remove root level
  | bookmarks'
}

#
# extension commands
#

extensionUsage() { echot "Usage: $(ScriptName) extension dir|download|info|install|IsInstalled|ls\nExtension commands."; }
extensionCommand() { usage; }
extensionDirCommand() { echo "$extensionDir"; }
extensionLsCommand() { cat "$profileDir/extensions.json" | jq; }

extensionDownloadCommand()
{
	local file files; IFS=$'\n' ArrayMake files "$(extensionLsCommand | jq '.addons[].path' | grep -v "null" | grep -v "@mozilla.org" | sort)"

	[[ ! $quiet ]] && printf "downloading..."
	for file in "${files[@]}"; do
		file="$(echo -E "$file" | RemoveQuotes)"
		IsPlatform win && file="$(echo -E "$file" | wtu)"
		cp "$file" . || return
		[[ ! $quiet ]] && printf "."
	done
	[[ ! $quiet ]] && echo "done"
}

#
# extension IsInstalled command
#

extensionIsInstalledUsage() { echot "Usage: $(ScriptName) extension IsInstalled FILE\Return 0 if the extensions is installed."; }
extensionIsInstalledArgs() {  ScriptArgGet "file" -- "$@" && ScriptCheckFile "$file"; }

extensionIsInstalledCommand()
{
	local id; id="$(extensionInfoIdCommand)" || return
	[[ -f "$extensionDir/$id.xpi" || -f "$extensionDirProfile/$id.xpi" ]]
}

#
# extension info commands
#

extensionInfoUsage() { echot "Usage: $(ScriptName) extension [all|id|name](all) DIR|FILE\nExtension info commands."; }
extensionInfoArgs() {  ScriptArgGet "file" -- "$@" && ScriptCheckPath "$file"; }
extensionInfoCommand() { extensionInfo "all"; }
extensionInfoAllCommand() { extensionInfo "all"; }
extensionInfoIdCommand() { extensionInfo "id"; }
extensionInfoNameCommand() { extensionInfo "name"; }

extensionInfo()
{
	local what="$1" manifest

	[[ -f "$file" ]] && { extensionManifest && RunFunction extensionInfo $what; return; }

	local files; IFS=$'\n' ArrayMake files "$(find "$file/"*.xpi |& grep -v "No such file")"	
	for file in "${files[@]}"; do
		[[ "$what" == "all" ]] && header "$(GetFileName "$file")" || printf "$(GetFileName "$file"): "
		extensionManifest || return
		RunFunction extensionInfo "$what" || return
		[[ "$what" != "all" ]] && echo
	done
} 

extensionInfoAll()
{
	echo "\
name=\"$(extensionInfoName)\"
short_name=\"$(extensionInfoShortName)\"
author=\"$(extensionInfoAuthor)\"
id=\"$(extensionInfoId)\"
description=\"$(extensionInfoDescription)\"
url=\"$(extensionInfoUrl)\""
}

extensionManifest() { manifest="$(unzip -p "$file" "manifest.json")"; }

extensionInfoGet()
{
	local value; value="$(echo "$manifest" | jq "$1" | RemoveQuotes)" || return
	[[ "$value" == @(null) ]] && value=""
	printf "$value"
}

extensionInfoAuthor() { extensionInfoGet '.author'; }

extensionInfoDescription() { local d; d="$(extensionInfoGet '.description')"; [[ "$d" == @(__MSG_extension_description__|__MSG_extensionDescription__|__MSG_extShortDesc__|__MSG_extensionDesc__|__MSG_extDescription__|__MSG_app_desc__) ]] && d=""; printf "$d"; }
extensionInfoId() { local id; id="$(extensionInfoGet '.browser_specific_settings.gecko.id')"; [[ ! $id ]] && id="$(extensionInfoGet '.applications.gecko.id')"; echo "$id"; }
extensionInfoShortName() { extensionInfoGet '.short_name'; }
extensionInfoUrl() { extensionInfoGet '.homepage_url'; }

extensionInfoName()
{
	local name; name="$(extensionInfoGet '.name')"
	[[ "$name" == @(|__MSG_appName__|__MSG_extName__|__MSG_extensionName__|__MSG_app_name__|__MSG_extension_name__) ]] && name="$(extensionInfoShortName)"
	[[ ! $name ]] && name="$(extensionInfoId)"
	printf "$name"; 
}

#
# extension install command
#

extensionInstallUsage()
{
	echot "Usage: $(ScriptName) extension install FILE
Install the extension.

	-g, --global 		install the extension for all profiles"; 
}

extensionInstallArgStart() { destDir="$extensionDirProfile"; }
extensionInstallArgs() {  ScriptArgGet "file" -- "$@" && ScriptCheckFile "$file"; }

extensionInstallOpt()
{
	case "$1" in
		-g|--global) destDir="$extensionDir";;
		*) return 1;;
	esac
}

extensionInstallCommand()
{
	local id; id="$(extensionInfoIdCommand)" || return
	local dest="$destDir/$id.xpi"

	# return if the extension is already installed
	[[ ! $force && ( -f "$dest" || -f "$extensionDir/$id.xpi" || -f "$extensionDirProfile/$id.xpi") ]] && return

	# create the extension directory
	[[ ! -d "$destDir" ]] && { mkdir --parents "$destDir" || return; }

	# copy the extension
	cp "$file" "$dest"
}

#
# profile command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileDirCommand() { echo "$profileDir"; }

profileCommand()
{
	AppInstallCheck || return

	# restore profile for restricted domains - Firefox Sync is used for non-restricted domains
	{ [[ "${profileArgs[0]}" == "restore" ]] && IsDomainRestricted; } && { profileRestoreRestrictredDomain || return; }

	# other
	profileSimpleTableGroups
}

profileRestoreRestrictredDomain() { profileRestoreExtensions; }

profileRestoreExtensions()
{
	! askp 'Restore extensions' -dr n && return

	# restore extensions
	local file files; ScriptEval FindInstallFile --eval "other/Mozilla/Firefox/extensions" "${globalArgs[@]}" || return
	IFS=$'\n' ArrayMake files "$(find "$file/"*.xpi |& grep -v "No such file")"
	for file in "${files[@]}"; do
		[[ ! $force ]] && firefox extension IsInstalled "$file" "${globalArgs[@]}" && continue		
		echo "Installing extensions "$(firefox extension info name "$file")"..."
		firefox extension install "$file" "${globalArgs[@]}" || return
	done

	return 0
}

profileSimpleTableGroups()
{
	hilight "Simple Tab Groups..."
	case "${profileArgs[0]}" in
		backup) echo "- Simple Tab Groups, gear, Backup, check Include tab fav-icons in backup, Create backup";;
		restore) echo "- Simple Tab Groups, gear, Backup, Restore backup";;
	esac

	profile $noPrompt --app "Firefox SimpleTabGroups" --method "firefox" --save-extension "json" "${profileArgs[@]}" || return
}

#
# helper
#

askp() { [[ $noPrompt ]] && echo "${GREEN}$1...${RESET}" || ask "$1"; }

ScriptRun "$@"
