#!/usr/bin/env bash
. app.sh || exit

usage() {	echot "usage: firefox [start](start)
  profile dir|SaveDir|save|restore [<profile name>|default](latest)
  -b, --brief		brief status messages"; exit $1; }

args()
{
	unset -v brief command help noPrompt
	
	while (( $# != 0 )); do
		case "$1" in
			--brief|-b) brief="--brief";;	
			--help) help="--help";;
			--no-prompt|-np) noPrompt="--no-prompt";;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "${command}" == @(start|startup|profile|service) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command="start"
	[[ ! $command ]] && MissingOperand "command"
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	args=( "$@" )
}

init()
{ 
	# ESR=Extended Support Release
	case "$PLATFORM" in
		linux) 
			program="$P/firefox/firefox"
			[[ ! -f "$program" ]] && program="/opt/firefox/firefox"
			[[ ! -f "$program" ]] && program="/usr/lib/firefox/firefox"
			[[ ! -f "$program" ]] && program="/usr/lib/firefox-esr/firefox-esr"
			[[ ! -f "$program" ]] && program="/snap/firefox/current/firefox"
			;;
		mac) program="$P/Firefox.app";;
		win) program="$P/Mozilla Firefox/firefox.exe";;
	esac

	return 0
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

IsInstalledCommand() { [[ -e "$program" ]]; }
programCommand() { echo "$program"; }

startCommand()
{
	! IsInstalledCommand && return 1
	start "$program" "$@"
}

profileCommand()
{
	[[ "$1" == "backup" ]] && 
		echo "- Simple Tab Groups, gear, Backup, check Include tab fav-icons in backup, Create backup"

	[[ "$1" == "restore" ]] && 
		echo "- Simple Tab Groups, gear, Backup, Restore backup"

	profile $noPrompt --app "SimpleTabGroups" --method "firefox" --save-extension "json" "$@" || usage 1
}

run "$@"
