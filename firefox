#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [bookmarks|close|IsInstalled|IsRunning|profile|program|restart|start|startup|vars|version](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start" 
	unset program configDir profileDir

	# platform configuration
	case "$PLATFORM_OS" in
		linux) 
			program="$P/firefox/firefox"			
			if [[ ! -f "$program" ]]; then program="/usr/bin/firefox"
			elif [[ ! -f "$program" ]]; then program="/usr/lib/firefox/firefox"
			elif [[ ! -f "$program" ]]; then program="/usr/lib/firefox-esr/firefox-esr"
			elif [[ ! -f "$program" ]]; then program="/snap/firefox/current/firefox"
			fi
			;;
		mac)
			program="$P/Firefox.app"
			configDir="$HOME/Library/Application Support/Firefox"
			;;
		win)
			program="$P/Mozilla Firefox/firefox.exe"
			[[ ! -f "$program" ]] && program="$WIN_HOME/PortableApps/FirefoxPortable/App/Firefox64/firefox.exe"
			configDir="$UADATA/../Roaming/Mozilla/Firefox"
			;;
	esac

	# other configuration
	local profileSuffix; profileSuffix="$(${G}grep "^Default="  "$configDir/profiles.ini" | cut -d"=" -f2)" && profileDir="$configDir/$profileSuffix"

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { isInstalledCommand && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }
varsUsage() { echot "Usage: $(ScriptName) vars\nReturn Firefox configuration variables: program configDir profileDir"; }
varsCommand() { ScriptReturn "program" "configDir" "profileDir"; }

versionCommand()
{
	AppInstallCheck || return
	if IsPlatform win; then "$program" -v | cut -d" " -f3 | RemoveCarriageReturn
	else AppVersion "$program"
	fi
}

#
# bookmarks commands
#

bookmarksUsage() { echot "Usage: $(ScriptName) bookmarks [json|markdown](json)"; }
bookmarksCommand() { bookmarksJsonCommand; }

bookmarksJsonUsage() { echot "Usage: $(ScriptName) bookmarks json\nReturn the latest bookmark backup as JSON."; }

bookmarksJsonCommand()
{
	local dir="$profileDir/bookmarkbackups"
	local file; file="$dir/$(command ls -Art "$dir" | tail -n 1)"
	lz4jsoncat "$file"
}

bookmarksMarkdownCommand()
{
	bookmarksJsonCommand | jq -r '
  def bookmark($iconuri; $title; $uri):
     if $iconuri != null then "![\($iconuri)]" else "" end +
     "[\($title)](\($uri))";

  def bookmarks:
    (objects | to_entries[]
     | if .value | type == "array" then (.value | bookmarks)
                                   else .value end ) //
    (arrays[] | [bookmarks] | " - \(.[0])", "  \(.[1:][])" );

  (.. | .children? | arrays)
    |= map(if .uri != null then {bookmark: bookmark(.iconuri; .title; .uri)}
                           else {title} end +
           {children})
  | del(..| select(length == 0))     # remove empty children and empty titles
  | del(..| select(length == 0))     # remove objects that got empty because of previous deletion
  | del(..| objects | select(has("title") and (.children | length == 0)))   # remove objects with title but no children
  | .children                        # remove root level
  | bookmarks'
}

#
# profile command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	AppInstallCheck || return
	
	echo "Simple Tab Groups..."
	case "${profileArgs[0]}" in
		backup) echo "- Simple Tab Groups, gear, Backup, check Include tab fav-icons in backup, Create backup";;
		restore) echo "- Simple Tab Groups, gear, Backup, Restore backup";;
	esac

	profile $noPrompt --app "Firefox SimpleTabGroups" --method "firefox" --save-extension "json" "${profileArgs[@]}" || return
}

ScriptRun "$@"
