#!/usr/bin/env bash
. function.sh

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init()
{ 
	config="/etc/schroot"

	os="/var/chroot"; sudo mkdir --parents "$os" || return
	osBak="/var/chroot/bak"; sudo mkdir --parents "$osBak" || return

	debianMirror="http://deb.debian.org/debian"
	ubuntuMirror="http://archive.ubuntu.com/ubuntu/"

	defaultPackages="sudo"
	copyOptions=( -r --devices --specials --links --perms --times --group --owner --info=progress2 )
}

usage()
{
	echot "\
usage: ChrootHelper delete|dir|exists|install|installed|list|run NAME
	
	backup|restore DIST					backup or restore a distribution	
	config [DIST](default) 			edit distribution configuration
	install DIST [SUITE](dist) 	install a new distribution
		The SUITE may be a release code name (eg, sid, stretch, jessie) or a symbolic name (eg, unstable, 
		testing, stable, oldstable)

		-d, --debian 		use the Debian mirror
		-u, --ubuntu 		use the Ubuntu mirror"
	exit $1
}

args()
{
	command="" noPrompt="" args=()
	
	while [ "$1" != "" ]; do
		case "$1" in
			-h|--help) usage 0;;
			config|c) command="config";;
			install|i) command="install";;
			run|r) command="run";;
			*) 
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				args+=("$1")
		esac
		shift
	done

	[[ ! $command ]] && command="run"
	return 0
}

distArg() {	dist="$1"; [[ ! $dist ]] && MissingOperand "dist"; ! distExists "$dist" && { EchoErr "Distribution $dist does not exist"; exit 1; }; }
distDir() { ! distExists "$1" && return 1; schroot -c "$1" --config | egrep '^directory=' | cut -d"=" -f2; }
distDirValidate() { local distDir; distDir="$(distDir "$1")" || return; [[ -d "$distDir" ]] && return; EchoErr "$dist directory \"$distDir\" does not exist"; return 1; }
distExists() { schroot --list | egrep '^chroot:'$1'$' >& /dev/null; }

#
# Commands
#

dirCommand() { distDir "$1"; }
existsCommand() { distExists "$1"; }
installedCommand() { InPath schroot; }
listCommand() { schroot --list --all "$@"; }
runCommand() {	local dist; distArg "$1"; shift; schroot -c "$dist" "$@"; }

configCommand() 
{ 
	local dist="default"

	[[ $1 ]] && { distArg "$1"; shift; }
	[[ $# != 0 ]] && usage

	SetTextEditor || return
	sudoedit "$config/chroot.d/$dist"
}

deleteCommand()
{
	local dist="$1" dir; dir="$(distDir "$dist")" || return

	[[ ! -d "$dir" ]] && return
	ask -dr n "Do you want to delete the $dist distribution" || return

	printf "Removing $dist..."
	sudo rm -fr $dir || return
	echo "done"
}

installCommand()
{

	local dist suite mirror

	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-d|--debian) mirror="$debianMirror";;
			-u|--ubuntu) mirror="$ubuntuMirror";;
			*)
				! IsOption "$1" && [[ ! $dist ]] && { dist="$1"; shift; continue; }
				! IsOption "$1" && [[ ! $suite ]] && { suite="$1"; shift; continue; }
				UnknownOption "$1"; return
		esac
		shift
	done
	[[ ! $dist ]] && { MissingOperand "dist"; return; }
	[[ ! $suite ]] && suite="$dist"

	# find the mirror if not specified
	if [[ ! $mirror ]]; then
		if UrlExists "$debianMirror/dists/$suite"; then mirror="$debianMirror"
		elif UrlExists "$ubuntuMirror/dists/$suite"; then mirror="$ubuntuMirror"
		else EchoErr "Could not find suite $suite"; return 1
		fi
	fi

	# configuration
	if ! distExists "$dist"; then	
	echo "[$dist]
description=$dist ($mirror)
directory=$os/$dist
type=directory
users=$USER
root-users=$USER
root-groups=root" | sudo tee "$config/chroot.d/$dist" || return
	fi

	deleteCommand "$dist" || return
	sudo debootstrap --include=$defaultPackages "$suite" "$(distDir "$dist")" || return
	bootstrap-remote "$dist" || return
}

restoreCommand()
{
	local dist; distArg "$1"; shift

	[[ ! -d "$osBak/$dist" ]] && { EchoErr "$dist backup does not exist"; return 1; }
	deleteCommand "$dist" || return
	sudo rsync "${copyOptions[@]}" "$osBak/$dist/" "$(distDir "$dist")/"
}

backupCommand()
{
	local dist; distArg "$1"; shift

	distDirValidate	"$dist" || return

	if [[ -d "$osBak/$dist" ]]; then
		ask -dr n "Do you want to delete the $dist backup" || return
		printf "Removing $dist backup..."
		sudo rm -fr "$osBak/$dist" || return
		echo "done"
	fi

	sudo rsync "${copyOptions[@]}" "$(distDir "$dist")/" "$osBak/$dist"
}

fixCommand()
{
	local dist; distArg "$1"; shift
	sudo rm "$(distDir	"$dist")/etc/resolv.conf" || return
}

run "$@"
