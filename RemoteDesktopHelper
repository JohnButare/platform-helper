#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [cli|close|IsInstalled|IsRunning|profile|program|restart|start|startup|stop|version](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start"

	# find program
	if program="$P/Windows App.app" && [[ -d "$program" ]]; then app="WindowsApp"
	else ScriptErr "unable to find a remote desktop application"
	fi
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startupCommand() { [[ ! $force ]] && isRunningCommand && return; AppInstallCheck && start "$program"; }
stopCommand() { closeCommand; } 
versionCommand() { AppInstallCheck && AppVersion "$program"; }

#
# start command
#

startUsage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) start [host]
Start (connect) commands.
	
 	-fs, --full-screen		connect using the full screens"
}

startArgStart() { unset -v fullScreen; }

startOpt()
{
	case "$1" in
		--full-screen|-fs) fullScreen="--full-screen";;
		*) return 1;;
	esac
}

startArgs() { startArgs=( "$@" ); shift="$#"; }

startCommand()
{
	AppInstallCheck || return
	getHostArg || return
	RunLog start "$program" "${startArgs[@]}" "${otherArgs[@]}"
}

# screen%20mode%20id=i:2 

getHostArg() { RunFunction "getHostArg" "$app"; }
getHostArgWindowsApp() { startArgs[0]="msrdclient://full%20address=s:${startArgs[0]}"; }


ScriptRun "$@"
