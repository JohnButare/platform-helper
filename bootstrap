#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName)
Bootstrap a local system by syncing local files and running install bootstrap.
flow: bootstrap-remote -> bootstrap-init -> bootstrap -> inst

	-h, --host=HOST			the host to use for syncronization, defaults to discovery
	-i, --install=DIR		application installation directory, defaults to discovery with FindInstallFile"
}

init() { defaultCommand="run"; }

#
# run command
#

runArgStart() { unset -v installDir; }

runOpt()
{
	case "$1" in
		-i|-i=*|--install|--install=*) ScriptOptGet "install" "$@";;
		-H|-H=*|--host|--host=*) ScriptOptGet "host" "$@";;
		*) return 1;;
	esac
}

runCommand() { runInit && setupPlatform && setupDirs && setupNetwork && syncFiles && runInstall; }
runInstall() { install AppDir && install bootstrap && install AppCore; }
runInit() { header "bootstrap"; echo "Running from '$(ScriptDir)'..."; log1 "\n	syncronization host=$host\n	install=$install"; }
runFinal() { echo "bootstrap completed successfully"; }

#
# Setup Data Directory
#

setupDirs()
{
	[[ ! $force ]] && ! UpdateNeeded "setup-dirs" && return

	hilight "Data directory setup..."
	[[ ! -d "$DATA" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }
	[[ "$(${G}stat $DATA --format="%U")" != "$USER" ]] && { sudo chown $USER "$DATA" || return; }

	UpdateDone "setup-dirs"
}

#
# Setup Network
#

setupNetwork() { NetworkCurrentUpdate --brief; }

#
# Setup Platform
#

setupPlatform()
{
	[[ ! $force ]] && ! UpdateNeeded "setup-platform" && return
	hilight "Setup platform..." && RunPlatform setup && UpdateDone "setup-platform"
}

setupQnap()
{
	sudo chmod u+s /usr/bin/mount.cifs || return	# allow mount.cifs without sudo
	makeLink "/share/Public/documents/data" "/usr/local/data" || return
	makeLink "/share/Public" "$USERS/Shared" || return
	makeLink "/share/homes/$USER" "$USERS/$USER" || return
}

setupSynology() { makeLink "/volume1/public" "$USERS/Shared" || return; }

setupWin()
{	
	makeLink "$WIN_ROOT/Users/Public" "$PUB" || return
	mkdir --parents "$HOME/Documents" || return
}

#
# Syncronize Files
#

syncFiles()
{
	sshAgentInit || return

	# logging
	local desc; [[ $host ]] && desc=" to $host"
	hilight "File syncronization$desc..."

	# sync files
	local args=($verbose) firstSync; 
	[[ ! -d "$DATA/bin" ]] && args+=("--src-older") firstSync="true"
	RunLog SyncLocalFiles "${args[@]}" $host || return														# synchronize files
	[[ $firstSync ]] && { RunLog SyncLocalFiles "${args[@]}" $host || return; } 	# synchronize times (which are incorrect after the first sync)
	return 0
}

#
# helper
#

sshAgentInit()
{
	[[ -d ~/.ssh ]] && { sudo chmod 600 ~/.ssh/* || return; }
	SshAgentConf "${globalArgs[@]}" || return
}
	
install()
{
	local what="$1"

	# return if this install was done
	[[ ! $force ]] && ! UpdateNeeded "install-$what" && return

	# initialize the SSH Agent - in case the file sync changed permissions or we were restarted
	sshAgentInit || return

	# ensure path is set properly now that all directories are present
	. "/usr/local/data/bin/bash.bashrc" || return	

	# make new PATH visible for Windows programs
	IsPlatform win && export WSLENV="PATH/l"

	# run the install
	local args=(--quiet --no-prompt --no-help --no-register $verbose) # use unattended installations
	[[ $install ]] && args+=(--hint "$install")
	HeaderBig "Install ${what^}" && inst "${args[@]}" "$what" && UpdateDone "install-$what"
}

makeLink() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

ScriptRun "$@"