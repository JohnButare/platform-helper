#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
Bootstrap a local system by syncing local files and running install bootstrap.
Flow: bootstrap-remote -> bootstrap-init -> bootstrap -> inst"
}

init()
{
	defaultCommand="run"
}

#
# Run Command
#

runArgStart() { unset -v installDir; }

opt()
{
	case "$1" in
		-id|-id=*|--install-dir|--install-dir=*) ScriptOptGet "installDir" "install-dir" "$@" && ScriptCheckDir "$installDir";;
		-sh|-sh=*|--sync-host|--sync-host=*) ScriptOptGet "syncHost" "sync-host" "$@";;
		*) return 1;;
	esac
}

runCommand()
{
	header "bootstrap"
	setupPlatform || return
	setupDataDir || return
	syncFiles || return
	runInstall || return
	echo "bootstrap completed successfully"
}

runInstall()
{
	local args=(--quiet --no-prompt $verbose)
	[[ $installDir ]] && args+=(--hint "$installDir")

	# ensure path is set properly now that all directories are present
	. bash.bashrc || return 
	IsPlatform win && export WSLENV="PATH/l" # make new PATH visible for Windows programs

	# run bootstrap
	if UpdateNeeded "bootstrap"; then
		header "Install Bootstrap"
		inst "${args[@]}" bootstrap || return
		UpdateDone "bootstrap" || return;
	fi

	# run appcore
	if UpdateNeeded "appcore"; then
		header "Install AppCore"
		inst "${args[@]}" appcore || return
		UpdateDone "appcore" || return
	fi

	return 0
}

setupDataDir()
{
	[[ ! -d "$1" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }
	sudo chown $USER "$DATA" || return
}

setupPlatform()
{
	hilight "Platform setup..."
	RunPlatform setup || return
}

setuoQnap()
{
	sudo chmod u+s /usr/bin/mount.cifs || return	# allow mount.cifs without sudo
	makeLink "/share/Public/documents/data" "/usr/local/data" || return
	makeLink "/share/Public" "$USERS/Shared" || return
	makeLink "/share/homes/$USER" "$USERS/$USER" || return
}

setupSynology() { makeLink "/volume1/public" "$USERS/Shared" || return; }

setupWin()
{	
	makeLink "$WIN_ROOT/Users/Public" "$PUB" || return
	mkdir --parents "$HOME/Documents" || return
}

syncFiles()
{
	if SshAgent check keys; then
		hilight "Initializing the SSH agent..."
		SshAgentStart || return
	fi

	hilight "File syncronization..."
	local args=("$verbose"); [[ ! -d "$DATA/bin" ]] && args+=("--src-older")
	SyncLocalFiles "${args[@]}" $syncHost || return	
	RunPlatform syncFiles || return
}

syncFilesWin()
{
	# move win directory to Windows file system for performance
	local src="$WIN_ROOT/Users/Public/data/appdata" link="$DATA/platform/win"
	[[ -L "$link" ]] && return

	header "Moving win directory..."
	mkdir --parents "$src" || return
	[[ -d "$link" && ! -d "$src/win" ]] && { mv "$link" "$src" || return; }
	makeLink "$src/win" "$link" || return
}

#
# helper
#

makeLink() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

ScriptRun "$@"