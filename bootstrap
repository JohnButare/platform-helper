#!/usr/bin/env bash
. function.sh

# bootstrap a generic system once the platform specific installation is done
# flow bootstrap-remote (optional) -> bootstrap-init -> boostrap -> inst bootstrap

run()
{
	init "$@" || return
	cleanup || return
	RunPlatform bootstrap || return
	setupDataDir || return
	syncFiles || return
	runInstall || return
	echo "bootstrap completed successfully"
}

init()
{
	host="$1"
	install="$2"
}

cleanup()
{
	# remove old links from wsl1	 
	if IsPlatform wsl; then
		[[ -L "$DATA" ]] && sudo rm "$DATA"
		[[ -L "$CODE" ]] && sudo rm "$CODE"
		[[ -L "/etc/ethers" ]] && sudo rm "/etc/ethers"
		[[ -L "$HOME/.config/terminator" ]] && rm "$HOME/.config/terminator"
		ls -al "$HOME" | grep "/mnt" | cut -c50- | cut -d " " -f 1 | xargs rm >& /dev/null
	fi

	return 0
}

runInstall()
{
	local args=( --quiet --no-prompt )
	[[ $install ]] && args+=( --hint "$install" )
	. bash.bashrc || return # ensure path is set properly now that all directories are present
	inst "${args[@]}" bootstrap appcore || return
}

bootstrapQnap()
{
	sudo chmod u+s /bin/ping || return # allow ping without sudo
	sudo chmod u+s /usr/bin/mount.cifs || return
	linkDir "/share/Public/documents/data" "/usr/local/data" || return # assume data directory is already present
}

bootstrapWin()
{	
	linkDir "$WIN_USERS/Public" "$PUB" || return
}

bootstrapWsl1()
{	
	linkDir "$WIN_HOME/Documents" ~/Documents || return
}

linkDir() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

setupDataDir()
{
	[[ ! -d "$1" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }
	sudo chown $USER "$DATA" || return
}

syncFiles()
{
	local options; [[ ! -d "$DATA/bin" ]] && options="--src-older" # assume new system is older if BIN directory does not exist
	SyncLocalFiles $options "$host" || return
}

run "$@"
