#!/usr/bin/env bash
. function.sh

run()
{
	init "$@" || return
	cleanup || return
	RunPlatform bootstrap || return
	setupDataDir || return
	syncFiles || return
	runInstall || return
	echo "bootstrap completed successfully"
}

init()
{
	[[ ! $DATA ]] && { EchoErr "bootstrap: the bootstrap must be run from bootstrap-init"; return 1; }
	
	host="$1"
	install="$2"
	force=""; [[ "$3" == @(-f|--force) ]] && force="true"
	UpdateInit "/tmp/bootstrap" || return

	# we may be root now,  ensure we can write files here later as a regular user
	sudo chmod ugo+rw /tmp/bootstrap || return 
}

cleanup()
{
	# remove old links from wsl1	 
	if IsPlatform wsl; then
		[[ -L "$DATA" ]] && sudo rm "$DATA"
		[[ -L "$CODE" ]] && sudo rm "$CODE"
		[[ -L "/etc/ethers" ]] && sudo rm "/etc/ethers"
		[[ -L "$HOME/.config/terminator" ]] && rm "$HOME/.config/terminator"
		ls -al "$HOME" | grep "/mnt" | cut -c50- | awk '{ print "'$HOME'/" $1; }' | xargs rm >& /dev/null
		ls -al "$HOME" | grep "/mnt" >& /dev/null && { EchoErr "unable to remove legacy links"; return 1; }
	fi

	return 0
}

runInstall()
{
	local args=( --quiet --no-prompt )
	[[ $install ]] && args+=( --hint "$install" )

	# ensure path is set properly now that all directories are present
	. bash.bashrc || return 
	IsPlatform win && export WSLENV="PATH/l" # make new PATH visible for Windows programs

	# run bootstrap and appcore
	UpdateNeeded "bootstrap" && { inst "${args[@]}" bootstrap || return; UpdateDone "bootstrap" || return; }
	UpdateNeeded "appcore" && { inst "${args[@]}" appcore || return; UpdateDone "appcore" || return; }

	return 0
}

bootstrapQnap()
{
	sudo chmod u+s /bin/ping || return # allow ping without sudo
	sudo chmod u+s /usr/bin/mount.cifs || return
	linkDir "/share/Public/documents/data" "/usr/local/data" || return # assume data directory is already present
}

bootstrapWin()
{	
	linkDir "$WIN_USERS/Public" "$PUB" || return
}

bootstrapWsl1()
{	
	linkDir "$WIN_HOME/Documents" ~/Documents || return
}

linkDir() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

setupDataDir()
{
	[[ ! -d "$1" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }
	sudo chown $USER "$DATA" || return
}

syncFiles()
{
	local options; [[ ! -d "$DATA/bin" ]] && options="--src-older" # assume new system is older if BIN directory does not exist
	SyncLocalFiles $options "$host" || return
}

run "$@"
