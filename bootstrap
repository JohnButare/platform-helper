#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName)
Bootstrap a local system by syncing local files and running install bootstrap.
flow: bootstrap-remote -> bootstrap-init -> bootstrap -> inst

	-h, --host=HOST			the host to use for syncronization, defaults to discovery
	-i, --install=DIR		application installation directory, defaults to discovery with FindInstallFile"
}

init()
{
	defaultCommand="run"
}

#
# Run Command
#

runArgStart() { unset -v installDir; }

runOpt()
{
	case "$1" in
		-i|-i=*|--install|--install=*) ScriptOptGet "install" "$@" && ScriptCheckDir "$install";;
		-H|-H=*|--host|--host=*) ScriptOptGet "host" "$@";;
		*) return 1;;
	esac
}

runCommand()
{
	header "bootstrap"
	setupPlatform || return
	setupDataDir || return
	syncFiles || return
	runInstall || return
	echo "bootstrap completed successfully"
}

runInstall()
{
	local args=(--quiet --no-prompt $verbose)
	[[ $install ]] && args+=(--hint "$install")

	# ensure path is set properly now that all directories are present
	. bash.bashrc || return 
	IsPlatform win && export WSLENV="PATH/l" # make new PATH visible for Windows programs

	# run bootstrap
	if UpdateNeeded "bootstrap"; then
		HeaderBig "Install Bootstrap"
		inst "${args[@]}" bootstrap || return
		UpdateDone "bootstrap" || return;
	fi

	# run appcore
	if UpdateNeeded "appcore"; then
		HeaderBig "Install AppCore"
		inst "${args[@]}" appcore || return
		UpdateDone "appcore" || return
	fi

	return 0
}

setupDataDir()
{
	hilight "Data directory setup..."

	# create
	[[ ! -d "$1" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }

	# set owner
	[[ "$(stat $DATA --format="%U")" != "$USER" ]] && { sudo chown $USER "$DATA" || return; }

	return 0
}

setupPlatform()
{
	hilight "Platform setup..."
	RunPlatform setup || return
}

setupQnap()
{
	sudo chmod u+s /usr/bin/mount.cifs || return	# allow mount.cifs without sudo
	makeLink "/share/Public/documents/data" "/usr/local/data" || return
	makeLink "/share/Public" "$USERS/Shared" || return
	makeLink "/share/homes/$USER" "$USERS/$USER" || return
}

setupSynology() { makeLink "/volume1/public" "$USERS/Shared" || return; }

setupWin()
{	
	makeLink "$WIN_ROOT/Users/Public" "$PUB" || return
	mkdir --parents "$HOME/Documents" || return
}

syncFiles()
{
	# SSH agent
	hilight "Initializing the SSH agent..."
	SshAgentConf || return

	# logging
	local desc; [[ $host ]] && desc=" to $host"
	hilight "File syncronization$desc..."

	# sync files
	local args=($verbose); 
	[[ ! -d "$DATA/bin" ]] && args+=("--src-older")
	SyncLocalFiles "${args[@]}" $host || return	

	# platform final steps
	RunPlatform syncFiles || return
}

syncFilesWin()
{
	# move win directory to Windows file system for performance
	local src="$WIN_ROOT/Users/Public/data/appdata" link="$DATA/platform/win"
	[[ -L "$link" ]] && return

	header "Moving win directory..."
	mkdir --parents "$src" || return
	[[ -d "$link" && ! -d "$src/win" ]] && { mv "$link" "$src" || return; }
	makeLink "$src/win" "$link" || return
}

#
# helper
#

makeLink() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

ScriptRun "$@"