#!/usr/bin/env bash
# bootstrap [--host|-h] [--install|-i DIR] - bootstrap a local system, depends on local BIN files
# - bootstrap-remote -> bootstrap-init -> ** bootstrap ** -> inst

. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName)
Bootstrap a local system by syncing local files and running install bootstrap.
flow: bootstrap-remote -> bootstrap-init -> bootstrap -> inst

	-h, --host=HOST			the host to use for synchronization, defaults to discovery
	-i, --install=DIR		application installation directory, defaults to discovery with FindInstallFile"
}

init() { defaultCommand="run"; }

#
# run command
#

runArgStart() { unset -v installDir; }

runOpt()
{
	case "$1" in
		-i|-i=*|--install|--install=*) ScriptOptGet "install" "$@";;
		-H|-H=*|--host|--host=*) ScriptOptGet "host" "$@";;
		*) return 1;;
	esac
}

runCommand() { runInit && setupPlatform && setupDirs && setupNetwork && syncFiles && runInstall; }
runInstall() { install AppDir && install bootstrap && install AppCore; }
runInit() { header "bootstrap (script)"; echo "Running from '$(ScriptDir)'..."; log1 "\n	synchronization host=$host\n	install=$install"; }
runFinal() { echo "bootstrap completed successfully"; }

#
# Setup Data Directory
#

setupDirs()
{
	[[ ! $force ]] && ! UpdateNeeded "setup-dirs" && return

	hilight "Data directory setup..."
	[[ ! -d "$DATA" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }
	[[ "$(${G}stat $DATA --format="%U")" != "$USER" ]] && { sudo chown $USER "$DATA" || return; }

	UpdateDone "setup-dirs"
}

#
# Setup Network
#

setupNetwork() { hilight "Network..." && NetworkCurrentUpdate --config "${globalArgs[@]}"; }

#
# Setup Platform
#

setupPlatform()
{
	[[ ! $force ]] && ! UpdateNeeded "setup-platform" && return
	hilight "Setup platform..." && RunPlatform setup && UpdateDone "setup-platform"
}

setupLinux()
{
	# fping
	local fping; InPath getcap && fping="$(FindInPath "fping")" && [[ ! $(getcap "$fping") ]] && { sudo setcap cap_net_raw+ep "$fping" || return; }

	return 0
}

setupQnap()
{
	sudo chmod u+s /usr/bin/mount.cifs || return	# allow mount.cifs without sudo
	makeLink "/share/Public/documents/data" "/usr/local/data" || return
	makeLink "/share/Public" "$USERS/Shared" || return
	makeLink "/share/homes/$USER" "$USERS/$USER" || return
}

setupSynology() { makeLink "/volume1/public" "$USERS/Shared" || return; }

setupWin()
{	
	makeLink "$WIN_ROOT/Users/Public" "$PUB" || return
	${G}mkdir --parents "$HOME/Documents" || return
}

#
# Synchronize Files
#

syncFiles()
{
	# check
	[[ ! $host ]] && GetServer --quiet "file"  "${globalArgs[@]}" && host="file"			# get default synchronization host, the file service
	[[ ! $host && -d "$DATA/bin" ]] && return																					# ok - no synchronization host, bin directory exists
	[[ ! $host ]] && return && { ScriptErr "unable to synchronize files"; return 1; }	# error - no synchronization host, bin directory does not exist

	# initialize
	sshAgentInit || return

	# logging
	hilight "File synchronization..."

	# sync files
	local args=($verbose --no-unmount) firstSync; 
	[[ ! -d "$DATA/bin" ]] && args+=("--src-older" $host) firstSync="true"
	syncFilesDo "${args[@]}" || return

	 # after the first sync, times maybe incorrect
	[[ $firstSync ]] && { syncFilesDo "${args[@]}" || return; }
	return 0
}

# syncFilesDo - synchronize files and fix permission, which may not be correct after sync
syncFilesDo() { RunLog SyncLocalFiles "$@" && RunLog SyncLocalFiles permissions $verbose && sshAgentPerms; }

#
# helper
#

sshAgentInit() { sshAgentPerms && SshAgentConf "${globalArgs[@]}"; }

sshAgentPerms()
{
	[[ ! -d ~/.ssh ]] && return
	[[ "$(DirCount ~/.ssh)" == "0" ]] && return		
	sudo chmod 600 ~/.ssh/*
}

install()
{
	local what="$1"

	# return if this install was done
	[[ ! $force ]] && ! UpdateNeeded "install-$what" && return

	# initialize the SSH Agent - in case the file sync changed permissions or we were restarted
	sshAgentInit || return

	# ensure path is set properly now that all directories are present
	. "/usr/local/data/bin/bash.bashrc" || return	

	# run the install
	local args=(--quiet --no-prompt --no-help --no-register $verbose --host=$host) # use unattended installations
	[[ $install ]] && args+=(--hint "$install")
	inst "${args[@]}" "$what" && UpdateDone "install-$what"
}

makeLink() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

ScriptRun "$@"