#!/usr/bin/env bash
. function.sh

run()
{
	header "bootstrap"
	init "$@" || return
	cleanup || return
	bootstrap || return
	setupDataDir || return
	syncFiles || return
	setupSsh || return
	runInstall || return
	echo "bootstrap completed successfully"
}

init()
{
	# arguments
	host="$1"; shift
	install="$1"; shift
	[[ "$1" == @(-v|--verbose) ]] && verbose="--verbose"

	# validation
	[[ ! $DATA || ! $host || ! $install || ! -d /tmp/bootstrap ]] &&
		{ EchoErr "bootstrap: must be run from bootstrap-init"; return 1; }
	
	# permissions
	sudo chmod ugo+rw /tmp/bootstrap || return 
}

cleanup()
{
	hilight "Cleanup..."
	
	# remove old links
	if IsPlatform wsl; then
		[[ -L "$DATA" ]] && sudo rm "$DATA"
		[[ -L "$CODE" ]] && sudo rm "$CODE"
		[[ -L "/etc/ethers" ]] && sudo rm "/etc/ethers"
		[[ -L "$HOME/.config/terminator" ]] && rm "$HOME/.config/terminator"
		ls -al "$HOME" | grep "/mnt" | grep -v -E 'Desktop|Downloads|Dropbox' | cut -c50- | awk '{ print "'$HOME'/" $1; }' | xargs rm >& /dev/null
		ls -al "$HOME" | grep "/mnt" | grep -v -E 'Desktop|Downloads|Dropbox' >& /dev/null && { EchoErr "unable to remove legacy links"; return 1; }
	fi

	return 0
}

runInstall()
{
	local args=(--quiet --no-prompt $verbose)
	[[ $install ]] && args+=(--hint "$install")

	# ensure path is set properly now that all directories are present
	. bash.bashrc || return 
	IsPlatform win && export WSLENV="PATH/l" # make new PATH visible for Windows programs

	# run bootstrap
	if UpdateNeeded "bootstrap"; then
		header "Install Bootstrap"
		inst "${args[@]}" bootstrap || return
		UpdateDone "bootstrap" || return;
	fi

	# run appcore
	if UpdateNeeded "appcore"; then
		header "Install AppCore"
		inst "${args[@]}" appcore || return
		UpdateDone "appcore" || return
	fi

	return 0
}

setupDataDir()
{
	[[ ! -d "$1" ]] && { sudo ${G}mkdir --parents "$DATA" || return; }
	sudo chown $USER "$DATA" || return
}

setupSsh()
{
	inst SshClientPermission || return
}

#
# bootstrap
#

bootstrap()
{
	hilight "Bootstrap..."
	RunPlatform bootstrap || return
}

bootstrapQnap()
{
	sudo chmod u+s /bin/ping || return # allow ping without sudo
	sudo chmod u+s /usr/bin/mount.cifs || return
	makeLink "/share/Public/documents/data" "/usr/local/data" || return
	makeLink "/share/Public" "$USERS/Shared" || return
	makeLink "/share/homes/$USER" "$USERS/$USER" || return
}

bootstrapSynology() { makeLink "/volume1/public" "$USERS/Shared" || return; }

bootstrapWin()
{	
	makeLink "$WIN_ROOT/Users/Public" "$PUB" || return
	mkdir --parents "$HOME/Documents" || return
}

#
# sync files
#

syncFiles()
{
	[[ ! $host ]] && return

	if SshAgent check keys; then
		hilight "SSH agent..."
		SshAgentStart || return
	fi

	hilight "File syncronization..."
	local args=("$verbose"); [[ ! -d "$DATA/bin" ]] && args+=("--src-older")
	SyncLocalFiles "${args[@]}" "$host" || return	
	RunPlatform syncFiles || return
}

syncFilesWin()
{
	local src="$WIN_ROOT/Users/Public/data/appdata" link="$DATA/platform/win"
	[[ -L "$link" ]] && return

	header "Moving win directory..."
	mkdir --parents "$src" || return
	[[ -d "$link" && ! -d "$src/win" ]] && { mv "$link" "$src" || return; }
	makeLink "$src/win" "$link" || return
}

#
# helper
#

makeLink() # SRC LINK
{
	local src="$1" link="$2"
	[[ -L "$link" ]] && return
	sudo ${G}mkdir --parents "$src" || return
	sudo ln -s "$src" "$link" || return
}

run "$@"
