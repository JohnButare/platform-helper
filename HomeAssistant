#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
HomeAssistant commands.

	cli						access the command line interface
	config				configure Home Assistant
	hass					run the hass command
	integration 	manage integrations
	update				update Home Assistant"
}

#
# CLI Commands
#

cliUsage() { echot "Usage: $(ScriptName) cli vars|run\nCommand line interface commands."; }
cliCommand() { usage; }

cliRunUsage() { echot "Usage: $(ScriptName) cli run [COMMAND]... [OPTION]...\Run a cli command."; }
cliRunArgs() { cliArgs=( "$@" ); shift="$#"; } 
cliRunCommand() { cliRun "${cliArgs[@]}"; }
cliRun() { cliInit && hass-cli "$@"; }

cliVarsUsage() { echot "Usage: $(ScriptName) cli vars\nReturn the variables necessary for running the cli."; }
cliVarsCommand() { cliInit && ScriptReturn --export "HASS_SERVER" "HASS_TOKEN"; }

cliInit()
{
	# install CLI
	! InPath hass-cli && { inst HomeAssistantCli || return; }

	# get CLI server
	if [[ $force || ! $HASS_SERVER ]]; then
		local server; server="$(credential get HomeAssistant server --fallback --prompt | RemoveNewline)" || return
		local port; port="$(credential get HomeAssistant port --fallback --prompt | RemoveNewline)" || return
		export HASS_SERVER="http://$server:$port"
	fi

	# get CLI token
	if [[ $force || ! $HASS_TOKEN ]]; then
		local token; token="$(credential get HomeAssistant token --fallback --prompt | RemoveNewline)" || return
		export HASS_TOKEN="$token"
	fi

	return 0
}

#
# Configure Commands
#

configUsage()
{
	echot "Usage: $(ScriptName) config check
Configure Home Assistant."
}

configCommand() { usage; }
configCheckCommand() { hass --script check_config "${otherArgs[@]}"; }

#
# Integrations Commands
#

integrationUsage() { echot "Usage: $(ScriptName) integration install|IsInstalled\nIntegration commands."; }
integrationArgs() { ScriptArgGet "name" -- "$@"; shift; } 
integrationCommand() { usage; }

integrationInstallCommand()
{
	isComponentInstalled "$name" && return
	browser "https://my.home-assistant.io/redirect/config_flow_start?domain=$name" || return
}

integrationIsInstalledCommand() { isComponentInstalled "$name"; }

#
# Other Commands
#

hassUsage() { echot "Usage: $(ScriptName) hass -- [OPTION]..."; hass -h; }
hassCommand() { hass "${args[@]}" "${otherArgs[@]}"; }

updateCommand() 
{ 
	runAsHomeAssistant "pip3 install --upgrade pip"
	runAsHomeAssistant "pip3 install --upgrade homeassistant"
}

#
# helper
#

isComponentInstalled() { cliInit && hass-cli config components | grep -q "^${1}$"; }

hass() { runAsHomeAssistant "hass" "$@"; }

runAsHomeAssistant()
{
	sudo --user=homeassistant --set-home --shell <<-EOF || return
		cd /srv/homeassistant || exit 1
		source bin/activate || exit 1
		$@
EOF
}

ScriptRun "$@"
