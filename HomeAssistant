#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
HomeAssistant commands."
}

#
# CLI Commands
#

cliUsage() { echot "Usage: $(ScriptName) cli vars|run\nCommand line interface commands."; }
cliCommand() { usage; }

cliRunUsage() { echot "Usage: $(ScriptName) cli run [COMMAND]... [OPTION]...\Run a cli command."; }
cliRunArgs() { cliArgs=( "$@" ); shift="$#"; } 
cliRunCommand() { cliRun "${cliArgs[@]}"; }
cliRun() { cliInit && hass-cli "$@"; }

cliVarsUsage() { echot "Usage: $(ScriptName) cli vars\nReturn the variables necessary for running the cli."; }
cliVarsCommand() { cliInit && ScriptReturn --export "HASS_SERVER" "HASS_TOKEN"; }

cliInit()
{
	# install CLI
	! InPath hass-cli && { inst HomeAssistantCli || return; }

	# get CLI server
	if [[ ! $HASS_SERVER ]]; then
		local server; server="$(credential get HomeAssistant server --fallback --prompt | RemoveNewline)" || return
		local port; port="$(credential get HomeAssistant port --fallback --prompt | RemoveNewline)" || return
		export HASS_SERVER="http://$server:$port"
	fi

	# get CLI token
	if [[ ! $HASS_TOKEN ]]; then
		local token; token="$(credential get HomeAssistant token --fallback --prompt | RemoveNewline)" || return
		export HASS_TOKEN="$token"
	fi

	return 0
}

#
# Integrations Commands
#

integrationUsage() { echot "Usage: $(ScriptName) integration install|IsInstalled\Integration commands."; }
integrationArgs() { ScriptArgGet "name" -- "$@"; shift; } 
integrationCommand() { usage; }

integrationInstallCommand()
{
	isComponentInstalled "$name" && return
	! firefox IsInstalled && { ScriptErr "Firefox is not installed"; return 1; }
	firefox "https://my.home-assistant.io/redirect/config_flow_start?domain=$name" || return
}

integrationIsInstalledCommand() { isComponentInstalled "$name"; }

#
# helper
#

isComponentInstalled() { cliInit && hass-cli config components | grep -q "^${1}$"; }

ScriptRun "$@"
