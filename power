#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: power hibernate|sleep|reboot|shutdown|wake
	System power
	fix info|sleep|wake		examine issues preventing computer sleep or wake"
	exit $1
}

init() { :; }

args()
{
	while [ "$1" != "" ]; do
		case "$1" in
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(fix|wake) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && MissingOperand "command"
	args=("$@")
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

wakeCommand() 
{ 
	local host="$1"

	which etherwake >& /dev/null && { sudo etherwake "$host" -i $(GetInterface); return; }
	IsPlatform win && { wakeonlan -i $(GetIpAddress "$host") "$host"; return; }

	EchoErr "No wake on LAN program found"
	return 1
}

sleepCommand()
{
	echo "Issuing sleep..."
	case "$PLATFORM" in
		mac) 
			#pmset sleepnow;;
			#osascript -e 'tell application "Finder" to sleep';;
			#"/System/Library/CoreServices/Menu Extras/User.menu/Contents/Resources/CGSession" -suspend
			osascript -e 'tell application "System Events" to sleep';;
		win) start psshutdown -d -t 0;;
		linux) sudo shutdown -s now;;
	esac
}

hibernateCommand()
{
	echo "Issuing hibernate..."
	case "$PLATFORM" in
		win) shutdown /h;;
		*) echo "not unavailable";;
	esac
}

cleanup()
{
	vmware IsInstalled && { vmware SuspendAll || return; }
	return 0
}

shutdownCommand()
{
	cleanup || return

	echo "Issuing shutdown..."
	case "$PLATFORM" in 
		mac|linux) sudo shutdown -h now;;
		win) start psshutdown -s -f -t 0;;
	esac
}

rebootCommand()
{
	cleanup || return	

	echo "Issuing reboot..."
	case "$PLATFORM" in
		linux|mac) sudo shutdown -r now;;
		win) start psshutdown -r -f -t 0;;
	esac		
}

fixCommand()
{
	local command; CheckSubCommand fix "$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"
	Fix${command}Command "$@"
}

FixSleepCommand()
{
	! IsElevated && { elevate run --pause power fix sleep; return; }
	
	local numRequests="$(powercfg.exe /requests | egrep -i None | wc -l)"
	if (( numRequests == 6 )); then
		echo "No devices are preventing the computer from sleeping"
		return 0
	fi

	echo "Requests preventing sleep..."
	PowerCfg.exe -REQUESTS
}

FixWakeCommand()
{
	echo "Devices which can wake the system:"
	PowerCfg.exe -DEVICEQUERY wake_armed

	echo "Device which last woke the system:"
	PowerCfg.exe -LastWake
}

FixInfoCommand()
{
echot "\
"'Wake:
- Disable wake: PowerCfg -DeviceDisableWake <devicename>
- Example: PowerCfg -DeviceDisableWake "HID Keyboard Device"

Sleep:
- View overrides:  powercfg -RequestsOverride
- Add override:    powercfg -RequestsOverride SERVICE "<device>" SYSTEM
- Remove override: powercfg -RequestsOverride SERVICE "<device>"
- Common overrides:
powercfg -RequestsOverride DRIVER "Realtek High Definition Audio" SYSTEM
powercfg -RequestsOverride DRIVER "Sound Blaster X-Fi Xtreme Audio" SYSTEM
powercfg -RequestsOverride SERVICE "\Device\HarddiskVolume1\Windows\System32\svchost.exe (CryptSvc)" SYSTEM
- override in Device Manager, device Power tab'
}

run "$@"
