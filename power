#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manage host or PoE switch port power state.

	on|off|reboot|sleep|firmware|hibernate
	fix				fix power issues
	info			show power information
	port			return the port the host is connected to
	status		host power status

	    --timeout=[$timeout]		milliseconds to wait for a response from the host
	-T, --trust						trust SSH host identification ignoring possible security issues
	-u, --user USER				SSH user"
}

init()
{
	switch="" waitSecondsDefault=120 poeSwitchDefault="StudyDeskSwitch"

	hostUsage="HOST format is HOST[:PORT] where PORT is an optional switch port number.
		If the PORT is all the command applies to all switch ports on the host."

	unset user; [[ "$USER" == "homebridge" ]] && user="$(ConfigGetCurrent "user")@"

	return 0
}

argStart() { unset -v hosts trust; timeout="$(AvailableTimeoutGet)"; return 0; }

opt()
{
	case "$1" in
		--timeout|--timeout=*) ScriptOptGet --integer "timeout" "$@";;
		--trust|-T) trust="--trust";;
		--user|--user=*|-u|-u=*) ScriptOptGet "user" "$@"; user=$user@;;
		*) return 1;;
	esac
}

args()
{
	[[ "${commands[0]}" == @(fix|info) ]] && return
	local hosts=( "$@" ); (( shift+=$# ));
	hostArg="$(ArrayDelimit hosts ",")"
	return 0
}

#
# Commands
#

portCommand() { ForAllHosts port; }
port() { switchLookup "$1" && echo "$1 is connected to $switch:$switchPort"; }

#
# Power Commands (off, on, firmware, hibernate, reboot, or sleep)
#

# op... - generic functions for all power operations

opUsage()
{
	EchoWrap "\
Usage: power $command [HOST]...
Perform a power command.

	$hostUsage

	-e, --exit 						return the specified exit code after the power command
	-f, --force 					force the power operation even if we believe the host is in the correct state
	-g, --gui 						make a GUI desktop connection after power operation
	-ie, --ignore-errors	ignore non-fatal errors
	-nc, --no-command			do not send the power command (controls port only)
	-np, --no-prepare			do not prepare a host for power on or power off
	-s, --ssh 						make an ssh connection after power operation
	-w, --wait						wait for the host to change state
	-ws,--wait-ssh				wait for an ssh connection
	   ,--wait-seconds N	seconds to wait for a host, defaults to $waitSecondsDefault	"
}

opArgStart()
{
	unset -v exit hostArg ignoreErrors noCommand noPrepare gui quiet test ssh
	unset -v sshCommand
	expectedState="off" waitSeconds="$waitSecondsDefault"
}

opOpt() 
{
	case "$1" in
		--exit|--exit=*|-e|-e=*) ScriptOptGet "exit" "$@";;
		--gui|-g) gui="--gui";;
		--ignore-errors|-ie) ignoreErrors="--ignore-errors";;
		--no-command|-nc) noCommand="--no-command";;
		--no-prepare|-np) noPrepare="--no-prepare";;
		--ssh|-s) ssh="--ssh" wait="--wait" waitSsh="--wait-ssh";;
		--wait-seconds|--wait-seconds=*) ScriptOptGet --integer "waitSeconds" "wait-seconds" "$@";; 
		--wait-ssh|-ws) waitSsh="--wait-ssh" wait="--wait" ;;
		*) return 1
	esac
}

offUsage() { opUsage; }
offArgStart() { opArgStart; sshCommand="shutdown now"; }
offOpt() { opOpt "$@"; }
offCommand() { power "off"; }

onUsage() { opUsage; }
onArgStart() { opArgStart; expectedState="on"; }
onOpt() { opOpt "$@"; }
onCommand() { power "on"; }

firmwareUsage() { opUsage; }
firmwareArgStart() { opArgStart; }
firmwareOpt() { opOpt "$@"; }
firmwareCommand() { power "firmware"; }

hibernateUsage() { opUsage; }
hibernateArgStart() { opArgStart; }
hibernateOpt() { opOpt "$@"; }
hibernateCommand() { power "hibernate"; }

rebootUsage() { opUsage; }
rebootArgStart() { opArgStart; desc="Rebooting"; expectedState=""; sshCommand="shutdown -r now"; }
rebootOpt() { opOpt "$@"; }
rebootCommand() { power "reboot"; }

sleepUsage() { opUsage; }
sleepArgStart() { opArgStart; desc="Sleeping"; }
sleepOpt() { opOpt "$@"; }
sleepCommand() { power "sleep"; }

# power COMMAND - run a power command (off, on, firmware, hibernate, reboot, or sleep)
power()
{
	local command="$1"
	[[ $hostArg ]] && { ForAllHosts powerRemote "$command"; return; }
	powerLocal "$command"
}

# powerLocal COMMAND - run a power command on the local computer
powerLocal()
{
	local command="$1" initialState="on"
	local sudo="RunLog sudoc"
	local inhibit; [[ $force ]] && inhibit="--ignore-inhibitors"

	[[ $exit ]] && { powerLocalReturnExit "$command"; return; }

	case "$command" in
		on) return 0;;
		off|reboot) powerOffPrepare || return			
	esac

	printf "$command..."
	[[ $test ]] && return

	# assumes policy is set so no password is required (for remote power operation)
	case "$command" in
		firmware)
			if IsPlatform win; then elevate shutdown.exe /r /fw /t 0; exit
			fi;;

		hibernate)
			if IsPlatform win; then start psshutdown.exe -h -f -t 0; exit
			elif IsPlatform mac; then /sbin/shutdown -h now; exit
			elif InPath systemctl; then $sudo systemctl hibernate $inhibit; exit
			fi;;

		off)
			if IsPlatform win; then start psshutdown.exe -s -f -t 0; exit
			elif IsPlatform mac; then $sudo /sbin/shutdown -h now; exit
			elif IsPlatform qnap; then $sudo poweroff; exit
			elif IsPlatform rock; then $sudo systemctl halt $inhibit; exit
			elif IsPlatform synology; then /sbin/shutdown -P now; exit
			elif InPath systemctl; then $sudo systemctl poweroff $inhibit; exit
			elif InPath shutdown; then shutdown -p now; exit
			fi;;

		reboot)
			if IsPlatform win; then start psshutdown.exe -r -f -t 0; exit
			elif IsPlatform mac; then $sudo /sbin/shutdown -r now; exit
			elif IsPlatform qnap; then $sudo reboot; exit
			elif IsPlatform synology; then $sudo /sbin/shutdown -r now; exit
			elif InPath systemctl; then $sudo systemctl reboot $inhibit; exit
			elif InPath shutdown; then shutdown -r now; 
			fi;;

		sleep)
			if IsPlatform win; then start psshutdown.exe -d -t 0; exit
			elif IsPlatform mac; then osascript -e 'tell application "System Events" to sleep'; exit
			elif InPath systemctl; then $sudo systemctl suspend $inhibit; exit
			fi;;

	esac
}

# powerLocalReturnExit COMMAND - run the power command and ensure the exit code is returned to the callers
powerLocalReturnExit()
{
	local command="$1"

	# ensure sudo credentials are active
	sudoc -v 

	# perform the power operation in a delayed sub-shell so this shell can process the exit code
	# the sub-shell is disconnected so the power command still runs if this shell terminates
	{ nohup bash -c 'sleep 2; power $command' & } 

	exit $exit
}

# powerRemote COMMAND HOST - run a power command on a remote computer
powerRemote()
{
	local command="$1" host="$2" sshCommandInitialized sshCommandRaw; initHost "$host" || return

	# wait for the host to become available if we are connecting to the GUI desktop.  For virtual machines the GUI is available immediately.
	[[ $gui && ! $wait ]] && ! IsHostnameVm "$host" && wait="$waitSecondsDefault"

	# status
	printf "$hostDesc..."

	# control a switch port if specified 
	if [[ $switchPort ]]; then
		[[ "$command" != @(on|off) ]] && { EchoErr "Switch ports can only be turned on or off"; return 1; }
		RunFunction "switchPort" "$command" "$host" "$switchPort" || return; 
		echo "done"; return
	fi

	# determine the current status off the host
	local initialState="off"; IsAvailable "$hostMain" "$timeout" && initialState="on"

	# check if host is already on
	if [[ ! $force && "$command" == "on" && "$initialState" == "on" ]]; then
		powerStatusOk && powerWaitOn && doGuiConnect && echo "done" && sshConnect; return
	fi

	# determine host switch port to control it's power
	local switch switchPort; switchLookup "$host"
	local switchPortPower; [[ $host && $switch && $switchPort ]] && switchPortPower="true"
	[[ "$initialState" == "on" && "$command" == @(on|reboot) ]] && unset switchPortPower # do not control switch port if already on
	log1 "initialState=$initialState switchPortPower=$switchPortPower switch=$switch switchPort=$switchPort"

	# determine the current status off the switch port
	local initialSwitchState="$expectedState"
	[[ $switchPortPower ]] && { initialSwitchState="$(switchPortStatus $switch $switchPort)" || return; }
	log1 "initialSwitchState=$initialSwitchState"

	# return if we are in the correct state
	[[ ! $force && "$initialState" == "$expectedState" && "$initialState" == "$initialSwitchState" ]] && { powerStatusOk; echo "done"; return; }

	# force a wait if we can turn the hosts switch port off after sending it a power off command
	[[ $switch && $command == @(off|hibernate) && ! $noCommand ]] && sshCommandInit && wait="--wait"
	
	# run power command
	local result
	if [[ "$command"  == @(on|reboot) ]]; then
		power${command^} && powerWaitOn && doGuiConnect && echo "done" && sshConnect
	else
		powerOff "$command" && echo "done"
	fi
	result=$?; [[ $ignoreErrors ]] && return 0 || return $result
}

powerStatusOk() { [[ $quiet ]] && return; printf "already $expectedState..."; }

# powerOff COMMAND - run a power off command (firmware, hibernate, sleep, or off)
powerOff()
{
	local command="$1"

	# if the host is already off just power off the switch port 
	[[ "$initialState" == "off" ]] && { switchPortOff "$switch" "$switchPort"; return; }

	# prepare the host
	powerOffPrepare "$host" || return

	# power off switch if not sending a command
	[[ $noCommand ]] && switchPortOff "$switch" "$switchPort" && return

	# power off using SSH
	sshCommandInit && sshCommandDo && powerWaitOff && switchPortOff "$switch" "$switchPort" && return

	# SSH failed, power off using Hyper-V commands if possible
	IsHostnameVm "$host" && { hypervCommandDo; return; }

	# Hyper-V failed, just power off switch port if we are forcing
	[[ $switch && $force ]] && { switchPortOff "$switch" "$switchPort"; return; }

	# power off failed
	commandFailed
}

# powerOffPrepare [HOST](localhost) - prepare a host for power off
powerOffPrepare()
{
	local host="${1:-$HOSTNAME}"
	[[ $noPrepare || "$initialState" != "on" ]] && return
	powerOffPrepareNomad && powerOffPrepareVmWare
}

# powerOffPrepareNomad HOST - drain nomad node
powerOffPrepareNomad()
{
	# return if not a Nomad node
	{ ! InPath nomad || ! hashi nomad node exists --host=$host; } && return

	printf "nomad..."
	nomad="true"

	# if rebooting we want to wait for the node to stabilize	
	[[ "$command" == @(reboot) ]] && wait="--wait" waitSsh="--wait-ssh"

	# drain
	if [[ $force ]] || ! hashi nomad node drain status --host=$host; then
		echo "draining..."; hashi nomad node drain enable --host=$host
	else
		echo "drained"
	fi

	scaleHost "$host"	
}

powerOffPrepareVmWare()
{
	! { IsLocalHost "$host" && vmware IsInstalled; } && return
	printf "VMware..."; vmware SuspendAll || return
}

powerOn() 
{ 
	[[ "$initialState" == "on" ]] && return

	# prepare host for power command
	powerOnPrepare || return

	# power on Hyper-V virtual machine	
	if IsHostnameVm "$host"; then
		hypervCommandDo || return
		
	# power on associated switch port if specified
	elif [[ $switchPortPower ]]; then
		switchPortOn $switch $switchPort || return

	# turn on host using Wake-on-LAN.  A MAC address must be specified in /etc/ethers
	elif grep " ${host}$" "/etc/ethers" >& /dev/null; then

		local mac="$(GetMacAddress "$host")"
		local broadcastAddress="$(GetBroadcastAddress)"; [[ $broadcastAddress ]] && broadcastAddress="-i $broadcastAddress"

		[[ $verbose ]] && printf "wol ($mac)..." || printf "wol..."

		if [[ ! $test ]]; then
			if IsPlatform wsl; then
				 log1 "wakeonlan.exe -w -mac $mac"
				 wakeonlan.exe -w -mac "$mac" >& /dev/null || return
			else 
				# host must be lower case to be found
				log1 "wakeonlan $broadcastAddress $mac"
				wakeonlan $broadcastAddress "$mac" > /dev/null  || return
			fi
		fi

	fi
} 

powerOnPrepare() { [[ $noPrepare ]] && return; powerOnPrepareNomad; }

# powerOnPrepareNomad - add a wait if we think this is a Nomad node
powerOnPrepareNomad()
{
	[[ $waitSsh ]] && return
	! hashi nomad node exists --host=$host && return
	wait="--wait" waitSsh="--wait-ssh"	
}

powerReboot()
{
	local nomad # track if this host is a Nomad client

	# if the host is already off just power the host on
	[[ "$initialState" == "off" ]] && { powerOn; return; }

	# prepare the host
	powerOffPrepare "$host" || return

	# power off using SSH
	sshCommandInit && sshCommandDo && powerWaitOff && powerWaitOn && return

	# SSH failed, reboot using Hyper-V commands
	IsHostnameVm "$host" && { hypevCommandDo; return; }

	# Hyper-V failed, reboot the switch port if we are forcing
	[[ $switch && $force ]] && { switchPortReboot "$switch" "$switchPort"; return; }

	# reboot failed
	commandFailed
}

# powerWaitOff - wait for host to disconnect from the network
powerWaitOff()
{	
	local seconds="${waitSeconds:-$waitSecondsDefault}"

	{ [[ ! $wait ]] || ! IsAvailable "$hostMain" "$timeout"; } && return

	printf "waiting..."

	for (( i=1; i<=$seconds; ++i )); do
 		read -n 1 -t 1 -s && { echo "cancelled"; return 1; }

		if ! IsAvailable "$hostMain" "$timeout"; then
			printf "disconnected..."
			[[ $switchPortPower ]] && sleep 1
			return 0			
		fi

		[[ $test && "$i" == "4" ]] && return
		printf "."
	done

	echo; ScriptErr "'$host' did not turn off"; return 1
}

# powerWaitOn - wait for host to become available
powerWaitOn() { powerWaitOnDo && poweredOn; }

# poweredOn - perform actions to take when powered on
poweredOn() { [[ $noPrepare ]] && return; poweredOnNomad; }

# poweredOnNomad - disable Nomad drain
poweredOnNomad()
{
	# return if not a Nomad node
	! hashi nomad node exists --host=$host && return

	# disable drain
	if [[ $force ]] || hashi nomad node drain status --host=$host >& /dev/null ; then
		echo "nomad..."; hashi nomad node drain disable --host=$host
	fi

	# run additional workloads
	scaleHost "$host" || return

	# disable netboot.xyz TFTP server - may need to `sudov && packageu tftpd-hpa &&i NetbootxyzTftpServer`
	if [[ "$host" =~ ^rp[1-2]+$ ]] && nomad job status tftp >& /dev/null; then
		hashi nomad job exec netbootxyz -- bash -c "s6-svc -d /run/service/svc-tftp; sleep 1; s6-svstat /run/service/svc-tftp" || return
	fi
}
	
powerWaitOnDo()
{
	local seconds="${waitSeconds:-$waitSecondsDefault}" found

	{ [[ ! $wait ]] || IsAvailable "$hostMain" "$timeout"; } && return

	printf "waiting..."

	for (( i=1; i<=$seconds; ++i )); do
 		read -n 1 -t 1 -s && { echo "cancelled"; return 1; }

		if [[ $found ]]; then
			SshHelper IsAvailable "$hostMain" --quiet && { printf "ssh..."; return 0; }

		elif IsAvailable "$hostMain" "$timeout"; then
			found="true"; printf "found..."
			[[ ! $waitSsh ]] && return 0
		fi

		[[ $test && "$i" == "4" ]] && return 0
		printf "."
	done

	echo; ScriptErr "'$host' did not turn on"; return 1
}

#
# Fix Command
#

fixUsage() { echot "Usage: power fix disable|info|sleep|wake [wsl]\nExamine and fix issues preventing computer sleep or wake"; }
fixCommand() { usage; }

fixSleepCommand() { RunPlatform "fixSleep"; }
fixSleepMac() { pmset -g assertions; }

fixSleepWin()
{
	! CanElevate && return
	! IsElevated && { RunScript --elevate "${globalArgs[@]}" power fix sleep "${globalArgs[@]}"; return; }

	local numRequests="$(powercfg.exe /requests | grep -i "None" | wc -l)"
	if (( numRequests == 6 )); then
		echo "No devices are preventing the computer from sleeping"
		return 0
	fi

	echo "Requests preventing sleep..."
	PowerCfg.exe -REQUESTS	
}

fixSleepWslCommand() { powercfg.exe /requestsoverride PROCESS mstsc.exe DISPLAY SYSTEM && powercfg.exe /requestsoverride PROCESS msrdc.exe DISPLAY SYSTEM && echo "done"; }

fixDisableUsage() { echot "Usage: power fix disable\nChoose which device should not wake the system."; }

fixDisableCommand()
{
	{ ! IsPlatform win || ! CanElevate; } && return
	! IsElevated && { RunScript --no-hide --elevate power fix disable "${globalArgs[@]}"; return; }

	local device devices; IFS=$'\n' ArrayMakeC devices PowerCfg.exe /DeviceQuery wake_armed || return
	for device in "${devices[@]}"; do
		device="$(echo "$device" | RemoveCarriageReturn)"
		[[ ! $device || "$device" == "NONE" ]] && continue
		ask --default-response=n "Prevent '$device' from waking the system" && { PowerCfg.exe -DeviceDisableWake "$device" || return; }
	done
}

fixWakeCommand()
{
	{ ! IsPlatform win || ! CanElevate; } && return

	echo "Devices which can wake the system:"
	PowerCfg.exe /DeviceQuery wake_armed

	echo "Device which last woke the system:"
	PowerCfg.exe /LastWake
}

fixInfoCommand()
{
	! IsPlatform win && return

echot "\
"'Wake:
- Disable wake: PowerCfg -DeviceDisableWake <devicename>
- Examples: 
PowerCfg.exe -DeviceDisableWake "HID Keyboard Device"
PowerCfg.exe -DeviceDisableWake "HID-compliant mouse (009)"

Sleep:
- View overrides:  powercfg -RequestsOverride
- Add override:    powercfg -RequestsOverride SERVICE "<device>" SYSTEM
- Remove override: powercfg -RequestsOverride SERVICE "<device>"
- Examples:
powercfg.exe /DeviceDisableWake "HID-compliant mouse (001)"
powercfg.exe /DeviceQuery wake_from_any
powercfg.exe -RequestsOverride DRIVER "Realtek High Definition Audio" SYSTEM
powercfg.exe -RequestsOverride DRIVER "Sound Blaster X-Fi Xtreme Audio" SYSTEM
powercfg.exe -RequestsOverride SERVICE "\Device\HarddiskVolume1\Windows\System32\svchost.exe (CryptSvc)" SYSTEM
powercfg -devicequery wake_from_any # device which can wake the system
- override in Device Manager, device Power tab'
}

#
# Info Command
#

infoUsage() {	EchoWrap "Usage: power info [settings|shutdown|sleep](settings)\nDisplay power information."; }
infoCommand() { infoSettingsCommand; }

infoSettingsUsage() { EchoWrap "Usage: power info settings\nDisplay power settings."; }
infoSettingsCommand() { RunPlatform "infoSettings"; }
infoSettingsMac() { pmset -g custom; }

infoShutdownUsage() { EchoWrap "Usage: power info shutdown\nDisplay shutdown information."; }
infoShutdownCommand() { RunPlatform "infoShutdown"; }

infoShutdownDebian()
{
	IsPlatform win && return;

	last  --system --fulltimes |\
		grep --extended-regexp '(^shutdown|^reboot |^runlevel)' |\
		cut -c1-9,40-64 |\
		cut -d" " -f1,2- |\
		sed 's/ /,/' |\
		tac |\
		awk '
			function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
			function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
			BEGIN { FS=","; gotReboot=0; gotShutdown=0; }
			{
				cmd="date \"+%m/%d/%Y %H:%M:%S\" -d \""rtrim(ltrim($2))"\""
				cmd | getline date

				if ($1 == "runlevel")
				{
					printf "boot:     " date
					if (gotReboot == 0) printf " (no reboot)"
					if (gotShutdown == 0) printf " (dirty)"
					print ""; gotRboot=0; gotShutdown=0
				}
				else if ($1 == "reboot") {
					print "reboot:   " date
					gotReboot=1
				}
				else if ($1 == "shutdown") {
					print "shutdown: " date
					gotShutdown=1
				}
			}' | tac
}

infoSleepUsage() { EchoWrap "Usage: power info sleep\nDisplay sleep and wake information."; }
infoSleepCommand() { RunPlatform "infoSleep"; }
infoSleepMac() { pmset -g log | grep -E 'Wake from|Entering Sleep'; }

#
# Status Command
#

statusUsage()
{
	echot "\
Usage: power status [switch|watts] HOST[:PORT]
Report the status of the host or PoE switch (on or off).  
If port is all then the status of all switch ports is displayed.

	$hostUsage

	-t, --timeout=[$timeout]		milliseconds to wait for a response from the host"
}

statusArgEnd() { [[ ! $hostArg ]] && MissingOperand "host"; return 0; }

statusCommand()
{
	local host command="doStatus"; [[ $verbose ]] && command="doStatusVerbose"
	ForAllHosts "$command" --header "status"
}

statusWattsCommand() { ForAllHosts doStatusWatts --header "watts"; }
statusSwitchCommand() { ForAllHosts doStatusSwitch --header "switch"; }
doStatusSwitch() { switchLookup "$host" && echo "$switch:$switchPort"; }

doStatus()
{
	local host="$1"; initHost "$host" || return

	if [[ "$switchPort" == "all" ]]; then
		switchPortStatusAll "$host"
	elif [[ $switchPort ]]; then
		switchPortStatus "$host" "$switchPort"
	else
		IsAvailable "$hostMain" "$timeout" && echo "on" || echo "off"
	fi	
}

doStatusVerbose()
{

	local host="$1"; initHost "$host" || return
	local status="$(doStatus "$host")"

	if [[ "$switchPort" == "all" ]]; then
		switchPortStatusAll "$host"
	elif [[ $switchPort ]]; then
		doStatusVerboseSwitchPort "$host" "$switchPort"
	else
		doStatusVerboseHost "$host"
	fi
}

doStatusVerboseHost()
{
	local host="$1" switch switchPort watts; switchLookup "$host" || return
	[[ $switch && $switchPort ]] && watts="$(switchWatts "$switch" "$switchPort")w"
	[[ $watts ]] && status+=" ($watts)"
	echo "$hostDesc is $status"
}

doStatusVerboseSwitchPort()
{
	local host="$1" switchPort="$2"
	echo "$hostDesc port $switchPort is $status ($(switchWatts "$host" "$switchPort")w)"
}

doStatusWatts()
{
	local host="$1"; initHost "$host" || return

	if [[ $switchPort ]]; then
		switchWatts "$host" "$switchPort"
	else
		local switch switchPort; switchLookup "$host" || return
		[[ $switch && $switchPort ]] && switchWatts "$switch" "$switchPort"
	fi
}

#
# Switch Helper - assume UniFi Ubiquiti PoE switch
#

# switchLookup HOST - sets the switch and port that the specified host is connected to
switchLookup()
{
	local hostShort="$(RemoveDnsSuffix "$1")"
	local line=( $(grep -i "^$hostShort[	 ]" "$DATA/setup/ports") )
	switch="${line[1]}" switchPort="${line[2]}"
	[[ $switch && $switchPort ]]
}

# switchPortOn switch port - turn the power of a PoE port on
switchPortOn()
{
	local switch="$1" switchPort="$2"
	printf "port..."

	# check if the switch port is already on
	local status; status="$(switchPortStatus $switch $switchPort)" || return
	[[ "$status" == "on" ]] && { [[ ! $quiet ]] && printf "already on..."; return; }

	# turn on the switch port
	sshSwitch "admin@$switch" swctrl poe set auto id $switchPort || { ScriptErr "unable to turn on '$switch' port '$switchPort'"; return 1; }
	printf "on..."
}

# switchPortOff switch port - turn the power of a PoE port off
switchPortOff()
{
	local switch="$1" switchPort="$2"; ! [[ $switch && $switchPort ]] && return

	[[ "$command" == "sleep" ]] && return

	printf "port..."

	# check if the switch port is already off
	local status; status="$(switchPortStatus $switch $switchPort)" || return
	[[ "$status" == "off" ]] && { [[ ! $quiet ]] && printf "already off..."; return 0; }

	# turn off the switch port - first try can fail
	if ! sshSwitch "admin@$switch" swctrl poe set off id $switchPort; then
		printf "port..."
		if ! sshSwitch "admin@$switch" swctrl poe set off id $switchPort; then
			ScriptErr "unable to turn off '$switch' port '$switchPort'"
			return 1
		fi
	fi

	printf "off..."
}

switchPortReboot()
{
	local switch="$1" switchPort="$2"; ! [[ $switch && $switchPort ]] && return
	switchPortOff "$switch" "$switchPort" && sleep 1 && switchPortOn "$switch" "$switchPort" && powerWaitOn
}

# switchPortStatus switch port - return the power status of a PoE port (on or off)
switchPortStatus()
{	
	local switch="$1" switchPort="$2"

	# logging
	(( verboseLevel > 1 )) && SshHelper connect "admin@$switch" "${globalArgsLessVerbose[@]}" -- swctrl poe show id "$switchPort" >& /dev/stderr

	# get the status
	local result status; status="$(SshHelper connect "admin@$switch" "${globalArgsLessVerbose[@]}" -- swctrl poe show id "$switchPort" 2>&1)"
	if (( $? != 0 )); then
		[[ "$status" =~ ': Invalid "id"'$ ]] && { ScriptErr "switch '$switch' port $switchPort is not valid"; return 1; }
		EchoErr "$status"; return 1
	fi

	# parse the status
	echo "$status" |& cut -c7-13 | grep --quiet "Auto" && echo "on" || echo "off"
}

# switchPortStatusAll switch - get the power status of all PoE ports on the specified switch
switchPortStatusAll() { local host="$1"; SshHelper connect "admin@$host" -- swctrl poe show; }

# switchWatts SWITCH PORT - get the watts used by the specified switch and port
switchWatts()
{
	(( verboseLevel > 1 )) && SshHelper connect "admin@$1" -- swctrl poe show id $2 >& /dev/stderr
	SshHelper connect "admin@$1" -- swctrl poe show id $2 |& tail -1 | cut -c65-73 | tr -d "[:space:]"
}

#
# SSH Helper
#

sshConnect() { [[ ! $ssh ]] && return 0; SshHelper connect -x "$hostMain" $trust "${globalArgsLessVerbose[@]}"; }
sshSwitch() { ssh -o ServerAliveInterval=2 "$@"; } # StudyDeskSwitch requires ServerAliveInterval >= 2

sshCommandDo()
{
	! sshCommandInit && return
	printf "command..."; 

	# arguments
	local args=() suppressError

	# platform specific arguments

	if IsPlatform win --host; then
		args+=(-o ServerAliveInterval=2 -o ServerAliveCountMax=1) # prevents psshutdown hang
		suppressError="true" # psshutdown hangs so SSH will always return an error
	fi

	local result redirect=">"; [[ $suppressError ]] && redirect=">&"
	redirect+=" /dev/null"; [[ $verbose ]] && unset redirect

	if IsPlatform ubiquiti --host; then
		ssh "$user$host" "$sshCommand" $redirect
	else
		local cmd=(SshHelper connect "$user$hostMain" --credential --interactive $trust "${globalArgsLessVerbose[@]}" -- "$sshCommand" "${globalArgs[@]}" $redirect)
		local detach; IsPlatform win --host && [[ "$command" != "on" ]] && { detach="nohup"; log1 "running power command detatched"; }
		(( verboseLevel > 1 )) && ScriptArgs "power" $detach "${cmd[@]}"		
		if [[ $detach ]]; then
			(eval nohup "${cmd[@]}" >& /dev/null &)
			sleep 1
		else
			eval "${cmd[@]}"
		fi
	fi
	result="$?"
	log1 "sshDo: result=$result _platformOs=$_platformOs"

	# return result
	[[ $suppressError ]] && return 0 || return "$result"
}


# sshCommandInit COMMAND - initialize SSH for a remote power command, returns true if the host supports the power command using SSH, updates sshCommand and _platform
sshCommandInit()
{
	# cache
	[[ $sshCommandInitialized ]] && return	
	sshCommandInitialized="true"
	
	# check if host is available on it's SSH port
	SshIsAvailablePort "$hostMain" || return

	# use the power command on the host if possible
	if [[ "$host" == @(hubitat?) ]]; then
		return 1
	elif [[ "$host" != @(VeraBridge) ]]; then
		ScriptEval HostGetInfo vars $quiet "$hostMain" $trust "${globalArgs[@]}" || return

		if SshInPath "$user$hostMain" "power"; then
			sshCommand="$BIN/power --no-prepare $command"

		elif IsPlatform Busybox,OpenWrt,Ubiquiti --host; then
			sshCommandRaw="true"
			[[ "$command" == "off" ]] && sshCommand="poweroff"
			[[ "$command" == "reboot" ]] && sshCommand="reboot"
		fi

	fi

	# return true if the host supports the power command using SSH
	[[ $sshCommand ]]
}

#
# Helper
#

commandFailed() { ScriptErrQuiet "'$command' failed for '$host'"; return 1; }
hypervCommandDo() { printf "command..."; RunLog hyperv power "$command" "$host" "${globalArgs[@]}"; }

initHost()
{
	_platform="linux"

	# assume we will need the ssh-agent (for remote and switch port commands)
	SshAgentConf --quiet || return

	# parse host - HOST:PORT
	switchPort="$(GetWord "$host" 2 :)"
	host="$(GetWord "$host" 1 :)"
	hostOrig="${host,,}"
	unset -v hostMain
	
	# host aliases
	case "$(RemoveDnsSuffix "$hostOrig")" in
		b) host="BackShedSwitch";;
		c) host="StudyClosetSwitch1";;
		d) host="StudyDeskSwitch";;
		g) host="GarageSwitch";;
		bc) host="bcw1";;
		bl1) hostMain="$host"; host="bl1w2";;
		bl2) hostMain="$host"; host="bl2w2";;
		ender) host="enderw1";;
		nas2|pm|oversoul|oversoulw1|oversoulw2|oversoulw3|oversoulw4) host="oversoulw1";; # nas2=TrueNas pm=Proxmox
	esac
	
	# validate host
	if ! GetIpAddress "$host" >& /dev/null; then

		# check for virtual host
		if GetIpAddress "$HOSTNAME-$host" >& /dev/null; then
			host="$HOSTNAME-$host"
		elif [[ $force ]]; then
			hostDesc="$host"
			return
		else
			HostUnresolved "$host"; return 1
		fi

	fi

	hostMain="${hostMain:-$host}"
	hostDesc="$(os name "$host" | RemoveDnsSuffix)"
}

doGuiConnect()
{
	[[ ! $gui ]] && return 0

	# Hyper-V GUI connection
	if IsHostnameVm "$host"; then
		hyperv connect gui "$host" "${globalArgs[@]}"; return

	# Remote Desktop GUI connection
 	elif [[ "$_platformOs" == "win" ]] && InPath "mstsc.exe"; then
 		mstsc.exe "/v:$host"; return

 	# no GUI connection available
 	else
		[[ ! $quiet ]] && ScriptErr "GUI operation is not available on '$host'"
		return "$ignoreErrors"

 	fi

}

# scalHost HOST - set the Nomad scale for the specified host
scaleHost()
{
	local host="$1"
	
	# example scaling TFTP servers when rp1-4 go online or offline
	# [[ ! "$host" =~ ^rp[0-9]+$ ]] || ! nomad job status tftp >& /dev/null && return

	# local hostCount; hostCount="$(nomad node status | awk '{ print $4 " " $7 }' | grep -E "^rp[0-9]+ " | grep " eligible$" | wc -l)" || return
	# ! IsNumeric "$hostCount" && { ScriptErr "unable get a host count to determine the correct scale for the TFTP job"; return 1; }
	# hilight "Scaling TFTP job to ${hostCount} nodes..."
	# nomad job scale tftp "$hostCount" || return
}

ScriptRun "$@"
