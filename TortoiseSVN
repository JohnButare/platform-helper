#!/bin/bash
# http://tortoisesvn.net/docs/nightly/TortoiseSVN_en/tsvn-automation.html
. app.sh || exit

usage() {	echot "usage: TortoiseSVN svn|gui|code
  code checkout|commit|status|update PROJECTS
  	log FILE				display the SVN log for the specified file
  	switch PROJECTS [-v|--version VERSION](trunk) "
	exit $1; }

args()
{
	unset command
	while (( $# != 0 )); do
		case "$1" in
			-h|--help) usage 0;;
			IsInstalled) command="IsInstalled";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; break; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && MissingOperand "command"
	args=( "$@" )
}

init()
{ 
	svn="$P/TortoiseSVN/bin/svn.exe"
	gui="$P/TortoiseSVN/bin/TortoiseProc.exe"
	repository="azscsistfs001.amr.corp.intel.com:8443"
}

run() {	args "$@"; init; ${command}Command "${args[@]}"; }
IsInstalledCommand() { [[ -f "$svn" ]]; }

svn() { svnCommand "$@"; }
svnCommand()
{
	[[ ! -f "$svn" ]] && { EchoErr "Could not find svn command: is TortoiseSVN installed?"; return 1; }
	start --direct "$svn" "$@"
}

gui() { guiCommand "$@"; }
guiCommand()
{
	[[ ! -f "$gui" ]] && { EchoErr "Could not find TortoiseProc command: is TortoiseSVN installed?"; return 1; }

	# convert /path:"$dir" paths
	local args; for arg in "$@"; do
		[[ "$arg" == @(/path:*) ]] && args+=( "/path:$(utw "${arg#/path:}")" ) || args+=( "$arg" )
	done

	start --direct "$gui" "${args[@]}"
}

code() { codeCommand "$@"; }
codeCommand()
{
	[[ ! $1 ]] && MissingOperand "COMMAND"
	local command="$1"; ProperCase "$command" command; ! IsFunction Code${command}Command && usage 1; shift
	
	if [[ "$command" == @(log) ]]; then
		[[ ! $1 ]] && MissingOperand "FILE"; file="$1"; shift
		[[ ! -f "$file" ]] && { EchoErr "TortoiseSVN: cannot access `$file`: No such file"; return 1; }
		Code${command}Command "$@"
	else
		CodeProjectCommand "$@"
	fi
}

CodeProjectCommand()
{
	local projects version
	
	while (( $# != 0 )); do
		case "$1" in
			-h|--help) usage 0;;
			-v|--version) version="$2"; shift;;
			*)
				local project="$1" projectDir="$CODE/$1"; projects+=( "$project" )					
				[[ "$command" == @(checkout|update)  && ! -d "$projectDir" ]] && { mkdir --parents "$projectDir" || return; }
				[[ ! -d "$projectDir" ]] && { EchoErr "TortoiseSVN: cannot access \`$project\`: Project does not exist"; return 1; };;
		esac
		shift
	done
	
	[[ ! $project ]] && MissingOperand "PROJECT"; shift
	for project in "${projects[@]}"; do
		projectDir="$CODE/$project"
		Code${command}Command "$@" || return
	done
}

CodeLogCommand() { gui /command:log /path:"$file"; }
CodeStatusCommand() { svn status "$projectDir"; }
CodeRevertCommand() { gui /command:revert /path:"$projectDir"; }

CodeCommitCommand() 
{ 
	[[ ! $(code status "$project") ]] && { echo "There are no changes in the $project project"; return 0; }
	gui /command:commit /path:"$projectDir";
}

CodeCheckoutCommand() 
{ 
	echo "Checking out $project..."
	gui /command:checkout /url:"https://$repository/svn/$project/trunk/" /path:"$projectDir"
}

CodeUpdateCommand() 
{ 
	echo "Updating $project..."
	svn co "https://$repository/svn/$project/trunk/" "$projectDir"
	local result=$?; echo; return $result
}

CodeSwitchCommand()
{	
	if [[ ! $version || "$version" == "trunk" ]]; then
		echo "Switching $project to trunk..."
		svn switch "^/trunk" "$projectDir"
	else
		echo "Switching $project to branch $version..."
		svn switch "^/branches/$version" "$projectDir"
	fi
}

run "$@"