#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: SyncLocalFiles [target](host|nas1)
	Sync local files with another system.
	-do, --dest-older			assume target files are than the local source files
	-so, --src-older			assume local files are older than the target files
	-nb, --no-bak					do not backup files to the bak directory"
	exit $1
}

init() 
{
	exclude=("Document Themes" "*.bak" "desktop.ini" ".git" ".gitignore" ".DS_Store" "thumbs.db" "~\$*.docx" "~\$*.dot?" "*.TMP" )
	platformExclude=( "cports.cfg" "ftp.cfg" "JkDefrag*.log" "Defraggler.ini" "gridy.ini" )
	intelPlatformExclude=( "hstart.exe" "pspv.exe" "regscanner*" "mailpv.exe" "awatch.exe" "netpass.exe" "SniffPass.exe" "MyLastSearch.exe" "BluetoothView.exe" "TcpTunnel.exe" "GdiView.exe" "DotNetResourcesExtract.exe" )
	srcId="${HOSTNAME,,}"	
}

args()
{
	unset target targetIsDir method NoBak
	while [ "$1" != "" ]; do
		case "$1" in
			-do|--dest-older) method=(--dest-older);;
			-so|--src-older) method=(--src-older);;
			-nb|--no-bak) NoBak="--no-bak";;
			-h|--help) usage 0;;
			*) 
				! IsOption "$1" && [[ ! $target ]] && { target="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	args=("$@")
	syncDirArgs=( $method $NoBak --SrcId "$srcId" )
}

run() 
{	
	init; args "$@"
	TimerOn
	
	CheckTarget || return
	GetLastSync || return
	ShowStatus || return
	IdentifyDirectories || return
	SyncShared || return
	SyncUser || return

	echo "done in $(TimerOff)"
}

SyncShared()
{
	local args=( "${syncDirArgs[@]}" "$srcData" "$destData" -x "${exclude[@]}" )

	SyncDir -d "bin" "${args[@]}" || return
	[[ "$srcPlatform" == "$destPlatform" || "$targetId" == "nas1" ]] && { SyncDir -d "platform/$srcPlatform" -r "${args[@]}" -x "${platformExclude[@]}" || return; }
	SyncDir -d "doc" "${args[@]}" || return
	SyncDir -d "icons" "${args[@]}"   || return
	SyncDir -d "lib" "${args[@]}" || return
	SyncDir -d "man" -r "${args[@]}" || return
	SyncDir -d "setup" "${args[@]}" || return
	SyncDir -d "templates" -r -x "LiveContent" "${args[@]}" || return
}
	
SyncUser()
{	
	[[ "$user" == @(wsystem) ]] && return 0
	
	local args=( "${syncDirArgs[@]}" "$srcUserDocuments" "$destUserDocuments" -x "${exclude[@]}" )
	SyncDir "${args[@]}" -d "data/bin" || return
	SyncDir "${args[@]}" -d "data/bash" -r -x .bash_history || return
	SyncDir "${args[@]}" -d "data/certificate/public" -r || return
	SyncDir "${args[@]}" -d "data/certificate/private" || return
	SyncDir "${args[@]}" -d "data/profile/default"  || return
	SyncDir "${args[@]}" -d "data/replicate"  || return
	SyncDir "${args[@]}" -d "data/templates" -r -x LiveContent Normal.dotm || return

	if [[ $srcApplicationData && $destApplicationData ]]; then
		args=( "${syncDirArgs[@]}" "$srcApplicationData" "$destApplicationData" -x "${exclude[@]}" )
		SyncDir "${args[@]}" -d "Sublime Text 3/Packages" -r -e -x "bz2" "*.cache" "*.last-run" || return
	fi

	local args=( "${syncDirArgs[@]}" "$srcHome" "$destHome" -x "${exclude[@]}" )
	SyncDir "${args[@]}" -d ".ssh" -x environment || return
	
	if IsInstalled AutoHotKey && [[ "$method" != "--DestOlder" ]] && ! IsElevated; then
		AutoHotKey restart
	fi

	return 0
}

IdentifyDirectories()
{
	ScriptEval HostFindInfo || return
	user="$_user"
	srcHome="$_home"
	srcData="$_data"
	srcPublicDocuments="$_pub/Documents"
	srcUserDocuments="$_home/Documents"
	srcApplicationData="$_adata"
	srcPlatform="$_platform"

	ScriptEval HostFindInfo --no-target-check "$target" || return
	destHome="$_home"
	destData="$_data"
	destPublicDocuments="$_pub/Documents"
	destUserDocuments="$_home/Documents"
	destApplicationData="$_adata"
	destPlatform="$_platform"

	# pause "$srcPublicDocuments->$destPublicDocuments"
}

CheckTarget()
{
	if [[ ! "$target" || "$target" == "host" ]]; then
		ScriptEval HostFindInfo host && target="$_root"
	fi

	target="${target-"nas1"}"

	[[ "$target" =~ / ]] && targetIsDir="true"

	if [[ $targetIsDir ]]; then
		targetId="$(GetFileName "$target")"
	else
		[[ "${target%%\.*}" == "$HOSTNAME" ]] && { EchoErr "Cannot sync to the local computer"; return 1; }
		HostUtil available "$target" || { EchoErr "$target is not available"; return 1; }
		targetId="$(HostUtil name "$target")" # get the real (DNS) name of the target
	fi

	syncDirArgs+=( --DestId "$targetId" )

	{ intel IsIntelHost || intel IsIntelHost "$targetId"; } && platformExclude+=( "${intelPlatformExclude[@]}" )

	return 0
}

ShowStatus()
{
	case "${method[0]##--}" in
		dest-older) printf "$HOSTNAME->";;
		src-older) printf "$HOSTNAME<-";;
		*) printf "$HOSTNAME<->";;
	esac

	printf "$target"
	[[ ! "$targetIsDir" && "$target" != "$targetId" ]] && printf " ($targetId)"
	printf "..."

	return 0
}

GetLastSync()
{
	local lastSyncFile="$DATA/bin/.${targetId}_sync.txt" lastSync="unknown"
	[[ -f "$lastSyncFile" ]] && lastSync="$(${G}date "+%F %T" -d $(<"$lastSyncFile") 2> /dev/null)"
	return 0
}

run "$@"
