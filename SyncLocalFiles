#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: SyncLocalFiles	[host](nas)  
	Sync local files to another system.  Assume the source system is older, or 
	assume the destination system is older
	-do, --dest-older			assume destination host files are than the local source files
	-so, --src-older			assume local files are older than the host files
	-nb, --no-bak					do not backup files to the bak directory"
	exit $1
}

init() 
{
	exclude=( "*.bak" ".git" ".gitignore" ".DS_Store" "thumbs.db" "~\$*.docx" "~\$*.dot?" "*.TMP" )
	platformExclude=( "cports.cfg" "ftp.cfg" "JkDefrag*.log" "Defraggler.ini" "gridy.ini" )
	[[ "$PLATFORM" == "win" ]] && platformExclude+=( "mac" )
	[[ "$PLATFORM" == "mac" ]] && platformExclude+=( "win" )
	intelPlatformExclude=( "pspv.exe" "regscanner*" "mailpv.exe" "awatch.exe" "netpass.exe" "SniffPass.exe" "MyLastSearch.exe" "BluetoothView.exe" "TcpTunnel.exe" "GdiView.exe" "DotNetResourcesExtract.exe" )
	srcId="${COMPUTERNAME,,}"	
}

args()
{
	unset host method NoBak
	while [ "$1" != "" ]; do
		case "$1" in
			-do|--dest-older) method=(--dest-older);;
			-so|--src-older) method=(--src-older);;
			-nb|--no-bak) NoBak="--no-bak";;
			-h|--help) usage 0;;
			*) 
				! IsOption "$1" && [[ ! $host ]] && { host="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	args=("$@")
	host="${host-"nas"}"
	syncDirArgs=( $method $NoBak --SrcId "$srcId" )
}

run() 
{	
	init; args "$@"

	TimerOn
	CheckHost || return
	ShowStatus || return
	IdentifyDirectories || return
	SyncShared || return
	SyncUser || return
	TimerOff
}

SyncShared()
{
	echo "Syncing Shared folders..."
	SyncData || return
	SyncPublic || return
	SyncEtc || return
}

SyncEtc()
{
	[[ -d "$destEtc" ]] || return 0
	! IsElevated && { echo "Elevation is required to sync the etc directory"; return 0; }
	SyncDir "$srcEtc" "$destEtc" -x "${exclude[@]}" hosts HostNetworks hosts.ics gm.dls gmreadme.txt "*.tmp"
}

SyncPublic()
{
	local args=( "${syncDirArgs[@]}" "$srcPublicDocuments" "$destPublicDocuments" -x "${exclude[@]}" )

	SyncDir "${args[@]}" -d "icons"  || return
}

SyncData()
{
	local args=( "${syncDirArgs[@]}" "$srcData" "$destData" -x "${exclude[@]}" )

	SyncDir "${args[@]}" -d "bin" || return
	SyncDir "${args[@]}" -d "platform" -r -x "${platformExclude[@]}" || return
	SyncDir "${args[@]}" -d "archive/bin" || return
	SyncDir "${args[@]}" -d "doc" || return
	SyncDir "${args[@]}" -d "lib" || return
	SyncDir "${args[@]}" -d "man" -r || return
	SyncDir "${args[@]}" -d "setup" || return
	SyncDir "${args[@]}" -d "templates" -r -x "LiveContent" || return
}
	
SyncUser()
{
	[[ ! -d "$destHome" || "$user" == @(wsystem) ]] && return 0
	echo "Syncing $user folders..."
	
	local args=( "${syncDirArgs[@]}" "$srcUserDocuments" "$destUserDocuments" -x "${exclude[@]}" )
	SyncDir "${args[@]}" -d "data/bin" || return
	SyncDir "${args[@]}" -d "data/bash" -r || return
	SyncDir "${args[@]}" -d "data/certificate/public" -r || return
	SyncDir "${args[@]}" -d "data/certificate/private" || return
	SyncDir "${args[@]}" -d "data/profile/default"  || return
	SyncDir "${args[@]}" -d "data/replicate"  || return
	SyncDir "${args[@]}" -d "data/templates" -r -x LiveContent Normal.dotm || return

	if [[ $srcApplicationData && $destApplicationData ]]; then
		args=( "${syncDirArgs[@]}" "$srcApplicationData" "$destApplicationData" -x "${exclude[@]}" )
		SyncDir "${args[@]}" -d "Sublime Text 3/Packages" -r -e -x "*.cache" "*.last-run" || return
	fi

	local args=( "${syncDirArgs[@]}" "$srcHome" "$destHome" -x "${exclude[@]}" )
	SyncDir "${args[@]}" -d ".ssh" -x environment known_hosts || return
	SyncDir "${args[@]}" -d "Downloads"  || return
	
	if [[ "$host" == "nas" ]]; then
		printf "Updating nas ssh permissions..."
		ssh root@nas "chmod 700 /volume1/homes/$user/.ssh; chmod 644 /volume1/homes/$user/.ssh/authorized_keys"  || return
		echo "done"
	fi

	cp "$srcUserDocuments/data/templates/toc.docx" "$srcUserSysHome/templates" || return

	if IsInstalled AutoHotKey && [[ "$method" != "--DestOlder" ]] && ! IsElevated; then
		printf "Updating AutoHotKey configuration..."; AutoHotKey restart; printf "done\n"
	fi
}

IdentifyDirectories()
{
	local srcEtc destEtc
	ScriptEval os FindDirs || return

	user="$_user"
	srcHome="$_home"
	srcUserSysHome="$_SysHome"
	srcData="$_data"
	srcPublicDocuments="$_pub/Documents"
	srcUserDocuments="$_home/Documents"
	srcApplicationData="$_ApplicationData"
	srcEtc="$_etc"

	ScriptEval os FindDirs --no-host-check "$host" || return

	destHome="$_home"
	destData="$_data"
	destPublicDocuments="$_pub/Documents"
	destUserDocuments="$_home/Documents"
	destApplicationData="$_ApplicationData"
	destEtc="$_etc"
}

CheckHost()
{
	[[ "${name%%\.*}" == "$COMPUTERNAME" ]] && 
		{ EchoErr "Cannot sync to the local computer"; return 1; }

	{ [[ "$host" != @(cr|dfs) ]] && ! HostUtil available "$host"; } &&	
		{ EchoErr "$host is not available"; return 1; }

	destId="$(HostUtil name "$host")"
	syncDirArgs+=( --DestId "$destId" )

	{ intel IsIntelHost ||  intel IsIntelHost "$host"; } && platformExclude+=( "${intelPlatformExclude[@]}" )
	return 0
}

ShowStatus()
{
	case "${method[0]##--}" in
		dest-older) printf "Replacing destination files on ";;
		src-older) printf "Replacing local files from ";;
		*) printf "Synchronizing local files with ";;
	esac
	printf "$host"

	[[ "$host" != "$destId" ]] && printf " ($destId)"
	echo "...last $(GetLastSync)..."
}

GetLastSync()
{
	local lastSyncFile="$DATA/bin/.${destId}_sync.txt" lastSync="unknown"
	[[ -f "$lastSyncFile" ]] && lastSync="$(${G}date "+%F %T" -d $(<"$lastSyncFile") 2> /dev/null)"
	echo $lastSync
}

run "$@"
