#!/usr/bin/env bash
. script.sh || exit

run() {	init && args "$@" && "${command}Command" "${args[@]}"; }

init() 
{
	exclude=("Document Themes" "*.bak" "desktop.ini" ".git" ".gitignore" ".DS_Store" "thumbs.db" "~\$*.docx" "~\$*.dot?" "*.TMP" "*.jcorig" )
	platformExclude=( "cports.cfg" "ftp.cfg" "JkDefrag*.log" "Defraggler.ini" "gridy.ini" )
}

usage()
{
	ScriptUsage "$1" "\
usage: $(ScriptName) [sync|IsAvailable](sync)
Sync local files.

	-v, 	--verbose			show additional status"
}

args()
{
	unset -v verbose

	# commands
	ScriptCommand syncCommand "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-h|--help) usage 0;;
			-v|--verbose) verbose="--verbose";;
			--) shift; otherArgs+=("$@"); set --; break;;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"
	fileServer="$(ConfigGet "fs")" || return
	fileServerPort="$(ConfigGet "fsPort")" || return
	return 0
}

#
# IsAvailable Command
#

isAvailableUsage() { echo "\
Usage: $(ScriptName) IsAvailable
Return true if the default host ($fileServer) is available for syncronization."; }

isAvailableCommand() { IsAvailablePort "$fileServer" 445 || IsAvailablePort "$fileServer" "$fileServerPort"; }

#
# Sync Command
#

syncArgStart() { unset -v method noBak protocol syncDirArgs target uncArgs; }

syncGetOption() 
{
	case "$1" in
		-do|--dest-older) method="--dest-older";;
		-nb|--no-bak) noBak="--no-bak";;
		-so|--src-older) method="--src-older";;
		-p|--protocol|-p*|--protocol=*) ScriptGetNetworkProtocol "$@";;
		*) return 1
	esac
}

syncArgEnd() { syncDirArgs=($verbose $method $noBak) uncArgs=($verbose); }

syncUsage()
{
	echo "\
usage: $(ScriptName) sync [target]($fileServer)
Sync local files with the specified target.  

Target can be one of HOST|UNC|DIR|host|public|home.
- if the target is \"host\", find a mounted host (i.e. VM host).
- if the target is public or home, find the public or home directories
  specified in configuration

	-do,	--dest-older	assume target files are than the local source files
	-so,	--src-older		assume local files are older than the target files
	-nb,	--no-bak			do not backup files to the bak directory
	-p, --protocol=[NFS|SMB|SSH](SMB)"
}

syncCommand()
{	
	# default target
	[[ ! $1 ]] && set -- "$fileServer"

	# sync targets
	local target
	for target in "$@"; do	
		TimerOn
		checkTarget || return
		showStatus || return
		syncShared || return
		syncUser || return
		TimerOff
	done
}

#
# helper
#

doMount() { ! IsUncPath "$1" && echo "$1" || unc mount "$1" "${uncArgs[@]}"; }

checkTarget()
{
	local what

	# host
	if [[ "$target" == "host" ]]; then
		ScriptEval HostFindInfo host || return
		what="host" target="$_root" targetId="host"
		
	# UNC|public|home
	elif IsUncPath "$target" || [[ "$target" == @(public|home) ]]; then
		what="UNC"
		target="$(unc mount "$target")" || return		
		targetId="$(unc get unc "$target" | GetUncServer | RemoveDnsSuffix)"
		
	# DIR
	elif [[ -d "$target" ]]; then 
		what="DIR" 
		targetId="$(drive label "$target" --quiet)" ||
			targetId="$(drive device "$target" --quiet)" ||
			targetId="$(GetFileName "$target")"

	# HOST
	else
		what="HOST"
		targetId="$(os name "$target" | RemoveDnsSuffix)" # get the real (DNS) name of the target
		
	fi

	[[ $verbose ]] && hilight "SyncLocalFiles $what: target=$target targetId=$targetId"

	# prevent sync to ourself
	{ IsLocalHost "$target" || [[ "$target" == "/" ]]; } && { ScriptErr "cannot sync to the local computer"; return 1; }

	# add identifiers
	syncDirArgs+=(--srcid "${HOSTNAME,,}"	--destid "$targetId")

	# determine source directories
	ScriptEval HostFindInfo || return
	srcData="$_data" srcHome="$_home"

	# determine destination directories
	ScriptEval HostFindInfo "$target" "${protocolArg[@]}" || return
	destData="$_data" destHome="$_home"

	# file sharing network protocol
	[[ $_protocol ]] && uncArgs+=(--protocol "$_protocol")

	if [[ "$_protocol" == "ssh" ]]; then
		local port="${_port:-22}"
		[[ "$target" == "$fileServer" && $fileServerPort ]] && port="$fileServerPort"
		uncArgs+=(--port "$port")
	fi

	return 0
}

showStatus()
{
	# source
	printf "$(RemoveDnsSuffix "$HOSTNAME")"

	# sync direction
	case "$method" in
		--dest-older) echo -n "->";;
		--src-older) echo -n "<-";;
		*) echo -n "<->";;
	esac

	# target
	printf "$targetId..."
}

syncShared()
{
	[[ ! $destData ]] && return
	destData="$(doMount "$destData")" || return

	local args=( "${syncDirArgs[@]}" "$srcData" "$destData" -x "${exclude[@]}" )

	SyncDir -d "bin" "${args[@]}" || return
	SyncDir -d "platform" -r "${args[@]}" -x "${platformExclude[@]}" || return
	SyncDir -d "doc" "${args[@]}" || return
	SyncDir -d "icons" "${args[@]}"   || return
	SyncDir -d "lib" "${args[@]}" || return
	SyncDir -d "man" -r "${args[@]}" || return
	SyncDir -d "setup" "${args[@]}" || return
}

syncUser()
{	
	[[ ! $destHome ]] && return
	destHome="$(doMount "$destHome")" || return

	local args=( "${syncDirArgs[@]}" "$srcHome/Documents" "$destHome/Documents" -x "${exclude[@]}" )

	SyncDir "${args[@]}" -d "data/bin" -r || return
	SyncDir "${args[@]}" test-default.gpg -d "data/app/pass" -r || return
	SyncDir "${args[@]}" "S.gpg-*" random_seed  -d "data/app/gpg" -r || return
	SyncDir "${args[@]}" -d "data/certificate/public" || return
	SyncDir "${args[@]}" -d "data/certificate/private" || return
	#SyncDir "${args[@]}" -d "data/certificate/hashi" -r || return
	SyncDir "${args[@]}" -d "data/profile/default"  || return
	SyncDir "${args[@]}" -d "data/replicate"  || return

	local args=( "${syncDirArgs[@]}" "$srcHome" "$destHome" -x "${exclude[@]}" )
	SyncDir "${args[@]}" -d ".ssh" -x environment || return

	return 0
}

run "$@"
