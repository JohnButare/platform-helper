#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
usage: $(ScriptName) [excludes|sync|IsAvailable](sync)
Sync local files.

	-p, --protocol  $(ScriptOptNetworkProtocolUsage)
	-t, --timeout		$(ScriptOptTimeoutUsage)"
}

init() 
{
	defaultCommand="sync"

	# directory exclude
	excludeDir=("Document Themes")

	# file exclude
	excludeBasic=(".*_sync.txt" "desktop.ini" ".git" ".DS_Store" "@eaDir" "thumbs.db" "*.TMP" "*.jcorig" )
	excludeDomain+=(
		ATTODiskBenchmark.exe ATTODiskBenchmark.chm DhcpOptions.ps1 FontReg.exe LxRunOffline.exe PathEditor.exe SetKeyState.exe
		dhcptest.exe dns-sd.exe hstart64.exe nircmd.exe pageant_twee.exe paste.exe process.exe regjump.exe setx.exe UsbTreeView.exe
		wakeonlan.exe Machines.dll WOL.dll # wakeonlan dependencies
	)
	excludeAll=("${excludeBasic[@]}" "${excludeDomain[@]}")
	exclude=("${excludeBasic[@]}"); IsDomainRestricted && exclude+=("${excludeDomain[@]}")

	# other
	SshAgentConf "${globalArgsLessVerbose[@]}" || return
}

argStart() { unset -v protocol protocolArg && ScriptOptTimeoutArgStart; }

opt()
{
	case "$1" in
		--protocol|--protocol=*|-p|-p*) ScriptOptNetworkProtocol "$@";;
		--timeout|--timeout=*|-t|-t=*) ScriptOptTimeout "$@";;
		*) return 1;;
	esac
}

#
# exclude command
#

excludeUsage() { echo "Usage: $(ScriptName) exclude [all] - show file excludes."; }
excludeCommand() { ArrayShow exclude; }
excludeAllCommand() { ArrayShow excludeAll; }

#
# IsAvailable command
#

isAvailableUsage() { echo "\
Usage: $(ScriptName) IsAvailable
Return true if the default file server is available for synchronization."; }

isAvailableCommand() { local host; host="$(GetServer "file")" && unc IsAvailable "$host" $protocolArg "${globalArgsLessVerbose[@]}"; }

#
# sync command
#

syncUsage()
{
	ScriptUsageEcho "\
usage: $(ScriptName) sync [HOST](default)
Sync local files with the specified host.

Destination can be one of HOST|UNC|DIR|host|public|home.
- if the destination is \"host\", find a mounted host (i.e. VM host).
- if the destination is public or home, find the public or home directories
  specified in configuration

Synchronization direction:
	-do, --dest-older		assume destination files are than the local source files
	-so, --src-older		assume local files are older than the destination files

What to synchronize:
	-nb, --no-bak				do not backup files to the bak directory
	-ng, --no-git				do not synchronize git repositories
			 --no-platform	do not synchronize platform directories
	-ns, --no-shared		do not synchronize shared directories
	-nu, --no-user			do not synchronize user directories

Synchronization method:
			 --unc					perform synchronization using UNC shares
	-u,  --unison				perform synchronization using Unison

Other options:
	    --no-unmount		do not unmount shares when done
	-o, --on						if needed turn the host on
	-p, --protocol  		$(ScriptOptNetworkProtocolUsage)
	-t, --timeout				$(ScriptOptTimeoutUsage)"
}

syncArgStart() { unset -v hosts method noBak noGit noPlatform noShared noUser syncMethod noUnmount on; }

syncOpt() 
{
	case "$1" in
		--dest-older|--destination-older|-do) method="--dest-older";;
		--src-older|--source-older|-so) method="--src-older";;

		--no-bak|-nb) noBak="--no-bak";;
		--no-git|-ng) noGit="--no-git";;
		--no-platform) noPlatform="--no-platform";;
		--no-shared|-ns) noShared="--no-shared";;
		--no-user|-nu) noUser="--no-user";;

		--unc) syncMethod="UNC";;
		--unison|-u) syncMethod="Unison";;

		--no-unmount) noUnmount="--no-unmount";;
		--on|-o) on="--on";;
		*) return 1
	esac
}

syncArgs() { hosts=( "$@" ); (( shift+=$# )); return 0; }

syncArgEnd() { syncProgram="SyncDir"; }

syncCommand()
{
	# initialize the source host
	local srcHost srcId; syncInitSrc || return

	# arguments
	set -- "${hosts[@]}"

	# default file server
	if [[ ! $1 ]]; then
		local host
		if [[ -d "/mnt/AllFiles/usr/local/data/bin" ]]; then host="/mnt/AllFiles" # Parallels Virtual Machine
		else host="$(GetServer "file")" || return
		fi
		set -- "$host"
		log1 "set default host to '$host'"
	fi

	# sync destinations
	local destHost destId
	for destHost in "$@"; do			
		TimerOn
		syncInitDest || return
		syncStart || return
		[[ ! $noShared ]] && { syncShared || return; }
		[[ ! $noUser ]] && { syncUser || return; }
		syncFinish || return
	done
}

syncIsUnison() { [[ "$syncProgram" == "Unison" ]]; }

sync()
{
	local suffix="$1"; shift
	syncGit "$srcDir/$suffix" && sync$syncProgram "$srcDir/$suffix" "$destDir/$suffix" "$@" 
}

syncSetProgram() 
{
	# set default syncMethod
	if [[ ! $syncMethod ]]; then

		# use Unison if possible for protocols that cannot set file modification time (SSHFS, WSL 1)
		if InPath unison && { [[ "$_protocol" == "ssh" ]] || IsPlatform wsl1; }; then
			log1 "syncSetProgram: using Unison to set file modification times (for SSHFS and WSL1)"
			syncMethod="Unison" 

		# use Unison for Windows destination hosts
		elif IsPlatform win --host; then
			log1 "syncSetProgram: using Unison for Windows destination host '$destHost'"
			syncMethod="Unison" 

		# default to UNC
		else
			syncMethod="UNC" 

		fi
	fi

	# validate sync method if the destination is Windows
	# - UNC over SMB does not allow access to the WSL file system, this assumes the Windows destination is using SMB from Windows which is standard
	# - Windows destination hosts with UNC over other protocols (NFS, Rclone) is not yet supported
	if IsPlatform win --host && [[ "$syncMethod" != "Unison" ]]; then
		ScriptErr "Cannot use syncrhonization method '$syncMethod' to synchrnonize to Windows destination host '$destHost'"
		return 1
	fi
	
	# validate Unison
	[[ "$syncMethod" == "Unison" ]] && ! InPath unison && { ScriptErr "Unison is not installed"; return 1; }

	# set the sync program
	case "$syncMethod" in
		UNC) syncProgram="SyncDir";;
		Unison) syncProgram="Unison"
			if [[ "$protocol" != "ssh" ]]; then
				protocol="ssh" protocolArg="--protocol=$protocol" # Unison must use SSH protocol
				hostGetInfo || return # update host information for the new protocol
			fi
	esac

	log2 "syncSetProgram: syncMethod='$syncMethod' syncProgram='$syncProgram'"
}

syncSyncDir()
{
	local srcDir="$1" destDir="$2"; shift 2
	local args=($method $noBak --srcid "$srcId" --destid "$destId" -x "${exclude[@]}" "${excludeDir[@]}" "${globalArgs[@]}")

	if IsPlatform linux || IsPlatform linux --host; then
		args+=(--no-mode)
	fi

	RunLog2 SyncDir "$srcDir" "$destDir" "${args[@]}" "$@" || return
}

syncUnison()
{
	local srcDir="$1" destDir="ssh://$destHost/$2"; shift 2
	local args=(-confirmbigdel -times); [[ $noPrompt ]] && args+=(-batch)

	# set server command - mac does not have /usr/local/bin in the path
	args+=( -servercmd=/usr/local/bin/unison )

	# if in a domain assume the username is different but the uid is the same
	IsInDomain && args+=( -numericids )

	# options
	local recursive x=( "${exclude[@]}" )

	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-r|--recursive) recursive="true";;
			-x|--exclude) while [[ $2 ]] && ! IsOption "$2"; do x+=("$2"); shift; done;;
			*)
		esac
		shift
	done

	# excludes
	args+=(-ignore "Name {$(ArrayDelimit x ",")}")
	args+=(-ignore "Path {$(ArrayDelimit excludeDir ",")}")
	[[ "$suffix" == "platform" ]] && args+=(-ignore "Path {win,win_arm}")

	# force
	args+=(-ignorearchives)
	
	# permissions	
	local user="-owner=true"; [[ "$USER" != "$_user" ]] && user="" # can't sync user if it is different

	if drive IsWin "$srcDir"; then # Windows drives do not support permissions
		args+=(-perms=0 -dontchmod)
	elif IsPlatform mac || IsPlatform mac --host; then # mac does not have the user as a group as in Linux
		args+=($user)
	else
		args+=($user -group=true)
	fi

	# synchronization direction
	[[ "$method" == "--src-older" ]] && args+=(-force "$destDir")
	[[ "$method" == "--dest-older" ]] && args+=(-force "$srcDir")

	# sync
	echo; hilight "Synchronizing $srcDir..."
	RunLog2 sudor unison "$srcDir" "$destDir" "${args[@]}" || return
}

syncGit()
{
	local dir="$1"

	# return if not a git directory
	[[ $noGit || ! -d "$dir/.git" ]] && return

	# check if the origin server is available
	local server="$(cd "$dir/.git" && git remote get-url origin | GetUriServer)" || { ScriptErr "cannot get git server"; return 1; }
	! IsAvailable "$server" && return

	# setup
	log2 "git: sync git for '$dir'"
	cd "$dir" || return

	# fetch upstream updates	
	log2 "git: fetching"
	git fetch --quiet || return

	log2 "git: upstream status"
	local status="$(GitHelper upstream)"
	local changes; [[ "$(git status --porcelain)" != "" ]] && changes="true"

	# check upstream status
	case "$status" in
		ahead|up-to-date) return 0;;
		diverged) ScriptErr "'$dir' has diverged from the upstream branch"; return 1;;
	esac

	# status
	printf "git..."

	# stash local changes
	[[ $changes ]] && { log2 "git: stash"; git stash push --include-untracked || return; }

	# pull changes from upstream
	log2 "git: pull"; 
	git pull --quiet || return

	# update file modification times
	GitHelper time || return

	# restore local changes
	[[ $changes ]] && { log2 "git: stash pop"; git stash pop || return; }
	
	return 0
}

syncInitDest()
{
	local what
	unset destData destHome

	# do not sync to ourself
	if [[ ! -d "$destHost" ]] && IsLocalHostIp "$destHost" || [[ "$destHost" == "/" ]]; then
		ScriptErrQuiet "cannot sync to the local computer"
		return 1
	fi

	# host
	if [[ "$destHost" == "host" ]]; then
		ScriptEval HostGetInfo host || return
		destHost="$_root" destId="host" destData="$_data" destHome="$_home"

	# UNC|public|home
	elif IsUncPath "$destHost" || [[ "$destHost" == @(public|home) ]]; then
		destHost="$(unc mount "$destHost" "${globalArgsLessVerbose[@]}")" || return		
		destId="$(unc get unc "$destHost" "${globalArgsLessVerbose[@]}" | GetUncServer | RemoveDnsSuffix)"

	# DIR
	elif [[ -d "$destHost" ]]; then
		if [[ "$destHost" =~ (AllFiles) ]]; then destId="host"
		elif destId="$(drive label "$destHost" --quiet)"; then :
		elif destId="$(drive device "$destHost" --quiet)"; then :
		else destId="$(GetFileName "$destHost")"
		fi
		destData="$destHost/usr/local/data"
		destHome="$destHost/Users/$USER"

	# HOST
	else

		# check destination host
		if ! IsAvailable "$destHost" $timeout; then
			[[ ! $on ]] && { ScriptErr "host '$destHost' is not available"; return 1; }
			local wait="--wait"; [[ "$protocol" == "ssh" ]] && wait="--wait-ssh"
			power on $wait "$destHost" "${globalArgs[@]}" || return
		fi

		# get host information
		destId="$(os name "$destHost" | RemoveDnsSuffix)"
		hostGetInfo || return
		
		# configure synchronization
		syncSetProgram || return
		syncIsUnison && { destData="/$(GetUncDirs "$_data")" destHome="/$(GetUncDirs "$_home")"; }
		IsDomainRestricted && IsPlatform mac --host && noUnmount="--no-unmount" # keep mounted, minimize password prompts
	fi

	# logging
	log2 "syncInitDest: destHost=$destHost destId=$destId"

	# return if destData and destHome are set
	[[ $destData && $destHome ]] && return

	# mount destData and destHome
	destData="$(RunLog2 unc mount "$_data" --protocol=$_protocol "${globalArgs[@]}")" || return
	destHome="$(RunLog2 unc mount "$_home" --protocol=$_protocol "${globalArgs[@]}")" || return
}

syncInitSrc()
{
	srcHost="${HOSTNAME,,}"
	srcId="$srcHost"
	ScriptEval HostGetInfo || return
	srcData="$_data" srcHome="$_home"
}

syncShared()
{
	[[ ! $destData ]] && return

	local srcDir="$srcData" destDir="$destData"
	sync "bin" || return
	syncPlatform || return
	sync "doc" || return
	sync "icons" || return
	sync "lib" || return
	sync "man" -r || return
	sync "setup" || return
}

syncPlatform()
{
	[[ $noPlatform ]] && return

	sync "platform" -r || return	

	# sync symlinks explicitly - Unison does not recurse into symlinks
	syncIsUnison && return 
	sync "platform/win" -r && sync "platform/win_arm" -r
}

syncStart()
{
	# source
	local message="$(RemoveDnsSuffix "$srcId")"

	# sync direction
	case "$method" in
		--dest-older) message+="->";;
		--src-older) message+="<-";;
		*) message+="<->";;
	esac

	# destination
	message+="$destId"

	# show the message
	(( verboseLevel > 1 )) && { header "SyncLocalFiles: $message"; return; }
	syncIsUnison && header "$message" || printf "$message..."
}

syncFinish()
{
	# cleanup shares
	if [[ ! $noUnmount ]]; then
		unc IsMounted "$destData" && { unc unmount "$destData" || return; }
		unc IsMounted "$destHome" && { unc unmount "$destHome" || return; }
	fi

	# log
	! syncIsUnison && { TimerOff; return; }
	hilight "\nSynchronization finished in $(TimerOff)"
}

syncUser()
{	
	[[ ! $destHome ]] && return

	local srcDir="$srcHome/data" destDir="$destHome/data"
	sync "bin" -r && sync "certificate/public" && sync "certificate/private" && sync "profile/default" && sync "replicate" && syncSsh
}

syncSsh()
{
	srcDir="$srcHome" destDir="$destHome"

	# if .ssh has 1 file in it we are bootstrapping.  This file will be the known_hosts file.
	# Remove the .ssh directory to force a full copy.  This prevents intermittent hangs when bootstraping 
	# seen with Windows 11 build 22593
	[[ "$(DirCount ~/.ssh)" == "1" ]] && { rm -fr ~/.ssh || return; }

	local fixPerms; [[ ! -d ~/.ssh ]] && fixPerms="true"

	# synchronize
	sync ".ssh" -x "authorized_keys.jcorig" "environment" "log" || return
	[[ ! $fixPerms ]] && return

	# fix permissions
	sudoc chown "$USER" ~/.ssh/* && chmod 700 ~/.ssh && sudo chmod 600 ~/.ssh/*
}


#
# helper
#

hostGetInfo() { RunLog2 ScriptEval HostGetInfo "$destHost" $protocolArg --quiet && return; ScriptErrQuiet "unable to get '$destHost' information"; }

ScriptRun "$@"
