#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
usage: $(ScriptName) [sync|IsAvailable](sync)
Sync local files.

	-p, --protocol  $(ScriptOptNetworkProtocolUsage)"
}

init() 
{
	defaultCommand="sync"
	fileServer="$(ConfigGet "fs")" || return
	exclude=("Document Themes" "*.bak" "desktop.ini" ".git" ".gitignore" ".DS_Store" "thumbs.db" "~\$*.docx" "~\$*.dot?" "*.TMP" "*.jcorig" )
	platformExclude=( "cports.cfg" "ftp.cfg" "JkDefrag*.log" "Defraggler.ini" "gridy.ini" )
}

argStart() { unset -v protocol; }

opt()
{
	case "$1" in
		-p|--protocol|-p*|--protocol=*) ScriptOptNetworkProtocol "$@";;
		*) return 1;;
	esac
}

#
# IsAvailable Command
#

isAvailableUsage() { echo "\
Usage: $(ScriptName) IsAvailable
Return true if the default host ($fileServer) is available for syncronization."; }

isAvailableCommand() { unc IsAvailable "$fileServer" "${protocolArg[@]}"; }

#
# Sync Command
#

syncUsage()
{
	echo "\
usage: $(ScriptName) sync [HOST]($fileServer)
Sync local files with the specified host.

Destination can be one of HOST|UNC|DIR|host|public|home.
- if the destination is \"host\", find a mounted host (i.e. VM host).
- if the destination is public or home, find the public or home directories
  specified in configuration

	-do,	--dest-older	assume destination files are than the local source files
	-so,	--src-older		assume local files are older than the destination files
	-nb,	--no-bak			do not backup files to the bak directory"
}

syncArgStart() { unset -v hosts method noBak; }

syncOpt() 
{
	case "$1" in
		-do|--dest-older|--destination-older) method="--dest-older";;
		-nb|--no-bak) noBak="--no-bak";;
		-so|--src-older|--source-older) method="--src-older";;
		*) return 1
	esac
}

syncArgs() { hosts=( "$@" ); (( shift+=$# )); true; }

syncCommand()
{	
	local src; syncInitSrc || return

	# arguments
	set -- "${hosts[@]}"

	# default destination
	[[ ! $1 ]] && set -- "$fileServer"
	
	# sync destinations
	local dest
	for dest in "$@"; do	
		local syncDirArgs=($verbose $method $noBak --srcid "$src")
		TimerOn
		syncInitDest || return		
		syncStatus || return
		syncShared || return
		syncUser || return
		TimerOff
	done
}

syncDir() { SyncDir -d "$1" "${args[@]}" "${@:2}"; }

syncInitDest()
{
	local what
	unset destData destHome destId

	# host
	if [[ "$dest" == "host" ]]; then
		what="host" 
		ScriptEval HostGetInfo host || return
		dest="$_root" destId="host" destData="$_data" destHome="$_home"
		
	# UNC|public|home
	elif IsUncPath "$dest" || [[ "$dest" == @(public|home) ]]; then
		what="UNC"
		dest="$(unc mount "$dest")" || return		
		destId="$(unc get unc "$dest" | GetUncServer | RemoveDnsSuffix)"

	# DIR
	elif [[ -d "$dest" ]]; then 
		what="DIR" 
		destId="$(drive label "$dest" --quiet)" || destId="$(drive device "$dest" --quiet)" || destId="$(GetFileName "$dest")"

	# HOST
	else
		what="HOST"
		destId="$(os name "$dest" | RemoveDnsSuffix)"

	fi

	[[ $verbose ]] && { hilight "SyncLocalFiles $what: src=$src dest=$dest destId=$destId"; }

	# prevent sync to ourself
	{ IsLocalHost "$dest" || [[ "$dest" == "/" ]]; } && { ScriptErr "cannot sync to the local computer"; return 1; }

	# add identifier
	syncDirArgs+=(--destid "$destId")

	# find destData and destHome
	[[ $destData && $destHome ]] && return

	if [[ -d "$dest" ]]; then
		[[ -d "$dest/documents/data" ]] && { destData="$dest/documents/data"; return; }
		[[ -d "$dest/Documents/data/bin" ]] && { destHome="$dest"; return; }

		[[ -d "$dest/usr/local/data" ]] && destData="$dest/usr/local/data"
		[[ -d "$dest/home/$USER" ]] && destData="$dest/home/$USER"
		[[ -d "$dest/Users/$USER" ]] && destData="$dest/home/$USER"

	else
		ScriptEval HostGetInfo "$dest" "${protocolArg[@]}" || { ScriptErr "unable to get '$dest' information"; return 1; }
		destData="$(unc mount "$_data" --protocol=$_protocol $verbose)" || return
		destHome="$(unc mount "$_home" --protocol=$_protocol $verbose)" || return
	fi
}

syncInitSrc()
{
	src="${HOSTNAME,,}"
	ScriptEval HostGetInfo || return
	srcData="$_data" srcHome="$_home"
}

syncShared()
{
	[[ ! $destData ]] && return

	local args=( "${syncDirArgs[@]}" "$srcData" "$destData" -x "${exclude[@]}" )

	syncDir "bin" || return
	syncDir "platform" -r -x "${platformExclude[@]}" || return
	syncDir "doc" || return
	syncDir "icons" || return
	syncDir "lib" || return
	syncDir "man" -r || return
	syncDir "setup" || return
}

syncStatus()
{
	[[ $verbose ]] && return

	# source
	printf "$(RemoveDnsSuffix "$HOSTNAME")"

	# sync direction
	case "$method" in
		--dest-older) echo -n "->";;
		--src-older) echo -n "<-";;
		*) echo -n "<->";;
	esac

	# dest
	printf "$destId..."
}

syncUser()
{	
	[[ ! $destHome ]] && return

	local args=( "${syncDirArgs[@]}" "$srcHome/Documents" "$destHome/Documents" -x "${exclude[@]}" )
	syncDir "data/bin" -r || return
	syncDir "data/app/pass" -r -x "test-default.gpg"  || return
	syncDir "data/certificate/public" || return
	syncDir "data/certificate/private" || return
	syncDir "data/profile/default" || return
	syncDir "data/replicate" || return

	# syncDir "data/app/gpg" -r -x "S.gpg-*" "random_seed" || return
	# syncDir "data/certificate/hashi" -r || return

	local args=( "${syncDirArgs[@]}" "$srcHome" "$destHome" -x "${exclude[@]}" )
	syncDir ".ssh" -x "environment" || return
}

ScriptRun "$@"
