#!/usr/bin/env bash
. app.sh

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

init()
{ 
	gui="virtmgmt.msc"
	disks="$DATA/appdata/Hyper-V/Virtual Hard Disks"
}

usage()
{	
		echot "\
usage: hyperv IsInstalled|IsEnabled|start
	exists|delete VM
	list|ListPlain|status 				list virtual machines
	console|ssh VM        				connect to a vm
	checkpoint [VM] [CHECKPOINT](image)

	create 
		-t|--type linux|pxe|win 		type of VM defaults to use, defaults to pxe
		-f|--force		force creation or deletion even if the VM already exists

	on|off|reboot|sleep|shutdown|status VM
		-h|--hard			perform a hard reboot or power off


	-v|--verbose		show verbose output"
	exit $1
}

args()
{
	unset -v all brief command force hard type verbose vm

	while [[ "$1" != "" ]]; do
		case "$1" in
			-a|--all) all="true";;
			-f|--force) force="true";;
			-h|--hard) hard="true";;
			-t|--type) type="$2"; shift; ! IsFunction "CreateBefore$(ProperCase "$type")" && usage 1;;
			-v|--verbose) verbose="--verbose";;
			--help) usage 0;;
			ConsoleEdit) command="consoleEdit";; IsEnabled) command="isEnabled";; ListPlain) command="listPlain";;
			*)
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				needsVmName "$command" && [[ ! $vm ]] && { vm="$1"; shift; continue; }				
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && command="gui"
	needsVmName "$command" && [[ ! $all && ! $vm ]] && MissingOperand "VM"

	# assume vm names are prefixed with HOSTNAME, i.e. oversoul-ud1 (Ubuntu Desktop 1 on oversoul)
	[[ ! "$vm" =~ - ]] && vm="$HOSTNAME-$vm"

	type="${test:-pxe}"
}

#
# helper
#

needsVmName() { [[ "$1" == @(checkpoint|console|consoleEdit|create|delete|exists|on|off|reboot|ssh|sleep|shutdown) ]]; }
checkInstalled () { ! isInstalled && { EchoError "Hyper-V is not installed"; exit 1; } }
isEnabled() { bcdedit.exe | grep -i hypervisorlaunchtype | grep -i Auto >& /dev/null; }
isInstalled() { service exist hvservice; }
isServiceRunning() { service running hvservice; }

ps() { RunScript $verbose --elevate -- powershell "$@"; }
psRaw() { RunScript --elevate -- powershell "$@"; }

deleteVmDiskFiles() { rm -f "$disks/${vm}.vhdx" "$disks/${vm}_"*".avhdx"; }

#
# commands
#

isEnabledCommand() { isEnabled; }
listCommand() { RunScript --elevate -- powershell Get-VM | RemoveCarriageReturn; }
listPlainCommand() { RunScript --elevate -- powershell Get-VM | RemoveCarriageReturn | tail +4 | cut -d" " -f 1 | grep -v '^$'; }
statusCommand() { listCommand; }

checkpointCommand() # -SnapshotName NAME
{ 
	if [[ $all ]]; then
		RunScript --elevate -- powershell 'Get-VM \| Checkpoint-VM'
	else
		RunScript --elevate -- powershell Checkpoint-VM -Name "$vm"
	fi
}


disableCommand()
{
	checkInstalled
	! IsElevated && { RunScript --elevate -- hyperv disable; return; }
	isEnabled && { bcdedit.exe /set hypervisorlaunchtype off || return; }
	isServiceRunning && ask "Restart computer to finish disabling Hyper-V" && { power reboot || return; }
	return 0
}

enableCommand()
{
	checkInstalled
	! IsElevated && { RunScript --elevate -- hyperv enable; return; }
	! isEnabled && { bcdedit.exe /set hypervisorlaunchtype auto || return; }
	! isServiceRunning && ask "Restart computer to enable Hyper-V" && { power reboot || return; }
	return 0
}

guiCommand()
{
	! InPath "$gui" && { EchoErr "The Hyper-V management GUI is not installed"; }
	WinList | grep "Hyper-V Manager" >& /dev/null && return 0
	start "$gui" "$@"
}

#
# Connect Commands
#

consoleCommand() { elevate VmConnect.exe "$HOSTNAME" "$vm"; }
consoleEditCommand() { elevate VmConnect.exe "$HOSTNAME" "$vm" /edit; }
sshCommand() { SshHelper -x "$vm" "$@"; }

#
# Create Commands
#

existsCommand() { psRaw 'Get-VM | where {\$_.Name -eq \"'$vm'\"}' | grep "$vm" >& /dev/null; }

deleteCommand()
{
	[[ ! $vm ]] && { MissingOperand "vm"; }
	[[ ! $force ]] && { ask "Are you sure you want to delete the $vm vm and all of it's disk files" -dr n || return; }

	printf "deleting $vm..."
	ps 'Remove-VM -name \"'$vm'\" -force' >& /dev/null
	printf "."; deleteVmDiskFiles || return
	echo "done"
}

createCommand() 
{ 
	if [[ $force ]]; then
		deleteCommand >& /dev/null
	elif existsCommand; then
		ask "hyperv: $vm already exists.  Delete it" -dr n || return
		deleteCommand || return
	fi
	deleteVmDiskFiles || return

	local disk="$(utw "$disks/$vm.vhdx")"
	local f="$(mktemp --suffix=.ps1 -p "$WINDIR/Temp")"
	local hdGb="10" memoryGb="2" processors="2" secureBoot="Off"

	CreateBefore$(ProperCase "$type") "$@"

	cat << EOF > "$f"
New-VM -Name "$vm" -MemoryStartupBytes ${memoryGb}GB -Generation 2 -BootDevice CD -SwitchName "external" -ErrorAction Stop
New-VHD -Path "$disk" -SizeBytes ${hdGb}GB -Dynamic -ErrorAction Stop
Add-VMHardDiskDrive -VMName "$vm" -Path "$disk" -ErrorAction Stop
Set-VMProcessor -VMName "$vm" -Count $processors -ExposeVirtualizationExtensions \$True -ErrorAction Stop
Enable-VMIntegrationService -VMName "$vm" -Name "Guest Service Interface" -ErrorAction Stop
Set-VMFirmware -VMName "$vm" -EnableSecureBoot "$secureBoot" -ErrorAction Stop
EOF

	CreateAfter$(ProperCase "$type") "$@"

	ps "$(utw "$f")" || return
	rm -f "$f" || return

	echo "$type virtual machine $vm created"
}

CreateBeforeLinux() { :; }
CreateAfterLinux() { :; }

CreateBeforePxe() { :; }
CreateAfterPxe() { :; }

CreateBeforeWin() { hdGb="50" memoryGb="4" secureBoot="On"; }
CreateAfterWin() { :; }

#
# Power Commands
#

onCommand()
{ 
	if [[ $all ]]; then
		RunScript --elevate -- powershell 'Get-VM \| where {\$_.State -eq \"Paused\"} \| Resume-VM' || return
		RunScript --elevate -- powershell 'Get-VM \| where {\$_.State -eq \"Off\"} \| Start-VM' || return
	else
		RunScript --elevate -- powershell Start-VM -Name "$vm"
	fi
}

sleepCommand()
{ 
	if [[ $all ]]; then
		RunScript --elevate -- powershell 'Get-VM \| where {\$_.State -eq \"Running\"} \| Suspend-VM'
	else
		RunScript --elevate -- powershell Suspend-VM -Name "$vm"
	fi
}

offCommand()
{
	local arg; [[ $hard ]] && arg="-TurnOff"

	if [[ $all ]]; then
		RunScript --elevate -- powershell 'Get-VM \| where {\$_.State -eq \"Running\"} \| Stop-VM '$arg
	else
		RunScript --elevate -- powershell Stop-VM -Name "$vm" $arg
	fi
}

rebootCommand() 
{ 
	if [[ $hard ]]; then
		if [[ $all ]]; then
			RunScript --elevate -- powershell 'Get-VM \| where {\$_.State -eq \"Running\"} \| Restart-VM -Type Reset -Force'
		else
			RunScript --elevate -- powershell Restart-VM -Name "$vm" -Type Reset -Force
		fi
		return
	fi

	printf "rebooting..."; offCommand && printf "off..."; onCommand && printf "on..."; echo "done"
}

run "$@"
