#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [config|gui|hypervisor|IsInstalled|ls|start|status|version](gui)
Hyper-V commands.
	
	checkpoint|clone|connect|create|drive|exists|power|rm		VM commands"
}

init()
{ 
	defaultCommand="gui"
	gui="virtmgmt.msc"

	root="$DATA/appdataw"
	isoDir="$root/iso"; [[ ! -d "$isoDir" ]] && { mkdir --parents "$isoDir" || return; }
	diskDir="$DATA/appdataw/Hyper-V/Virtual Hard Disks"

	controller="2" # assume controller location 2, 0 is usually a DVD drive and 1 is usually the system hard drive
	allHelp="-a, 	--all				operate on all virtual machines"
}

isInstalledCommand() { InPath virtmgmt.msc && hypervisorIsInstalledCommand; }
versionCommand() { :; }

#
# checkpoint command
#

checkpointUsage() { echot "Usage: $(ScriptName) checkpoint VM|all \nCheckpoint the virtual machines."; }
checkpointArgs() { getVmArg "$@"; }

checkpointCommand()
{ 
	if [[ "$vm" == "all" ]]; then
		ps 'Get-VM \| Checkpoint-VM'
	else
		ps 'Checkpoint-VM -Name \"'$vm'\"'
	fi
}

#
# clone command
#

cloneUsage() { echot "Usage: $(ScriptName) CLONE VM\nClone a virtual machine."; }
cloneArgs() { getVmArg "$@"; }

cloneCommand()
{
	local id; id="$(uuidgen)" || return
	local exportDir="$WIN_ROOT/temp/$id"; mkdir --parents "$exportDir" || return
	local result; cloneDo "$vm"; result="$?"

	# cleanup
	rm -fr "$exportDir"

	# return
	return "$result"
}

cloneDo()
{
	# find new name
	printf "Finding clone name..."
	local vmClone="$(cloneNewName "$vm")" || return
	echo "$vmClone"

	# export	
	printf "Exporting '$vm'..."
	powershell "Export-VM -Name "$vm" -Path '$(utw "$exportDir")'" || return
	echo "done"

	# find the exported vmcx file
	local importFile; importFile="$(fd '.vmcx$' "$exportDir")" || return
	[[ ! -f "$importFile" ]] && { ScriptErr "could not find the vmcx import file in '$exportDir'"; return 1; }

	# import
	local disk; disk="" || pause return
	printf "Importing '$vm'..."
	local vmId; vmId="$(powershell "(Import-VM -VhdDestinationPath '$(getDiskDir "$vmClone" "$id")' -Path '$(utw "$importFile")' -GenerateNewId -Copy).VMId.Guid")" || return
	echo "done"
	vmId="$(printf "$vmId" | RemoveCarriageReturn)"

	# rename
	powershell 'Get-VM | where {$_.VMId.Guid -eq "'$vmId'"} | Set-VM -NewVMName "'$vmClone'"' || return
}

# cloneNewName NAME - assume original name is <name><number> and increment new number until find a free name. 	
cloneNewName()
{
	local vm="$1"

	# prefix - the existing name without numeric suffix
	local prefix; prefix="$(echo "$vm" | sed 's/[0-9]*$//')" || return 	

	# suffix - the existing virtual machine number (the numeric suffix, or 1 if not present)
	local n; n="$(echo "$vm" | sed "s/^$prefix//")" || return
	[[ ! $n ]] && n="1"

	# find a new name - start search 1 past the existing virtual machine numbner
	(( n++ )) 
	while true; do vm="$prefix$n"; log1 "checking name $vm"; ! existsCommand && break; (( ++n )); done
	log1 "cloneNewName: vm=$vm"
	echo "$vm"
}

#
# config commands
#

configUsage() { echot "Usage: $(ScriptName) external|guest|switch"; }
configCommand() { usage; }

#
# config external command
#

configExternalUsage()
{
	ScriptUsageEcho "\
Usage: $(ScriptName) config external ADAPTER
	Configure network adapter as the external vitual private switch.
	Use 'network adapter list' to list network adapters.

	-p, --pass			pass the external adapter through to the management operating system"
}

configExternalArgStart() { pass="false"; }
configExternalArgs() { ScriptArgGet "adapter" -- "$@"; shift; }

configExternalOpt()
{
	case "$1" in
		--pass|-p) pass="true";;
		*) return 1
	esac
}

configExternalCommand()
{
	[[ ! $force ]] && ps "Get-VMSwitch" | grep --quiet "^external " && return
	echo ps 'New-VMSwitch -Name "external" -NetAdapterName '$adapter' -AllowManagementOS:\$'"$pass"
}

#
# config guest command
#

configGuestUsage()
{
	echot "Usage: $(ScriptName) guest VM [linux|pxe|rh|win](win)
Configure guest services for a Linux or Windows guest." 
}

configGuestArgStart() { os="win"; }

configGuestArgs()
{
	getVmArg "$@"; shift
	[[ "$1" == @(linux|pxe|rh|win) ]] && { ScriptArgGet "os" -- "$@"; shift;}
	return 0
}

configGuestCommand() { configGuest "$vm" "$os"; }

# configGuest VM linux|win - configure vm for the specified operating system
configGuest()
{
	local vm="$1" os="$2" transport="VMBus"; [[ "$os" == "linux" ]] && transport="HvSocket"
	ps 'Set-VM -VMName \"'$vm'\" -EnhancedSessionTransportType '$transport'' || return
}

#
# config switch command
#

configSwitchUsage()
{
	echot "Usage: $(ScriptName) config switch VM [SWITCH](Default Switch)
Set the network switch for the virtual machine." 
}

configSwitchArgStart() { switch="Default Switch"; }

configSwitchArgs()
{
	getVmArg "$@"; shift
	[[ $1 ]] && ScriptArgGet "service" -- "$@"
	return 0
}

configSwitchCommand() {	configSwitch "$vm" "$switch"; }

# configSwitch VM SWITCH - connect the VM to a switch
configSwitch()
{
	local vm="$1" switch="${2:-Default Switch}"
	ps 'Get-VM -VMName \"'$vm'\" | Get-VMNetworkAdapter | Connect-VMNetworkAdapter -SwitchName \""'"$switch"'"\"'
}

#
# connect commands
#

connectUsage() { echot "Usage: $(ScriptName) [gui|edit|ssh](gui) VM\nConnect to the virtual machine."; }
connectArgs() { getVmArg "$@"; }
connectCommand() { connectGuiCommand; }

connectGuiUsage() { echot "Usage: $(ScriptName) gui VM\nConnect to the graphical GUI of the virtual machine."; }
connectGuiCommand() { elevate VmConnect.exe "$HOSTNAME" "$vm"; }

connectEditUsage() { echot "Usage: $(ScriptName) edit VM\nEdit the GUI connection configuration."; }
connectEditCommand() { elevate VmConnect.exe "$HOSTNAME" "$vm" /edit; }

connectSshUsage() { echot "Usage: $(ScriptName) edit VM\nConnect to the command line of the virtual machine using SSH."; }
connectSshCommand() { SshHelper connect -x "$vm" -- "$@"; }

#
# create command
#

createUsage() { echot "Usage: $(ScriptName) create VM
Create a virtual machine.

	-i, --iso [FILE]						connect an ISO file.  If the file is not specified an installation 
															ISO is determined.  The file is copied to a local directory if required.
	-s, --start									power on and connect to the the virtual machine
	-t, --type linux|pxe|win		type of VM defaults to configure, defaults to pxe
	"
	}

createArgStart() { unset -v iso vm; type="pxe"; }

#powerOnCommand && connectGuiCommand
createOpt() 
{
	case "$1" in
		-i|--iso|-i=*|--iso=*) ScriptOptGet --optional "iso" "$@" && ScriptCheckFile "$iso" || iso="find";;
		-s|--start) start="--start";;
		-t*|--type=*|--type) ScriptOptGet type "$@" && IsFunction "createNamePrefix$(ProperCase "$type")" && return; ScriptErr "'$type' is not a valid type";;
		*) return 1
	esac
}

createArgs() { [[ ! $1 ]] && return; getVmArg "$@"; }

createCommand() 
{
	hilight "Creating a $type virtual machine..."

	# find virtual machine name
	if [[ ! $vm ]]; then
		printf "Finding virtual machine name..."
		local i="1" prefix; prefix="$HOSTNAME-$(createNamePrefix${type^})" || return
		while true; do vm="$prefix$i"; log1 "checking name $vm"; ! existsCommand && break; (( ++i )); done
		echo "$vm"

	# remove existing VM
	elif existsCommand; then
		[[ ! $force ]] && { ask "Virtual Machine '$vm' already exists.  Delete it completely" -dr n || return; }
		force="true" deleteCommand || return

	fi

	# cleanup
	deleteVmDiskFiles || return

	# variables
	local id; id="$(uuidgen)" || return
	local disk; disk="$(getDiskDir "$vm" "$id")\\$vm.vhdx"
	local f="$(mktemp --suffix=.ps1 -p "$WINDIR/Temp")"
	local hdGb="50" memoryGb="2" processors="2" secureBoot="Off" tpm="true" switch="Default Switch"
	local nestedVirtualization="False"

	# switch configuration
	printf "Checking switch configurating..."
	listSwitch | grep "^external$" >& /dev/null && switch="external"
	echo "$switch"

	# type specific configuration
	RunFunction createBefore$(ProperCase "$type") "$@" || return

	# create script
	cat <<-EOF > "$f"
		New-VM -Name "$vm" -MemoryStartupBytes ${memoryGb}GB -Generation 2 -BootDevice CD -SwitchName "$switch" -ErrorAction Stop
		New-VHD -Path "$disk" -SizeBytes ${hdGb}GB -Dynamic -ErrorAction Stop
		Add-VMHardDiskDrive -VMName "$vm" -Path "$disk" -ErrorAction Stop
		Set-VMProcessor -VMName "$vm" -Count $processors -ExposeVirtualizationExtensions \$${nestedVirtualization} -ErrorAction Stop
		Enable-VMIntegrationService -VMName "$vm" -Name "Guest Service Interface" -ErrorAction Stop
		Set-VMFirmware -VMName "$vm" -EnableSecureBoot "$secureBoot" -ErrorAction Stop
	EOF

	#	TPM
	[[ $tpm ]] && cat <<-EOF >> "$f"
		Set-VMKeyProtector -VMName "$vm" -NewLocalKeyProtector
		Enable-VMTPM -VMName "$vm"
	EOF

	# ISO
	if [[ $iso ]]; then
		local file; file="$(isoPrep "$iso")" || return		
		cat <<-EOF >> "$f"
			Set-VMDvdDrive -VMName "$vm" -Path "$(utw "$file")"
		EOF
	fi

	# run script
	echo "Creating virtual machine..."	
	LogFile2 "$f"
	RunLog ps "$(utw "$f")" || return
	rm -f "$f" || return

	RunFunction createAfter$(ProperCase "$type") "$@" || return
	
	# start
	[[ ! $start ]] && return
	echo "Starting $vm..."
	EchoWrap "Initial password is open.  The Secure default password is in the clipboard.  To use it, use a Basic session, Clipboard, Type clipboard text "
	clipw "$(credential get secure default)"
	powerOnCommand && connectGuiCommand
}

createAfterLinux() { configGuest "$vm" "linux"; }
createAfterRh() { configGuest "$vm" "linux"; }

createBeforeWin() { hdGb="100" memoryGb="6" nestedVirtualization="True" processors="4" tpm="true"; }
createAfterWin() { :; }

createNamePrefixPxe() { echo "pxe"; }
createNamePrefixLinux() { echo "lvm"; }
createNamePrefixRh() { echo "rhvm"; }
createNamePrefixWin() { echo "wvm"; }

# isoPrep ISO - ensure ISO is mounted in a location Hyper-V can access
isoPrep()
{
	local file="$1"

	# create a local Windows directory for the ISO file
	[[ ! -d "$isoDir" ]] && { mkdir --parents "$isoDir" || return; }

	# find an ISO image for the appropriate type
	[[ "$file" == "find" ]] && { file="$(isoFind)" || return; }

	# return if the ISO file already exists in the local ISO directory
	isoCheck "$file" && return

	# copy the ISO file to the local ISO directory
	EchoErr "Copying '$(GetFileName "$file")' to the local ISO directory..."
	CopyFileProgress "$file" "$isoDir" 1>&2 || return

	# return the ISO file in the local ISO directory
	isoCheck "$file"
}

# isoCheck FILE - return true if the ISO file exists on a Windows drive or in local the ISO directory
isoCheck()
{
	drive IsWin "$file" && { echo "$file"; return; }
	local file="$isoDir/$(GetFileName "$1")"
	[[ -f "$file" ]] && echo "$file"
}

# createIsoFind - find an installation ISO for the virtual machine type
isoFind()
{
	# determine the installation ISO file for the virtual machine type
	file="$(isoFind${type^})"; [[ ! $file ]] && { ScriptErr "'$type' virtual machines do not have an installation ISO"; return 1; }

	# return if the ISO already exists or we can find it
	isoCheck "$file" || FindInstallFile "$file"
}

isoFindLinux() { echo "platform/linux/Ubuntu/image/ubuntu-21.04-desktop-amd64.iso"; }
isoFindPxe() { echo "shareware/netboot.xyz/netboot.xyz-efi.iso"; }
isoFindRh() { echo "platform/linux/RedHat/image/rhel-8.5-x86_64-boot.iso"; }
isoFindWin() { echo "other/Microsoft/Windows/setup/22598/image/Windows11_InsiderPreview_Client_x64_en-us_22598.iso"; }

#
# dir command
#

dirUsage()
{
	echot "Usage: $(ScriptName) dir [app|conf|web-app|web-final|win-install](web)
Return the path to a netboot.xyz directory.

- disk: virtual machine disk directory
- iso: installation ISO directory
- root: virtual machine root directory"
}

dirCommand() { dirRootCommand; }
dirDiskCommand() { echo "$diskDir"; }
dirIsoCommand() { echo "$isoDir"; }
dirRootCommand() { echo "$root/Hyper-V"; }

#
# drive commands
#

driveUsage() { echot "Usage: $(ScriptName) drive mount|unmount VM\nVirtual Machine drive commands."; }
driveArgs() { getVmArg "$@"; }
driveCommand() { usage; }

driveMountCommand()
{
	local drive="$(drive win GetOffline)"
	[[ ! $drive ]] && { ScriptErr "there are no offline drives to mount"; return 1; }

	ps 'Add-VMHardDiskDrive -VMname \"'$vm'\" -ControllerType SCSI -ControllerNumber 0 -ControllerLocation '$controller' -DiskNumber '$drive || return
}

driveUnmountCommand()
{
	ps 'Remove-VMHardDiskDrive -VMname \"'$vm'\" -ControllerType SCSI -ControllerNumber 0 -ControllerLocation '$controller || return
}

#
# exists command
#

existsUsage() { echot "Usage: $(ScriptName) exists VM\nReturn true if the virtual machine exists."; }
existsArgs() { getVmArg "$@"; }
existsCommand() { psRaw 'Get-VM | where {\$_.Name -eq \"'$vm'\"}' | grep "$vm" >& /dev/null; }

#
# gui command
#

guiCommand()
{
	! InPath "$gui" && { ScriptErr "The Hyper-V management GUI is not installed"; return; }
	[[ ! $force ]] && WinExists "Hyper-V Manager" && return 0
	start "$gui" "$@"
}

#
# hypervisor commands
#

hypervisorUsage() { echot "Usage: $(ScriptName) hypervisor IsEnabled|IsInstalled|IsServiceRunning|disable|enable
Hypervisor commands."; }

hypervisorCommand() { usage; }
hypervisorIsEnabledCommand() { isEnabled; }
hypervisorIsInstalledCommand() { isInstalled; }
hypervisorIsServicerunningCommand() { isServiceRunning; }

hypervisorDisableCommand()
{
	checkInstalled || return
	! IsElevated && { RunScript --elevate "${globalArgs[@]}" -- hyperv disable; return; }
	isEnabled && { bcdedit.exe /set hypervisorlaunchtype off || return; }
	isServiceRunning && ask "Restart computer to finish disabling Hyper-V" && { power reboot || return; }
	return 0
}

hypervisorEnableCommand()
{
	checkInstalled || return
	! IsElevated && { RunScript --elevate "${globalArgs[@]}" -- hyperv enable; return; }
	! isEnabled && { bcdedit.exe /set hypervisorlaunchtype auto || return; }
	! isServiceRunning && ask "Restart computer to enable Hyper-V" && { power reboot || return; }
	return 0
}

isEnabled() { RunScript --elevate bcdedit.exe | grep -i hypervisorlaunchtype | grep -i Auto >& /dev/null; }
isInstalled() { service exists hvservice --quiet; }
isServiceRunning() { service running hvservice; }

#
# ls command
#

lsUsage() { echot "Usage: $(ScriptName) ls\nList all virtual machines."; }

lsCommand()
{
	[[ $verbose ]] && { psRaw 'Get-VM'; return; }
	psRaw 'Get-VM' | RemoveCarriageReturn | ${G}tail --lines=+4 | cut -d" " -f 1 | grep -v '^$'
}

#
# rm command
#

rmUsage() { echot "Usage: $(ScriptName) delete VM \nDelete the virtual machines."; }
rmArgs() { getVmArg "$@"; }

rmCommand()
{
	[[ ! $force ]] && { ask "Are you sure you want to delete the '$vm' vm completely" -dr n || return; }

	printf "deleting $vm..."
	ps 'Remove-VM -name \"'$vm'\" -force' >& /dev/null
	printf "."; deleteVmDiskFiles || return
	echo "done"
}
 
#
# power commands
#

powerUsage()
{
	ScriptUsageEcho "\
Usage: $(ScriptName) power off|on|onc|reboot|sleep
Virtual Machine power commands.

	-h, --hard			perform a hard reboot or power off"
}

powerArgStart() { unset -v hard; }
powerArgs() { getVmArg "$@"; }

powerOpt()
{
	case "$1" in
		--hard|-H) hard="true";;
		*) return 1
	esac
}

powerCommand() { usage; }
powerOncUsage() { echot "Usage: $(ScriptName) power onc\nPower on and connect."; }
powerOncCommand() { powerOnCommand && connectGuiCommand; }

powerOnCommand()
{ 
	if [[ "$vm" == "all" ]]; then
		RunScript --elevate --functions "${globalArgs[@]}" -- powershell 'Get-VM \| where {\$_.State -eq \"Paused\"} \| Resume-VM' || return
		RunScript --elevate --functions "${globalArgs[@]}" -- powershell 'Get-VM \| where {\$_.State -eq \"Off\"} \| Start-VM' || return
	else
		RunScript --elevate --functions "${globalArgs[@]}" -- powershell Start-VM -Name "$vm"
	fi
}

powerOffCommand()
{
	local arg; [[ $hard ]] && arg="-TurnOff"

	if [[ "$vm" == "all" ]]; then
		RunScript --elevate "${globalArgs[@]}" -- powershell 'Get-VM \| where {\$_.State -eq \"Running\"} \| Stop-VM '$arg
	else
		RunScript --elevate "${globalArgs[@]}" -- powershell Stop-VM -Name "$vm" $arg
	fi
}

powerRebootCommand() 
{ 
	if [[ $force || $hard ]]; then
		if [[ "$vm" == "all" ]]; then
			RunScript --elevate "${globalArgs[@]}" -- powershell 'Get-VM \| where {\$_.State -eq \"Running\"} \| Restart-VM -Type Reset -Force'
		else
			RunScript --elevate "${globalArgs[@]}" -- powershell Restart-VM -Name "$vm" -Type Reset -Force
		fi
		return
	fi

	printf "rebooting..."; powerOffCommand && printf "off..."; powerOnCommand && printf "on..."; echo "done"
}

powerSleepCommand()
{ 
	if [[ "$vm" == "all" ]]; then
		ps 'Get-VM | where {\$_.State -eq \"Running\"} | Save-VM'
	else
		RunScript --elevate "${globalArgs[@]}" -- powershell Save-VM -Name "$vm"
	fi
}

#
# status command
#

statusCommand()
{
	ps "$(cat <<-EOF
		\\\$v = Get-VMHost
		\\\$vms = Get-VM

		Write-Host ('name={0}' -f \\\$v.Name)
		Write-Host ('total={0}' -f \\\$vms.count)
    Write-Host ('running={0}' -f \\\$vms.where( {\\\$_.state -eq 'running'}).count)
    Write-Host ('off={0}' -f \\\$vms.where( {\\\$_.state -eq 'off'}).count)
    Write-Host ('saved={0}' -f \\\$vms.where( {\\\$_.state -eq 'Saved'}).count)
    Write-Host ('paused={0}' -f \\\$vms.where( {\\\$_.state -eq 'Paused'}).count)
    Write-Host ('other={0}' -f \\\$vms.where( {\\\$_.state -notmatch \"running|off|saved|Paused\"}).count)
    Write-Host ''
    Write-Host ('VirtualMachinePath={0}' -f \\\$v.VirtualMachinePath)
    Write-Host ('VirtualHardDiskPath={0}' -f \\\$v.VirtualHardDiskPath)
    Write-Host ('EnhancedSessionMode={0}' -f \\\$v.EnableEnhancedSessionMode)

	EOF
	)"
}

#Write-Host ('={0}' -f \\\$)

#
# helper
#

checkInstalled () { isInstalled && return; ScriptErr "Hyper-V is not installed"; exit; }
deleteVmDiskFiles() { rm -f "$diskDir/${vm}.vhdx" "$disks/${vm}_"*".avhdx"; }
getDiskDir() { echo -E "$(utw "$diskDir")\\$1-$2"; } # getDiskDir VM ID
listSwitch() { ps 'Get-VMSwitch' | ${G}tail --lines=+3 | cut -d" " -f 1; }
ps() { RunScript --elevate "${globalArgs[@]}" -- powershell.exe "$@"; }
psRaw() { RunScript --elevate -- powershell.exe "$@"; }

getVmArg()
{
	ScriptArgGet "vm" -- "$@"
	[[ "${vm,,}" == "all" ]] && vm="all"
	[[ "$vm" != "all" && ! "$vm" =~ - ]] && vm="$HOSTNAME-$vm" # assume vm names are prefixed with HOSTNAME, i.e. oversoul-ud1 (Ubuntu Desktop 1 on oversoul)
	return 0
}

ScriptRun "$@"
