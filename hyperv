#!/usr/bin/env bash
. app.sh

init()
{ 
	gui="virtmgmt.msc"
}

usage()
{	
		echot "\
usage: hyperv IsInstalled|IsEnabled|start"
	exit $1
}

args()
{
	unset -v brief command name

	while [[ "$1" != "" ]]; do
		case "$1" in
			--help) usage 0;;
			IsEnabled) command="IsEnabled";;
			*)
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command="startGui"
	args=( "$@" )
}

checkInstalled () { ! isInstalled && { EchoError "Hyper-V is not installed"; exit 1; } }
isEnabled() { bcdedit.exe | grep -i hypervisorlaunchtype | egrep -i Auto >& /dev/null; }
isInstalled() { service exist hvservice; }
isServiceRunning() { service running hvservice; }

IsEnabledCommand() { isEnabled; }

DisableCommand()
{
	checkInstalled
	! IsElevated && { elevate RunScript --pause-error hyperv disable; return; }
	isEnabled && { bcdedit.exe /set hypervisorlaunchtype off || return; }
	isServiceRunning && ask "Restart computer to finish disabling Hyper-V" && { power reboot || return; }
	return 0
}

enableCommand()
{
	checkInstalled
	! IsElevated && { elevate RunScript --pause-error hyperv enable; return; }
	! isEnabled && { bcdedit.exe /set hypervisorlaunchtype auto || return; }
	! isServiceRunning && ask "Restart computer to enable Hyper-V" && { power reboot || return; }
	return 0
}

guiCommand()
{
	! InPath "$gui" && { EchoErr "The Hyper-V management GUI is not installed"; }
	WinList | grep "Hyper-V Manager" >& /dev/null && return 0
	start "$gui" "$@"
}

# VM commands - make these subcommands hyperv vm COMMAND
# VmSnapshotCommand() { powershell.exe 'Get-VM | where {$_.State -eq "Running"} | Checkpoint-VM'; listCommand; }; checkpointCommand() { snapshotCommand "$@"; }
# VmPauseCommand() { powershell.exe 'Get-VM | where {$_.State -eq "Running"} | Suspend-VM'; listCommand; }
# VmResumeCommand() { powershell.exe 'Get-VM | where {$_.State -eq "Paused"} | Resume-VM'; listCommand; }
# VmStartCommand() { powershell.exe 'Get-VM | where {$_.State -eq "Off" -or $_.State -eq "Saved"} | Start-VM'; listCommand; }
# VmStopCommand() { powershell.exe 'Get-VM | where {$_.State -eq "Running"} | Stop-VM'; listCommand; }
# VmStatusCommand() { listCommand "$@"; }; listCommand() { powershell.exe Get-VM; }

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

run "$@"
