#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|profile|program|start|startup|vars|version](start)
$(ScriptName) commands."
}

init()
{
	unset -v profileName profileDir profileMask
	defaultCommand="start"
	vaultDir="$UDATA/app/Obsidian"

	# find program
	case "$PLATFORM_OS" in
		mac) 
			program="$P/Obsidian.app"
			profileName="ObsidianMac" profileDir="$HOME/Library/Preferences" profileMask="md.obsidian.plist"
			;;
		win)
			program="$P/Obsidian/Obsidian.exe"; [[ ! -f "$program" ]] && program="$UADATA/Programs/obsidian/Obsidian.exe"
			;;
	esac

	return 0
}

closeCommand() { ! isRunningCommand && return; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
startCommand() { AppInstallCheck && start "$program"; }
startupCommand() { startCommand; }
varsUsage() { echot "Usage: $(ScriptName) vars\nReturn Obsidian configuration variables: program vaultDir"; }
varsCommand() { AppInstallCheck && ScriptReturn "program" "vaultDir"; }
versionCommand() { AppInstallCheck && AppVersion "$program" | cut -d"." -f1-3; }

#
# profile command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	[[ $profileName ]] && { profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}" || return; }

	# vault profiles	
	local dir dirs; IFS=$'\n' ArrayMakeC dirs GetDirs "$vaultDir" || return
	for dir in "${dirs[@]}"; do
		profile $noPrompt --app "Obsidian$(GetFileName "$dir" | ProperCase)" --method "$dir" --files ".obsidian" "${profileArgs[@]}" || return
	done
}

ScriptRun "$@"
