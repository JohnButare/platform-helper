#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|program|restart|start|startup|version](start)
$(ScriptName) commands."
}

init() { defaultCommand="start"; }

argEnd()
{
	backgroundStart=""
	
	case "$PLATFORM_OS" in
		linux) program="$(FindInPath code)";;
		mac) 
			program="$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code";;
		win)
			backgroundStart="true"
			if IsVisualStudioCode && program="$(FindInPath code)"; then
				backgroundStart="";	
			elif [[ -f "$PUSER/Microsoft VS Code/Code.exe" ]]; then
				program="$PUSER/Microsoft VS Code/Code.exe"
			elif [[ -f "$P/Microsoft VS Code/Code.exe" ]]; then
				program="$P/Microsoft VS Code/Code.exe"
			fi
			;;
	esac

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { AppInstallCheck && echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startupArgs() { files=(); }
startupCommand() { startCommand; }
versionCommand() { AppInstallCheck && AppVersion "$program" | cut -d"." -f1-3; }

startArgs() { startArgs=( "$@" "${otherArgs[@]}" ); shift="$#"; }

startCommand()
{
	AppInstallCheck || return
	[[ $backgroundStart ]] && { (nohup "$program" "${startArgs[@]}" >& /dev/null &); return; }
	"$program" "${startArgs[@]}"
}

ScriptRun "$@"
