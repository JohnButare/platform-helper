#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|program|restart|start|startup|version](start)
$(ScriptName) commands.

	-a,	--alterate		load an alternative version, i.e. the Linux version of Sublime under Windows"
}

init() { defaultCommand="start"; }
argStart() { unset -v alternate; }

opt()
{
	case "$1" in
		-a|--alternate) alternate="--alternate";;
		*) return 1;;
	esac
}

argEnd()
{
	case "$PLATFORM_OS" in
		linux) program="";;
		mac) 
			program="$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code";;
		win)
			if [[ $alternate && -d "/TBD" ]]; then
				program="/TBD"
			elif [[ -f "$PUSER/Microsoft VS Code/Code.exe" ]]; then
				program="$PUSER/Microsoft VS Code/Code.exe"
			elif [[ -f "$P/Microsoft VS Code/Code.exe" ]]; then
				program="$P/Microsoft VS Code/Code.exe"
			fi
			;;
	esac

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "$programRunning"; }
programCommand() { AppInstallCheck && echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { (AppInstallCheck && echo nohup "$program" "${startArgs[@]}" && nohup "$program" "${startArgs[@]}" >& /dev/null &); }
startupArgs() { files=(); }
startupCommand() { startCommand; }
versionCommand() { AppInstallCheck && AppVersion "$program" | cut -d"." -f1-3; }

ScriptRun "$@"
