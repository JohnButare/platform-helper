@echo off
SetLocal

REM Initialize arguments
set system=
set IsPath=
set NoExpand=

REM Arguments
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

:GetArgs

iff "%1" == "/s" .or. "%1" == "/system" then
	set system=-m
	shift & goto GetArgs
endiff

iff "%1" == "/p" .or. "%1" == "/path" then
	set IsPath=true
	shift & goto GetArgs
endiff

iff "%1" == "/NoExpand" then
	set NoExpand=true
	shift & goto GetArgs
endiff

set variable=%1
shift

REM Turn off nested variable expansion so variables and value that contain variables are not expanded
if defined NoExpand setdos /x-4

set value=
iff %# gt 0 then
	set value=%@UnQuote[%1]
	shift
endiff
set NewValue=%value

if %# != 0 goto usage

REM Initialize

iff defined system then
	set RegKey=HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment\%variable
else
	set RegKey=HKCU\Environment\%variable
endiff

REM Check path for existing value
iff defined IsPath then

	REM Get the current value of the variable from the registery - for the path the user and system paths are combined
	set CurrentValue=%@RegQuery["%RegKey"]
	if "%CurrentValue" == "-1" set CurrentValue=

	REM Add the new value only if it is not already in the path
	iff "%CurrentValue" != "" then	
		
		REM CurrentValue must be a quoted space separated list of directories.
		set list=%@replace[;,^" ^","%CurrentValue"]

		REM Check if the directory is already in the list by calling IsInList.  
		iff defined NoExpand then
			call IsInList.btm %@replace[^%,^%^%,%@quote[%value] %list]
		else
	 		call IsInList.btm %@quote[%value] %list
		endiff
		
		REM Quit if the value is already in the path
		if %? == 1 quit 0

		REM Update the new value
		set NewValue=%CurrentValue;%value

		REM Remove trailing \ to prevent setx argument parsing problem (final " not recognized if a trailing \ is present)
		set NewValue=%@rtrim[\,%NewValue]

	endiff

endiff

REM Delete the variable if no new value specified
iff "%NewValue" == "" then
	call registry.btm delete "%RegKey"
else
	setx %variable "%NewValue" %system >& nul:
	iff %? != 0 then
		echos Unable to set the %variable variable:` `
		setx %variable "%NewValue" %system 
	endiff
endiff

REM Update the variable for the current shell, append to the path since the path is a combination of the user and system path
iff "%variable" == "path" then
	set path=%path;%value
else
	set %variable=%NewValue
endiff

EndLocal %variable

quit 0

:usage
text 1>&2
Set user or system variable
SetVar [/system] [/path] [/NoExpand] <variable> [<value>]
  /s,/system: Set the variable system wide.  Default is user.
  /p,/path: The variable is a semi-colon separated path, the value is a directory.
  /NoExpand: Do not expand variables contained the value, allows the value to be set to a variable
    Variables that should not be expaned must be quoted, i.e. %%JAVA_HOME%%
endtext
quit 1
