#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|kill|IsInstalled|IsRunning|program|restart|start|startup](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start" 
	unset program

	# find program and profile
	local x410="$UADATA/Microsoft/WindowsApps/x410.exe"
	local xming="$P/Xming/Xming.exe"
	local vcxsrv="$P/VcXsrv/xlaunch.exe"

	if IsPlatform mac && FileExists "/opt/X11/bin/Xquartz" "/opt/X11/bin/quartz-wm"; then
		program="/opt/X11/bin/Xquartz" running="Xquartz"
	elif IsPlatform win && [[ -f "$x410" ]]; then
		program="$x410" start=("$x410") running="x410.exe"
	elif IsPlatform win && [[ -f "$xming" ]]; then
		program="$xming" start=("$xming" :0 -clipboard -multiwindow -nolisten inet6) running="Xming.exe"
	elif IsPlatform win && [[ -f "$vcxsrv" ]]; then
		program="$vcxsrv" start="start config.xlaunch"; running="vcxsrv.exe"
	elif IsPlatform win; then # assume WSLg X support, "wsl supports x --quiet" is slow
		exit
	fi
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$running"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "$running"; }
killCommand() { ! IsRunningCommand && return 0; ProcessKill "$running"; }
programCommand() { echo "$program"; }
									 
#
# Start Command
#

restartUsage() { startUsage; }
restartCommand() { closeCommand && startCommand; }

startupUsage() { startUsage; }

startupCommand()
{
	IsPlatform mac && return 0 									# mac starts automatically
	IsPlatform win && { startCommand; return; } # win must run start for socat
	isRunningCommand && return; startCommand
} 

startUsage()
{
		echot "Usage: $(ScriptName) restart|start|startup
Start the X Server.

	-b,	--brief		show brief status messages (for use with app script)
	    --vsock		use VSOCK for connections to the X Server"
}

startArgStart() { unset -v brief vsock; }

startOpt() 
{
	case "$1" in
		--brief,-b) brief="--brief";;
		--vsock) vsock="--vsock";;
		*) return 1
	esac
}

startCommand() { isInstalledCommand && RunPlatform "start"; }
startMac() { start "/opt/X11/bin/Xquartz"; }

startWin()
{
	if ! isRunningCommand; then
		[[ $brief ]] && printf "xserver..."
		log1 "starting the X server"
		start "${start[@]}" || return
	fi

	[[ ! $vsock ]] && CanElevate && return # assume if we cannot elevate than TCP connections are blocked and we need to use VSOCK

	# initialize
	sudov || return
	mkdir --parents "/tmp/.X11-unix" || return

	# return if running
	if [[ ! $force ]] && IsProcessRunning --root socat; then
		log1 "socat is already running for vsock"
		return
	fi

	# log
	[[ $brief ]] && printf "vsock..."; 

	# cleanup
	if IsProcessRunning --root socat; then
		log1 "cleaning up existing socat"
		sudo pkill socat || return
	fi

	sudo rm -f "/tmp/.X11-unix"/* || return

	# start socat in the background
	log1 "starting socat for vsock"
	sudo -b socat -b65536 UNIX-LISTEN:/tmp/.X11-unix/X0,fork,mode=777 SOCKET-CONNECT:40:0:x0000x70170000x02000000x00000000
}

startLog()
{
	[[ ! $brief ]] && return

}

ScriptRun "$@"
