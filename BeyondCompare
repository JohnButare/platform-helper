#!/usr/bin/env bash
. app.sh

# command line rederence: http://www.scootersoftware.com/help/index.html?command_line_reference.html

usage() 
{
	echot "\
usage: BeyondCompare [start|close|command|program|IsInstalled](start)
	profile dir|SaveDir|backup|restore [<profile name>|default](latest)

	-w, --wait	wait for the program to exit before returning
	--help		display this help and exit"
	exit $1
}

init()
{ 
	# bcomp - waits for comparison to complete 
	if IsPlatform win; then program="$P/Beyond Compare 4/BCompare.exe" bcomp="$P/Beyond Compare 4/BComp.com"
	elif IsPlatform debian; then program="/usr/bin/bcompare"; bcomp="$program"
	elif IsPlatform mac; then program="$P/Beyond Compare.app/Contents/MacOS/BCompare" bcomp="$P/Beyond Compare.app/Contents/MacOS/bcomp"; fi
	
	profileName="BeyondCompare"
}

args()
{
	unset wait
	while [[ "$1" != "" ]]; do
		case "$1" in
			-h|--help) usage 0;;
			-w|--wait) wait="--wait";;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";; # case-insensitive aliases
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }	# command
				[[ "${command:-start}" == @(start|startup|profile|command) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command="start"
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

programCommand() { echo "$program"; }

startCommand()
{
	! IsInstalledCommand && return 1
	start $wait "$bcomp" "$@" # on macOS $program does not take arguments 
}

IsInstalledCommand() { [[ -f "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
restartCommand() { closeCommand && startCommand; }

profileCommand() 
{	
	[[ "$1" == "backup" ]] && echo "- Tools, Export settings...,"
	[[ "$1" == "restore" ]] && echo "- Tools, Import settings...,"
	profile --app "$profileName" --method "$program" --save-extension "bcpkg" "$@" || return;
}
	
run "$@"
