#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manipulate network volumes using the UNC (Universal Naming Convention) format.
The UNC format is //[USER@]SERVER/SHARE[/DIRS].

	get 							get UNC information
	browse						list UNC shares on the local network
	IsAvailable HOST	check if a host is available for UNC connections
	IsMounted UNC			check if a UNC is mounted 
	IsUnc FILE				check if a file is a mounted UNC
	list HOST					list UNC shares on the specified host
	mount UNC					mount the specified UNC
	unmount UNC|all		unmount the specified UNC

	-q, --quiet						hide status messages
	-v, --verbose					show additional status"
}

init()
{
	volumeDir=~/"Volumes"; initVolumeDir || return
	protocolUsage="-p, --protocol=[NFS|SMB|SSH|INTEGER](SMB)"
	uncTypes="9p,cifs,nfs,nfs4,sshfs"; IsPlatform mac && uncTypes="fuse.sshfs,nfs,nfs4,smbfs"
	return 0
}

argStart() { unset -v protocol unc; }
args() { getUncArg "$1"; }

#
# Get Commands
#

getUsage() { echot "\
Usage: unc get [OPTION]... [COMMAND]...
Get information.  TARGET is a UNC or mounted FILE.

	mounts						return all mounted shares
	port							return the port for the specified protocol argument	
	protocols [HOST]	return the protocols supported by the host, or all valid protocols
	root TARGET				the mounted root directory of the UNC, i.e. ~/Volumes/server_share
	share	TARGET			the name of the share, i.e. //server/share
	unc	TARGET				the full UNC associated with the file, i.e. //server/share/dir1/dir2

	$protocolUsage"
}

getArgStart() { file=""; }

getArgs() 
{
	[[ "$command" == @(getMounts|getPort|getProtocols) ]] && return
	IsUncPath "$1" && { file="$1"; ((++shift)); return; }
	[[ ! $1 ]] && MissingOperand "TARGET"
	ScriptArgGet "file" -- "$@"; ScriptCheckPath "$file"
}

getCommand() { usage; }

# mounts
getMountsCommand()
{
	InPath findmnt && { findmnt --types=$uncTypes --noheadings --output=TARGET | grep "$volumeDir"; return; }
	IsPlatform mac && { df -T $uncTypes | ${G}tail -n +2 | tr -s " " | cut -d" " -f9-; }
	return 1
}

# port
getPortOpt() { protocolOpt "$@"; }
getPortCommand() { getPort "$protocol"; }

# protocols
getProtocolsArgStart() { unset host; }
getProtocolsArgs() { [[ ! $1 ]] && return; ScriptArgGet "host" -- "$@"; }

getProtocolsCommand()
{
	[[ ! $host ]] && { echo "nfs smb ssh"; return; }
	
	local hostIp; hostIp="$(GetIpAddress "$host")" || { HostUnknown "$host"; return 1; }
	local protocols=() 
	IsAvailablePort "$hostIp" "$(getPort "nfs")" && protocols+=( "nfs" )
	IsAvailablePort "$hostIp" "$(getPort "smb")" && protocols+=( "smb" )
	SshIsAvailable "$host" && protocols+=( "ssh" )

	[[ $protocols ]] && ArrayDelimit protocols " " || echo "none"
}

getRootCommand()
{
	IsUncPath "$file" && { echo "$(GetUncRoot "$file")"; return; }

	InPath findmnt && { findmnt --types=$uncTypes --noheadings --output=TARGET --target "$file"; return; }
	InPath df && { df -P "$file" | awk 'END{print $NF}'; return; }
	return 1
}

getShareCommand()
{
	IsUncPath "$file" && { echo "$(GetUncShare "$file")"; return; }

	InPath findmnt && { findmnt --types=$uncTypes --noheadings --output=SOURCE --target "$file"; return; }
	InPath df && { df -P "$file" | awk 'END{print $1}'; return; }
	return 1
}

# unc
getUncCommand()
{
	IsUncPath "$file" && { echo "$file"; return; }

	file="$(GetFullPath "$file")" || return
	local root; root="$(getRootCommand)" || return
	
	local share; share="$(getShareCommand)" || return
	echo "${file/$root/$share}"
}

#
# IsAvailable Command
#

isAvailableUsage() { echot "Usage: unc IsAvailable [HOST](localhost)
Return true if the specified HOST is available using the specified protocols.
If no protocols are specified search for a protocol to use.

	$protocolUsage"
}

isAvailableArgStart() { unset -v host; }
isAvailableOpt() { protocolOpt "$@"; }
isAvailableArgs() { ScriptArgGet "host" -- "$@"; shift; }
isAvailableCommand() { findProtocol "$host"; }

#
# List Command
#

listUsage()
{
	echot "\
Usage: unc list HOST
List UNC shares on the specified host.

	$protocolUsage
	-N, --no-host-check					do not check host availability"
}

listArgStart() { unset -v port protocol; }

listOpt() { protocolOpt "$@"; }

listArgs()
{
	ScriptArgGet "host" -- "$@"
	! IsAvailable "$host" && { ScriptErr "host '$host' is not available"; return 1; }
	return 0
}

listCommand() { protocol="${protocol:-smb}"; RunFunction "list${protocol^}"; }

listNfs() { ssh -t "$host" sudoc exportfs; }
listSsh() { echo "root"; }

listSmb()
{
	if InPath smbutil; then
		smbutil view "//$host" | grep "Disk"

	elif InPath smbclient; then
		sudoc smbclient -L $host -U$USER%$(credential -q get secure default) |& grep -v "tdb_new_database" |& grep -v "option is deprecated"

	else
		EchoErr "unc: unable to list shares for $host"
		return 1
	fi
}

#
# Browse Command
#

browseUsage() { echot "Usage: unc browse
List UNC shares on the local network."; }

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { ScriptErr "unable to browse the network"; return 1; }
	sudoc smbtree
}

#
# IsMounted Command
#

isMountedUsage() { echot "Usage: unc IsMounted TARGET
List UNC shares on the local network.
TARGET is a UNC or mounted FILE."; }

isMountedCommand() { isMounted; }

#
# IsUnc Command
#

isUncUsage() { echot "Usage: unc IsUnc FILE
Return true if the specified file is a mounted UNC."; }

isUncArgs() { getArgs "$@"; }

isUncCommand() { [[ $(getRootCommand) ]]; }

#
# Mount Command
#

mountUsage()
{
	echot "Usage: unc mount UNC
Mount the specified UNC.

	$protocolUsage
	-N, --no-host-check					do not check host availability"
}

mountArgStart() { unset -v noHostCheck port protocol; }

mountOpt() 
{
	protocolOpt "$@" && return
	case "$1" in
		-N|--no-host-check) noHostCheck="true";;
		*) return 1
	esac
}

mountCommand()
{
	local result

	# return if the directory is already mounted
	unc="$(isMounted)" && { showResult "$unc"; return; }

	# ensure server is available
	if ! findProtocol "$server"; then
		[[ ! "$quiet" ]] && ScriptErr "host '$server' is not available"
		return 1
	fi
	[[ $verbose ]] && EchoErr "connection will use $protocol"

	# remove an existing share in the mountDir
	cleanupMountDir "$mountDir" || return

	# create the mount directory
	! ${G}mkdir --parents "$mountDir" && { ScriptErr "could not create the mount directory '$mountDir'"; return 1; }

	# mount
	if [[ "$PLATFORM_KERNEL" == "wsl1" ]] || isWslshare; then
		sudoc mount -t drvfs "//$server/$share" "$mountDir"

	elif [[ "$protocol" == "nfs" ]]; then
		local options=(); IsPlatform win && options+=( -o nolock )
		sudoc mount "${options[@]}" -t nfs "$server:/$share" "$mountDir"

	elif [[ "$protocol" == "ssh" ]] || IsInteger "$protocol"; then
		local portArg; IsInteger "$protocol" && portArg=(-p "${protocol}")
		[[ "$share" == "root" ]] && share=""
		sshfs -o reconnect -o allow_other -o follow_symlinks "$user@$server:/$share" "$mountDir" "${portArg[@]}"

	elif IsPlatform linux,wsl2; then		

		# add an entry to /etc/fstab so sudo is not required to write to the share		
		if ! grep -i "//$server/$shareId\\\$* $mountDir cifs username=$user,noauto,rw,users 0 0" /etc/fstab >& /dev/null; then
			local line="//$server/$share $mountDir cifs username=$user,noauto,rw,users 0 0"
			sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		local password="$(credential -q get secure default)"
		local sudo; IsPlatform qnap && sudo="sudoc"

		[[ $password ]] && export PASSWD="$password"
		$sudo mount.cifs "//$server/$share" "$mountDir" -o user=$user sec=ntlmsspi
		[[ $password ]] && unset PASSWD

	elif IsPlatform mac; then
		local password="$(security find-generic-password -gwa $user)"

		if [[ $password ]]; then
			mount_smbfs "smb://$user:$password@$server/$share" "$mountDir"
		else
			mount_smbfs "smb://$user@$server/$share" "$mountDir"
		fi

	fi

	# return the mounted directory
	if isMounted; then
		return 0
	else
		cleanupMountDir
		return 1
	fi
}

#
# Unmount Command
#

unmountUsage() { echot "Usage: unc unmount UNC|all
Unmount the specified or all mounted UNCs."; }

unmountCommand()
{
	[[ "$unc" != "all" ]] && { doUnmount; return; }

	IFS=$'\n' mountDirs=( $(unc get mounts) )
	[[ ! $mountDirs ]] && return

	log "unmounting..."
	for mountDir in "${mountDirs[@]}"; do
		log "$(GetFileName "$mountDir")..."; doUnmount || return
	done
	log "done\n"
	
	return 0
}

#
# Protocol Helper
#

# findProtocol HOST - find a file sharing protocol for HOST.   
findProtocol()
{
	local host="$1"; noHostCheck && return

	# Synology SMB mount.cifs does not work
  IsPlatform synology && [[ "$protocol" == @(|smb) ]] && protocol="ssh"

	# if a specific protocol was requested check it
	[[ $protocol ]] && { isAvailable "$host" "$protocol"; return; }

	isAvailable "$host" "smb" || isAvailable "$host" "nfs" "mount.nfs" || isAvailable "$host" "ssh" "sshfs"
}

# isAvailable HOST PROTOCOL FILE - return true if the file sharing protocol FILE is available
# and the host is available on the port required for the protcol.   Sets protocol on return.
isAvailable()
{
	protocol="$2"
	local host="$1" file="$3"
	local port="$(getPort "$protocol" "$host")"

	if [[ $file ]] && ! InPath "$file"; then
		[[ $verbose ]] && EchoErr "$protocol protocol unavailable ($file missing)"
		return 1
	fi

	noHostCheck && return

	if [[ $verbose ]]; then
		IsInteger "$protocol" && protocol="ssh"
		PrintErr "checking $host $protocol protocol (port $port)..."
		IsAvailablePort "$host" "$port" && EchoErr "available" || EchoErr "not available"
	fi

	IsAvailablePort "$host" "$port"
}

getPort()
{
	local protocol="$1" host="$2"

	case "${protocol:-smb}" in
		nfs) echo "111";; # 111 and 2049 
		smb) echo "445";; # 135 and 445
		ssh) SshHelper port "$host";;
		*) echo "$protocol"
	esac
}

#
# helper
#

doUnmount() { platformUnmount; cleanupMountDir; }
log() { [[ $quiet ]] && return; printf "$@"; }
needsUnc() { [[ "$command" == @(isMounted|mount|unmount) ]]; }
noHostCheck() { [[ $noHostCheck ]] || isWslshare; }
showResult() { [[ $1 && ! $quiet ]] && echo "$1"; [[ $1 ]]; }
isWslshare() { [[ "$server" == @(wsl$|wsl) ]]; }

cleanupMountDir()
{
	[[ ! -e "$mountDir" ]] && return
	findmnt "$mountDir" >& /dev/null && platformUnmount >& /dev/null
	rmdir "$mountDir" >& /dev/null
	[[ ! -e "$mountDir" ]]
}

initVolumeDir()
{
	[[ -d "$volumeDir" ]] && return
	! ${G}mkdir "$volumeDir" && { ScriptErr "Could not create the volume directory $volumeDir"; return 1; }
	return 0
}

protocolOpt()
{
	case "$1" in
		-p|--protocol|-p*|--protocol=*) ScriptOptNetworkProtocol "$@";;
		*) return 1
	esac
}

getUncArg()
{
	shift=0; ! needsUnc && return

	local target="$1"; ((++shift))
	unset alias

	# all - valid for unmount command
	[[ "$command" == "unmount" && "$target" == "all" ]] && { unc="all"; return; }

	# alias
	if [[ "$target" == @(home|media|public) ]]; then
		ScriptEval HostGetInfo "$(ConfigGet "fs")" "${protocolArg[@]}" || return
		noHostCheck="true" protocol="$_protocol" port="$_port"
		eval target="\$_$target"
	
	# mounted file or directory
	elif [[ -e "$target" ]]; then
		file="$target"; target="$(getUncCommand)"

	fi
	
	# unc
	IsUncPath "$target" && { getUncInfo "$target"; return; }

	MissingOperand "unc"
}

getUncInfo() # GetUncInfo unc - sets server share dirs user shareId mountDir
{	
	unc="$1"; [[ ! $unc ]] && return 1

	GetUncServer "$unc" server || return; [[ ! $server ]] && { ScriptErr "UNC '$unc' does not include a server"; return 1; }
	GetUncShare "$unc" share || return; [[ ! $share ]] && share="root" 
	GetUncDirs "$unc" dirs
	local p; GetUncProtocol "$unc" p || return; [[ $p ]] && protocol="$p"

	user="$USER"
	shareId="${share%%\$}"
	mountDir="$volumeDir/${server}_${shareId}"

	# WSL 2 elevation - mounted network shares are not visible, must mount them to a distinct location
	IsPlatform wsl2 && IsElevated && mountDir="${mountDir}_elevated" 

	# MDSN name resolution - Windows does not resolve MDNS natively
	IsPlatform win && IsMdnsName "$server" && { server="$(MdnsResolve "$server")" || return; }

	[[ $verbose ]] && HilightErr "unc $command: unc=$unc mountDir=$mountDir protocol=$protocol"

	return 0
}

isMounted()
{
	local unc prefix; IsPlatform mac && prefix="$user@"

	# server is local and we can determine the full path to the locaL directory
	IsLocalHost "$server" && [[ "$share" == "root" ]] && { showResult "/$dirs"; return; }

	# check for a WSL share	
	[[ ! $unc ]] && unc="$(mount | grep "^drvfs on $mountDir" | head -n 1 | cut -d" " -f 3)"

	# check for an SMB share
	[[ ! $unc ]] && unc="$(mount | grep "^//$prefix${server%%.*}.*/$shareId\\\$* on " | head -n 1 | cut -d" " -f 3)"

	# check for an NFS share
	[[ ! $unc ]] && unc="$(mount | grep "^${server%%.*}.*:/$shareId$* on " | head -n 1 | cut -d" " -f 3)"

	# check for an ssh share
	if [[ ! $unc ]]; then
		[[ "$shareId" == "root" ]] && shareId=
		unc="$(mount | grep "^$user@$server:/$shareId on " | head -n 1 | cut -d" " -f 3)"
	fi		
	
	[[ $unc && $dirs ]] && unc="$unc/$dirs"

	showResult "$unc"
}

platformUnmount()
{
	case "$PLATFORM" in
		mac) osascript -e "tell application \"Finder\"" -e "eject \"$(GetFileName "$mountDir")\"" -e "end tell";;
		linux|win) sudoc umount "$mountDir";;
	esac
}

ScriptRun "$@"
