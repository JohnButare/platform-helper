#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manipulate network volumes using the UNC (Universal Naming Convention) format.
The UNC format is //[USER@]SERVER/SHARE[/DIRS].

	get                 get UNC information
	browse              list UNC shares on the local network
	IsAvailable HOST    return true if a host is available for UNC connections
	IsMounted TARGET    return true if the target UNC or path is mounted 
	list HOST           list UNC shares on the specified host
	mount UNC           mount the specified UNC
	unmount TARGET|all  unmount the specified target UNC or path"
}

argStart() { unset -v elevate elevateArg passwordArg; }

opt() 
{
	case "$1" in
		-e|--elevate) IsPlatform win && elevateArg="--elevate";;
		-p|--password) ScriptOptGet "passwordArg" "password" "$@";;
		*) return 1
	esac
}

usageVerbose()
{ 
	ScriptUsageEcho "
Other options:
	-e,  --elevate							in Windows, use an elevated administrator token
	-p,  --password							password for share authentication"
}

init()
{
	volumeDir="$(GetRealPath "$HOME/Volumes")"; initVolumeDir || return
	protocolUsage="-p, --protocol=[NFS|SMB|SSH|INTEGER](SMB)"
	uncTypes="cifs,drvfs,nfs,nfs4,fuse.sshfs"
	uncTypesDf="-t nfs -t nfs4 -t smbfs -t fuse.sshfs"
	IsPlatform mac && uncTypesDf+=" -t macfuse"
	IsPlatform wsl1 && uncTypes+=",drvfs" uncTypesDf+=" -t drvfs"
	uncTypesGrep="${uncTypes//,/|}"
}

argStart() { unset -v protocol unc; }

#
# Get Commands
#

getUsage() { echot "\
Usage: unc get [OPTION]... [COMMAND]...
Get information.

	detail								return detailed information for shares mounted in ~/Volumes
	dir UNC	[--root]			return the mounted path of the UNC, i.e. ~/Volumes/server_share/dir1/dir2.
												If --root is specified omit the subdirectories, i.e. ~/Volumes/server_share
	mounts								return all mounted shares in ~/Volumes
	port [-p|--protocol]	return the port for the specified protocol	
	protocol PATH					the protocol used for the mounted path
	protocols [HOST]			return the protocols supported by specified host, or all valid protocols
	unc PATH [--root]			return the UNC of a mounted path, i.e. //server/share/dir1/dir2.
												If --root is specified omit the subdirectories, i.e. //server/share

	$protocolUsage"
}

getCommand() { usage; }

getDetailCommand()
{
	if InPath findmnt; then findmnt --output=TARGET,SOURCE,FSTYPE --types=$uncTypes | ${G}grep -e "^TARGET\|$volumeDir"
	elif InPath ${G}df; then ${G}df $uncTypesDf
	else noUncCommand
	fi
}

getMountsCommand()
{
	elevateSet
	if InPath findmnt; then RunLog $elevate findmnt --output=TARGET --types=$uncTypes --noheadings | tgrep "^$volumeDir"
	elif InPath ${G}df; then RunLog $elevate ${G}df $uncTypesDf |& ${G}tail -n +2 | awk '{ print $NF }'
	elif InPath mount; then RunLog $elevate mount | ${G}grep -E "type ($uncTypesGrep) " | cut -d" " -f3
	else noUncCommand
	fi
}

# dir
getDirArgStart() { unset -v root unc; }
getDirArgs() { getUncArg "$@"; }
getDirOpt() { getRootOpt "$@"; }
getDirCommand() { getDir$root "$unc"; }

# port
getPortOpt() { protocolOpt "$@"; }
getPortCommand() { getPort "$protocol"; }

# protocol
getProtocolArgs() { getPathArg "$@"; }
getProtocolCommand() { getProtocol "$path"; }

# protocols
getProtocolsArgStart() { unset host; }
getProtocolsArgs() { [[ ! $1 ]] && return; ScriptArgGet "host" -- "$@"; }
getProtocolsCommand() { getProtocols "$host"; }

# UNC
getUncArgStart() { unset -v root; }
getUncArgs() { getPathArg "$@"; }
getUncOpt() { getRootOpt "$@"; }
getUncCommand() {	getUnc$root "$path"; }

#
# IsAvailable Command
#

isAvailableUsage() { echot "Usage: unc IsAvailable [HOST](localhost)
Return true if the specified HOST is available using the specified protocols.
If no protocols are specified search for a protocol to use.

	$protocolUsage"
}

isAvailableArgStart() { unset -v host; }
isAvailableOpt() { protocolOpt "$@"; }
isAvailableArgs() { ScriptArgGet "host" -- "$@"; shift; }
isAvailableCommand() { findProtocol "$host"; }

#
# IsMounted Command
#

isMountedArgs() { quiet="true" getTargetArg "$@"; }
isMountedCommand() { [[ -e "$mountDir" ]]; }

#
# List Command
#

listUsage()
{
	echot "\
Usage: unc list HOST
List UNC shares on the specified host.

	$protocolUsage
	-N, --no-host-check					do not check host availability"
}

listArgStart() { unset -v port protocol; }
listOpt() { protocolOpt "$@"; }
listArgs() { ScriptArgGet "host" -- "$@" && HostAvailable "$host"; }
listCommand() { protocol="${protocol:-smb}"; RunFunction "list${protocol^}"; }
listNfs() { ssh -t "$host" exportfs; }
listSsh() { echo "root"; }

listSmb()
{
	if InPath smbutil; then smbutil view "//$host" | ${G}grep "Disk"
	elif InPath smbclient; then listSmbClient
	else EchoErr "unc: unable to list shares for $host"; return 1
	fi
}

listSmbClient()
{	
	local password; password="$(getPassword)" || return

	# smbclient password prompt will be hidden if output is sent to a pipe
	if [[ $password ]]; then
		smbclient -L $host -U$USER%$password | ${G}grep -v "tdb_new_database" | ${G}grep -v "option is deprecated"
	else
		smbclient -L $host -U$USER
	fi		
}

#
# Browse Command
#

browseUsage() { echot "Usage: unc browse
List UNC shares on the local network."; }

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { ScriptErr "unable to browse the network"; return 1; }
	smbtree
}

#
# Mount Command
#

mountUsage()
{
	echot "Usage: unc mount UNC
Mount the specified UNC.

	$protocolUsage
	-i, --ip										mount using the server IP address
	-N, --no-host-check					do not check host availability"
}

mountArgStart() { unset -v ip noHostCheck port protocol; }
mountArgs() { getTargetArg "$@"; }

mountOpt() 
{
	protocolOpt "$@" && return
	case "$1" in
		-i|--ip) ip="--ip";;
		-N|--no-host-check) noHostCheck="true";;
		*) return 1
	esac
}

mountCommand()
{
	local result

	isMountedCheck "$unc" && return

	# ensure server is available
	if ! findProtocol "$server"; then
		[[ ! "$quiet" ]] && ScriptErr "host '$server' is not available"
		return 1
	fi
	log1 "connection will use '$(protocolDesc "$protocol" "$server")' protocol"

	# remove an existing share in the mountRoot
	unmount "$mountRoot" "$isLocal" || return

	# create the mount directory
	if [[ ! -d "$mountRoot" ]]; then
		log1 "creating mount root directory '$mountRoot'"
		! ${G}mkdir "$mountRoot" --parents && { ScriptErr "could not create the mount root directory '$mountRoot'"; return 1; }
	fi

	# mount

	# rclone
	if [[ "$protocol" == "rclone" ]]; then
		RunLog rclone mount "$server:$share/$dirs" "$mountRoot" --daemon

	# WSL 1
	elif isWslshare || IsPlatform wsl1; then

		# required if DNS name is not available in Windows 
		server="$(GetIpAddress "$server")" || return

		# drvfs requires an existing connection to the share
		if ! net.exe use | RemoveCarriageReturn | ${G}grep --quiet '\\\\'"$server"'\\'; then
			local password; password="$(getPassword)" || return
			log1 "mount: net.exe use "'\\\\'"$server\\IPC$ /USER:$user HIDDEN"
			net.exe use '\\'"$server"'\IPC$' /USER:$user "$password" || return
		fi

		# mount
		RunLog sudoc mount -t drvfs "//$server/$share" "$mountRoot"

	# NFS
	elif [[ "$protocol" == "nfs" ]]; then
		local options=(); IsPlatform win && options+=( -o nolock )
		RunLog mount "${options[@]}" -t nfs "$server:/$share" "$mountRoot"

	# SSH
	elif [[ "$protocol" == "ssh" ]] || IsInteger "$protocol"; then		
		local portArg; IsInteger "$protocol" && portArg=(-p "${protocol}")
		local prefix; IsPlatform qnap && prefix="sudo"
		[[ "$share" == "root" ]] && share=""
		RunLog $prefix sshfs -o reconnect -o allow_other -o follow_symlinks "$user@$server:/$share" "$mountRoot" "${portArg[@]}"

	# linux and WSL 2
	elif IsPlatform linux,wsl2; then		

		# create the fstab line - spaces in the share and mount directory must be quoted using \044
		local quote='\\040' quoteCheck='\040'
		local shareQuoted; shareQuoted="$(ReplaceString "$share" " " "$quote")" || return
		local mountRootQuoted; mountRootQuoted="$(GetRealPath "$mountRoot" | ReplaceString " " "$quote")" || return
		local line="//$server/$shareQuoted $mountRootQuoted cifs username=$user,noauto,rw,users 0 0"
		local checkLine="//$server/$shareQuoted\\\$* $mountRootQuoted cifs username=$user,noauto,rw,users 0 0"

		# add an entry to /etc/fstab so sudo is not required to write to the share
		if ! IsPlatform wsl1 && ! ${G}grep -i "$checkLine" "/etc/fstab" >& /dev/null; then
			sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		# mount - don't log password, mount.cifs password option does not work (WSL 2)
		local password; password="$(getPassword)" || return
		local passwordHidden passwordVar; [[ $password ]] && passwordHidden="HIDDEN" passwordVar="PASSWD=$password"
		local options="user=$user sec=ntlmsspi"

		# mount elevated
		if ! IsPlatform wsl1 && elevateCheck; then	
			[[ $password ]] && elevateSet --sensitive --no-quote || elevateSet "--no-hide"
			log1 "mount: $elevate PASSWD="$passwordHidden" mount.cifs //$server/$share $mountRoot -o $options"
			$elevate $passwordVar mount.cifs "//$server/$share" "$mountRoot" $options

		# mount with a password
		elif [[ $password ]]; then
			log1 "mount: PASSWD="$passwordHidden" mount.cifs //$server/$share $mountRoot -o $options"
			PASSWD="$password" mount.cifs "//$server/$share" "$mountRoot" -o $options

		# mount without a password - can't use PASSWD="" prefix as that is treated as an empty password
		else
			RunLog mount.cifs "//$server/$share" "$mountRoot" -o $options

		fi		

	# mac
	elif IsPlatform mac; then
		local password; password="$(getPassword)" || return

		# options
		# nobrowse - don't show share on the Desktop
		# nodatacache - prevent caching of file data
		# nomdatacache - prevent caching of file metadata (i.e. file modification time, stat gets current file modification time for 30 seconds if time modified on server)
		# forcenewsession, -s - force a new session to be created on the server
		local options="nobrowse"
		#options+=",nomdatacache,nodatacache"

		# mount - don't log passwords
		if [[ $password ]]; then
			log1 "mount: mount_smbfs -s -o $options \"smb://$user:HIDDEN@$server/$share\" \"$mountRoot\""
			mount_smbfs -o "$options" "smb://$user:$password@$server/$share" "$mountRoot"
		else
			RunLog mount_smbfs -o "$options" "smb://$user@$server/$share" "$mountRoot"
		fi

	fi

	# return the mounted directory	
	isMountedCheck "$unc" && return

	# mount failed, cleanup 
	[[ ! $quiet ]] && { ScriptErr "unable to mount UNC '$unc'"; }
	unmount "$mountRoot" "$isLocal"; return 1
}

#
# Unmount Command
#

unmountUsage() { echot "Usage: unc unmount UNC|all
Unmount the specified or all mounted UNCs."; }

unmountArgs()
{ 
	[[ "$1" == "all" ]] && { shift=1; unc="all"; return; }
	getTargetArg "$@"
}

unmountCommand()
{
	[[ "$unc" != "all" ]] && { unmount "$mountRoot" "$isLocal"; return; }

	# mac
	[[ $force ]] && IsPlatform mac && { sudoc umount "$volumeDir/"*; rmdir "$volumeDir/"*; }

	# find mounted directories - direct call to getUncMounts does not work with --elevate
	local dirs; IFS=$'\n' dirs=( $(unc get mounts $elevateArg "${globalArgs[@]}") ) || return
	[[ ! $dirs ]] && return

	# unmount
	local fail=0 message isLocal # we found all mounted shares, so none of them are local
	log "unmounting..."
	for mountRoot in "${dirs[@]}"; do
		log "$(GetFileName "$mountRoot")..."; [[ $verbose ]] && echo
		message="$(unmount "$mountRoot" "$isLocal" 2>&1)" || { (( ++fail )); echo; EchoErr "$message"; }
	done
	log "done\n"

	return $fail
}

#
# Mount/Unmount Helper
#

# unmount mountRoot isLocal - unmount a share and remove the mount directory
#   The mounted directory may be in an invalid state, and normal file operations on it will fail.
#   To test with a share in an invalid state, mount an SSHFS share, logout and reconnect.  ls "$mountRoot" will error with:
#   "ls: cannot access rosie.hagerman.butare.net_root: Input/output error"
unmount()
{
	local dir="$1" isLocal="$2"
	local output="/dev/null"; [[ $verbose ]] && output="/dev/stderr"

	# cannot unmount local directories
	[[ $isLocal ]] && return

	# return if the mount directory does not exist or is empty
	mountDirCleanup "$dir" >& "$output" && return
	
	# unmount - ignore errors
	case "$PLATFORM_OS" in
		mac) unmountMac "$dir" >& "$output";;
		linux|win) unmountLinux "$dir" >& "$output";;
	esac
	
	mountDirCleanup "$dir" >& "$output" && return

	# unable to remove - check if it is a local drive
	if drive IsMounted "$dir"; then
		ScriptErr "unable to unmount '$dir', it contains local files, try -ff to blindly remove those files"
		return 1
	fi

	# unable to remove
	if [[ ! $quiet ]]; then
		ScriptErr "unable to unmount '$dir', try --force"
		local processes; processes="$(FileGetProcessesUsing "$dir")" || return
		if [[ $processes ]]; then
			log1 "blocking processes for '$dir': $processes"
			EchoErr "The following processes are preventing '$dir' from being unmounted:"; ps -p $processes
		fi
	fi

	return 1
}

unmountMac()
{
	local dir="$1" args=(); [[ $force ]] && args+=(force)
	RunLog diskutil unmount "${args[@]}" "$dir"
}

unmountLinux()
{
	local dir="$1" args=(); [[ $force ]] && args+=(-f)	
	RunLog $elevate umount "${args[@]}" "$dir"

	# shares mounted as root can only be removed by root
	if ! mountDirCleanup "$dir"; then
		RunLog sudo umount "${args[@]}" "$dir"
	fi
}

mountDirCleanup()
{
	local dir="$1"

	# remove directory - ignore errors
	[[ -d "$dir" ]] && RunLog2 rmdir "$dir"

	# remove directory and files - ignore errors
	(( forceLevel >= 2 )) && RunLog2 rm -fr $dir

	# validate removal
	! mountDirExists "$dir"
}

# mountDirExists DIR - return true if the specified mounted directory exists
mountDirExists()
{
	local dir="$1"

	# remove directories, i.e. /home/jjbutare/Volumes/server_share/dir1/dir2 -> /home/jjbutare/Volumes/server_share	
	dir="$(pathRoot "$dir")" || return 

	# return if the directory exists
	[[ -e "$dir" ]] && return

	# remove volumeDir path, i.e. /home/jjbutare/Volumes/server_share -> server_share
	local mountDir=

	# check if the mount directory does not exist by looking at the files in the directory
	# as ls "$dir" and "-e $dir" may return return false if the share is in an invalid state
	command ls -1 "$volumeDir" |& ${G}grep -q "^"$(GetFileName "$dir")"$"
}

#
# Argument Helpers
#

getPathArg() { ScriptArgGet "path" -- "$@" && ScriptCheckPath "$path"; }
getUncArg() { ScriptArgGet "unc" -- "$@" && ScriptCheckUnc "$unc"; }
getRootOpt() { [[ "$1" == @(-r|--root) ]] && root="Root"; }

# getTargetArg - get target that is either a UNC or a path that is a mounted UNC.  Sets target and unc on return.
getTargetArg()
{
	ScriptArgGet --required "target" -- "$@"

	# target aliases
	[[ "$target" == "//nas3/root" ]] && target="//nas3/homes/admin/root"

	# target is a mounted file or directory
	if [[ -e "$target" ]]; then		
		[[ "$target" =~ _elevated ]] && elevateArg="--elevated" && elevateSet
		unc="$(getUnc "$target")" && getUncInfo "$unc"; return; 
	fi

	# target is a UNC
	validateUnc "$target" && getUncInfo "$target"
}

#
# Protocol Helper
#

# findProtocol HOST - find a file sharing protocol for HOST, sets protocol variable.
findProtocol()
{
	local host="$1"; noHostCheck && return

	log1 "findProtocol: host='$host'"

	# Synology SMB mount.cifs does not work, use sshfs
  IsPlatform synology && [[ "$protocol" == @(|smb) ]] && protocol="ssh"

	# if a specific protocol was requested check it
	[[ $protocol ]] && { isAvailable "$host" "$protocol"; return; }

	isAvailable "$host" "smb" || isAvailable "$host" "nfs" "mount.nfs" || isAvailable "$host" "ssh" "sshfs" || isAvailable "$host" "rclone" "rclone"
}

getPort()
{
	local protocol="$1" host="$2"

	case "${protocol:-smb}" in
		nfs) echo "111";; # 111 and 2049 
		smb) echo "445";; # 135 and 445
		ssh) SshHelper config get "$host" port;;
		*) IsInteger "$protocol" && echo "$protocol" || echo ""
	esac
}

#
# helper
#

log() { [[ $quiet ]] && return; printf "$@"; }
noHostCheck() { [[ $noHostCheck ]] || isWslshare; }
protocolOpt() { [[ "$1" == @(-p|--protocol|-p*|--protocol=*) ]] && ScriptOptNetworkProtocol "$@"; }
isWslshare() { [[ "$server" == @(wsl|wsl.localhost) ]]; }
validateUnc() { IsUncPath "$1" && return; [[ ! $quiet ]] && ScriptErr "'$1' is not a UNC"; ScriptExit; }

# checkElevation - check if the mountRoot directory requires elevation
# - in WSL 2 mounted network shares are not visible when not elevated, so
#   must mount them to a distinct location
checkElevation()
{
	# only wsl2 SMB needs elevation
	{ ! IsPlatform wsl2 || [[ "$protocol" != @(|smb) ]]; } && return

	# assume elevation if the root UNC ends in _elevated or if we are elevated
	{ [[ "$mountRoot" =~ _elevated$ ]] || IsElevated; } && elevateArg="--elevate"

	# return if not elevating
	[[ ! $elevateArg ]] && return

	# mountRoot - append _elevated if needed
	[[ ! "$mountRoot" =~ _elevated$ ]] && mountRoot="${mountRoot}_elevated" 

	# share - remove _elevated
	share="$(RemoveEnd "$share" "_elevated")"

	# set elevation command
	elevateSet || return

	# logging
	log2 "UNC share '$mountRoot' uses an elevated administrator token"			
}

elevateCheck() { [[ $elevateArg ]] && ! IsElevated ; }
elevateSet() { ! elevateCheck && return; elevate="RunScript --elevate ${globalArgs[@]} $@ --"; }

# getDir UNC - return the mounted path of the UNC, i.e. ~/Volumes/server_share/dir1/dir2
getDir()
{
	local unc="$1"; validateUnc "$unc"
	local dirs="$(GetUncDirs "$unc")"

	# return a local path to this system if possible
	[[ $isLocal && "$share" == @(root) ]] &&  { echo "/$dirs"; return; }

	# WSL shares
	if isWslshare; then
		[[ -d "$mountRoot/tmp" ]] && { echo "$mountRoot/$dirs"; return; }
		return 1
	fi

	# get the mounted root directory of the unc
	local mountRoot; mountRoot="$(getDirRoot "$unc")" || return

	# return the directory
	echo "$mountRoot/$dirs"
}

# getDirRoot UNC - return the root mounted path of the UNC, i.e. ~/Volumes/server_share
getDirRoot()
{
	local root unc="$1"; validateUnc "$unc"

	# ensure the UNC has the fully qualified server name
	# unc="$(GetUncFull $ip "$unc")" || return

	# get the mountDir from the UNC
	local user server share dirs mountRoot mountDir
	getUncInfo "$unc" || return

	# find the mounted directory
	# - search for mounted UNC types where the destination is the specified mountRoot
	# - do not search for the UNC source as it is different for each protocol and platform.
	#   For example mac includes the username in in the SMB source.

	# findmnt
	if InPath findmnt; then
		root="$($elevate findmnt --target="$mountRoot" --output=TARGET --types=$uncTypes --noheadings)" || { notAUncShare "$unc"; return; }

	# df
	elif InPath ${G}df; then
		root="$($elevate ${G}df -P $uncTypesDf |& ${G}grep " ${mountRoot}$" | awk '{print $NF}')" || { notAUncShare "$unc"; return; };

	else
		noUncCommand; return

	fi

	echo "$root"
}

# getPassword - get the share password from the passwordArg, credential store, or prompt for it
getPassword()
{	
	local password

	if [[ $passwordArg ]]; then
		password="$passwordArg"
	elif password="$(getPasswordCredentialStore)" && [[ ! $password ]] ; then
		PrintErr "Enter SMB password for $user on $server: "
		read -s password; EchoErr; 
	fi

	echo "$password"
}

# getPasswordCredentialStore - get the share password from the credential store
getPasswordCredentialStore()
{
	# try and get the share password
	password="$(credential --quiet get secure default --fallback)"

	# password found
	if [[ $password ]]; then
		log1 "password found in the credential store"; 
		echo "$password"; return
	fi

	# return success - we can prompt for the password when connecting to the share
	[[ ! $noPrompt ]] && return

	# return an error - we are not allowed to prompt for the password when connecting to the share
	[[ ! $quiet ]] && ScriptErr "no password found for '$unc'"
	return 1
}

# getProtocol PATH - the protocol used for the mounted path
getProtocol() 
{
	local path="$1"

	! InPath findmnt && { noUncCommand; return; }

	local type="$(findmnt --target "$path" --output=FSTYPE --noheadings)"

	case "$type" in
		cifs) echo "smb";;
		fuse.sshfs) echo "ssh";;
		*) echo "$type";;
	esac
}

# getProtocols [HOST] - return the protocols supported by specified host, or all valid protocols
getProtocols()
{
	[[ ! $host ]] && { echo "nfs smb ssh"; return; }
	
	local hostIp; hostIp="$(GetIpAddress "$host")" || return
	local protocols=() 
	IsAvailablePort "$hostIp" "$(getPort "nfs")" && protocols+=( "nfs" )
	IsAvailablePort "$hostIp" "$(getPort "smb")" && protocols+=( "smb" )
	SshIsAvailablePort "$host" && protocols+=( "ssh" )

	[[ $protocols ]] && ArrayDelimit protocols " " || echo "none"
}

# getUnc PATH - return the UNC of a mounted path, i.e. //server/share/dir1/dir2
getUnc()
{
	local path; path="$(GetFullPath "$1")" || return
	local uncRoot; uncRoot="$(getUncRoot "$path")" || return
	local mountRoot; mountRoot="$(getDirRoot "$uncRoot")" || return
	echo "${path/$mountRoot/$uncRoot}"
}

# getUncRoot PATH - return the root UNC of a mounted path, i.e. //server/share
getUncRoot()
{
	local uncRoot path="$1"; path="$(GetFullPath "$1")" || return

	# use findmnt
	if InPath findmnt; then 
		uncRoot="$($elevate findmnt --target "$path" --output=SOURCE --types=$uncTypes --noheadings)" || { notAUncShare "$path"; return; }

	# use df
	elif InPath ${G}df; then
		local check; check="$(pathRoot "$path")" || return
		uncRoot="$($elevate ${G}df -P |& ${G}grep " ${check}$" | awk '{print $1}')" || { notAUncShare "$path"; return; }
	else 
		noUncCommand; return

	fi

	# no changes for cifs, i.e. //nas3/public->no change
	[[ "$uncRoot" =~ //.* ]] && { echo "$uncRoot"; return; } 

	# update UNC for CryFS, i.e. cryfs@/path/to/dir -> //cryfs/path/to/dir
	[[ "$uncRoot" =~ cryfs@.* ]] && uncRoot="//cryfs$(RemoveBefore "$uncRoot" "@")"

	# update UNC for sshfs, i.e. jjbutare@nas3:/tmp->//nas3/tmp jjbutare@nas3:/->//nas3/root
	[[ "$uncRoot" =~ .*:.* ]] && uncRoot="//$(RemoveBefore "$uncRoot" "@" | RemoveChar :)"

	# add default share (/root) if needed
	[[ "$(GetUncShare "$uncRoot")" == "" ]] && uncRoot="${uncRoot}root"

	echo "$uncRoot"
}

# getUncInfo UNC - UNC format is //[USER@]SERVER/SHARE[/DIRS]
# sets: isLocal unc user server share dirs mountRoot mountDir protocol
#   - isLocal: set if the UNC refers to a local share
#   - unc user server share dirs (parsed from UNC)
#   - mountRoot: the root directory for the mounted volume, i.e. ~/Volumes/$server_$share
#     In Windows shares created when elevated will end in _elevated.
#   - mountDir: the full path to the mounted directory, i.e. $mountRoot/$dirs
getUncInfo()
{	
	unc="$1"; validateUnc "$unc" || return

	unc="$(GetUncFull "$unc" $ip)" || return # return the UNC with server fully qualified domain name or an IP
	GetUncServer "$unc" server || return; [[ ! $server ]] && { ScriptErr "UNC '$unc' does not include a server"; return 1; }
	GetUncUser "$unc" user; [[ ! $user ]] && { user="$(SshUser "$server")" || return; }
	GetUncShare "$unc" share "root" || return
	GetUncDirs "$unc" dirs || return
	GetUncProtocol "$unc" protocol "$protocol" || return

	# determine if the UNC refers to a share on this host
	isLocal=""; IsLocalHost "$server" && isLocal="true"

	# mountRoot - the root directory for the mounted volume without problematic directory characters
	mountRoot="$(echo "$volumeDir/${server}_${share}" | RemoveChar '$')"

	# determine if using elevation
	checkElevation || return

	# mountDir is the full path to the mounted directory
	mountDir="$mountRoot"; [[ $dirs ]] && ! IsRcloneRemote "$server" && mountDir="$mountDir/$dirs"

	# MDNS name resolution - Windows does not resolve MDNS natively	
	IsPlatform win && IsMdnsName "$server" && { server="$(MdnsResolve "$server")" || return; }

	# log
	[[ ! $getUncInfoLogged ]] && log2 "unc $command: unc='$unc'\n	user=$user protocol=$protocol server=$server share='$share' dirs='$dirs'\n	mountRoot='$mountRoot'\n	mountDir='$mountDir'"
	getUncInfoLogged="true"

	return 0
}

initVolumeDir()
{
	[[ -d "$volumeDir" ]] && return
	! ${G}mkdir "$volumeDir" && { ScriptErr "could not create the volume directory $volumeDir"; return 1; }
	return 0
}

# isAvailable HOST PROTOCOL PROGRAM - return true if the file sharing PROGRAM is installed
# and the host is available on the port required for the protocol.  Sets protocol on return.
isAvailable()
{	
	local host="$1" program="$3"; protocol="$2"
	local port="$(getPort "$protocol" "$host")"

	if [[ $program ]] && ! InPath "$program"; then
		log1 "$protocol protocol unavailable ($program not installed)"
		return 1
	fi

	noHostCheck && return

	# find check command
	local check="IsAvailablePort $host $port"; [[ "$protocol" == "rclone" ]] && check="IsRcloneRemote $host"
		
	# logging
	if [[ $verbose ]]; then
		PrintErr "$(ScriptPrefix)checking $host $(protocolDesc "$protocol" "$host") protocol..."
		IsAvailablePort "$host" "$port" && EchoErr "available" || EchoErr "not available"
	fi

	# check
	eval "$check"
}

# isMountedCheck UNC - if the UNC is mounted show it's path and return true
isMountedCheck()
{
	local unc="$1"

	local dir; dir="$(quiet="true" getDir "$unc")"
	local result="$?"

	logMounted "$result" "$unc"
	(( $result == 0 )) && [[ ! $quiet ]] && echo "$dir"
	(( $result == 0 ))
}

logMounted()
{
	local result="$1" target="$2"
	[[ ! $verbose ]] && return
	local not; [[ "$result" != "0" ]] && not=" not"
	log1 "'$target' is$not mounted"
}

notAUncShare()
{
	[[ ! "$quiet" ]] && ScriptErr "'$1' is not on a UNC share"
	return 1
}

noUncCommand()
{
	[[ ! "$quiet" ]] && ScriptErr "no UNC commands available (findmnt or df)"
	return 1
}

# pathRoot PATH - return the root of specified path, i.e. /home/jjbutare/Volumes/pi1_root/tmp -> /home/jjbutare/Volumes/pi1_root
pathRoot()
{
	local check
	check="$(GetFullPath "$1")" || return
	check="$(RemoveFront "$check" "$volumeDir/")"
	echo "$volumeDir/${check%%/*}"
}

protocolDesc()
{
	local protocol="$1" host="$2"
	local desc="$protocol"; IsInteger "$protocol" && desc="ssh"
	echo "$desc (port $(getPort "$protocol" "$host"))"
}

ScriptRun "$@"
