#!/usr/bin/env bash
. function.sh

run() {	init || return; args "$@" || return; ${command}Command "${args[@]}"; }

init()
{
	driveLetters="d e f g h i j k l m n o p q r s t u v w x y z"
	volumeDir=~/"Volumes"

	if ! [[ -d "$volumeDir" ]] && ! ${G}mkdir "$volumeDir"; then
		EchoErr "Could not create the volume directory $volumeDir"
		return 1
	fi

	return 0
}

usage()
{
	echot "\
usage: unc mount|unmount|IsMounted|ListMounted|UnmountAll UNC
	browse							browse the UNC shares on the network
	IsMounted	UNC				if UNC is mounted returns DIR mounted to
	list								list UNC disks on the host
	mount|unmount UNC		unmount or mount UNC and return DIR mounted

	-nhc, --no-host-check		do not check if the host is available
	-q, 	--quiet						hide status messages
	-s, 	--ssh							use sshfs to mount the share"
	exit $1
}

args()
{
	unset -v command noHostCheck quiet sshFs unc

	while (( $# != 0 )); do
		case "$1" in
			-h|--help) usage 0;;
			-nhc|--no-host-check) noHostCheck="true";;
			-s|--ssh) sshFs="true";;
			-q|--quiet) quiet="--quiet";;
			IsMounted) command="isMounted";; ListMounted) command="listMounted";; UnmountAll) command="unmountAll";;
			*)
				IsUncPath "$1" && [[ ! $unc ]] && { unc="$1"; shift; getUncInfo "$unc" || return; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { usage 1; }
	[[ "$comamnd" == @(IsMounted|mount|UnMount) && ! $unc ]] && MissingOperand "unc"
	args=("$@")
}

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { EchoErr "unc: unable to browse the network"; return 1; }
	sudoc smbtree
}

isMountedCommand() # unc
{
	local node prefix; IsPlatform mac && prefix="$user@"

	# check for an SMB share
	node="$(mount | grep "^//$prefix${server%%.*}.*/$shareId\\\$* on " | head -n 1 | cut -d" " -f 3)"

	# check for an sshfs share
	if [[ ! $node ]]; then
		[[ "$shareId" == "root" ]] && shareId=
		node="$(mount | grep "^$user@$server:/$shareId on " | head -n 1 | cut -d" " -f 3)"
	fi		
	
	[[ ! $node ]] && return 1
	[[ $dirs ]] && echo "$node/$dirs" || echo "$node"
}

listMountedCommand()
{
	ls ~/Volumes | grep "_" | sed 's/_/\//g' | awk '{ print "//"$1 }'
}


listCommand()
{
	local server="$(GetUncServer "$unc")"

	if ! IsAvailable "$server"; then
		EchoErr "Host $server is not available"
		return 1
	fi

	if InPath smbutil; then
		smbutil view "//$server" | grep "Disk"

	elif InPath smbclient; then
		sudoc smbclient -L $server -U$USER%$(credential -q get secure default) |& grep -v "tdb_new_database" |& grep -v "option is deprecated"

	else
		EchoErr "Unable to list shares on $server"
		return 1
	fi
}

mountCommand() # unc
{
	local result dir; dir="$(isMountedCommand)" && { echo "$dir"; return 0; }

	if [[ ! $noHostCheck && "$server" != "wsl$" ]] && ! IsAvailable "$server"; then
		[[ ! "$quiet" ]] && EchoErr "Host $server is not available"
		return 1
	fi

	# remove an existing share in the mountDir
	if [[ -d "$mountDir" ]]; then
		umount "$mountDir" >& /dev/null
		rmdir "$mountDir" >& /dev/null
	fi

	if ! ${G}mkdir --parents "$mountDir"; then
		EchoErr "Could not create the mount directory $mountDir"
		return 1
	fi

	if [[ "$PLATFORM_KERNEL" == "wsl1" || "$server" == "wsl$" ]]; then
		sudoc mount -t drvfs "//$server/$share" "$mountDir" 

	elif [[ $sshFs ]] || IsPlatform synology; then # synology mount.cifs does not work
		[[ "$share" == "root" ]] && share=""
		sshfs -o allow_other "$user@$server:/$share" "$mountDir"

	elif IsPlatform linux,wsl2; then
		local sudo; IsPlatform qnap && sudo="sudoc"

		# add an entry to /etc/fstab so sudo is not required to write to the share		
		if ! grep -i "//$server/$shareId\\\$* $mountDir cifs username=$user,noauto,rw,users 0 0" /etc/fstab >& /dev/null; then
			local line="//$server/$share $mountDir cifs username=$user,noauto,rw,users 0 0"
			sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		local password="$(credential -q get secure default)"

		[[ $password ]] && export PASSWD="$password"
		$sudo mount.cifs "//$server/$share" "$mountDir" -o user=$user sec=ntlmsspi
		[[ $password ]] && unset PASSWD

	elif IsPlatform mac; then
		local password="$(security find-generic-password -gwa $user)"

		if [[ $password ]]; then
			mount_smbfs "smb://$user:$password@$server/$share" "$mountDir"
		else
			mount_smbfs "smb://$user@$server/$share" "$mountDir"
		fi

	fi

	if isMountedCommand; then
		return 0
	else
		cleanupMountDir
		return 1
	fi
}

unmountCommand() # unc
{
	local dir; dir="$(isMountedCommand)" || { cleanupMountDir; return; }
	unmount "$dir"
	cleanupMountDir
}

unmountAllCommand()
{
	local uncs="$(unc ListMounted)"
	
	printf "unmounting..."
	for unc in $uncs; do
		printf "$unc..."
		unc unmount "$unc" || return
	done
	echo "done"
	
	return 0
}

#
# Helper Functions
#

cleanupMountDir()
{
	{ isMountedCommand || [[ ! -d "$mountDir" ]]; } && return
	rmdir "$mountDir" > /dev/null
}

getUncInfo() # GetUncInfo unc - sets server share shareId dirs user mountDir
{
	GetUncServer "$unc" server; IsPlatform win && IsLocalAddress "$server" && { server="$(MdnsResolve "$server")" || return; }
	GetUncShare "$unc" share; [[ ! $share ]] && share="root" ; shareId="${share%%\$}"
	GetUncDirs "$unc" dirs
	user="$USER"; [[ "$HOSTNAME" =~ (^nas.?.?$)  && "$user" == "admin" ]] && user="jjbutare"
	mountDir="$volumeDir/${server}_${shareId}"

	# in WSL 2 mounted network shares are not present when elevating so mount them to a distinct location so they do not interfere with each other
	IsPlatform wsl2 && IsElevated && mountDir="${mountDir}_elevated" 

	return 0
}

unmount()
{
	case "$PLATFORM" in
		mac) GetFileName "$dir" dir; osascript -e "tell application \"Finder\"" -e "eject \"$dir\"" -e "end tell";;
		linux|win) sudoc umount "$dir";;
	esac
}

run "$@"
