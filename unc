#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manipulate network volumes using the UNC (Universal Naming Convention) format.
The UNC format is //[USER@]SERVER/SHARE[/DIRS].

	browse              list UNC shares on the local network
	exists							check if a share exists
	get|set							get or set configuration
	IsAvailable HOST    return true if a host is available for UNC connections
	IsMounted TARGET    return true if the target UNC or path is mounted 
	list HOST           list UNC shares on the specified host
	mount UNC           mount the specified UNC
	share               UNC share commands
	unmount TARGET|all  unmount the specified target UNC or path"
}

argStart() { unset -v elevate elevateArg passwordArg; }

opt() 
{
	case "$1" in
		-e|--elevate) IsPlatform win && elevateArg="--elevate";;
		-pw|--password) ScriptOptGet "passwordArg" "password" "$@";;
		*) return 1
	esac
}

usageVerbose()
{ 
	ScriptUsageEcho "
Other options:
	-e,  --elevate							in Windows, use an elevated administrator token
	-pw,  --password						password for share authentication"
}

init()
{
	gvfsDir="/usr/lib/gvfs"; IsPlatform rhel && gvfsDir="/usr/libexec"
	uncTypes="cifs,drvfs,nfs,nfs4,fuse.sshfs"
	uncTypesDf="-t nfs -t nfs4 -t smbfs -t fuse.sshfs -t fuse.gvfsd-fuse"
	IsPlatform mac && uncTypesDf+=" -t macfuse"
	IsPlatform wsl1 && uncTypes+=",drvfs" uncTypesDf+=" -t drvfs"
	uncTypesGrep="${uncTypes//,/|}"
	volumeDir="$(GetRealPath "$HOME/Volumes")"; initVolumeDir || return
	volumeDirGio="/run/user/$(${G}id --user)/gvfs"
}

argStart() { unset -v protocol unc; }

#
# browse command
#

browseUsage() { echot "Usage: unc browse
List UNC shares on the local network."; }

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { ScriptErr "unable to browse the network"; return 1; }
	smbtree
}

#
# get commands
#

getUsage() { echot "\
Usage: unc get [OPTION]... [COMMAND]...
Get configuration.

	allow									get information about who is allowed to see GVFS mounted shares
	detail								return detailed information for shares mounted in ~/Volumes
	dir UNC	[--root]			return the mounted path of the UNC, i.e. ~/Volumes/server_share/dir1/dir2.
												If --root is specified omit the subdirectories, i.e. ~/Volumes/server_share
	mounts								return all mounted shares in ~/Volumes
	port [-p|--protocol]	return the port for the specified protocol	
	programs							return the supported mount programs
	protocol PATH					the protocol used for the mounted path
	protocols [HOST]			return the protocols supported by specified host, or all valid protocols
	unc PATH [--root]			return the UNC of a mounted path, i.e. //server/share/dir1/dir2.
												If --root is specified omit the subdirectories, i.e. //server/share

	-p, --protocol				$(ScriptOptNetworkProtocolUsage)"
}

getCommand() { usage; }

getAllowUsage()
{
 echot "\
Usage: unc get allow other|root
Get information about who is allowed to see GVFS mounted shares.

	other									other users can be configured to allow to access GVFS shares in /etc/fuse.conf
	root									root is allowed to access GVFS shares"
}

getAllowCommand() { usage; }
getAllowOtherCommand() { ! isAvailableMountGio && return; qgrep "^user_allow_other$" "/etc/fuse.conf"; }
getAllowRootCommand() { ! isAvailableMountGio && return; mount | ${G}grep "gvfs" | qgrep "allow_other"; }

getDetailCommand()
{
	if isAvailableMountGio; then
		hilight "gio mounts..."
		gio mount --list | grep "GDaemonMount" -A 1 | grep -v "GDaemonMount"
		hilight "standard mounts..."
	fi

	if InPath findmnt; then findmnt --output=TARGET,SOURCE,FSTYPE --types=$uncTypes | ${G}grep -e "^TARGET\|$volumeDir"
	elif InPath ${G}df; then ${G}df $uncTypesDf
	else noUncCommand
	fi
}

getMountsCommand()
{
	elevateSet

	{
		# get mounts - gio mounts
		isAvailableMountGio && find $(GetFullPath "$volumeDir") -maxdepth 1 -type l

		# get mounts - standard mounts
		if InPath findmnt; then RunLog $elevate findmnt --output=TARGET --types=$uncTypes --noheadings | tgrep "^$volumeDir"
		elif InPath ${G}df; then RunLog $elevate ${G}df $uncTypesDf |& ${G}tail --lines=+2 | awk '{ print $NF }'
		elif InPath mount; then RunLog $elevate mount | ${G}grep -E "type ($uncTypesGrep) " | cut -d" " -f3
		else noUncCommand
		fi
	} | sort
}

# dir
getDirArgStart() { unset -v root unc; }
getDirArgs() { getUncArg "$@"; }
getDirOpt() { getRootOpt "$@"; }
getDirCommand() { getDir$root "$unc"; }

# port
getPortOpt() { protocolOpt "$@"; }
getPortCommand() { getPort "$protocol"; }

# programs
getProgramsCommand()
{
	local programs=() 
	isAvailableMountCifs && programs+=( "cifs" )
	isAvailableMountDrvfs && programs+=( "drvfs" )
	isAvailableMountGio && programs+=( "gio" )
	isAvailableMountNfs && programs+=( "nfs" )
	isAvailableMountRclone && programs+=( "rclone" )
	isAvailableMountSmbfs && programs+=( "smbfs" )
	isAvailableMountSshfs && programs+=( "sshfs" )
	[[ $programs ]] && ArrayDelimit programs " " || echo "none"
}

# protocol
getProtocolArgs() { getPathArg "$@"; }
getProtocolCommand() { getProtocol "$path"; }

# protocols
getProtocolsArgStart() { unset host; }
getProtocolsArgs() { [[ ! $1 ]] && return; ScriptArgGet "host" -- "$@"; }
getProtocolsCommand() { getProtocols "$host"; }

# UNC
getUncArgStart() { unset -v root; }
getUncArgs() { getPathArg "$@"; }
getUncOpt() { getRootOpt "$@"; }
getUncCommand() {	getUnc$root "$path"; }

#
# IsAvailable command
#

isAvailableUsage() { echot "Usage: unc IsAvailable [HOST](localhost)
Return true if the specified HOST is available using the specified protocols.
If no protocols are specified search for a protocol to use.

	-p, --protocol	$(ScriptOptNetworkProtocolUsage)
	-t, --timeout		$(ScriptOptTimeoutUsage)"
}

isAvailableArgStart() { unset -v host; ScriptOptTimeoutArgStart; }
isAvailableOpt() { protocolOpt "$@" || timeoutOpt "$@"; }
isAvailableArgs() { ScriptArgGet "host" -- "$@"; shift; }
isAvailableCommand() { findProtocol "$host"; }

#
# IsMounted Command
#

isMountArgStart() { unset -v isLocal unc user server share dirs mountDir mountRoot mountRootTarget mountRootTargetGio protocol; }
isMountedArgs() { quiet="true" getTargetArg "$@"; }
isMountedCommand() { [[ -e "$mountDir" ]]; }

#
# list command
#

listUsage()
{
	echot "\
Usage: unc list HOST
List UNC shares on the specified host.

	-p, --protocol				$(ScriptOptNetworkProtocolUsage)
	-N, --no-host-check		do not check host availability"
}

listArgStart() { unset -v port protocol; }
listOpt() { protocolOpt "$@"; }
listArgs() { ScriptArgGet "host" -- "$@" && HostAvailable "$host"; }
listCommand() { protocol="${protocol:-smb}"; RunFunction "list${protocol^}"; }
listNfs() { ssh -t "$host" exportfs; }
listSsh() { echo "root"; }

listSmb()
{
	if InPath smbutil; then listSmbUtil
	elif InPath smbclient; then listSmbClient
	else EchoErr "unc: unable to list shares for $host"; return 1
	fi
}

listSmbUtil()
{
	local password; password="$(getPassword)" || return

	if [[ $password ]]; then
		smbutil view "//$USER:$password@$host" | ${G}grep "Disk"
	else
		smbutil view "//$host" | ${G}grep "Disk"
	fi		

}

listSmbClient()
{	
	local password; password="$(getPassword)" || return

	# smbclient password prompt will be hidden if output is sent to a pipe
	if [[ $password ]]; then
		smbclient -L $host -U$USER%$password | ${G}grep -v "tdb_new_database" | ${G}grep -v "option is deprecated"
	else
		smbclient -L $host -U$USER
	fi		
}

#
# mount command
#

mountUsage()
{
	echot "Usage: unc mount UNC
Mount the specified UNC and return the mounted path.

	-ar, --allow-root				allow root to access the share (for all shares)
	-i,  --ip								mount using the server IP address
	-N,  --no-host-check		do not check host availability
	-P,  --program cifs|gio	use the specified SMB mounting program, cifs is preferred (faster)
	-p,  --protocol					$(ScriptOptNetworkProtocolUsage)
	-t,  --timeout					$(ScriptOptTimeoutUsage)"
}

mountArgStart()
{
	unset -v allowRoot ip noHostCheck port program protocol; ScriptOptTimeoutArgStart
	unset -v isLocal unc user server share dirs mountDir mountRoot mountRootTarget mountRootTargetGio protocol
}

mountArgs() { getTargetArg "$@"; }

mountOpt() 
{	
	protocolOpt "$@" && return
	timeoutOpt "$@" && return
	case "$1" in
		--allow-root|-ar) allowRoot="--allowRoot";;
		--ip|-i) ip="--ip";;
		--no-host-check|-N) noHostCheck="--no-host-check";;
		--program|--program=*|-P|-P=*) ScriptOptGet "program" "$@"; program="$(LowerCase "$program")"; [[ "$program" == @(cifs|gio) ]] || usage;;
		*) return 1
	esac
}

mountCommand()
{
	local result

	# return if mounted
	isMountedCheck "$unc" && return

	# ensure server is available
	if ! findProtocol "$server"; then
		[[ ! "$quiet" ]] && ScriptErr "host '$server' is not available"
		return 1
	fi
	log1 "connection will use '$(protocolDesc "$protocol" "$server")' protocol"

	# remove an existing share in the mountRoot
	unmount

	# determine mount program from protocol (nfs|rclone|smb|ssh|INTEGER)
	if [[ "$protocol" == @(nfs|rclone|ssh) ]] && RunFunction isAvailableMount "$protocol"; then mountProgram="$protocol"
	elif [[ "$protocol" == "smb" ]] && isAvailableMountDrvfs && { isWslShare || IsPlatform wsl1; }; then mountProgram="drvfs" 																					# SMB drvfs (WSL 1)
	elif [[ "$protocol" == "smb" ]] && isAvailableMountSmbfs; then mountProgram="smbfs"																																									# SMB smbfs (macOS)
	elif [[ "$protocol" == "smb" ]] && isAvailableMountCifs && { [[ "$program" == @(|cifs) ]] || ! isAvailableMountGio; }; then mountProgram="cifs"	# SMB cifs (Linux, faster)
	elif [[ "$protocol" == "smb" ]] && isAvailableMountGio; then mountProgram="gio"																																											# SMB gio	(Linux)
	else ScriptErr "no mounting protocol available for '$unc' protocol '$protocol'"; return 1
	fi

	# create the mount directory
	if [[ "$mountProgram" != @(gio) && ! -d "$mountRoot" ]]; then
		log1 "creating mount root directory '$mountRoot'"
		! ${G}mkdir "$mountRoot" --parents && { ScriptErr "could not create the mount root directory '$mountRoot'"; return 1; }
	fi

	# mount - ignore errors to cleanup
	RunFunction mount "$mountProgram"

	# return the mounted directory	
	isMountedCheck "$unc" && return

	# mount failed, cleanup 
	[[ ! $quiet ]] && { ScriptErr "unable to mount UNC '$unc'"; }
	unmount; return 1
}

mountRclone() { RunLog rclone mount "$server:$share/$dirs" "$mountRoot" --daemon; return 0; }

mountCifs()
{
	# create the fstab line - spaces in the share and mount directory must be quoted using \044
	local quote='\\040' quoteCheck='\040'
	local shareQuoted; shareQuoted="$(ReplaceString "$share" " " "$quote")" || return
	local mountRootQuoted; mountRootQuoted="$(GetRealPath "$mountRoot" | ReplaceString " " "$quote")" || return
	local domain; IsInDomain && domain=",domain=$(GetDomain)"
	local line="//$server/$shareQuoted $mountRootQuoted cifs username=$user$domain,noauto,rw,users 0 0"
	local checkLine="//$server/$shareQuoted\\\$* $mountRootQuoted cifs username=$user,noauto,rw,users 0 0"

	# add an entry to /etc/fstab so sudo is not required to write to the share
	if ! ${G}grep -i "$checkLine" "/etc/fstab" >& /dev/null; then
		sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
	fi

	# password
	local password; password="$(getPassword)" || return
	local passwordHidden passwordVar; [[ $password ]] && passwordHidden="HIDDEN" passwordVar="PASSWD=$password"

	# options - mount.cifs password option does not work (WSL 2)
	local options="user=$user$domain,sec=ntlmsspi"

	# mount elevated
	if ! IsPlatform wsl1 && elevateCheck; then	
		[[ $password ]] && elevateSet --sensitive --no-quote || elevateSet "--no-hide"
		log1 "mount: $elevate PASSWD="$passwordHidden" mount.cifs //$server/$share $mountRoot -o $options"
		$elevate $passwordVar mount.cifs "//$server/$share" "$mountRoot" $options

	# mount with a password
	elif [[ $password ]]; then
		log1 "mount: PASSWD="$passwordHidden" mount.cifs //$server/$share $mountRoot -o $options"
		PASSWD="$password" mount.cifs "//$server/$share" "$mountRoot" -o $options

	# mount without a password - can't use PASSWD="" prefix as that is treated as an empty password
	else
		RunLog mount.cifs "//$server/$share" "$mountRoot" -o $options
	fi		

	return 0
}

mountDrvfs()
{
	# required if DNS name is not available in Windows 
	server="$(GetIpAddress "$server")" || return

	# drvfs requires an existing connection to the share
	if ! net.exe use | RemoveCarriageReturn | ${G}grep --quiet '\\\\'"$server"'\\'; then
		local password; password="$(getPassword)" || return
		log1 "mount: net.exe use "'\\\\'"$server\\IPC$ /USER:$user HIDDEN"
		net.exe use '\\'"$server"'\IPC$' /USER:$user "$password" || return
	fi

	# mount
	RunLog sudoc mount -t drvfs "//$server/$share" "$mountRoot"

	return 0
}

mountGio()
{
	# password
	local password; password="$(getPassword)" || return
	local passwordHidden passwordVar; [[ $password ]] && passwordHidden="HIDDEN" passwordVar="PASSWD=$password"

	# check if already mounted but no link exists
	[[ -d "$mountRootTargetGio" ]] && { mountGioLink; return; } 

	# allow root
	[[ $allowRoot ]] && { setAllowRootTrueCommand || return; }

	# mount
	local unc="smb://$server/$share"
	local domain; IsInDomain && domain="$(GetDomain)"
	log1 "mount: echo -e $user\n$domain\n$passwordHidden | gio mount $unc"
	echo -e "$user\n$domain\n$password\n" | gio mount "$unc" > /dev/null || { log1 "mount: gio mount failed"; return 1; }

	# wait for the target to exist
	local seconds=4 args=(); [[ ! $verbose ]] && args+=(--quiet)
	FileWait "${args[@]}" "$mountRootTargetGio" $seconds || { log1 "mount: gio mount did not create '$mountRootTargetGio' in $seconds seconds"; return 1; }

	# link
	mountGioLink || return
}

mountGioLink() { ln -s "$mountRootTargetGio" "$mountRoot"; }

mountNfs()
{
	local options=(); IsPlatform win && options+=( -o nolock )
	RunLog mount "${options[@]}" -t nfs "$server:/$share" "$mountRoot"
	return 0
}

mountSmbfs()
{
	local password; password="$(getPassword)" || return

	# options
	# nobrowse - don't show share on the Desktop
	# nodatacache - prevent caching of file data
	# nomdatacache - prevent caching of file metadata (i.e. file modification time, stat gets current file modification time for 30 seconds if time modified on server)
	# forcenewsession, -s - force a new session to be created on the server
	local options="nobrowse"
	#options+=",nomdatacache,nodatacache"

	# mount - don't log passwords
	log1 "mount: mount_smbfs -s -o $options \"smb://$user:HIDDEN@$server/$share\" \"$mountRoot\""
	mount_smbfs -o "$options" "smb://$user:$password@$server/$share" "$mountRoot"
}

mountSsh()
{
	local portArg; IsInteger "$protocol" && portArg=(-p "${protocol}")
	local prefix; IsPlatform qnap && prefix="sudo"
	[[ "$share" == "root" ]] && share=""
	RunLog $prefix sshfs -o reconnect -o allow_other -o follow_symlinks "$user@$server:/$share" "$mountRoot" "${portArg[@]}"
	return 0
}

#
# set commands
#

setUsage() { echot "\
Usage: unc set [OPTION]... [COMMAND]...
Set information.

	allow		set information about who is allowed to see GVFS mounted shares"
}

setCommand() { usage; }

setAllowUsage()
{
 echot "\
Usage: unc set allow other|root [true|false](true)
Set who is allowed to see GVFS mounted shares.

	other		allow other users to access GVFS shares in /etc/fuse.conf
	root		root is allowed to access GVFS shares"
}

setAllowCommand() { usage; }

setAllowOtherCommand() { setAllowOtherTrueCommand; }
setAllowOtherFalseCommand() { { ! isAvailableMountGio || ! getAllowOtherCommand; } && return; sudoc sed -i -e 's/user_allow_other/#user_allow_other/' "/etc/fuse.conf"; }
setAllowOtherTrueCommand() { { ! isAvailableMountGio || getAllowOtherCommand; } && return; sudoc sed -i -e 's/#user_allow_other/user_allow_other/' "/etc/fuse.conf"; }

setAllowRootCommand() { setAllowRootTrueCommand; }
setAllowRootFalseCommand() { ! getAllowRootCommand && return; fuseRestart; }
setAllowRootTrueCommand() {	getAllowRootCommand && return; setAllowOtherTrueCommand && fuseRestart -o allow_root; }

#
# share commands
#

shareUsage() { echot "Usage: unc share [exists]\nUNC share commands."; }
shareCommand() { shareExistsCommand; }

shareExistsUsage() { echot "Usage: unc share exists SHARE\nReturn true if the share exists."; }
shareExistsArgs() { ScriptArgGet "share" -- "$@"; }
shareExistsCommand() { IsPlatform win && { shareExistsWin; return; }; RunPlatform shareExists; } # do not allow shareExistsDebian to run for win
shareExistsDebian() { ${G}grep --quiet "\[${share}\]" "/etc/samba/smb.conf";  }
shareExistsMac() { sharing -l | "${G}grep" --quiet "^name:.*${share}$"; }
shareExistsWin() { net.exe share | grep --quiet "^${share} "; }

#
# unmount command
#

unmountUsage() { echot "Usage: unc unmount TARGET|all
Unmount the specified target UNC or path, or all mounted UNCs."; }

unmountArgStart() { unset -v isLocal unc user server share dirs mountDir mountRoot mountRootTarget mountRootTargetGio protocol; }

unmountArgs()
{ 
	[[ "$1" == "all" ]] && { shift=1; unc="all"; return; }
	getTargetArg "$@"
}

unmountCommand() { [[ "$unc" == "all" ]] && { unmountAll; return; } || unmount; }

unmountAll()
{
	# mac
	[[ $force ]] && IsPlatform mac && { sudoc umount "$volumeDir/"*; rmdir "$volumeDir/"*; }

	# find mounted directories - direct call to getUncMounts does not work with --elevate
	local dir dirs; IFS=$'\n' dirs=( $(unc get mounts $elevateArg "${globalArgs[@]}") ) || return
	[[ ! $dirs ]] && return

	# unmount
	local fail=0 message isLocal # we found all mounted shares, so none of them are local
	log "unmounting..."
	for dir in "${dirs[@]}"; do
		log "$(GetFileName "$dir")..."; [[ $verbose ]] && echo

		# remove dead links
		if [[ -L "$dir" && ! -e "$dir" ]]; then
			message="$(rm "$dir" 2>&1)" || { (( ++fail )); echo; EchoErr "$message"; }
			continue
		fi

		# get target information and unmount
		getTargetArg "$dir" || return
		message="$(unmount 2>&1)" || { (( ++fail )); echo; EchoErr "$message"; }

	done
	log "done\n"

	return $fail
}

#
# mount/unmount helper
#

# unmount - unmount and cleanup dir (the mounted directory)
#   The mounted directory may be in an invalid state, and normal file operations on it will fail.
#   To test with a share in an invalid state, mount an SSHFS share, logout and reconnect.  ls "$mountRoot" will error with:
#   "ls: cannot access rosie.hagerman.butare.net_root: Input/output error"
unmount()
{
	local output="/dev/null"; [[ $verbose ]] && output="/dev/stderr"
	local forceArg; [[ $force ]] && forceArg="--force"

	# return for local mounts
	[[ $isLocal ]] && return

	# gio unmount
	[[ -L "$mountRoot" || -d "$mountRootTargetGio" ]] && { unmountGio; return; }

	# standard unmount
	unmountStandard || return
}

unmountGio()
{
	# unmount gio
	if [[ -d "$mountRootTargetGio" ]]; then 
		gio mount --unmount $forceArg "smb:$unc" >& "$output"
		! FileWaitDelete "$mountRootTargetGio" 2 && { unmountProcessShow "$mountRootTargetGio"; return; }
	fi

	# remove link
	[[ -L "$mountRoot" ]] && { RunLog2 rm "$mountRoot" && return; }

	# check for local files
	unmountLocalFiles "$mountRoot"
}

unmountStandard()
{
	# cleanup the mount directory
	mountDirCleanup "$mountRoot" >& "$output" && return
	
	# unmount - ignore errors
	if [[ ! $isGio ]]; then
		case "$PLATFORM_OS" in
			linux|win) unmountStandardLinux "$mountRootTarget" >& "$output";;
			mac) unmountStandardMac "$mountRootTarget" >& "$output";;
		esac
	fi

	# cleanup the mount directory again
	mountDirCleanup "$mountRoot" >& "$output" && return

	# failed, final messages
	unmountLocalFiles "$mountRoot" && unmountProcessShow "$mountRootTarget"
}

unmountStandardLinux()
{
	local dir="$1" args=(); [[ $force ]] && args+=(-f)	
	RunLog $elevate umount "${args[@]}" "$dir"

	# shares mounted as root can only be removed by root
	if ! mountDirCleanup "$dir"; then
		RunLog sudo umount "${args[@]}" "$dir"
	fi
}

unmountStandardMac()
{
	local dir="$1" args=(); [[ $force ]] && args+=(force)
	RunLog diskutil unmount "${args[@]}" "$dir"
}

# unmountLocalFiles DIR - show unmount error if DIR is a local drive
unmountLocalFiles()
{
	local dir="$1"
	! drive IsMounted "$dir" --quiet && return
	ScriptErr "unable to unmount '$dir', it contains local files, try -ff to blindly remove those files"
	return 1
}

# unmountProcessShow - show processes in use
unmountProcessShow()
{
	local dir="$1"
	[[ $quiet ]] && return 1

	# show unable to unmmount message
	ScriptErr "unable to unmount '$dir', try --force"

	# show processes in use
	local processes; processes="$(FileGetProcessesUsing "$dir")" || return
	[[ ! $processes ]] && return
	log1 "blocking processes for '$dir': $processes"
	EchoErr "The following processes are preventing '$dir' from being unmounted:"; ps -p $processes

	return 1
}

mountDirCleanup()
{
	local dir="$1"

	# remove directory - ignore errors
	[[ -d "$dir" ]] && RunLog2 rmdir "$dir"

	# remove directory and files - ignore errors
	(( forceLevel >= 2 )) && RunLog2 rm -fr $dir

	# validate removal
	! mountDirExists "$dir"
}

# mountDirExists DIR - return true if the specified mounted directory exists
mountDirExists()
{
	local dir="$1"

	# remove directories, i.e. /home/jjbutare/Volumes/server_share/dir1/dir2 -> /home/jjbutare/Volumes/server_share	
	dir="$(pathRoot "$dir")" || return 

	# return if the directory exists
	[[ -e "$dir" ]] && return

	# remove volumeDir path, i.e. /home/jjbutare/Volumes/server_share -> server_share
	local mountDir=

	# check if the mount directory does not exist by looking at the files in the directory
	# as ls "$dir" and "-e $dir" may return return false if the share is in an invalid state
	command ls -1 "$volumeDir" |& ${G}grep -q "^"$(GetFileName "$dir")"$"
}

#
# argument Helpers
#

getPathArg() { ScriptArgGet "path" -- "$@" && ScriptCheckPath "$path"; }
getUncArg() { ScriptArgGet "unc" -- "$@" && ScriptCheckUnc "$unc"; }
getRootOpt() { [[ "$1" == @(-r|--root) ]] && root="Root"; }

# getTargetArg - get target that is either a UNC or a path that is a mounted UNC.  Sets target and unc on return.
getTargetArg()
{
	ScriptArgGet --required "target" -- "$@"

	# target is a mounted file or directory
	if [[ -e "$target" ]]; then		
		[[ "$target" =~ _elevated ]] && elevateArg="--elevated" && elevateSet
		unc="$(getUnc "$target")" && getUncInfo "$unc"; return; 
	fi

	# target is a UNC
	validateUnc "$target" && getUncInfo "$target"
}

#
# protocol helper
#

# findProtocol HOST - find a file sharing protocol for HOST, sets protocol variable to smb|nfs|ssh|rclone.
findProtocol()
{
	local host="$1"

	# do not check protocol port on host, defaults to SMB protocol
	if noHostCheck; then
		[[ ! $protocol ]] && { log1 "findProtocol: protocol defaulting to smb"; protocol="smb"; }
		log1 "findProtocol: not checking host '$host' protocol '$protocol'"
		return
	fi

	log1 "findProtocol: host='$host'"

	# Synology SMB mount.cifs does not work, use sshfs
  IsPlatform synology && [[ "$protocol" == @(|smb) ]] && protocol="ssh"

	# if a specific protocol was requested check it
	[[ $protocol ]] && { isAvailable "$host" "$protocol"; return; }

	# find a protocol to connect to the host
	isAvailable "$host" "smb" || isAvailable "$host" "nfs" || isAvailable "$host" "ssh" || isAvailable "$host" "rclone"
}

getPort()
{
	local protocol="$1" host="$2"

	case "${protocol:-smb}" in
		nfs) echo "111";; # 111 and 2049 
		smb) echo "445";; # 135 and 445
		ssh) SshHelper config get "$host" port;;
		*) IsInteger "$protocol" && echo "$protocol" || echo ""
	esac
}

#
# helper
#

protocolOpt() { [[ "$1" == @(--protocol|--protocol=*|-p|-p*) ]] && ScriptOptNetworkProtocol "$@"; }
timeoutOpt() { [[ "$1" == @(--timeout|--timeout=*|-t|-t=*) ]] && ScriptOptTimeout "$@"; }

log() { [[ $quiet ]] && return; printf "$@"; }
noHostCheck() { [[ $noHostCheck ]] || isWslShare; }
isWslShare() { [[ "$server" == @(wsl|wsl.localhost) ]]; }
validateUnc() { IsUncPath "$1" && return; ScriptErrQuiet "'$1' is not a UNC"; ScriptExit; }

# checkElevation - check if the mountRoot directory requires elevation
# - in WSL 2 mounted network shares are not visible when not elevated, so
#   must mount them to a distinct location
checkElevation()
{
	# only wsl2 SMB needs elevation
	{ ! IsPlatform wsl2 || [[ "$protocol" != @(|smb) ]]; } && return

	# assume elevation if the root UNC ends in _elevated or if we are elevated
	{ [[ "$mountRoot" =~ _elevated$ ]] || IsElevated; } && elevateArg="--elevate"

	# return if not elevating
	[[ ! $elevateArg ]] && return

	# mountRoot - append _elevated if needed
	[[ ! "$mountRoot" =~ _elevated$ ]] && mountRoot="${mountRoot}_elevated" 

	# share - remove _elevated
	share="$(RemoveEnd "$share" "_elevated")"

	# set elevation command
	elevateSet || return

	# logging
	log2 "UNC share '$mountRoot' uses an elevated administrator token"			
}

elevateCheck() { [[ $elevateArg ]] && ! IsElevated ; }
elevateSet() { ! elevateCheck && return; elevate="RunScript --elevate ${globalArgs[@]} $@ --"; }

fuseRestart()
{
	! isAvailableMountGio && return
	mount | qgrep "gvfs" && { fusermount -zu "$volumeDirGio" || return; }
	ProcessKill "gvfsd-fuse" || return
	"$gvfsDir/gvfsd-fuse" "$@" "$volumeDirGio" || return
}

# getDir UNC - return the mounted path of the UNC, i.e. ~/Volumes/server_share/dir1/dir2
getDir()
{
	local unc="$1"; validateUnc "$unc"
	local dirs="$(GetUncDirs "$unc")"

	# return a local path to this system if possible
	[[ $isLocal && "$share" == @(root) ]] &&  { echo "/$dirs"; return; }

	# WSL shares
	if isWslShare; then
		[[ -d "$mountRoot/tmp" ]] && { echo "$mountRoot/$dirs"; return; }
		return 1
	fi

	# get the mounted root directory of the unc
	local mountRoot; mountRoot="$(getDirRoot "$unc")" || return

	# return the directory
	echo "$mountRoot/$dirs"
}

# getDirRoot UNC - return the root mounted path of the UNC, i.e. ~/Volumes/server_share
getDirRoot()
{
	local root unc="$1"; validateUnc "$unc"

	# ensure the UNC has the fully qualified server name
	# unc="$(GetUncFull $ip "$unc")" || return

	# get the mountDir from the UNC
	local isLocal unc user server share dirs mountDir mountRoot mountRootTarget mountRootTargetGio protocol
	getUncInfo "$unc" || return

	# find the mounted directory - gio mounts
	isAvailableMountGio && [[ -d "$mountRootTargetGio" ]] && [[ -L "$mountRoot" ]] && { echo "$mountRoot"; return; }

	# find the mounted directory - standard mounts
	# - search for mounted UNC types where the destination is the specified dir
	# - do not search for the UNC source as it is different for each protocol and platform.
	#   For example mac includes the username in in the SMB source.

	# findmnt
	if InPath findmnt; then
		root="$($elevate findmnt --target="$mountRootTarget" --output=TARGET --types=$uncTypes --noheadings)" || { notAUncShare "$unc"; return; }

	# df
	elif InPath ${G}df; then # macOS need eval
		root="$(eval $elevate ${G}df -P $uncTypesDf |& ${G}grep " ${mountRootTarget}$" | awk '{print $NF}')" || { notAUncShare "$unc"; return; };

	else
		noUncCommand; return

	fi

	echo "$root"
}

# getPassword - get the share password from the passwordArg, credential store, or prompt for it
getPassword()
{	
	local password

	# passed password
	if [[ $passwordArg ]]; then
		password="$passwordArg"

	# credential store
	elif password="$(getPasswordCredentialStore)" && [[ $password ]] ; then
		:

	# prompt
	else
		PrintErr "Enter SMB password for $user on $server: "
		read -s password; EchoErr; 

	fi

	echo "$password"
}

# getPasswordCredentialStore - get the share password from the credential store
getPasswordCredentialStore()
{
	# try and get the share password
	password="$(credential --quiet get secure default --fallback)"

	# password found
	if [[ $password ]]; then
		log1 "password found in the credential store"; 
		echo "$password"; return
	fi

	# return success - we can prompt for the password when connecting to the share
	[[ ! $noPrompt ]] && return

	# return an error - we are not allowed to prompt for the password when connecting to the share
	ScriptErrQuiet "no password found for '$unc'"
	return 1
}

# getProtocol PATH - the protocol used for the mounted path
getProtocol() 
{
	local path="$1"

	! InPath findmnt && { noUncCommand; return; }

	local type="$(findmnt --target "$path" --output=FSTYPE --noheadings)"

	case "$type" in
		cifs) echo "smb";;
		fuse.sshfs) echo "ssh";;
		fuse.gvfsd-fuse) echo "gio";;
		*) echo "$type";;
	esac
}

# getProtocols [HOST] - return the protocols supported by specified host, or all valid protocols
getProtocols()
{
	[[ ! $host ]] && { echo "nfs smb ssh"; return; }
	
	local hostIp; hostIp="$(GetIpAddress "$host")" || return
	local protocols=() 
	IsAvailablePort "$hostIp" "$(getPort "nfs")" $timeout && protocols+=( "nfs" )
	IsAvailablePort "$hostIp" "$(getPort "smb")" $timeout  && protocols+=( "smb" )
	SshIsAvailablePort "$host" $timeout && protocols+=( "ssh" )

	[[ $protocols ]] && ArrayDelimit protocols " " || echo "none"
}

# getUnc PATH - return the UNC of a mounted path, i.e. //server/share/dir1/dir2
getUnc()
{
	local path; path="$(${G}realpath --canonicalize-missing --no-symlinks "$1")" || return # --no-symlinks for gio paths, --canonicalize-missing for mounted network volumes
	local uncRoot; uncRoot="$(getUncRoot "$path")" || return
	local mountRoot; mountRoot="$(getDirRoot "$uncRoot")" || return
	log2 "getUnc:\n	path=$path\n	uncRoot=$uncRoot\n	mountRoot=$mountRoot"
	echo "${path/$mountRoot/$uncRoot}"
}

# getUncRoot PATH - return the root UNC of a mounted path, i.e. //server/share
getUncRoot()
{
	local uncRoot path="$1"; path="$(GetFullPath "$1")" || return

	# gio - format $volumeDirGio/smb-share:server=SERVER,share=SHARE/...
	if isAvailableMountGio && echo "$path" | qgrep "^$volumeDirGio"; then
		echo "//$(GetGioServer "$path")/$(GetGioShare "$path")"
		return
	fi

	# use findmnt
	if InPath findmnt; then 
		uncRoot="$($elevate findmnt --target "$path" --output=SOURCE --types=$uncTypes --noheadings)" || { notAUncShare "$path"; return; }

	# use df
	elif InPath ${G}df; then
		local check; check="$(pathRoot "$path")" || return
		uncRoot="$($elevate ${G}df -P |& ${G}grep " ${check}$" | awk '{print $1}')" || { notAUncShare "$path"; return; }
	else 
		noUncCommand; return
	fi

	# convert escapes, i.e. %24 -> $, macOS gdf shows c$ share as c%24
	uncRoot="$(echo $uncRoot | sed 's/%24/$/g')"

	# no other changes for cifs, i.e. //nas3/public->no change
	[[ "$uncRoot" =~ //.* ]] && { echo "$uncRoot"; return; } 

	# update UNC for CryFS, i.e. cryfs@/path/to/dir -> //cryfs/path/to/dir
	[[ "$uncRoot" =~ cryfs@.* ]] && uncRoot="//cryfs$(RemoveBefore "$uncRoot" "@")"

	# update UNC for sshfs, i.e. jjbutare@nas3:/tmp->//nas3/tmp jjbutare@nas3:/->//nas3/root
	[[ "$uncRoot" =~ .*:.* ]] && uncRoot="//$(RemoveBefore "$uncRoot" "@" | RemoveChar :)"

	# add default share (/root) if needed
	[[ "$(GetUncShare "$uncRoot")" == "" ]] && uncRoot="${uncRoot}root"

	echo "$uncRoot"
}

# getUncInfo UNC - UNC format is //[USER@]SERVER/SHARE[/DIRS]
# sets: isLocal unc user server share dirs mountDir mountRoot mountRootTarget mountRootTargetGio protocol
#   - parsed from UNC: unc user server share dirs
#   - isLocal: set if the UNC refers to a local share
#   - mountRoot: the root directory for the mounted volume, i.e. ~/Volumes/$server_$share
#     In Windows shares created when elevated will end in _elevated.
#   - mountRootTarget: the actual mounted target of the mountRoot, i.e. for gifs /run/user/1000/gvfs/...
#   - mountRootTargetGio: the gio mount root
#   - mountDir: the full path to the mounted directory, i.e. $mountRoot/$dirs
getUncInfo()
{	
	unc="$1"; validateUnc "$unc" || return

	unc="$(GetUncFull "$unc" $ip)" || return # return the UNC with server fully qualified domain name or an IP
	GetUncServer "$unc" server || return; [[ ! $server ]] && { ScriptErr "UNC '$unc' does not include a server"; return 1; }
	GetUncUser "$unc" user; [[ ! $user ]] && { user="$(SshUser "$server")" || return; }
	GetUncShare "$unc" share "root" || return
	GetUncDirs "$unc" dirs || return
	GetUncProtocol "$unc" protocol "$protocol" || return

	# determine if the UNC refers to a share on this host
	isLocal=""; IsLocalHost "$server" && isLocal="true"

	# mountRoot - the root directory for the mounted volume without problematic directory characters
	# - $ for Windows hidden shares, i.e. c$ -> c
	mountRoot="$(echo "$volumeDir/${server}_${share}" | RemoveChar '$')"

	# mountRootTarget - the actual mounted target of the mountRoot, i.e. for gio /run/user/1000/gvfs/...
	mountRootTarget="$(GetFullPath "$mountRoot")" # resolve links

	# mountRootGio: the gio mount root if it is mounted - always set even if not mounted
	isAvailableMountGio && mountRootTargetGio="$volumeDirGio/smb-share:server=$server,share=$share"

	# determine if using elevation
	checkElevation || return

	# mountDir is the full path to the mounted directory
	mountDir="$mountRoot"; [[ $dirs ]] && ! IsRcloneRemote "$server" && mountDir="$mountDir/$dirs"

	# MDNS name resolution - Windows does not resolve MDNS natively	
	IsPlatform win && IsMdnsName "$server" && { server="$(MdnsResolve "$server")" || return; }

	# log
	[[ ! $getUncInfoLogged ]] && log2 "getUncInfo:\n	unc='$unc'\n	user=$user protocol=$protocol server=$server share='$share' dirs='$dirs'\n	mountRoot='$mountRoot'\n	mountRootTarget='$mountRootTarget'\n	mountRootTargetGio='$mountRootTargetGio'\n	mountDir='$mountDir'"
	getUncInfoLogged="true"

	return 0
}

initVolumeDir()
{
	[[ -d "$volumeDir" ]] && return
	! ${G}mkdir "$volumeDir" && { ScriptErr "could not create the volume directory $volumeDir"; return 1; }
	return 0
}

# isAvailable HOST PROTOCOL - return true if file sharing is available to host using protocol.
# - sets protocol variable
isAvailable()
{	
	local host="$1" protocolArg="$2"
	local port="$(getPort "$protocol" "$host")"

	# find program for protocol
	local program
	case "$protocolArg" in
		nfs) program="mount.nfs";;
		ssh) program="sshfs";;
		rclone) program="rclone";;
	esac

	# use sshfs if the port is numeric
	IsInteger "$protocolArg" && program="sshfs"

	# ensure mount program exists - assume host can mount SSH
	if [[ $program ]] && ! InPath "$program"; then
		log1 "$protocol protocol unavailable ($program not installed)"
		return 1
	fi

	# set the protocol
	protocol="$protocolArg"

	# return if not checking host availability
	noHostCheck && return

	# find check command
	local check="IsAvailablePort $host $port $timeout"; [[ "$protocol" == "rclone" ]] && check="IsRcloneRemote $host"
		
	# logging
	if [[ $verbose ]]; then
		PrintErr "$(ScriptPrefix)checking $host $(protocolDesc "$protocol" "$host") protocol..."
		IsAvailablePort "$host" "$port" $timeout && EchoErrEnd "available" || EchoErrEnd "not available"
	fi

	# check host availability for protocol
	eval "$check"
}

# isAvailableMount
isAvailableMountCifs() { InPath mount.cifs && IsPlatform linux,wsl2 && ! IsPlatform rhel; }
isAvailableMountDrvfs() { IsPlatform wsl; }
isAvailableMountGio() { InPath gio && [[ -f "/etc/fuse.conf" && -f "$gvfsDir/gvfsd-fuse" && -f "$gvfsDir/gvfsd-smb" ]]; }
isAvailableMountNfs() { InPath mount.nfs; }
isAvailableMountRclone() { InPath rclone; }
isAvailableMountSmbfs() { InPath mount_smbfs && IsPlatform mac; }
isAvailableMountSshfs() { InPath sshfs; }

# isMountedCheck UNC - if the UNC is mounted show it's path and return true
isMountedCheck()
{
	local unc="$1"

	local dir; dir="$(quiet="true" getDir "$unc")"
	local result="$?"

	logMounted "$result" "$unc"
	(( $result == 0 )) && echo "$dir"
	(( $result == 0 ))
}

logMounted()
{
	local result="$1" target="$2"
	[[ ! $verbose ]] && return
	local not; [[ "$result" != "0" ]] && not=" not"
	log1 "'$target' is$not mounted"
}

notAUncShare()
{
	[[ ! "$quiet" ]] && ScriptErr "'$1' is not on a UNC share"
	return 1
}

noUncCommand()
{
	[[ ! "$quiet" ]] && ScriptErr "no UNC commands available (findmnt or df)"
	return 1
}

# pathRoot PATH - return the root of specified path, i.e. /home/jjbutare/Volumes/pi1_root/tmp -> /home/jjbutare/Volumes/pi1_root
pathRoot()
{
	local check
	check="$(GetFullPath "$1")" || return
	check="$(RemoveFront "$check" "$volumeDir/")"
	echo "$volumeDir/${check%%/*}"
}

protocolDesc()
{
	local protocol="$1" host="$2"
	local desc="$protocol"; IsInteger "$protocol" && desc="ssh"
	echo "$desc (port $(getPort "$protocol" "$host"))"
}

ScriptRun "$@"
