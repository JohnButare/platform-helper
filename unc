#!/usr/bin/env bash
. script.sh || exit

run() {	init && args "$@" && "${command}Command" "${args[@]}"; }

init()
{
	volumeDir=~/"Volumes"

	if ! [[ -d "$volumeDir" ]] && ! ${G}mkdir "$volumeDir"; then
		EchoErr "Could not create the volume directory $volumeDir"
		return 1
	fi

	return 0
}

usage()
{
	ScriptUsage "$1" "\
Usage: unc mount|unmount|IsMounted UNC|all
Mount network volumes using UNC (Universal Naming Convention) format.
UNC is a server, share, and optional directory in the format //server/share/dir.

	browse									browse the UNC shares on the network
	get root|share|unc FILE	get information about the specified mounted location
	IsUnc FILE							return true if the specified file is a mounted UNC
	list HOST								list UNC disks on the host
	mounts									return all mounted shares

	-q, --quiet						hide status messages"
	exit $1
}

args()
{
	unset -v command quiet unc

	# commands
	ScriptCommand "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do		
		case "$1" in "") : ;;
			-h|--help) usage 0;;
			-q|--quiet) quiet="--quiet";;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"
	getUncArg "$1" || return; shift "$shift"
	[[ $@ ]] && usage

	return 0
}

needsUnc() { [[ "$command" == @(IsMounted|mount|unmount) ]]; }

getUncArg()
{
	shift=0; ! needsUnc && return
	((++shift))

	# unc
	IsUncPath "$1" && { getUncInfo "$1"; return; }

	# unc is "all" - for unmount
	[[ "$command" == "unmount" && "$1" == "all" ]] && { unc="all"; return; }

	# unc is a mounted file or directory
	[[ -e "$1" ]] && { file="$1"; unc="$(getUncCommand)"; getUncInfo "$unc"; return; }

	MissingOperand "unc"
}

#
# Get Commands
#

getUsage()
{
	echot "\
Usage: unc get root|share|unc FILE
Get UNC information about the specified mounted directory.
For the examples below assume //server/share is mounted at 
~/Volumes/server_share and file is ~/Volumes/server_share/dir1/dir2.

	root 		the root directory of the UNC, i.e. ~/Volumes/server_share
	share		the name of the share, i.e. //server/share
	unc			the full UNC associated with the file, i.e. //server/share/dir1/dir2"
}

isUncArgs() { getArgs "$@"; }

getArgs()
{
	IsUncPath "$1" && { file="$1"; ((++shift)); return; }
	ScriptGetPathArg "$1"
}

getCommand() { usage; }

getRootCommand()
{
	IsUncPath "$file" && { echo "$(GetUncRoot "$file")"; return; }

	InPath findmnt && { findmnt --types=cifs --noheadings --output=TARGET --target "$file"; return; }
	InPath df && { df -P "$file" | awk 'END{print $NF}'; return; }
	return 1
}

getShareCommand()
{
	IsUncPath "$file" && { echo "$(GetUncShare "$file")"; return; }

	InPath findmnt && { findmnt --types=cifs --noheadings --output=SOURCE --target "$file"; return; }
	InPath df && { df -P . | awk 'END{print $1}'; return; }
	return 1
}

getUncCommand()
{
	IsUncPath "$file" && { echo "$file"; return; }

	file="$(GetFullPath "$file")" || return
	local root; root="$(getRootCommand)" || return
	local share; share="$(getShareCommand)" || return
	echo "${file/$root/$share}"
}

#
# List Command
#

listArgs()
{
	ScriptGetArg "host" "$1"
	! IsAvailable "$host" && { ScriptErr "$host is not available"; return 1; }
	return 0
}

listCommand()
{
	if InPath smbutil; then
		smbutil view "//$host" | grep "Disk"

	elif InPath smbclient; then
		sudoc smbclient -L $host -U$USER%$(credential -q get secure default) |& grep -v "tdb_new_database" |& grep -v "option is deprecated"

	else
		EchoErr "unc: unable to list shares for $host"
		return 1
	fi
}

#
# Mount Command
#

mountInit() { nfsFs="" noHostCheck="" sshFs=""; }

mountUsage()
{
	echot "\
Usage: unc mount UNC
Mount a UNC share.

	-N, --no-host-check		do not check if the host is available before mounting it
	-n, --nfs							use nfs to mount the share
	-s, --ssh							use sshfs to mount the share"
}

mountOption() 
{
	case "$1" in
		-n|--nfs) nfsFs="true";;
		-N|--no-host-check) noHostCheck="true";;
		-s|--ssh) sshFs="true";;
		*) return 1
	esac
}

mountCommand()
{
	local result

	# return if the directory is already mounted
	unc="$(isMounted)" && { showResult "$unc"; return; }

	# ensure server is available
	if [[ ! $noHostCheck && "$server" != "wsl$" ]] && ! IsAvailable "$server"; then
		[[ ! "$quiet" ]] && ScriptErr "host $server is not available"
		return 1
	fi

	# remove an existing share in the mountDir
	cleanupMountDir "$mountDir" || return

	# create the mount directory
	! ${G}mkdir --parents "$mountDir" && { ScriptErr "could not create the mount directory \`$mountDir\`"; return 1; }

	# mount
	if [[ "$PLATFORM_KERNEL" == "wsl1" || "$server" == "wsl$" ]]; then
		sudoc mount -t drvfs "//$server/$share" "$mountDir" 

	elif [[ $nfsFs ]]; then
		sudo mount -t nfs "$server:/$share" "$mountDir"

	elif [[ $sshFs ]] || IsPlatform synology; then # synology mount.cifs does not work
		[[ "$share" == "root" ]] && share=""
		sshfs -o allow_other "$user@$server:/$share" "$mountDir"

	elif IsPlatform linux,wsl2; then
		local sudo; IsPlatform qnap && sudo="sudoc"

		# add an entry to /etc/fstab so sudo is not required to write to the share		
		if ! grep -i "//$server/$shareId\\\$* $mountDir cifs username=$user,noauto,rw,users 0 0" /etc/fstab >& /dev/null; then
			local line="//$server/$share $mountDir cifs username=$user,noauto,rw,users 0 0"
			sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		local password="$(credential -q get secure default)"

		[[ $password ]] && export PASSWD="$password"
		$sudo mount.cifs "//$server/$share" "$mountDir" -o user=$user sec=ntlmsspi
		[[ $password ]] && unset PASSWD

	elif IsPlatform mac; then
		local password="$(security find-generic-password -gwa $user)"

		if [[ $password ]]; then
			mount_smbfs "smb://$user:$password@$server/$share" "$mountDir"
		else
			mount_smbfs "smb://$user@$server/$share" "$mountDir"
		fi

	fi

	# return the mounted directory
	if isMounted; then
		return 0
	else
		cleanupMountDir
		return 1
	fi
}

#
# commands
#

isMountedCommand() { isMounted; }
isUncCommand() { [[ $(getRootCommand) ]]; }

mountsCommand() { findmnt --type=cifs,nfs,sshfs --noheadings --output=TARGET | grep "$volumeDir"; }

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { EchoErr "unc: unable to browse the network"; return 1; }
	sudoc smbtree
}

unmountCommand()
{
	[[ "$unc" != "all" ]] && { doUnmount; return; }

	IFS=$'\n' mountDirs=( $(unc mounts) )
	[[ ! $mountDirs ]] && return

	log "unmounting..."
	for mountDir in "${mountDirs[@]}"; do
		log "$(GetFileName "$mountDir")..."; doUnmount || return
	done
	log "done\n"
	
	return 0
}

#
# Helper Functions
#

doUnmount() { platformUnmount; cleanupMountDir; }
log() { [[ $quiet ]] && return; printf "$@"; }
showResult() { [[ $1 && ! $quiet ]] && echo "$1"; [[ $1 ]]; }

cleanupMountDir()
{
	[[ ! -e "$mountDir" ]] && return
	findmnt "$mountDir" >& /dev/null && platformUnmount >& /dev/null
	rmdir "$mountDir" >& /dev/null
	[[ ! -e "$mountDir" ]]
}

isMounted()
{
	local unc prefix; IsPlatform mac && prefix="$user@"

	# server is local and we can determine the full path to the locaL directory
	IsLocalHost "$server" && [[ "$share" == "root" ]] && { showResult "/$dirs"; return; }

	# check for an SMB share
	unc="$(mount | grep "^//$prefix${server%%.*}.*/$shareId\\\$* on " | head -n 1 | cut -d" " -f 3)"

	# check for an NFS share
	if [[ ! $unc ]]; then
		unc="$(mount | grep "^${server%%.*}.*:/$shareId$* on " | head -n 1 | cut -d" " -f 3)"
	fi

	# check for an sshfs share
	if [[ ! $unc ]]; then
		[[ "$shareId" == "root" ]] && shareId=
		unc="$(mount | grep "^$user@$server:/$shareId on " | head -n 1 | cut -d" " -f 3)"
	fi		
	
	[[ $unc && $dirs ]] && unc="$unc/$dirs"

	showResult "$unc"
}

platformUnmount()
{
	case "$PLATFORM" in
		mac) osascript -e "tell application \"Finder\"" -e "eject \"$(GetFileName "$mountDir")\"" -e "end tell";;
		linux|win) sudoc umount "$mountDir";;
	esac
}

getUncInfo() # GetUncInfo unc - sets server share shareId dirs user mountDir
{
	unc="$1"; [[ ! $unc ]] && return 1
	GetUncServer "$unc" server; IsPlatform win && IsLocalAddress "$server" && { server="$(MdnsResolve "$server")" || return; }
	GetUncShare "$unc" share; [[ ! $share ]] && share="root" ; shareId="${share%%\$}"
	GetUncDirs "$unc" dirs
	user="$USER"; [[ "$HOSTNAME" =~ (^nas.?.?$)  && "$user" == "admin" ]] && user="jjbutare"
	mountDir="$volumeDir/${server}_${shareId}"

	# in WSL 2 mounted network shares are not present when elevating so mount them to a distinct location so they do not interfere with each other
	IsPlatform wsl2 && IsElevated && mountDir="${mountDir}_elevated" 

	return 0
}

run "$@"
