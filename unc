#!/usr/bin/env bash
. function.sh

run() {	init || return; args "$@" || return; ${command}Command "${args[@]}"; }

init()
{
	volumeDir=~/"Volumes"

	if ! [[ -d "$volumeDir" ]] && ! ${G}mkdir "$volumeDir"; then
		EchoErr "Could not create the volume directory $volumeDir"
		return 1
	fi

	return 0
}

usage()
{
	echot "\
usage: unc mount|unmount|IsMounted|mounts UNC
	UNC 		the server, share, and optional directory to mount in the format //server/share/dir, or all (all shares)

	browse									browse the UNC shares on the network
	get	root|share|unc FILE	get the UNC root (i.e. ~/Volumes/public) share or share (i.e. //nas3/public) from a file
	IsMounted	UNC						if UNC is mounted returns DIR mounted to
	IsUnc FILE							return true if the file is on a mounted UNC share
	list HOST								list UNC disks on the host
	mount|unmount UNC				unmount or mount UNC and return DIR mounted

	-nhc, --no-host-check		do not check if the host is available
	-q, 	--quiet						hide status messages

	-n, 	--nfs							use nfs to mount the share
	-s, 	--ssh							use sshfs to mount the share"
	exit $1
}

args()
{
	unset -v command nfsFs noHostCheck quiet sshFs unc

	while (( $# != 0 )); do
		case "$1" in
			-h|--help) usage 0;;
			-nhc|--no-host-check) noHostCheck="true";;
			-s|--ssh) sshFs="true";;
			-n|--nfs) nfsFs="true";;
			-q|--quiet) quiet="--quiet";;
			IsMounted) command="isMounted";; IsUnc) command="isUnc";; ListMounted) command="listMounted";;
			*)
				[[ "$1" == "all" ]] && { all="true"; shift; continue; }
				IsUncPath "$1" && [[ ! $unc ]] && { unc="$1"; shift; getUncInfo "$unc" || return; continue; }
				[[ -e "$1" ]] && isUncCommand "$1" && { unc="$(getCommand unc "$1")"; shift; getUncInfo "$unc" || return; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(get|isUnc|list) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { usage 1; }

	[[ "$command" == @(IsMounted|mount) && ! $unc ]] && MissingOperand "unc"
	[[ "$command" == @(unmount) ]] && ! [[ $all || $unc ]] && MissingOperand "unc"

	args=("$@")
}

#
# commands
#

isMountedCommand() { isMounted; }
isUncCommand() { [[ $(unc get root "$@") ]]; }
mountsCommand() { findmnt --type=cifs,nfs,sshfs --noheadings --output=TARGET | grep "$volumeDir"; }

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { EchoErr "unc: unable to browse the network"; return 1; }
	sudoc smbtree
}

listCommand()
{
	local host="$1"; shift
	[[ ! $host ]] && MissingOperand "host"
	! IsAvailable "$host" && { EchoErr "unc: $host is not available"; return 1; }

	[[ "$#" != "0" ]] && usage

	# browse host	
	if InPath smbutil; then
		smbutil view "//$host" | grep "Disk"

	elif InPath smbclient; then
		sudoc smbclient -L $host -U$USER%$(credential -q get secure default) |& grep -v "tdb_new_database" |& grep -v "option is deprecated"

	else
		EchoErr "unc: unable to list shares off $host"
		return 1
	fi
}

mountCommand()
{
	local result

	# return if the directory is already mounted
	unc="$(isMounted)" && { showResult "$unc"; return; }

	# ensure server is available
	if [[ ! $noHostCheck && "$server" != "wsl$" ]] && ! IsAvailable "$server"; then
		[[ ! "$quiet" ]] && ScriptErr "host $server is not available"
		return 1
	fi

	# remove an existing share in the mountDir
	cleanupMountDir "$mountDir" || return

	# create the mount directory
	! ${G}mkdir --parents "$mountDir" && { ScriptErr "could not create the mount directory \`$mountDir\`"; return 1; }

	# mount
	if [[ "$PLATFORM_KERNEL" == "wsl1" || "$server" == "wsl$" ]]; then
		sudoc mount -t drvfs "//$server/$share" "$mountDir" 

	elif [[ $nfsFs ]]; then
		sudo mount -t nfs "$server:/$share" "$mountDir"

	elif [[ $sshFs ]] || IsPlatform synology; then # synology mount.cifs does not work
		[[ "$share" == "root" ]] && share=""
		sshfs -o allow_other "$user@$server:/$share" "$mountDir"

	elif IsPlatform linux,wsl2; then
		local sudo; IsPlatform qnap && sudo="sudoc"

		# add an entry to /etc/fstab so sudo is not required to write to the share		
		if ! grep -i "//$server/$shareId\\\$* $mountDir cifs username=$user,noauto,rw,users 0 0" /etc/fstab >& /dev/null; then
			local line="//$server/$share $mountDir cifs username=$user,noauto,rw,users 0 0"
			sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		local password="$(credential -q get secure default)"

		[[ $password ]] && export PASSWD="$password"
		$sudo mount.cifs "//$server/$share" "$mountDir" -o user=$user sec=ntlmsspi
		[[ $password ]] && unset PASSWD

	elif IsPlatform mac; then
		local password="$(security find-generic-password -gwa $user)"

		if [[ $password ]]; then
			mount_smbfs "smb://$user:$password@$server/$share" "$mountDir"
		else
			mount_smbfs "smb://$user@$server/$share" "$mountDir"
		fi

	fi

	# return the mounted directory
	if isMounted; then
		return 0
	else
		cleanupMountDir
		return 1
	fi
}

unmountCommand()
{
	[[ ! $all ]] && { doUnmount; return; }

	IFS=$'\n' mountDirs=( $(unc mounts) )
	[[ ! $mountDirs ]] && return

	log "unmounting..."
	for mountDir in "${mountDirs[@]}"; do
		log "$(GetFileName "$mountDir")..."; doUnmount || return
	done
	log "done\n"
	
	return 0
}

#
# Get Commands
#

getCommand()
{
	local command; CheckSubCommand get "$1"; shift
	local file="$1"; shift; [[ ! $file ]] && MissingOperand "file"; 
	[[ $# != 0 ]] && UnknownOption "$1"
	Get${command}Command "$@"
}

GetRootCommand()
{
	InPath findmnt && { findmnt --types=cifs --noheadings --output=TARGET --target "$file"; return; }
	InPath df && { df -P "$file" | awk 'END{print $NF}'; return; }
	return 1
}

GetShareCommand()
{
	InPath findmnt && { findmnt --types=cifs --noheadings --output=SOURCE --target "$file"; return; }
	InPath df && { df -P . | awk 'END{print $1}'; return; }
	return 1
}

GetUncCommand()
{
	IsUncPath "$file" && { echo "$file"; return; }

	file="$(GetFullPath "$file")"
	echo "${file/$(GetRootCommand "$file")/$(GetShareCommand "$file")}"
}

#
# Helper Functions
#

doUnmount() { platformUnmount; cleanupMountDir; }
log() { [[ $quiet ]] && return; printf "$@"; }
showResult() { [[ $1 && ! $all && ! $quiet ]] && echo "$1"; [[ $1 ]]; }

cleanupMountDir()
{
	[[ ! -e "$mountDir" ]] && return
	findmnt "$mountDir" >& /dev/null && platformUnmount >& /dev/null
	rmdir "$mountDir" >& /dev/null
	[[ ! -e "$mountDir" ]]
}

isMounted()
{
	local unc prefix; IsPlatform mac && prefix="$user@"

	# server is local and we can determine the full path to the locaL directory
	IsLocalHost "$server" && [[ "$share" == "root" ]] && { showResult "/$dirs"; return; }

	# check for an SMB share
	unc="$(mount | grep "^//$prefix${server%%.*}.*/$shareId\\\$* on " | head -n 1 | cut -d" " -f 3)"

	# check for an NFS share
	if [[ ! $unc ]]; then
		unc="$(mount | grep "^${server%%.*}.*:/$shareId$* on " | head -n 1 | cut -d" " -f 3)"
	fi

	# check for an sshfs share
	if [[ ! $unc ]]; then
		[[ "$shareId" == "root" ]] && shareId=
		unc="$(mount | grep "^$user@$server:/$shareId on " | head -n 1 | cut -d" " -f 3)"
	fi		
	
	[[ $unc && $dirs ]] && unc="$unc/$dirs"

	showResult "$unc"
}

platformUnmount()
{
	case "$PLATFORM" in
		mac) osascript -e "tell application \"Finder\"" -e "eject \"$(GetFileName "$mountDir")\"" -e "end tell";;
		linux|win) sudoc umount "$mountDir";;
	esac
}

getUncInfo() # GetUncInfo unc - sets server share shareId dirs user mountDir
{
	GetUncServer "$unc" server; IsPlatform win && IsLocalAddress "$server" && { server="$(MdnsResolve "$server")" || return; }
	GetUncShare "$unc" share; [[ ! $share ]] && share="root" ; shareId="${share%%\$}"
	GetUncDirs "$unc" dirs
	user="$USER"; [[ "$HOSTNAME" =~ (^nas.?.?$)  && "$user" == "admin" ]] && user="jjbutare"
	mountDir="$volumeDir/${server}_${shareId}"

	# in WSL 2 mounted network shares are not present when elevating so mount them to a distinct location so they do not interfere with each other
	IsPlatform wsl2 && IsElevated && mountDir="${mountDir}_elevated" 

	return 0
}

run "$@"
