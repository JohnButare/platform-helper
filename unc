#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: unc [explore|mount|unmount|MountWin|UnmountWin|IsMounted|ListMounted|UnMountAll](explore) UNC
	explorer 	mount UNC and open in file explorer
	IsMounted	UNC				if UNC is mounted returns DIR mounted to
	list								list UNC disks on the host
	mount|unmount UNC		unmount or mount UNC and return DIR mounted
	MountWin|UnmountWin	mount or unmount Windows drive letters 
	-q, --quiet					hide status messages"
	exit $1
}

args()
{
	unset -v unc quiet

	while (( $# != 0 )); do
		case "$1" in
			-h|--help) help="--help";;
			-q|--quiet) quiet="--quiet";;

			unmount) command="Unmount";; IsMounted) command="IsMounted";; ListMounted) command="ListMounted";;
			MountWin) command="MountWin";; UnmountWin) command="UnmountWin";; UnMountAll) command="UnMountAll";;
			*)
				IsUncPath "$1" && [[ ! $unc ]] && { unc="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { command="explore"; }
	[[ "$comamnd" == @(UnMount|mount) && ! $unc ]] && MissingOperand "unc"
	args=("$@")
}

listCommand()
{
	local server="$(GetUncServer "$unc")"
	[[ $native ]] && { ls "$server"; return; } || smbutil view "//$server" | grep "Disk"
}

mountCommand()
{
	[[ ! "$(GetUncShare "$unc")" ]] && { EchoErr "unc mount: no share specified"; return 1; }
	[[ $native ]] && { echo "$unc"; return 0; }

	local volumeDir=~/"Volumes"
	if ! [[ -d "$volumeDir" ]] && ! ${G}mkdir "$volumeDir"; then
		EchoErr "Could not create the volume directory $volumeDir"
		return 1
	fi

	# Mount the share
	local noHostCheck; [[ "$1" == "--no-host-check" ]] && { noHostCheck="true"; shift; }
	local dir; dir="$(IsMountedCommand)" && { echo "$dir"; return 0; }
	local server share shareId dirs user; GetUncInfo "$unc"
	local mountDir="$(GetRealPath "$volumeDir/${server}_${shareId}")" result

	if [[ ! $noHostCheck ]] && ! HostUtil available "$server"; then
		[[ ! "$quiet" ]] && EchoErr "Host $server is not available"
		return 1
	fi

	# remove an existing share in the mountDir
	if [[ -d "$mountDir" ]]; then
		umount "$mountDir" >& /dev/null
		rmdir "$mountDir" >& /dev/null
	fi

	if ! ${G}mkdir --parents "$mountDir"; then
		EchoErr "Could not create the mount directory $mountDir"
		return 1
	fi

	if IsPlatform linux; then

		# add an entry to /etc/fstab so sudo is not required to write to the share		
		if ! egrep -i "//$server/$shareId\\\$* $mountDir cifs username=$user,noauto,rw,users 0 0" /etc/fstab >& /dev/null; then
			local line="//$server/$share $mountDir cifs username=$user,noauto,rw,users 0 0"
			sudo bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		local password="$(credential -q get secure default)"

		[[ $password ]] && export PASSWD="$password"
		mount.cifs "//$server/$share" "$mountDir" -o user=$user sec=ntlmsspi
		[[ $password ]] && unset PASSWD

	elif IsPlatform mac; then
		local password="$(security find-generic-password -gwa $user)"

		if [[ $password ]]; then
			mount_smbfs "smb://$user:$password@$server/$share" "$mountDir"
		else
			mount_smbfs "smb://$user@$server/$share" "$mountDir"
		fi

	elif IsPlatform wsl; then
		mkdir -p "$mountDir" || return
		sudo mount -t drvfs "//$server/$share" "$mountDir" 

	fi

	if ! IsMountedCommand; then
		rmdir "$mountDir" > /dev/null;
		return 1
	fi
	return 0
}

UnmountCommand()
{
	[[ "$PLATFORM" == "cygwin" ]] && { echo "$unc"; return 0; }

	local dir; dir="$(IsMountedCommand)" || return 0

	if IsPlatform mac; then
		GetFileName "$dir" dir; osascript -e "tell application \"Finder\"" -e "eject \"$dir\"" -e "end tell"

	elif IsPlatform linux,debian; then
		sudo umount "$dir"
		rmdir "$dir" || return
	fi	
}

GetUncInfo()
{
	GetUncServer "$unc" server
	GetUncShare "$unc" share; shareId="${share%%\$}"
	GetUncDirs "$unc" dirs
	user="$USER"
	[[ "$HOSTNAME" =~ (^nas.?.?$)  && "$user" == "admin" ]] && user="jjbutare"
}

ListMountedCommand()
{
	ls ~/Volumes | sed 's/_/\//g' | awk '{ print "//"$1 }'
}

MountWinCommand()
{
	printf "mounting..."

	for drive in d e f g h; do
		sudo mkdir "/mnt/$drive" || return
		if sudo mount -t drvfs "$drive:" "/mnt/$drive" >& /dev/null; then
			printf "$drive."
		else
			sudo rmdir "/mnt/$drive"
		fi
	done

	echo "done"	
}

UnmountWinCommand()
{
	printf "unmounting..."
	
	for drive in d e f g h; do
		if sudo umount "/mnt/$drive" >& /dev/null; then
			printf "$drive."
			sudo rmdir "/mnt/$drive" >& /dev/null
		fi
	done

	echo "done"
}

UnMountAllCommand()
{
	local shares="$(unc ListMounted)"
	
	[[ ! $shares ]] && return
	
	printf "unmounting..."
	for share in $shares; do
		printf "$share..."
		unc UnMount $share || return
	done
	echo "done"
	
	return 0
}

IsMountedCommand()
{
	[[ $native ]] && { echo "$unc"; return; }

	local server share shareId dirs; GetUncInfo "$unc"
	local prefix=""; [[ "$PLATFORM" == "mac" ]] && prefix="$user@"
	local node="$(mount | egrep "^//$prefix${server%%.*}.*/$shareId\\\$* on " | head -n 1 | cut -d" " -f 3)"

	[[ ! $node ]] && return 1
	[[ $dirs ]] && echo "$node/$dirs" || echo "$node"
}

exploreCommand()
{
	local dir=$(mountCommand) || return
	explore "$dir" || return
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

init()
{
	native=""; IsPlatform cygwin && native="true"
	return 0
}

run "$@"
