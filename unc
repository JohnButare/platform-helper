#!/usr/bin/env bash
. script.sh || exit

run() {	init && args "$@" && "${command}Command" "${args[@]}"; }

init()
{
	volumeDir=~/"Volumes"

	if ! [[ -d "$volumeDir" ]] && ! ${G}mkdir "$volumeDir"; then
		EchoErr "Could not create the volume directory $volumeDir"
		return 1
	fi

	protocolUsage="\
	-p, --protocol=[NFS|SMB|SSH](SMB)
			--port=PORT			port to use for SSH protocol
	-n, --nfs						use NFS to mount the share
	    --smb						use SMB to mount the share
	-s, --ssh						use SSH to mount the share"
}

usage()
{
	ScriptUsage "$1" "\
Usage: unc list|mount|unmount|IsMounted UNC|all
Manipulate network volumes using the UNC (Universal Naming Convention) format.
The UNC format is //[USER@]SERVER/SHARE[/DIRS].

	browse									list UNC shares on the local network
	get root|share|unc FILE	get information about the specified mounted location
	IsUnc FILE							return true if the specified file is a mounted UNC
	mounts									return all mounted shares

	-q, --quiet						hide status messages
	-v, --verbose					show additional status"
}

args()
{
	unset -v command protocol quiet unc verbose

	# commands
	ScriptCommand "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do		
		case "$1" in "") : ;;			
			-h|--help) usage 0;;
			-q|--quiet) quiet="--quiet";;
			-v|--verbose) verbose="--verbose";;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"
	getUncArg "$1" || return; shift "$shift"
	[[ $@ ]] && usage

	return 0
}

#
# Get Commands
#

getVars() { file=""; }

getUsage()
{
	echot "\
Usage: unc get root|share|unc FILE
Get UNC information about the specified mounted directory.

For the examples below assume //server/share is mounted at 
~/Volumes/server_share and file is ~/Volumes/server_share/dir1/dir2.

	root 		the root directory of the UNC, i.e. ~/Volumes/server_share
	share		the name of the share, i.e. //server/share
	unc			the full UNC associated with the file, i.e. //server/share/dir1/dir2"
}

getArgs()
{
	IsUncPath "$1" && { file="$1"; ((++shift)); return; }
	ScriptGetArg "file" "$1"; ScriptCheckPath "$file"
}

getCommand() { usage; }

getRootCommand()
{
	IsUncPath "$file" && { echo "$(GetUncRoot "$file")"; return; }

	InPath findmnt && { findmnt --types=cifs --noheadings --output=TARGET --target "$file"; return; }
	InPath df && { df -P "$file" | awk 'END{print $NF}'; return; }
	return 1
}

getShareCommand()
{
	IsUncPath "$file" && { echo "$(GetUncShare "$file")"; return; }

	InPath findmnt && { findmnt --types=cifs --noheadings --output=SOURCE --target "$file"; return; }
	InPath df && { df -P . | awk 'END{print $1}'; return; }
	return 1
}

getUncCommand()
{
	IsUncPath "$file" && { echo "$file"; return; }

	file="$(GetFullPath "$file")" || return
	local root; root="$(getRootCommand)" || return
	
	local share; share="$(getShareCommand)" || return
	echo "${file/$root/$share}"
}

#
# List Command
#

listtVars() { unset -v port protocol; }

listUsage()
{
	echot "\
Usage: unc list HOST
List UNC shares on the specified host.

$protocolUsage
	-N, --no-host-check					do not check host availability"
}

listOption() { getProtocol "$@"; }

listArgs()
{
	ScriptGetArg "host" "$1"
	! IsAvailable "$host" && { ScriptErr "$host is not available"; return 1; }
	return 0
}

listCommand() { protocol="${protocol:-smb}"; RunFunction "list${protocol^}"; }

listNfs() { ssh -t "$host" sudo exportfs; }
listSsh() { echo "root"; }

listSmb()
{
	if InPath smbutil; then
		smbutil view "//$host" | grep "Disk"

	elif InPath smbclient; then
		sudoc smbclient -L $host -U$USER%$(credential -q get secure default) |& grep -v "tdb_new_database" |& grep -v "option is deprecated"

	else
		EchoErr "unc: unable to list shares for $host"
		return 1
	fi
}

#
# Mount Command
#

mountVars() { unset -v noHostCheck port protocol; }

mountUsage()
{
	echot "\
Usage: unc mount UNC
Mount a UNC share.

$protocolUsage
	-N, --no-host-check					do not check host availability"
}

mountOption() 
{
	getProtocol "$@" && return
	case "$1" in
		-N|--no-host-check) noHostCheck="true";;
		*) return 1
	esac
}

mountCommand()
{
	local result

	# return if the directory is already mounted
	unc="$(isMounted)" && { showResult "$unc"; return; }

	# ensure server is available
	if ! findProtocol "$server"; then
		[[ ! "$quiet" ]] && ScriptErr "host $server is not available"
		return 1
	fi
	[[ $verbose ]] && EchoErr "connection will use $protocol"

	# remove an existing share in the mountDir
	cleanupMountDir "$mountDir" || return

	# create the mount directory
	! ${G}mkdir --parents "$mountDir" && { ScriptErr "could not create the mount directory \`$mountDir\`"; return 1; }

	# mount
	if [[ "$PLATFORM_KERNEL" == "wsl1" || "$server" == "wsl$" ]]; then
		sudoc mount -t drvfs "//$server/$share" "$mountDir" 

	elif [[ "$protocol" == "nfs" ]]; then
		local options=(); IsPlatform win && options+=( -o nolock )
		sudo mount "${options[@]}" -t nfs "$server:/$share" "$mountDir"

	elif [[ "$protocol" == "ssh" ]]; then
		local portArg; [[ $port ]] && portArg=(-p "${port}")
		[[ "$share" == "root" ]] && share=""
		sshfs -o allow_other -o follow_symlinks "$user@$server:/$share" "$mountDir" "${portArg[@]}"

	elif IsPlatform linux,wsl2; then
		local sudo; IsPlatform qnap && sudo="sudoc"

		# add an entry to /etc/fstab so sudo is not required to write to the share		
		if ! grep -i "//$server/$shareId\\\$* $mountDir cifs username=$user,noauto,rw,users 0 0" /etc/fstab >& /dev/null; then
			local line="//$server/$share $mountDir cifs username=$user,noauto,rw,users 0 0"
			sudoc bash -c "echo \"$line\" >> /etc/fstab" || return
		fi

		local password="$(credential -q get secure default)"

		[[ $password ]] && export PASSWD="$password"
		$sudo mount.cifs "//$server/$share" "$mountDir" -o user=$user sec=ntlmsspi
		[[ $password ]] && unset PASSWD

	elif IsPlatform mac; then
		local password="$(security find-generic-password -gwa $user)"

		if [[ $password ]]; then
			mount_smbfs "smb://$user:$password@$server/$share" "$mountDir"
		else
			mount_smbfs "smb://$user@$server/$share" "$mountDir"
		fi

	fi

	# return the mounted directory
	if isMounted; then
		return 0
	else
		cleanupMountDir
		return 1
	fi
}

#
# commands
#

isMountedCommand() { isMounted; }

isuncArgs() { getArgs "$@"; }
isuncCommand() { [[ $(getRootCommand) ]]; }

mountsCommand() { findmnt --type=cifs,nfs,nfs4,sshfs,fuse.sshfs --noheadings --output=TARGET | grep "$volumeDir"; }

browseCommand()
{
	{ IsPlatform win || ! InPath "smbtree"; } && { ScriptErr "unable to browse the network"; return 1; }
	sudoc smbtree
}

unmountCommand()
{
	[[ "$unc" != "all" ]] && { doUnmount; return; }

	IFS=$'\n' mountDirs=( $(unc mounts) )
	[[ ! $mountDirs ]] && return

	log "unmounting..."
	for mountDir in "${mountDirs[@]}"; do
		log "$(GetFileName "$mountDir")..."; doUnmount || return
	done
	log "done\n"
	
	return 0
}

#
# Protocol Helper
#

findProtocol()
{
	local host="$1"

	[[ $noHostCheck || "$server" == "wsl$" ]] && return

	# Synology SMB mount.cifs does not work
  IsPlatform synology && [[ "$protocol" == @(|smb) ]] && protocol="ssh"

	# if a specific protocol was requested check it
	[[ $protocol ]] && { isAvailable "$host" "$protocol"; return; }

	isAvailable "$host" "smb" || isAvailable "$host" "nfs" || isAvailable "$host" "ssh"
}

# isAvailable HOST PROTOCOL - return true if the host is available on the ports required for the protcol
isAvailable()
{
	local host="$1" check="$port"; protocol="$2"

	[[ $noHostCheck || "$host" == "wsl$" ]] && return

	case "${protocol:-smb}" in
		nfs) check="111";; # 111 and 2049 
		smb) check="445";; # 135 and 445
		ssh) check="${check:-22}";;
	esac

	[[ $verbose ]] && { PrintErr "checking $host $protocol protocol (port $check): "; IsAvailablePort "$host" "$check" && EchoErr "available" || EchoErr "not available"; }
	IsAvailablePort "$host" "$check"
}

#
# helper
#

doUnmount() { platformUnmount; cleanupMountDir; }
log() { [[ $quiet ]] && return; printf "$@"; }
needsUnc() { [[ "$command" == @(IsMounted|mount|unmount) ]]; }
showResult() { [[ $1 && ! $quiet ]] && echo "$1"; [[ $1 ]]; }

cleanupMountDir()
{
	[[ ! -e "$mountDir" ]] && return
	findmnt "$mountDir" >& /dev/null && platformUnmount >& /dev/null
	rmdir "$mountDir" >& /dev/null
	[[ ! -e "$mountDir" ]]
}

getProtocol()
{
	case "$1" in
		   --port|--port=*) ScriptArg "port" "$@";;
		-p|--protocol|-p*|--protocol=*) ScriptGetNetworkProtocol "$@";;
		-n|--nfs) protocol="nfs";;
	 	   --smb) protocol="smb";;
		-s|--ssh) protocol="ssh";;
		*) return 1
	esac
}

getUncArg()
{
	shift=0; ! needsUnc && return

	local target="$1"; ((++shift))
	unset alias

	# all - valid for unmount command
	[[ "$command" == "unmount" && "$target" == "all" ]] && { unc="all"; return; }

	# alias
	if [[ "$target" == @(home|media|public) ]]; then
		ScriptEval HostFindInfo "$(ConfigGet "fs")" "${protocolArg[@]}" || return
		noHostCheck="true" protocol="$_protocol" port="$_port"
		eval target="\$_$target"
	fi

	# mounted file or directory
	[[ -e "$target" ]] && { file="$1"; target="$(getUncCommand)" || return; }
	
	# unc
	IsUncPath "$target" && { getUncInfo "$target"; return; }

	MissingOperand "unc"
}

getUncInfo() # GetUncInfo unc - sets server share dirs user shareId mountDir
{
	unc="$1"; [[ ! $unc ]] && return 1

	GetUncServer "$unc" server
	GetUncShare "$unc" share; [[ ! $share ]] && share="root" 
	GetUncDirs "$unc" dirs

	user="$USER"
	shareId="${share%%\$}"
	mountDir="$volumeDir/${server}_${shareId}"

	# WSL 2 elevation - mounted network shares are not visible, must mount them to a distinct location
	IsPlatform wsl2 && IsElevated && mountDir="${mountDir}_elevated" 

	# MDSN name resolution - Windows does not resolve MDNS natively
	IsPlatform win && IsMdnsName "$server" && { server="$(MdnsResolve "$server")" || return; }

	# force ssh protocol if a port is specified
	[[ $port ]] && protocol="ssh"

	[[ $verbose ]] && HilightErr "unc $command: unc=$unc mountDir=$mountDir protocol=$protocol port=$port"

	return 0
}

isMounted()
{
	local unc prefix; IsPlatform mac && prefix="$user@"

	# server is local and we can determine the full path to the locaL directory
	IsLocalHost "$server" && [[ "$share" == "root" ]] && { showResult "/$dirs"; return; }

	# check for an SMB share
	unc="$(mount | grep "^//$prefix${server%%.*}.*/$shareId\\\$* on " | head -n 1 | cut -d" " -f 3)"

	# check for an NFS share
	if [[ ! $unc ]]; then
		unc="$(mount | grep "^${server%%.*}.*:/$shareId$* on " | head -n 1 | cut -d" " -f 3)"
	fi

	# check for an ssh share
	if [[ ! $unc ]]; then
		[[ "$shareId" == "root" ]] && shareId=
		unc="$(mount | grep "^$user@$server:/$shareId on " | head -n 1 | cut -d" " -f 3)"
	fi		
	
	[[ $unc && $dirs ]] && unc="$unc/$dirs"

	showResult "$unc"
}

platformUnmount()
{
	case "$PLATFORM" in
		mac) osascript -e "tell application \"Finder\"" -e "eject \"$(GetFileName "$mountDir")\"" -e "end tell";;
		linux|win) sudoc umount "$mountDir";;
	esac
}

run "$@"
