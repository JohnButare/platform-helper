#!/usr/bin/env bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: unc [explore|mount|unount|IsMounted](explore) UNC
	Manipulate UNC shares
	explorer 	mount UNC and open in file explorer
	IsMounted	if UNC is mounted returns DIR mounted to
	mount 		mount UNC and return DIR mounted"
	exit $1
}

args()
{
	unset -v unc
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			UnMount) command="UnMount";; IsMounted) command="IsMounted";;
				*)
				IsUncPath "$1" && [[ ! $unc ]] && { unc="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { command="explore"; }
	[[ ! $unc ]] && MissingOperand "unc"
	args=("$@")
}

init() { :; }
run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

mountCommand()
{ 
	local noHostCheck; [[ "$1" == "--no-host-check" ]] && { noHostCheck="true"; shift; }
	[[ "$PLATFORM" == "win" ]] && { echo "$unc"; return 0; }
	local dir; dir="$(IsMountedCommand)" && { echo "$dir"; return 0; }
	local server share dirs; GetUncServer "$unc" server; GetUncShare "$unc" share; GetUncDirs "$unc" dirs
	{ [[ ! $noHostCheck ]] && ! HostUtil available "$server"; } && return 1
	osascript -e "try" -e "mount volume \"smb://$server/$share\"" -e "end try" >& /dev/null || return
	IsMountedCommand
}

UnMountCommand()
{ 
	[[ "$PLATFORM" == "win" ]] && { echo "$unc"; return 0; }
	local server share; GetUncServer "$unc" server; GetUncShare "$unc" share
	local dir; dir="$(unc IsMounted "//$server/$share")" || return 0
	GetFileName "$dir" dir; osascript -e "tell application \"Finder\"" -e "eject \"$dir\"" -e "end tell"
}

IsMountedCommand()
{
	[[ "$PLATFORM" == "win" ]] && return "$unc"
	local server share dirs; GetUncServer "$unc" server; GetUncShare "$unc" share; GetUncDirs "$unc" dirs
	local node="$(mount | egrep "^//$USER@${server%%.*}.*/$share" | head -n 1 | cut -d" " -f 3)"
	[[ ! $node ]] && return 1; [[ $dirs ]] && echo "$node/$dirs" || echo "$node"
}

exploreCommand()
{
	local dir=$(mountCommand) || return
	explore "$dir" || return
}

run "$@"
