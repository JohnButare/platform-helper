#!/bin/bash
. function.sh

usage()
{
	echot "\
usage: template [one|two|cd](one)
	Perform template commands
	one										perform the first command
	two										perform the second command
	sub one|two						perform a sub command
	-f, --file <file>			the file for the command
	-s, --show						show results
	-v, --verbose					display detailed output"
	exit $1
}

init() { :; }

args()
{
	unset dest exclude file show arg1 arg2
	while [ "$1" != "" ]; do
		case "$1" in
			-f|--file) file="$2"; shift;; # single argument
			-s|--show) show="--show";; # no arguments
			-x|--exclude) while [[ $2 ]] && ! IsOption "$2"; do exclude+=("$2"); shift; done;; # multiple arguments
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			one|OneAlias) command="one";; IsInstalled) command="IsInstalled";; # command case-insensitive aliases
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }	# command
				! IsOption "$1" && [[ ! $dest ]] && { dest="$1"; shift; continue; } 	# unnamed argument
				[[ "$command" == @(arg|sub) ]] && break																# defer
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='one'
	[[ ! $file ]] && MissingOperand "file"
	args=("$@")
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

# oneCommand - return results and set in parent using ScriptEval
oneCommand() 
{  
	vars=(a b c files); local a=1 b=2 c=3 files=("file 1.txt" "file 2.txt")
	ScriptReturn $show "${vars[@]}"
}

twoCommand() {  ElevationRequired; echo "command=$command"; }

threeCommand() { ! IsElevated && { sudo --hide template three; return; }; echo "command=$command"; }

subCommand()
{
	command="One"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Sub${s}Command && { command="$s"; shift; }
	[[ $# != 0 ]] && UnknownOption "$1"
	Sub${command}Command "$@"
}

SubOneCommand() { echo "command=Sub$command args=${#args[@]} file=\"$file\" server=\"$server\" interactive=$interactive verbose=$verbose test=$test"; }
SubTwoCommand() { echo "command=Sub$command"; }

argCommand()
{
	GetArg "$@"; shift $?
	echo "\$#=$# arg1=$arg1 arg2=$arg2"
	args=("$@")
}

GetArg()
{
	[[ $# == 0 ]] && MissingOperand "arg1"; arg1="$1"; shift
	[[ "$arg1" == "more" ]] && { [[ $# == 0 ]] && MissingOperand "arg2"; arg2="$1"; shift; }
	return $(( ${#args[@]} - $# ))
}

run "$@"
