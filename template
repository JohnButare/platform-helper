#!/bin/bash
. function.sh

usage()
{
	echot "\
usage: template [one|two|cd](one)
	Perform template commands
	one										perform the first command
	two										perform the second command
	sub one|two						perform a sub command
	-f, --file <file>			the file for the command
	-i, --interactive			prompt for changes
	-s, --server <server>	the server to use
	-t, --test						run in test mode
	-v, --verbose					display detailed output"
	exit $1
}

init() { :; }

args()
{
	unset file interactive server verbose test arg1 arg2
	command='one'
	while [ "$1" != "" ]; do
		case "$1" in
			-f|--file) shift; file="$1";;
			-s|--server) shift; server="$1";;
			-i|--interactive) interactive="-i";;
			-t|--test) test="-t";;
			-v|--verbose) verbose="-v";;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			one|OneAlias) command="one";; IsInstalled) command="IsInstalled";; # case-insensitive aliases
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ ! $key && "$command" == @(delete|exist|get|set) ]] && { GetKeyValueArg "$@"; shift; continue; }
				[[ "$command" == @(arg|sub) ]] && break # remaining arguments processed locally 
				echoerr "Unknown argument $1"; usage 1;
		esac
		shift
	done
	[[ ! $command ]] && usage 1
	[[ ! $file ]] && MissingOperand "file"
	args=("$@")
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
oneCommand() {  echo "command=$command";}
twoCommand() {  ElevationRequired; echo "command=$command"; }
threeCommand() { ! IsElevated && { sudo --hide template three; return; }; echo "command=$command"; }

subCommand()
{
	command="One"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Sub${s}Command && { command="$s"; shift; }
	[[ $# != 0 ]] && usage
	Sub${command}Command "$@"
}

SubOneCommand() { echo "command=Sub$command args=${#args[@]} file=\"$file\" server=\"$server\" interactive=$interactive verbose=$verbose test=$test"; }
SubTwoCommand() {  echo "command=Sub$command"; }

argCommand()
{
	GetArg "$@"; shift $?
	echo "\$#=$# arg1=$arg1 arg2=$arg2"
	args=("$@")
}

GetArg()
{
	[[ $# == 0 ]] && MissingOperand "arg1"; arg1="$1"; shift
	[[ "$arg1" == "more" ]] && { [[ $# == 0 ]] && MissingOperand "arg2"; arg2="$1"; shift; }
	return $(( ${#args[@]} - $# ))
}

run "$@"
