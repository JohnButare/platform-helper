#!/usr/bin/env bash
. script.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... zone|test|update
Manage CloudFlare DNS."
}						 

#
# Commands
#

testCommand() { api "user/tokens/verify" | jq; }

#
# Zones Command
#

zonesUsage()
{
	echot "Usage: $(ScriptName) zone list
Zone commands.

	id ZONE		return the zone ID
	list			list all zones"
}

zoneCommand() { usage; }
zoneListCommand() { api "zones"; }

zoneIdArgs() { getZoneArg "$@"; }
zoneIdCommand() { getZoneId "$zone"; }

#
# DNS Commands
#

dnsUsage()
{
	echot "Usage: $(ScriptName) dns id|list
Zone commands.

	id ZONE HOST	return the hosts DNS ID
	list ZONE			list all zones"
}

dnsCommand() { dnsListCommand; }
dnsListArgs() { getZoneArg "$@"; }
dnsListCommand() { getDnsRecords "$zone"; }
dnsIdArgs() { getZoneArg "$@" && shift && getHostArg "$@"; }
dnsIdCommand() { getDnsRecordId "$zone" "$host"; }

#
# Update Command
#

updateUsage()
{
	echot "Usage: $(ScriptName) update ZONE HOST IP
Update a DNS HOST record to IP."
}

updateArgs()
{
	getZoneArg "$@"; shift
	getHostArg "$@"; shift
	ScriptArgGet "ip" -- "$@"; shift
}

updateCommand()
{
	local name="$host.$zone"
	local currentIp; currentIp="$(dig "$name" @1.1.1.1 +short)" || return

	# only update if it changed
	[[ ! $force && "$currentIp" == "$ip" ]] && return

	# https://api.cloudflare.com/#dns-records-for-a-zone-update-dns-record
	local id; id="$(getDnsRecordId "$zone" "$host")" || return
	apiPut "$id" '{"type":"A","name":"'$name'","content":"'$ip'","ttl":1,"proxied":false}'
}
	
#
# API Helper
#

api()
{
	local command="$1"
	local key; key="$(credential get CloudFlare key)" || return
	local url="https://api.cloudflare.com/client/v4/$command"

	[[ $test ]] && return

	curl --silent -X GET "$url" \
		-H "Authorization: Bearer $key" \
		-H "X-Auth-Email:johns@butare.net" \
	  -H "Content-Type:application/json"
}

apiPut()
{
	local command="$1" data="$2"
	local key; key="$(credential get CloudFlare key)" || return
	local url="https://api.cloudflare.com/client/v4/$command"

	[[ $test ]] && return

	curl -X PUT "$url" \
		-H "Authorization: Bearer $key" \
		-H "X-Auth-Email:johns@butare.net" \
		-H "Content-Type:application/json" \
		--data "$data"
}

getHostArg() { ScriptArgGet "host" -- "$@"; }
getZoneArg() { ScriptArgGet "zone" -- "$@"; }

getZoneId()
{
	local zone="$1"
	local id; id="$(api "zones" | jq ".result[] | select(.name == \"$zone\").id" | RemoveQuotes)" || return
	[[ ! $quiet && ! $id ]] && EchoErr "zone '$zone' not found"
	[[ $id ]] && echo "$id"
}

getDnsRecords() { local zone="$1" id; id="$(getZoneId "$zone")" && api "zones/$id/dns_records"; }

getDnsRecordId()
{
	local zone="$1" name="$2"
	local dnsRecords; dnsRecords="$(getDnsRecords "$zone")" || return
	local zoneId="$(echo "$dnsRecords" | jq ".result[] | select(.name == \"$name.$zone\").zone_id" | RemoveQuotes)" || return
	local dnsId="$(echo "$dnsRecords" | jq ".result[] | select(.name == \"$name.$zone\").id" | RemoveQuotes)" || return
	[[ ! $dnsId ]] && { [[ ! $quiet ]] && EchoErr "DNS record '$name' in zone '$zone' not found"; return 1; }	
	echo "zones/$zoneId/dns_records/$dnsId"
}

ScriptRun "$@"
