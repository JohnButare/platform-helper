#!/usr/bin/env bash
. app.sh || exit

run() {	init && args "$@" && "${command}Command"; cleanup; }

init() { unset apiInitialized; }
cleanup() { :; }

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manage the Domotz controller.

	-v, --verbose                   display detailed output"
}

args()
{
	local args=()
	unset -v verbose

	# commands
	ScriptCommand "apiCommand" "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in
			-h|--help) usage 0;;
			-v|--verbose) verbose="--verbose";;
			--) shift; otherArgs+=("$@"); set --; break;;
			*) ScriptOpt "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"

	(( $# == 0 )) && return || usage
}

#
# API Command
#

apiUsage()
{
	echot "Usage: $(ScriptName) api [URI](/device)
Perform an API command.

Examples:
	/device - all devices"
}

apiArgStart() { uri="/device}"; }

apiArgs()
{
	(( $# > 0 )) && { ScriptArgGet "uri" -- "$@"; shift; }
	return 0
}

apiCommand() { api "$uri"; } 

#
# Commands
#

devicesCommand() { api "device"; }

#
# API Helper
#

api()
{
	local uri="$(echo "$1" | RemoveFront "/")"
	apiInit || return
	curl -s -X GET "$url/agent/$agent/$uri" -H "Accept: application/json" -H "X-Api-Key: $key"
}

apiInit()
{
	[[ $apiInitialized ]] && return

  key="$(credential get --fallback domotz key)" || return
  agent="$(credential get --fallback domotz agent)" || return
  url="$(credential get --fallback domotz url | RemoveTrailingSlash)" || return

	! [[ $key && $agent && $url ]] &&
		{ EchoErr "$(ScriptName): Domotz configuration is missing from the credential store"; return 1; }

  apiInitialized="true"
}


run "$@"
