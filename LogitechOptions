#!/usr/bin/env bash
. app.sh || exit

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

init()
{
	program="$WIN_ROOT/ProgramData/Logishrd/LogiOptions/Software/Current/LogiOptionsUI.exe"
	IsPlatform mac && program="$P/Logi Options.app"

	profileName="LogitechOptions$(ProperCase "$PLATFORM")"

	profileDir="$APPDATA/Logishrd/LogiOptions"
	IsPlatform mac && profileDir="$ADATA/Logitech/Logitech Options"

	return 0
}

usage() {	echot "usage: LogitechOptions
  profile dir|SaveDir|save|restore [<profile name>|default](latest)"; exit $1; }

args()
{
	unset -v noPrompt 

	while (( $# != 0 )); do
		case "$1" in
			--help|-h) usage 0;;
			--no-prompt|-np) noPrompt="--no-prompt";;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(start|profile) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='start'

	args=( "$@" )
}

closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
IsInstalledCommand() { [[ -e "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
startCommand() { IsInstalledCommand && start "$program" "$@"; }

profileCommand()
{ 
	if [[ "$1" == "restore" ]] && IsPlatform win; then 
		ProcessKill LogiOptionsMgr.exe >& /dev/null
		ProcessKill LogiOverlay.exe >& /dev/null
	fi

	profile $noPrompt --app "$profileName" --method "$profileDir" --files "*" "$@" || usage 1; 

	[[ "$1" == "restore" ]] && { startCommand || return; }
	
	return 0
}


run "$@"
