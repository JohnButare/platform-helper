#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|profile|program|start|service](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start" 
	profileName="LogitechOptions$(ProperCase "$PLATFORM")"
	startupArgs=()
	unset program

	# find program and profile
	case "$PLATFORM" in
		mac)
			program="$P/Logi Options.app"
			profileDir="$HOME/Library/Preferences" profileMask="com.logitech.manager.setting.0006b01a.plist"
			;;
		win) 
			program="$P/Logitech/LogiOptions/LogiOptions.exe"
			profileDir="$UADATA/../Roaming/Logishrd/LogiOptions" profileMask="@"
			startupArgs+=( "/noui" )
			;;
	esac
}

argEnd()
{
	if [[ $program ]]; then
		[[ ! -d "$profileDir" ]] && { ${G}mkdir --parents "$profileDir" || return; }
		return 0
	fi

	[[ ! $quiet ]] && ScriptErr "Logitech Options is not installed"
	return 1
}

isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$(GetFileName "$program")"; } # Windows - no path preset in ProcessList
programCommand() { echo "$program"; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { AppInstallCheck && start "$program" "${startArgs[@]}"; }
startupCommand() { start "$program" "${startupArgs[@]}"; }
versionCommand() { AppInstallCheck && AppVersion "$program"; }

closeCommand()
{
	case "$PLATFORM" in
		win) 
			ProcessKill LogiOptions.exe >& /dev/null
			ProcessKill LogiOptionsMgr.exe >& /dev/null
			;;
	esac
	
	return 0
}

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }

profileCommand()
{
	[[ "${profileArgs[0]}" != "restore" ]] && { profileDo; return; }
	[[ ! $noPrompt ]] && { ask "Restore the LogiTech options profile" || return 0; }
	serviceStopCommand && profileDo && serviceStartCommand
}

profileDo() { profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"; }

#
# Service Command
#

serviceUsage() 
{
	echot "\
Usage: $(ScriptName) service start|stop
LogitechOptions service commands."
}

serviceCommand() { usage; }

serviceStartCommand()
{
	case "$PLATFORM" in
		mac) service start "com.logitech.manager.daemon";;
		win) start "$program";;
	esac
	
	return 0
}

serviceStopCommand()
{
	case "$PLATFORM" in
		mac) service stop "com.logitech.manager.daemon";;
		win)
			ProcessKill LogiOptionsMgr.exe >& /dev/null
			ProcessKill LogiOverlay.exe >& /dev/null
			;;
	esac
	
	return 0
}

ScriptRun "$@"
