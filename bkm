#!/usr/bin/env bash
. function.sh

run()
{
	init $*
	local c=${1}
	[[ "$c" != "SetVars" ]] && echot "--- $c Test ---"
	${c}Command ${@:2}
	result="$?"
	exit $result
}

init()
{
	{ [[ $# == 0 ]] || ! IsFunction ${1}Command; } && usage
}

usage()
{
	echot 'usage: bkm bash|echo|interactive|return|arg|SetVars'
	exit
}

SetVarsCommand()
{
	# eval $(bkm SetVars); printf "a=%s\nb=%s\n" "$a" "$b"
	printf "a=%q;b=%q;" "result a" "result b"
}

bashCommand()
{
	echot "\
BASH_DEBUG=$BASH_DEBUG
BASH_STATUS_LOGIN_SHELL=$BASH_STATUS_LOGIN_SHELL
BASH_STATUS_LOGIN_SHELL_CHILD=$BASH_STATUS_LOGIN_SHELL_CHILD
BASH_STATUS_INTERACTIVE_SHELL=$BASH_STATUS_INTERACTIVE_SHELL"
	ShowInteractive
	ShowSsh
	declare -p | grep BASH_STATUS
	[[ "$(export -f)" != "" ]] && ( echo -n "first export function: "; export -f | head -1 ) || echo "No export functions"
	# return 1 so script pauses if run from mintty
	return 1
}

openCommand()
{
	echo 'Open a document...'
	start "$HOME\Dropbox\Current.docx"
}

# Determine if run interactively (source) or as a shell (./)
interactiveCommand()
{
	IsInteractive && echo 'interactive (sourced, source bkm.sh)' || echo 'not interactive (run as shell, ./bkm.sh)'
}

returnCommand()
{
	ReturnTestHelper "fail"; echot "ReturnTest fail=$?";
	ReturnTestHelper "success"; echot "ReturnTest success=$?";
}

ReturnTestHelper()
{
	[[ "$1" != "fail" ]]; result="$?"
	return $result
	echo 'not reached'
}

argCommand()
{
	i=0
	for arg in ${1:+"$@"}
	do
		((i++))
		echo "arg$i=$arg"
	done
}

echoCommand()
{
	echo "\
Double quotes: allow expansion
- variables can be referenced: BIN=$BIN
- \"double quotes\" and other special characters must be escaped
- special character can be escaped with \\
- newlines can be escaped to align first line of text in column 0
"

	echo 'Single quotes: prevent expansion
- variables cannot be referenced: BIN=$BIN
- "double quotes" and other special characters do not need to be quoted
' 

	local s="Space and Tab Test
0 spaces
 1 space
  2 spaces
	1 tab
		2 tabs
12345678"	

	echo "echo/cat/less: tabs use default number of spaces for terminal (usually 8)"
	echo "$s
"
	echo "echot/catt/lesst: tabs use specified number of spaces (tabs=$TABS)"
	echot "$s"
}

run $*
