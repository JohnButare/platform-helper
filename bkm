#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... bash|echo|interactive|return|arg|SetVars
$(ScriptName) commands."
	exit
}

setvarsUsage() { ScriptUsageEcho "Usage: $(ScriptName) SetVars\nTest setting variables."; }

setvarsCommand()
{
	header "Set Vars"
	#eval $(bkm SetVars); printf "a=%s\nb=%s\n" "$a" "$b" # hangs
	printf "a=%q;b=%q;" "result a" "result b"
}

bashUsage() { ScriptUsageEcho "Usage: $(ScriptName) bash\nShow Bash configuration."; }

bashCommand()
{
	header "Bash"
	echot "\
BASH_DEBUG=$BASH_DEBUG
BASH_STATUS_LOGIN_SHELL=$BASH_STATUS_LOGIN_SHELL
BASH_STATUS_LOGIN_SHELL_CHILD=$BASH_STATUS_LOGIN_SHELL_CHILD
BASH_STATUS_INTERACTIVE_SHELL=$BASH_STATUS_INTERACTIVE_SHELL"
	IsInteractiveShell
	declare -p | grep BASH_STATUS
	[[ "$(export -f)" != "" ]] && ( echo -n "first export function: "; export -f | head -1 ) || echo "No export functions"

	# return 1 so script pauses if run from terminal
	return 1
}

openUsage() { ScriptUsageEcho "Usage: $(ScriptName) open\nTest open command."; }

openCommand()
{
	header "Open"
	start "$DATA/setup/Set Options ${PLATFORM_OS^}.docm"
}

interactiveUsage() { ScriptUsageEcho "Usage: $(ScriptName) interactive\nShow interactivity level of the script."; }

# interactive - show level of interactivity of the script
interactiveCommand()
{
	header "Interactive"
	IsInteractiveShell && printf "SHELL_INTERACTIVE " # true if the script is sourced with "source" or "."
	IsTty && printf "TTY "
	IsTtyOk && printf "TTY_OK " # true if can use /dev/tty
	IsSsh && printf "SSH "
	IsSshTty && printf "SSH_TTY "
	IsStdIn && printf "STDIN "
	IsStdOut && printf "STDOUT "
	IsStdErr && printf "STDERR "	
	[[ $TERM ]] && printf "TERM=$TERM "
	[[ $USER ]] && printf "USER=$USER "

	echo "PARENTS=\"$(ProcessParents)\""
}

returnUsage() { ScriptUsageEcho "Usage: $(ScriptName) return\nTest return command."; }

returnCommand()
{
	header "Return"
	returnTestHelper "fail"; echot "ReturnTest fail=$?";
	returnTestHelper "success"; echot "ReturnTest success=$?";
}

returnTestHelper()
{
	[[ "$1" != "fail" ]]; result="$?"
	return $result
	echo 'not reached'
}

argUsage() { ScriptUsageEcho "Usage: $(ScriptName) arg\nTest script arguments."; }

argArgs()
{
	header "Args"
	i=0
	for arg in ${1:+"$@"}
	do
		((i++))
		echo "arg$i=$arg"
	done

	(( shift+=$# ))
}

argCommand() { :; }

echoUsage() { ScriptUsageEcho "Usage: $(ScriptName) echo\nTest echo command."; }

echoCommand()
{
	header "Echo"
	echo "\
Double quotes: allow expansion
- variables can be referenced: BIN=$BIN
- \"double quotes\" and other special characters must be escaped
- special character can be escaped with \\
- newlines can be escaped to align first line of text in column 0
"

	echo 'Single quotes: prevent expansion
- variables cannot be referenced: BIN=$BIN
- "double quotes" and other special characters do not need to be quoted
' 

	local s="Space and Tab Test
0 spaces
 1 space
  2 spaces
	1 tab
		2 tabs
12345678"	

	echo "echo/cat/less: tabs use default number of spaces for terminal (usually 8)"
	echo "$s
"
	echo "echot/catt/lesst: tabs use specified number of spaces (tabs=$TABS)"
	echot "$s"
}

ScriptRun "$@"
