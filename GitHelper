#!/usr/bin/env bash
. function.sh || exit

usage()
{
	echot "\
usage: GitHelper ge|gb|gui|hub|tgui|changes|up|down|commit|browse|diff|status|size
	Addition Git functionality
	bin		Setup bin folders for git
	ge 		run Git Extensions/msysgit git
	gb 		run msysgit bash
	gui		run GitExtensions GUI
	-w, --wait		wait for the operation to complete"
	exit $1
}

guiUsage() { "$gui" --help; exit $1; }

args()
{
	unset command help dest exclude file show arg1 arg2
	versions=( 2013 2012 )
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			--wait|-w) wait="--direct";;
			IsInstalled) command="IsInstalled";;
			*)
				! IsOption "$1" && IsInArray "$1" versions && { version="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(ge|gui|tgui|up|down|browse|commit|diff|status) ]] && break																						# defer argument processing
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" 0 && ${command}Usage || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=("$@")
}

init()
{ 
	gb="$P32/Git/bin/sh.exe"
	ge="$P32/Git/bin/git.exe"
	gui="$P32/GitExtensions/GitExtensions.exe"
	tgui="$P/TortoiseGit/bin/TortoiseGitProc.exe" # http://tortoisesvn.net/docs/nightly/TortoiseSVN_en/tsvn-automation.html
	hub="$APPDATA/Microsoft/Windows/Start Menu/Programs/Development/Other/GitHub/GitHub.appref-ms"
}

run() {	init || return; args "$@" || return; ${command}Command "${args[@]}"; }
IsInstalledCommand() { [[ -f "$ge" ]]; }

hubCommand()
{
	[[ ! -f "$hub" ]] && { EchoErr "Could not find GitHub command: is GitHub installed?"; return 1; }
	start "$hub" "$@"
}

gbCommand()
{
	[[ ! -f "$gb" ]] && { EchoErr "Could not find Git Bash command: is Git Extensions installed?"; return 1; }
	start --direct "$gb" --login -i "$@"
}

geCommand()
{
	[[ ! -f "$ge" ]] && { EchoErr "Could not find git command: is Git Extensions installed?"; return 1; }
	start --direct "$ge" "$@"
}

guiCommand()
{
	[[ ! -f "$gui" ]] && { EchoErr "Could not find GitExtensions command: is Git Extensions installed?"; return 1; }
	(( $# == 1 )) && [[ -d "$1" ]] && { pushd "$1" > /dev/null || return; shift; };
	start $wait "$gui" "$@"
}

tguiCommand()
{
	[[ ! -f "$tgui" ]] && { EchoErr "Could not find TortoiseGitProc command: is TortoiseGit installed?"; return 1; }

	# convert /path:"$dir" paths
	#local args; for arg in "$@"; do
	#	[[ "$arg" == @(/path:*) ]] && args+=( "/path:$(utw "${arg#/path:}")" ) || args+=( "$arg" )
	#done

	start --direct "$tgui" "${args[@]}"
}

changesCommand()
{
	[[ "$(git status --porcelain)" != "" ]]
}

upCommand()
{
	(( $# == 2 )) && { pushd "$1" > /dev/null || return; echo "Uploading $1..."; shift; }
	changesCommand || return 0
	git status
	git add --all || return
	git commit -m "$1" || return
	git push || return
}

downCommand()
{
	(( $# == 1 )) && { pushd "$1" > /dev/null || return; echo "Downloading $1..."; shift; };
	git pull
}

statusCommand()
{
	(( $# == 1 )) && [[ -d "$1" ]] && { pushd "$1" > /dev/null || return; shift; };
	git status
}

diffCommand()
{
	(( $# == 1 )) && { pushd "$1" > /dev/null || return; shift; };
	git diff
}

commitCommand() { guiCommand commit "$@"; }
browseCommand() { guiCommand browse "$@"; }

binCommand()
{
	SyncLocalFiles nas || return

	cd "$BIN" || return
	git clone git@butare.net:/volume1/git/public-bin || return
	mv public-bin/.git public-bin/.gitignore . || return
	rm -fr public-bin || return
	git config --local --unset core.filemode || return

	cd "$UBIN" || return
	git clone git@butare.net:/volume1/git/jjbutare-bin || return
	mv jjbutare-bin/.git jjbutare-bin/.gitignore . || return
	rm -fr jjbutare-bin || return
	git config --local --unset core.filemode || return

}

sizeCommand()
{
	# @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
	# @author Antony Stubbs

	# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
	IFS=$'\n';

	# list all objects including their size, sort by size, take top 10
	echo "Calculating object sizes..."
	objects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head -n 50`

	echo "All sizes are in kB's. Pack is the size of the object, compressed, inside the pack file."

	output="size,pack,SHA,location"
	for y in $objects
	do
		# extract the size in bytes
		size=$((`echo $y | cut -f 5 -d ' '`/1024))
		# extract the compressed size in bytes
		compressedSize=$((`echo $y | cut -f 6 -d ' '`/1024))
		# extract the SHA
		sha=`echo $y | cut -f 1 -d ' '`
		# find the objects location in the repository tree
		other=`git rev-list --all --objects | grep $sha`
		#lineBreak=`echo -e "\n"`
		output="${output}\n${size},${compressedSize},${other}"
	done

	echo -e $output | column -t -s ', '
}
run "$@"
