#!/usr/bin/env bash
. function.sh || return
. color.sh || return

run() {	args "$@" || return; init || return; $command; }

init()
{
	fileServer="nas3.hagerman.butare.net"
	ohMyZsh="$HOME/.oh-my-zsh"	
	UpdateInit || return
	[[ ! $prompt ]] && function ask { printf "${BLUE}%s${RESET}\n" "Updating $1..."; }
	return 0
}

usage()
{
	echot "\
usage: HostUpdate [adobe|micro|node|os|python|ruby|zsh]
	debian|mac|qnap|win
	windows|intel

	-p, --prompt		prompt for what to update
	-f, --force			update the host even if it might be up to date"
	exit $1
}

args()
{
	unset command force prompt

	while [ "$1" != "" ]; do
		case "${1}" in
			-f|--force) force="--force";;		
			-p|--prompt) prompt="--prompt";;		
			-h|--help) IsFunction "${command}Usage" && ${command}Usage 0 || usage 0;;		
			*) 
				IsFunction "${1,,}Update" && { command="${1,,}Update"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	command="${command:-update}"
	return 0
}

#
# everything
#

update()
{
	ask "files" && { fileUpdate || return; }
	ask "os" && { osUpdate || return; }
	ask "micro" && { microUpdate || return; }
	zshInstalled && ask "Zsh" && { zshUpdate || return; }
	adobeInstalled && ask "Adobe Create Cloud" && { adobeUpdate || return; }
	nodeInstalled && ask "Node.js" && { nodeUpdate || return; }
	pythonInstalled && ask "Python" && { pythonUpdate || return; }
	rubyInstalled && ask "Ruby" && { rubyUpdate || return; }
	return 0
}

#
# Operating System
#

osUpdate() { RunPlatform Update; }
debianUpdate() { IsPlatform debian && UpdateDebian; }
macUpdate() { IsPlatform mac && UpdateMac; }
qnapUpdate() { IsPlatform qnap && UpdateQnap; }
winUpdate() { IsPlatform win && UpdateWin; }

#
# debian
# 

UpdateDebian()
{ 
	! UpdateNeeded "debian" && return

	# update the package list
	sudoc apt update || return

	# upgrade packages if needed
	! [[ "$(apt-check --human-readable 2>&1)" =~ "0 packages".* ]] && { sudo apt dist-upgrade -y || return; update="true"; }

	sudo apt autoremove -y || return

	# some packages are not listed in apt-check, update them if needed
	local done=""; sudo apt autoremove -y |& grep "0 not upgraded" >& /dev/null && done="true"
	[[ ! $done ]] && { sudo apt dist-upgrade -y || return; }

	[[ -f /var/run/reboot-required ]] && ask 'Reboot to finish the update' && { sudo reboot || return; }

	UpdateDone "debian" || return
}

#
# mac
#

UpdateMac()
{
	ask "Brew update" && { brewUpdate || return; }
	ask "App Store update" && { ! UpdateNeeded "AppStore" && return; mas upgrade || return; UpdateDone "AppStore" || return; }
	ask "Software update" && { ! UpdateNeeded "SoftwareUpdate" && return; sudo softwareupdate --install --all; UpdateDone "SoftwareUpdate" || return; }
	return 0;
}

brewUpdate()
{
	! UpdateNeeded "brew" && return
	brew doctor || return
	brew update || return
	brew upgrade || return
	brew cask upgrade || return
	UpdateDone "brew" || return
}

#
# QNAP
#

UpdateQnap()
{
	! UpdateNeeded "qnap" && return
	sudo opkg update || return
	sudo opkg upgrade || return
	UpdateDone "brew" || return
}

#
# Windows
#

UpdateWin()
{
	! UpdateNeeded "win" && return
	IsSsh && return 0 # these update requires a GUI
	ask "Windows update" && { windowsUpdate || return; }
	ask "Store update" && { store || return; }
	intelUpdateInstalled && ask "Intel update" && { intelUpdate || return; }
	UpdateDone "win"
}

intelUpdateInstalled() { [[ -d "$P32/Intel/Driver and Support Assistant" ]]; }
intelUpdate() {  start "https://www.intel.com/content/www/us/en/support/intel-driver-support-assistant.html"; }
windowsUpdate() {  FindInPath "wuapp.exe" > /dev/null && start "wuapp.exe" || cmd.exe /c start ms-settings:windowsupdate >& /dev/null; }

#
# Adobe
#

adobeInstalled() { [[ -f "$P32\Common Files\Adobe\OOBE\PDApp\UWA\UpdaterStartupUtility.exe" ]]; }
adobeUpdate() { adobeInstalled || return 0; start "$P32\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe"; }

#
# Files
#

fileUpdate() 
{
	! IsAvailable $fileServer && return
	SyncLocalFiles $fileServer || return
}

#
# micro
#

microUpdate()
{
	! UpdateNeeded "micro" && return
	MicroHelper update || return
	UpdateDone "micro" || return
}

#
# Node.js
#

nodeInstalled() { which node >& /dev/null; }
nodeUpdate()
{
	{ ! nodeInstalled || ! UpdateNeeded "node"; } && return
	nodeInstalled || return 0
	ask 'npm update' -dr n && { sudo npm install -g npm@latest || return; }
	sudo npm update -g || return
	UpdateDone "node" || return
}

#
# Zsh
#

zshInstalled() { InPath zsh && [[ -d "$ohMyZsh/.git" ]]; }

zshUpdate() 
{ 
	{ ! zshInstalled || ! UpdateNeeded "zsh"; } && return

	local t="$ohMyZsh/custom/themes" p="$ohMyZsh/custom/plugins"
	local plugins=( "$t/powerlevel10k" "$p/zsh-syntax-highlighting" )

	zsh -i -c '. ~/.oh-my-zsh/lib/cli.zsh; _omz::update'

	pushd "$HOME/.oh-my-zsh" >& /dev/null

	for plugin in "${plugins[@]}"; do
		[[ ! -d "$plugin/.git" ]]	&& continue
		printf "${BLUE}%s${RESET}\n" "Updating $(GetFileName "$plugin")..."
		cd "$plugin" || return
		git pull || return
	done

	popd >& /dev/null

	UpdateDone "zsh" || return
}

#
# Python
#

pythonInstalled() { which pip3 >& /dev/null; }
pythonUpdate()
{
	{ ! pythonInstalled || ! UpdateNeeded "python"; } && return
	
	for pkg in $( pip3 list --outdated --format=columns | cut -d' ' -f 1 | ${G}tail --lines=+3 ); do
		echo "Updating $pkg..."
    sudo -H pip3 install -U $pkg || return
	done

	UpdateDone "python" || return
}

#
# Ruby
#

rubyInstalled() { which gem >& /dev/null; }
rubyUpdate()
{	
	! rubyInstalled && return

	local sudo="sudoc"; InPath rvm && unset sudo
	local args=( --no-document ) # documents take a while to install
	[[ "$PLATFORM" == "mac" ]] && { args+=( "-n /usr/local/bin" ); sudo="sudoc"; }

	UpdateNeeded "RubySystem" && { $sudo gem update --system "${args[@]}" || return; UpdateDone "RubySystem" || return; }
	UpdateNeeded "ruby" && { $sudo gem update "${args[@]}" || return; UpdateDone "ruby" || return; }

	return 0
}

run "$@"
