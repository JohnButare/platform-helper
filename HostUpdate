#!/usr/bin/env bash
. function.sh
. color.sh

usage()
{
	echot "\
usage: HostUpdate [adobe|node|os|ohMyZsh|python|ruby]
	debian|mac|qnap|win
	windows|intel

	-p, --prompt		prompt for what to update
	-f, --force			update the host even if it might be up to date"
	exit $1
}

args()
{
	unset command force prompt

	while [ "$1" != "" ]; do
		case "${1}" in
			-f|--force) force="--force";;		
			-p|--prompt) prompt="--prompt";;		
			-h|--help) IsFunction "${command}Usage" && ${command}Usage 0 || usage 0;;		
			OhMyZsh) command="ohMyZshUpdate";;
			*) 
				IsFunction "${1,,}Update" && { command="${1,,}Update"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	command="${command:-update}"
	return 0
}

init()
{
	ohMyZsh="$HOME/.oh-my-zsh"	
	
	[[ ! $prompt ]] && function ask { printf "${BLUE}%s${RESET}\n" "Updating $1..."; }
	
	return 0
}

run() {	args "$@" || return; init || return; $command; }

#
# Update everything
#

update()
{
	ask "NAS" && { nasUpdate || return; }
	osUpdate || return
	ohMyZshInstalled && ask "Oh My Zsh" && { ohMyZshUpdate || return; }
	adobeInstalled && ask "Adobe Create Cloud" && { adobeUpdate || return; }
	nodeInstalled && ask "Node.js" && { nodeUpdate || return; }
	rubyInstalled && ask "Ruby" && { rubyUpdate || return; }
	pythonInstalled && ask "Python" && { pythonUpdate || return; }
}

#
# Operating System Update
#

osUpdate() { RunPlatform Update; }

#
# Debian Specific
# 

debianUpdate() { UpdateDebian; }
UpdateDebian() 
{ 
	IsPlatform debian || return 0

	# update package list if it is out of date (not updated today)
	local update="true" 
	[[ "$(GetDateStamp)" == "$(GetFileDateStamp /var/cache/apt/pkgcache.bin)" ]] && update=
	[[ ! $update && $force ]] && ask 'Update Debian' && update="true"

	# update the package list
	[[ $update ]] && { sudo apt update || return; }

	# upgrade packages if needed
	! [[ "$(apt-check --human-readable 2>&1)" =~ "0 packages".* ]] && { sudo apt dist-upgrade -y || return; update="true"; }

	[[ $update ]] && { sudo apt autoremove -y || return; }

	# some packages are not listed in apt-check, update them if needed
	local done=""; sudo apt autoremove -y |& grep "0 not upgraded" >& /dev/null && done="true"
	[[ ! $done ]] && { sudo apt dist-upgrade -y || return; }

	[[ -f /var/run/reboot-required ]] && ask 'Reboot to finish the update' && { sudo reboot || return; }

	return 0
}

#
# macOS Specific
#

macUpdate() { UpdateMac; }
UpdateMac()
{
	! IsPlatform mac && return

	ask "Brew update" && { brewUpdate || return; }
	ask "App Store update" && { mas upgrade || return; }
	ask "Software update" && sudo softwareupdate --install --all
	return 0;
}

brewUpdate()
{
	! IsPlatform mac && return

	# brew doctor || return # errors out in Catalina
	brew update || return
	brew upgrade || return
	brew cask upgrade || return
}

#
# QNAP Specific
#

qnapUpdate() { UpdateQnap; }
UpdateQnap()
{
	! IsPlatform qnap && return

	sudo opkg update || return
	sudo opkg upgade || return
}

#
# Windows Specific
#

winUpdate() { UpdateWin; }
UpdateWin()
{
	! IsPlatform win && return 0

	IsSsh && return 0 # these update requires a GUI
	ask "Windows update" && { windowsUpdate || return; }
	ask "Store update" && { store || return; }
	intelUpdateInstalled && ask "Intel update" && { intelUpdate || return; }

	return 0
}

intelUpdateInstalled() { [[ -d "$P32/Intel/Driver and Support Assistant" ]]; }
intelUpdate()
{ 
	! IsPlatform win && return 0
	start "https://www.intel.com/content/www/us/en/support/intel-driver-support-assistant.html"
}

windowsUpdate()
{ 
	! IsPlatform win && return 0
	FindInPath "wuapp.exe" > /dev/null && start "wuapp.exe" || cmd.exe /c start ms-settings:windowsupdate >& /dev/null
}

#
# Oh My Zsh
#

ohMyZshInstalled() { InPath zsh && [[ -d "$ohMyZsh/.git" ]]; }

ohMyZshUpdate() 
{ 
	local t="$ohMyZsh/custom/themes" p="$ohMyZsh/custom/plugins"
	plugins=( "$t/powerlevel10k" "$p/zsh-syntax-highlighting" )

	ohMyZshInstalled || return 0
	zsh -i -c upgrade_oh_my_zsh || return

	pushd >& /dev/null

	for plugin in "${plugins[@]}"; do
		[[ ! -d "$plugin/.git" ]]	&& continue
		printf "${BLUE}%s${RESET}\n" "Updating $(GetFileName "$plugin")..."
		cd "$plugin" || return
		git pull || return
	done

	popd >& /dev/null

	return 0
}

#
# Adobe
#

adobeInstalled() { [[ -f "$P32\Common Files\Adobe\OOBE\PDApp\UWA\UpdaterStartupUtility.exe" ]]; }
adobeUpdate() { adobeInstalled || return 0; start "$P32\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe"; }

#
# NAS
#

nasUpdate()
{
	local server="nas3.hagerman.butare.net"

	! IsAvailable $server && return

	if InPath git; then

		if [[ -d "$BIN/.git" ]]; then
			GitHelper changes "$BIN" && { GitHelper commit "$BIN" && pause; }
			cd "$BIN" && git pull --rebase
		fi

		if [[ -d "$UBIN/.git" ]]; then
			GitHelper changes "$UBIN" && { GitHelper commit "$UBIN" && pause; }
			cd "$UBIN" && git pull --rebase
		fi
		
	fi

	SyncLocalFiles $server || return

	return 0
}

#
# Node.js
#

nodeInstalled() { which node >& /dev/null; }
nodeUpdate()
{
	nodeInstalled || return 0
	ask 'npm update' -dr n && { sudo npm install -g npm@latest || return; }
	sudo npm update -g || return
}

#
# Python
#

pythonInstalled() { which pip3 >& /dev/null; }
pythonUpdate()
{
	pythonInstalled || return 0
	
	for pkg in $( pip3 list --outdated --format=columns | cut -d' ' -f 1 | ${G}tail --lines=+3 ); do
		echo "Updating $pkg..."
    sudo -H pip3 install -U $pkg || return
	done

	return 0
}

#
# Ruby
#

rubyInstalled() { which gem >& /dev/null; }
rubyUpdate()
{	
	local nodoc= suffix

	rubyInstalled || return
	
	[[ "$PLATFORM" == "mac" ]] && { suffix="-n /usr/local/bin"; }
	[[ "$PLATFORM" == "win" ]] && nodoc=--no-document # faster and --system fails with documentation update on Cygwin

	sudo gem update --system $nodoc $suffix
	sudo gem update $nodoc $suffix
	return 0
}

run "$@"
