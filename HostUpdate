#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "Usage: $(ScriptName) [all|client|server](client) [HOST]...

	-f, --force			update the host even if it might be up to date
	-p, --prompt		prompt for what to update
	-P,	--protocol	$(ScriptOptNetworkProtocolUsage)
	-s, --skip LIST	comma seperated list of items to skip
	-w, --what LIST	comma seperated list of items to update

items (default): $(echo "${defaultItems[@]}")
			(other): $(echo "${otherItems[@]}")

File synchronization:
	-do,	--dest-older	assume destination files are than the local source files
	-so,	--src-older		assume local files are older than the destination files
	-nb,	--no-bak			do not backup files to the bak directory"
	exit $1
}

init()
{	
	defaultCommand="update"	
	defaultItems=( adobe choco motd npm node obsidian os python ruby store zsh)
	defaultButareItems=( apps )
	serverItems=( server server-credential server-eligibility server-root-user )
	otherHagermanItems=( download hass pool-controller pool-dash-panel pool-temperature ) # pool-controller latest version after 8.0.3 does not turn on outside of scheduled times
	otherItems=( apps file files public-files debian fzf intel mac micro opkg windows wsl ${otherHagermanItems[@]} ${serverItems[@]} )
	allItems=( "${defaultItems[@]}" "${otherItems[@]}" )
	ohMyZsh="$HOME/.oh-my-zsh"
}

argStart() { unset -v method noBak prompt protocol protocolArg skipArg updateProxy whatArg; skip=() what=() ; }

opt()
{
	case "$1" in
		-do|--dest-older|--destination-older) method="--dest-older";;
		-nb|--no-bak) noBak="--no-bak";;
		-p|--prompt) prompt="--prompt";;		
		-P|--protocol|-P=*|--protocol=*) ScriptOptNetworkProtocol "$@";;
		-s|--skip|-s=*|--skip=*) ScriptArgItems "skip" "allItems" "$@" || return;;
		-so|--src-older|--source-older) method="--src-older";;
		-up|--update-proxy) updateProxy="true";;
		-w|--what|-w=*|--what=*) ScriptArgItems "what" "allItems" "$@" || return;;
		*) return 1;;
	esac
}

args() { hosts=( "$@" ); (( shift+=$# )); return 0; }

argEnd() 
{
	[[ $hosts ]] && { updateHosts; exit; }	
	[[ ! $prompt ]] && function ask { [[ $quiet ]] && return; hilight "Updating $1..."; }

	if [[ $updateProxy ]]; then
		ScriptEval network proxy validate --quiet "${globalArgs[@]}" || return
	fi

	return 0
}

#
# commands
#

updateCommand() { clientCommand; }

allCommand()
{
	HeaderBig "Download"
	downloadUpdate || return

	HeaderBig "Files"
	fileUpdate || return
	filesUpdate || return
	public-filesUpdate || return

	HeaderBig "Update Server"
	serverCommand || return

	HeaderBig "Update Client"
	clientCommand || return
}

clientCommand()
{
	local default item

	# update network settings
	local networkCurrent; NetworkCurrentUpdate --config "${globalArgsLess[@]}" || return; networkCurrent="$NETWORK"

	# determine what to update
	[[ ! $what ]] && default="true" what=( "${defaultItems[@]}" )
	[[ $default && "$networkCurrent" == "butare" ]] && what+=( "${defaultButareItems[@]}" ) 

	# update
	for item in "${what[@]}"; do
		IsInArray "$item" skip && continue
		${item}Installed && ask "$item" && { "${item}Update" || return; }
	done

	[[ $default ]] && UpdateDone "update-default"

	return 0
}

serverCommand() { doUpdate "server-credential" && doUpdate "server" && doUpdate "server-eligibility" && doUpdate "server-root-user"; }

#
# App Update
#

appsInstalled() { ! os IsServer && ! IsSsh; } # don't update apps on a server

appsUpdate()
{
	! UpdateNeeded "update-app-update" && return
	inst install update "${globalArgs}";
	UpdateDone "update-app-update" || return
}

downloadInstalled() { true; }

downloadUpdate()
{
	! UpdateNeeded "update-app-download" && return
	inst install download "${globalArgs[@]}" || return
	UpdateDone "update-app-download" || return
}

#
# OS Update
#

osInstalled() { true; }

osUpdate()
{
	! UpdateNeeded "update-os" && return
	RunPlatform "os" || return
	UpdateDone "update-os" || return
}

osDebian() { doUpdate "debian" && doUpdate "brew"; }
osEntware() { opkgUpdate; }
osMac() { doUpdate mac && doUpdate brew; }
osRhel() { doUpdate "rhel"; }

osWin()
{
	IsSsh && return 0 # these update requires a GUI
	doUpdate "windows" || return
	doUpdate "ccm" || return
	CanElevate && ! IsOnRestrictedDomain && { doUpdate "wsl" || return; }
	intelInstalled && { doUpdate "intel" || return; }
	return 0
}

#
# Adobe Update
#

adobeInstalled() { [[ -f "$P32\Common Files\Adobe\OOBE\PDApp\UWA\UpdaterStartupUtility.exe" ]]; }
adobeUpdate() { start "$P32\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe"; }

#
# Homebrew Update
#

brewInstalled() { InPath brew; }

brewUpdate()
{
	{ ! brewInstalled || ! UpdateNeeded "update-brew"; } && return
	
	brewDoctor || return
	brew update || return
	brew upgrade || return
	brew upgrade --cask || return

	UpdateDone "update-brew" || return
}

brewDoctor()
{
	local d="/usr/local/lib"

	sudov || return
	if [[ -f "$d/libcurl-impersonate-ff.4.dylib" || -f "$d/librustc-stable_rt.asan.dylib" ]]; then
		[[ ! -d "$d/t" ]] && { sudo mkdir "$d/t" || return; }
		[[ -f "$d/libcurl-impersonate-ff.4.dylib" ]] && { sudo mv "$d/libcurl-impersonate"* "$d/t" || return; }
		[[ -f "$d/librustc-stable_rt.asan.dylib" ]] && { sudo mv "$d/"*".dylib" "$d/t" || return; }
	fi
	
	brew doctor || return

	if [[ -d "$d/t" ]]; then
		sudoc mv "$d/t/"* "$d" || return
		sudoc rmdir "$d/t" || return
	fi

	return 0	
}

#
# Chocolatey Update
#

chocoInstalled() { InPath "choco.exe"; }

chocoUpdate()
{ 
	! UpdateNeeded "update-choco" && return
	elevate choco.exe upgrade chocolatey
	UpdateDone "update-choco" || return
}

#
# Debian Update
#

debianInstalled() { IsPlatform "debian"; }

debianUpdate()
{ 
	IsDomainRestricted && ! IsOnRestrictedDomain && return
	{ ! debianInstalled || ! UpdateNeeded "update-debian"; } && return

	# update using apt or nala
	local update="apt"; InPath nala && update="nala"; debianUpdate${update^} || return

	UpdateDone "update-debian" || return
}

debianUpdateApt()
{
	sudov || return

	# update the package metadata
	sudo apt update || return

	# arguments
	local args=(); (( forceLevel >= 3 )) && args+=(-o APT::Get::Always-Include-Phased-Updates=true)

	# update of needed
	# - NEEDRESTART_MODE="l" - list what services need to be restarted only
	[[ $verbose ]] && apt list --upgradable
	if (( forceLevel >= 2 )) || (( $(apt list --upgradable 2>/dev/null | grep -c "upgradable") > 0 )); then
		RunLog sudo NEEDRESTART_MODE="l" apt full-upgrade -y "${args[@]}" || return
	fi

	# remove packages	
	sudo apt autoremove -y || return

	return 0
}

debianUpdateNala()
{
	sudov || return

	# arguments
	local args=(); (( forceLevel >= 3 )) && args+=(-o APT::Get::Always-Include-Phased-Updates=true)

	# return if no update needed
	[[ $verbose ]] && apt list --upgradable
	(( forceLevel < 2 )) && (( $(apt list --upgradable 2>/dev/null | grep -c "upgradable") == 0 )) && return
	
	# - NEEDRESTART_MODE="l" - list what services need to be restarted only
	RunLog sudo NEEDRESTART_MODE="l" nala full-upgrade --assume-yes "${args[@]}" || return
} 

#
# File Update - sync local files to the file server
#

fileInstalled() { return 0; }

fileUpdate()
{
	{ ! fileInstalled || ! UpdateNeeded "update-file"; } && return
	local server; server="$(GetServer "file" "${globalArgs[@]}")" || return
	IsLocalHostIp "$server" && return # do not sync files to ourself
	! unc IsAvailable "$server" $protocolArg "${globalArgs[@]}" && return
	SyncLocalFiles $method $noBak $protocolArg "${globalArgs[@]}" "$server" "${otherArgs[@]}" || return
	UpdateDone "update-file" || return
}

#
# Files Update - copy local files to servers
#

filesInstalled() { return 0; }

filesUpdate()
{
	{ ! filesInstalled || ! UpdateNeeded "update-files"; } && return
	wiggin host sync files --errors --dest-older "${globalArgs[@]}" "${otherArgs[@]}" || return
	UpdateDone "update-files" || return
}

#
# Public Files Update - copy public files between servers
#

public-filesInstalled() { return 0; }

public-filesUpdate()
{
	{ ! public-filesInstalled || ! UpdateNeeded "update-public-files"; } && return
	wiggin sync public --no-prompt "${globalArgs[@]}" || return
	UpdateDone "update-public-files" || return
}

#
# fzf Update
#

fzfInstalled() { [[ -d "$HOME/.fzf" ]]; }

fzfUpdate()
{
	{ ! fzfInstalled || ! UpdateNeeded "update-fzf"; } && return
	cd "$HOME/.fzf" || return
	git pull || return
	sudoc ~/.fzf/install --bin || return
	UpdateDone "update-fzf" || return
}

#
# Home Assistant Update
#

hassInstalled() { HomeAssistant IsInstalled; }

hassUpdate()
{
	{ ! hassInstalled || ! UpdateNeeded "update-hass"; } && return
	HomeAssistant update && UpdateDone "update-hass"
}

#
# Intel Update
#

intelInstalled() { [[ -d "$P32/Intel/Driver and Support Assistant" ]]; }

intelUpdate()
{
	{ ! intelInstalled || ! UpdateNeeded "update-intel"; } && return
	start "https://www.intel.com/content/www/us/en/support/intel-driver-support-assistant.html" || return
	UpdateDone "update-intel" || return
}

#
# MacOS Update
#

macInstalled() { IsPlatform mac; }

macUpdate()
{
	{ ! macInstalled || ! UpdateNeeded "update-mac"; } && return
	sudoc softwareupdate --list # --install --all
	UpdateDone "update-mac" || return
}

#
# Micro Update
#

microInstalled() { InPath "micro"; }

microUpdate()
{
	{ ! microInstalled || ! UpdateNeeded "update-micro"; } && return
	MicroHelper update || return
	UpdateDone "update-micro" || return
}

#
# motd Update
#

motdInstalled() { return 0; }

motdUpdate()
{
	! UpdateNeeded "update-motd" && return
	local file="/var/run/motd.dynamic"
	{ [[ ! -f "$file" ]] || cmp -s "$HOME/.hushlogin" "$file"; } && return
	tee "$HOME/.hushlogin" < "$file" || return
	UpdateDone "update-motd" || return
}

#
# npm (Nginx Proxy Manager)
#

# do not use docker compose, Nginx Proxy Manager now hosted by Nomad
npmInstalled() { [[ -f "$SRV/nginx-proxy-manager/docker-compose.yml.HOLD" ]]; } 

npmUpdate()
{
	{ ! npmInstalled || ! UpdateNeeded "update-npm"; } && return
	pushd "$SRV/nginx-proxy-manager" >& /dev/null || return
	{ docker compose pull && docker compose up -d --remove-orphans && docker image prune --force; } || return
	UpdateDone "update-npm" || return
}

#
# Obsidian Update
#

obsidianInstalled() { obsidian IsInstalled; }

obsidianUpdate()
{
	{ ! obsidianInstalled || ! UpdateNeeded "update-obsidian"; } && return

	# update bookmarks
	local dir="$UDATA/app/Obsidian/personal/Personal"
	[[ -d "$dir" ]] && { firefox bookmarks markdown > "$dir/Bookmarks.md"; }
	
	UpdateDone "update-obsidian"
}
#
# Node.js Update
#

nodeInstalled() { which node >& /dev/null; }

nodeUpdate()
{
	{ ! nodeInstalled || ! UpdateNeeded "update-node"; } && return

	# update node to latest lts version using n
	if InPath n && [[ "$(AppVersion node)" != "$(n --lts)" ]]; then
		sudoc n lts || return
		sudoc n prune || return
	fi

	# update node to latest lts version using nvm
	if IsFunction nvm && [[ "$(AppVersion node)" != "$(nvm version-remote --lts)" ]]; then
		nvm install --lts || return
	fi

	NodeUpdate && UpdateDone "update-node"
}

#
# opkg Update
#

opkgInstalled() { InPath opkg; }

opkgUpdate()
{
	{ ! opkgInstalled || ! UpdateNeeded "update-opkg"; } && return

	sudoc opkg update || return
	sudoc opkg upgrade || return
	
	UpdateDone "update-opkg" || return
}

#
# Pool Update
#

poolControllerDir="/opt/pool-controller"
poolDashPanelDir="/opt/pool-dash-panel"
poolTemperatureDir="/opt/pool-temperature"

pool-controllerInstalled() { gitRepoInstalled "$poolControllerDir"; }
pool-dash-panelInstalled() { gitRepoInstalled "$poolDashPanelDir"; }
pool-temperatureInstalled() { gitRepoInstalled "$poolTemperatureDir"; }

pool-controllerUpdate() { gitRepoUpdate "pool-controller" "$poolControllerDir" "pool-controller"; }
pool-dash-panelUpdate() { gitRepoUpdate "pool-dash-panel" "$poolDashPanelDir" "pool-dash-panel"; }
pool-temperatureUpdate() { gitRepoUpdate "pool-temperature" "$poolTemperatureDir" "pool-temperature"; }

#
# Python Update
#

pythonInstalled() { PythonConf && which pip3 >& /dev/null; }

pythonUpdate()
{
	{ ! pythonInstalled || ! UpdateNeeded "update-python"; } && return
	{ pythonUpdatePip pipl pip && pythonUpdatePip pipl pipx && pythonUpdatePipx pipxl; } || return # update local packages
	{ pythonUpdatePip pipr pip && pythonUpdatePip pipr pipx && pythonUpdatePipx pipxg; } || return # update root/global packages
	UpdateDone "update-python"
}

# pythonUpdatePip pipl|pipr PACKAGE - update a local or root packages using pip
pythonUpdatePip()
{
	local p="$1" package="$2"
	local outdated; outdated="$($p list --user --outdated --format=columns)"	

	# return if the package is not outdated
	! echo "$outdated" | grep --quiet "^${package} " && return	

	# update the package
	PythonManageDisable || return
	local result; $p install --user --upgrade "$package"; result="$?"
	PythonManageEnable; return "$result"
}

# pythonUpdatePipx pipxl|pipxg - update local or global pipx packages
pythonUpdatePipx()
{
	local p="$1"
	{ ! $p --version >& /dev/null || $p list --quiet |& sqgrep "^nothing has been installed with pipx"; } && return
	$p list --quiet | ${G}grep --quiet "borg" && { $p upgrade --quiet --pip-args='--no-build-isolation' borgbackup || return; } # borg requires no build isolation
	$p upgrade-all --quiet || return
}

#
# Ruby Update
#

rubyInstalled() { which gem >& /dev/null; }

rubyUpdate()
{	
	{ ! rubyInstalled || IsPlatformAll mac,arm; } && return # gem is not functional on mac ARM

	local args=( --no-document ) # documents take a while to install
	local sudo="sudoc"
	InPath asdf && asdf plugin list |& grep --quiet '^ruby$' && unset sudo
	InPath rvm && unset sudo
	
	# do not update mac bundled ruby
	IsPlatform mac && [[ "$(which ruby)" == "/usr/bin/ruby" ]] && { return 0; }

	# update
	UpdateNeeded "update-RubySystem" && { $sudo gem update --system "${args[@]}" || return; UpdateDone "update-RubySystem" || return; }
	UpdateNeeded "update-ruby" && { $sudo gem update "${args[@]}" || return; UpdateDone "update-ruby" || return; }

	return 0
}

#
# RedHat Enterprise Linux (rhel) update
#

rhelInstalled() { IsPlatform "rhel"; }

rhelUpdate()
{ 
	IsDomainRestricted && ! IsOnRestrictedDomain && return
	{ ! rhelInstalled || ! UpdateNeeded "update-rhel"; } && return

	PackageUpdate || return
	sudov || return	
	sudoc dnf check-update 2>&1 && return
	sudo dnf upgrade --assumeyes || return

	UpdateDone "update-rhel" || return
}

#
# Server Update
#

serverInstalled() { return 0; }

serverUpdate()
{
	{ ! serverInstalled || ! UpdateNeeded "update-server"; } && return
	wiggin host update --errors --dest-older "${globalArgs[@]}" || return
	UpdateDone "update-server" || return
}

server-credentialInstalled() { return 0; }

server-credentialUpdate()
{
	{ ! server-credentialInstalled || ! UpdateNeeded "update-server-credential"; } && return
	wiggin host credential -H=locked "${globalArgs[@]}" || return
	UpdateDone "update-server-credential" || return
}

server-eligibilityInstalled() { InPath nomad; }
server-eligibilityUpdate() { hashi nomad node eligibility enable "${globalArgs[@]}"; }

server-root-userInstalled() { return 0; }

server-root-userUpdate()
{
	{ ! server-root-userInstalled || ! UpdateNeeded "update-server-root-user"; } && return
	wiggin host sync root "${globalArgs[@]}" || return
	UpdateDone "update-server-root-user" || return
}

#
# Store Update
#

storeInstalled() { IsPlatform win || { IsPlatform mac && InPath mas; } || { IsPlatform qnap && InPath qpkg_cli; }; }

storeUpdate()
{
	{ ! storeInstalled || ! UpdateNeeded "update-store"; } && return
	RunPlatform "store" || return
	UpdateDone "update-store" || return
}

storeQnap() { sudoc qpkg_cli --update_all; }
storeWin() { return 0; store; } # store update often fails in Windows

storeMac()
{
	# disable proxy - mas fails
	ScriptEval network proxy config vars --disable || return 
	
	# app: 1358823008 Flighty (4.1.1 -> 4.1.3)
	local app apps; IFS=$'\n' ArrayMake apps "$(mas outdated)"
	for app in "${apps[@]}"; do
		local id; id="$(echo "$app" | cut -d" " -f1)"
		local v; v="$(echo "$app" | rev | cut -d" " -f3 | rev | RemoveFront "\(")"
		local vLatest; vLatest="$(macAppVersionCurrent "$id")" # get latest version from web page, mas info is not always correct
		[[ "$v" == "$vLatest" ]] && continue
		mas upgrade "$id" || return
	done

	ScriptEval network proxy config vars --enable || return
}

macAppVersionCurrent() { curl -L --silent "https://apps.apple.com/us/app/id$1" |grep '>Version' | cut -d">" -f2 | cut -d" " -f2 | cut -d"<" -f1; }

#
# Windows
#

# CCM (Microsoft Software Configuration Manager) Update
ccmInstalled() { IsPlatform win && [[ -f "$WINDIR/CCM/ClientUX/SCClient.exe" ]]; }

ccmUpdate()
{
	{ ! ccmInstalled || ! UpdateNeeded "update-ccm"; } && return
	start "$WINDIR/CCM/ClientUX/SCClient.exe" softwarecenter:Page=Updates
	UpdateDone "update-ccm" || return
}

# Windows Update
windowsInstalled() { IsPlatform win; }

windowsUpdate()
{
	{ ! windowsInstalled || ! UpdateNeeded "update-windows"; } && return
	FindInPath "wuapp.exe" > /dev/null && start "wuapp.exe" || cmd.exe /c start ms-settings:windowsupdate >& /dev/null; 
	UpdateDone "update-windows" || return
}

# WSL (Windows Subsystem for Linux)
wslInstalled() { IsPlatform win; }

wslUpdate()
{
	{ ! wslInstalled && ! UpdateNeeded "update-wsl"; } && return
	wsl update && UpdateDone "update-wsl"
}

wslInstalled() { IsPlatform win; }

wslUpdate()
{
	{ ! wslInstalled && ! UpdateNeeded "update-wsl"; } && return
	wsl update && UpdateDone "update-wsl"
}

#
# Zsh Update
#

zshInstalled() { InPath zsh && [[ -d "$ohMyZsh/.git" ]]; }

zshUpdate() 
{ 
	{ ! zshInstalled || ! UpdateNeeded "update-zsh"; } && return
	ZshHelper update && UpdateDone "update-zsh"
}

#
# helper
#

# doUpdate WHAT
doUpdate()
{
	local what="$1"
	IsInArray "$what" skip && return
	! ask "${what^} update" && return
	${what}Update
}

gitRepoInstalled() { [[ -d "$1/.git" ]]; }

gitRepoUpdate()
{
	local app="$1" dir="$2" service="$3"

	{ ! ${app}Installed || ! UpdateNeeded "update-$app"; } && return
	
	cd "$dir" || return
	sudor git fetch || return
	
	if [[ "$(sudor GitHelper upstream)" != "up-to-date" ]]; then
		sudor git pull || return
		serviceRestart "$service" || return
	fi
	
	UpdateDone "update-$app"
}

serviceRestart() { [[ ! $1 ]] && return; service restart "$1"; }

updateHosts()
{
	local h
	for h in "${hosts[@]}"; do
		header "update $(RemoveDnsSuffix "$h")"
		SshHelper connect --credential "$h" -- HostUpdate $whatArg $skipArg $force $prompt $method $noBak --protocol=smb || return
	done
}

ScriptRun "$@"
