#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: HostCleanup
	Update applications on the host"
	exit $1
}

args()
{
	unset command

	while [ "$1" != "" ]; do
		case "$1" in
			-h|--help) IsFunction "${command}Usage" && ${command}Usage 0 || usage 0;;		
			*) 
				IsFunction "${1,,}Update" && { command="${1,,}Update"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	command="${command:-update}"
	return 0
}

init() { sudo="sudo"; IsPlatform cygwin && sudo=""; return 0; }
run() {	args "$@" || return; init || return; $command; }


update()
{
	ask "Syncronize NAS files" && { nasFileSync || return; }
	RunPlatform Update || return
	adobeInstalled && ask "Adobe Create Cloud update" && { adobeUpdate || return; }
	nodeInstalled && ask "Node.js update" && { nodeUpdate || return; }
	rubyInstalled && ask "Ruby update" && { rubyUpdate || return; }
	pythonInstalled && ask "Python update" && { pythonUpdate || return; }

	ask "Cleanup" && { HostCleanup || return; }
}

UpdateDebian() 
{ 
	IsPlatform debian || return 0

	# update package list if it is out of date (not updated today)
	local update="true"; [[ "$(GetDateStamp)" == "$(GetFileDateStamp /var/cache/apt/pkgcache.bin)" ]] && update=
	[[ $update ]] && ask "Update apt package list" && { sudo apt-get update || return; }

	# return if there are no packages to upgrade
	update="true"; [[ "$(apt-check --human-readable 2>&1)" =~ "0 packages".* ]] && update=
	[[ $update ]] && ask "Upgrade apt packages" && { sudo apt-get dist-upgrade || return; }
	
	return 0;
}

UpdateMac()
{
	ask "Brew update" && { brewUpdate || return; }
	ask "App Store update" && { mas upgrade || return; }
	ask "Software update" && $sudo softwareupdate --install --all
	return 0;
}

UpdateWin()
{
	ask "Windows update" && { windowsUpdate || return; }
	IsPlatform cygwin && ask "Cygwin update" && { cygwinUpdate || return; }
	intelDriverUpdateInstalled && ask "Intel driver update" && { intelDriverUpdate || return; }
	gigabyteAppCenterInstalled && ask "Gigabyte Motherboard update" && { gigabyteAppCenter || return; }

	return 0
}

adobeInstalled() { [[ -f "$P32\Common Files\Adobe\OOBE\PDApp\UWA\UpdaterStartupUtility.exe" ]]; }
adobeUpdate() { adobeInstalled || return 0; start "$P32\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe"; }

cygwinUpdate() { IsPlatform win || return 0; cygwin new; }

gigabyteAppCenterInstalled() { [[ -f "$P32/GIGABYTE/AppCenter/ApCent.exe" ]]; }
gigabyteAppCenter() { start "$P32/GIGABYTE/AppCenter/ApCent.exe"; }

intelDriverUpdateInstalled() { [[ -d "$P32/Intel/Driver and Support Assistant" ]]; }
intelDriverUpdate() { start "https://www.intel.com/content/www/us/en/support/intel-driver-support-assistant.html"; }

brewUpdate()
{
	! IsPlatform mac && return

	# brew doctor || return # errors out in Catalina
	brew update || return
	brew upgrade || return
}

nasFileSync()
{
	local server=nas1

	if [[ "$HOSTNAME" == "$server" ]]; then
		cd "$BIN" && git fetch && git reset --hard origin/master || return
		cd "$UBIN" && git fetch && git reset --hard origin/master || return
		return
	fi

	! HostUtil available $server && return

	if GitHelper GitInstalled; then

		GitHelper changes "$BIN" && { GitHelper commit "$BIN" && pause; }
		cd "$BIN" && git pull --rebase

		GitHelper changes "$UBIN" && { GitHelper commit "$UBIN" && pause; }
		cd "$UBIN" && git pull --rebase

	fi

	SyncLocalFiles $server || return

	return 0
}

nodeInstalled() { which node >& /dev/null; }
nodeUpdate()
{
	nodeInstalled || return 0
	ask 'npm update' -dr n && { $sudo npm install -g npm@latest || return; }
	$sudo npm update -g || return
}

pythonInstalled() { which pip3 >& /dev/null; }
pythonUpdate()
{
	pythonInstalled || return 0
	intel IsIntelHost && ScriptEval intel SetProxy
	
	for pkg in $( pip3 list --outdated --format=columns | cut -d' ' -f 1 | ${G}tail --lines=+3 ); do
    sudo -H pip3 install $ignoreInstalled -U $pkg || return
	done

	return 0
}

rubyInstalled() { which gem >& /dev/null; }
rubyUpdate()
{	
	local nodoc=

	rubyInstalled || return
	
	[[ "$PLATFORM" == "mac" ]] && { export PATH="/usr/local/opt/ruby/bin:$PATH"; }
	[[ "$PLATFORM" == "win" ]] && nodoc=--no-document # faster and --system fails with documentation update on Cygwin

	$sudo gem update --system $nodoc
	$sudo gem update $nodoc
	return 0
}

windowsUpdate()
{ 
	IsPlatform win || return 0
	FindInPath "wuapp.exe" > /dev/null && start "wuapp.exe" || cmd.exe /c start ms-settings:windowsupdate >& /dev/null
}

run "$@"

