#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|profile|program|restart|start|startup|version](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start" 
	profileName="Fork$(ProperCase "$PLATFORM_OS")"
	unset program programVersion
	
	case "$PLATFORM_OS" in
		mac) program="/usr/local/bin/fork" programVersion="$P/Fork.app" profileDir="$UADATA/Fork" profileMask="*";;
		win) program="$UADATA/Fork/Fork.exe" profileDir="$UADATA/Fork" profileMask="settings.json";;
	esac

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { AppInstallCheck && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }
versionCommand() { AppInstallCheck && AppVersion "${programVersion:-$program}" | RemoveEnd ".0" | RemoveEnd ".0"; } # Windows reports version 1.85 as 1.85.0.0

ScriptRun "$@"
