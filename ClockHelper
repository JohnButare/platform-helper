#!/usr/bin/env bash
. script.sh || exit

usage() { ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... check|diff|fix|start|status|sync|terminal
$(ScriptName) commands."; }

checkUsage()
{
  ScriptUsageEcho "\
Usage: $(ScriptName) check
Return 1 if the clock is more than 1 second off of NTP time."
}

checkCommand() { 
  ! InPath chronyc && return 0
  local skew="$(chronyc tracking | grep "^System time" | cut -d" " -f8)"
  [[ $verbose ]] && echo "skew=$skew"
  (( $(echo "$skew <= 1" | bc -l) ))
}

statusUsage()
{
  ScriptUsageEcho "\
Usage: $(ScriptName) check
Show clock status using the Chrony service (if running) and the configured time server."
}

statusCommand()
{
  local service="chrony"; IsPlatform mac && service="org.tuxfamily.chronyc"
  if InPath chronyc && service running "$service"; then
    header "Chrony Sources"; chronyc sources || return
    header "Chrony Client"; chronyc tracking || return
  fi

  local timeServer="$(ConfigGet "timeServer")"
  if [[ $timeServer ]] && diffInstalled && IsAvailable "$timeServer"; then
    header "Time Server Comparison ($timeServer)"
    diff "$timeServer" || return;
  fi

  if [[ -f "/etc/chrony/chrony.conf" ]] && grep "^allow" "/etc/chrony/chrony.conf" >& /dev/null; then
    header "Chrony Server"
    sudoc chronyc serverstats || return
  fi

  ! IsPlatform win && return

  header "Windows"

  w32tm.exe /query /status /verbose || return

  {
    echo "reference: $(net.exe time '\\time.butare.net' | cut -d" " -f7)"
    echo "WSL: $(date +'%H:%M:%S:%N')"
    echo "Windows:$(cmd.exe /c time < /dev/null | cut -d: -f2-)"    
  } |& grep -vE "CMD|UNC|command|wsl|Enter" | RemoveEmptyLines
}

fixCommand()
{
  ! InPath chronyc && return
  [[ ! $force ]] && checkCommand && return
  IsPlatform win && RunQuiet RunScript --elevate w32tm.exe /resync
  RunQuiet sudoc chronyc makestep
}

startCommand()
{
  if [[ $DISPLAY ]] && InPath xclock; then coproc xclock -title $HOSTNAME -digital -update 1
  else terminalCommand
  fi
}

terminalCommand()
{
  if InPath tty-clock; then tty-clock -s -c; 
  else date;
  fi
}

#
# diff command
#

diffUsage() { EchoWrap "$1" "Usage: $(ScriptName) diff [HOST](time.apple.com)\nCompare system time with the specified host."; }
diffArgStart() { host="time.apple.com"; }
diffArgs() { (( $# == 0 )) && return; ScriptArgGet "host" -- "$@"; }
diffCommand() { diff "$host"; }

diff()
{
  local host="$1"
  if IsPlatform mac; then sudoc sntp -sS "$host"
  elif InPath ntpdate; then ntpdate -q "$host"
  fi
}

diffInstalled() { IsPlatform mac || InPath ntpdate; }

#
# sync command
#

syncUsage() { EchoWrap "$1" "Usage: $(ScriptName) sync [HOST](time.apple.com)\nSync system time against the specified host."; }
syncArgStart() { host="time.apple.com"; }
syncArgs() { (( $# == 0 )) && return; ScriptArgGet "host" -- "$@"; }

syncCommand()
{
  if IsPlatform mac; then sudoc sntp -sS "$host"
  elif InPath ntpdate; then sudoc ntpdate "$host"
  fi
}

ScriptRun "$@"
