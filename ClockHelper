#!/usr/bin/env bash
. script.sh || exit

usage()
{
  ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... check|fix|get|show|status
$(ScriptName) commands."
  exit $1
}

init()
{
  localDesc=""; IsPlatform win && localDesc="WSL "
  formatDisplay="%H:%M:%S.%N" formatSerial="%s.%N"; format="$formatDisplay"
  toleranceSeconds="1" toleranceWindowsSeconds="2"
}

#
# check command
#

checkUsage()
{
  ScriptUsageEcho "\
Usage: $(ScriptName) check [all|win|wsl](all)
Return 1 if the clock is more than $toleranceSeconds second off of reference time."
}

checkCommand() { checkAllCommand; }
checkAllCommand() { isTimeOkWin && isTimeOk; }
checkWinCommand() { isTimeOkWin; }
checkWslCommand() { isTimeOk; }

isTimeOk()
{
  log1 "checking ${localDesc}time..."  
  local skew; skew="$(getSkewNtp || getSkewChrony)" || return  
  ! isTimeSkewed "$skew"
} 

isTimeOkWin()
{
  ! IsPlatform win && return

  # check Windows clock
  local format="$formatSerial" toleranceSeconds="$toleranceWindowsSeconds"

  local timeWin; timeWin="$(getTimeLocalWin)" || return
  ! IsNumeric "$timeWin" && { ScriptErrQuiet "Windows time '$winTime' is not numeric"; return 1; }

  local timeNtp; what="ntp" timeNtp="$(getTimeNtp)" || return
  ! IsNumeric "$timeNtp" && { ScriptErrQuiet "NTP time '$timeNtp' is not numeric"; return 1; }

  local skew; skew="$(echo "$timeWin-$timeNtp" | bc -l | RemoveFront "-")" || return
  ! isTimeSkewed "$skew" " Windows"
}

# isTimeSkewed OFFSET_SECONDS DESC - return true if the time is skewed (OFFSET_SECONDS > toleranceSeconds)
isTimeSkewed()
{
  local skew="$1" desc="$2"
  local skewed="no"; (( $(echo "$skew > $toleranceSeconds" | bc -l) )) && skewed="yes"
  log1 "isTimeSkewed${desc}: skew=${skew}s tolerance=${toleranceSeconds}s skewed=$skewed"
  [[ "$skewed" == "yes" ]]  
}

#
# fix command
#

fixUsage() { EchoWrap "$1" "Usage: $(ScriptName) fix [HOST]($(getTimeServer))\nFix system clocks, using the specified host if possible."; }
fixArgStart() { host="$(getTimeServer)"; }
fixArgs() { (( $# == 0 )) && return; ScriptArgGet "host" -- "$@"; }

fixCommand()
{
  # check if we need to fix a clock
  [[ ! $force ]] && checkCommand && return

  # fix the clocks
  [[ ! $quiet ]] && echo -n "fixing..."
  RunPlatform fix || return
  EchoQuiet "done"

  # log if manual fix is required in Windows
  if [[ ! $quiet ]] && IsPlatform win && isTimeOk && ! isTimeOkWin; then
    [[ $brief ]] && echo
    echo "The Windows clock must be manually corrected"
    network domain joined && echo "Connect to the corporate network and run 'w32tm.exe /resync' or 'net.exe time sync /set'"
    return
  fi

  return 0
}

fixMac() { RunQuiet sudoc sntp -sS "$host"; }
fixLinux() { fixChrony || fixNtp; }
fixWin() { fixWinTime && fixLinux; }

fixNtp()
{
  ! isInstalledNtp && return
  [[ ! $quiet ]] && echo -n "ntp..."; [[ $verbose ]] && echo
  RunSilent sudoc ntpdate "$host"
}

fixChrony()
{
  ! isInstalledChrony && return
  [[ ! $quiet ]] && echo -n "chrony..."; [[ $verbose ]] && echo
  RunSilent sudoc chronyc makestep
}

fixWinTime()
{
  ! isInstalledWinTime && return
  [[ ! $quiet ]] && echo -n "win..."; [[ $verbose ]] && echo
  RunSilent RunScript --elevate w32tm.exe /resync
}

#
# get command
#

getUsage() { EchoWrap "Usage: $(ScriptName) sync [local|wsl|win|HOST](local)\nGet time from the specified host.  If host is a UNC, get time using the SMB protocol."; }
getArgStart() { host="local"; }
getArgs() { (( $# == 0 )) && return; ScriptArgGet "host" -- "$@"; host="${host,,}"; }

getCommand()
{
  IsLocalHost "$host" && host="local"

  if IsPlatform win && [[ "${host,,}" == "win" ]]; then getTimeLocalWin
  elif [[ "${host,,}" == @(local|win|wsl) ]]; then getTimeLocal
  elif IsUncPath "$host"; then getTimeSmb "$host"
  else getTimeNtp "$host"
  fi
}

getTimeLocal()
{
  logp1 "getting ${localDesc}time..."
  local time; time="$(${G}date +"$format")" || return
  logp1 "$time\n"; echo "$time"
}

getTimeLocalWin()
{
  logp1 "getting Windows time..."
  local time; time="$({ cmd.exe /c time < /dev/null; } |& cut -d: -f2- | grep -vE "CMD|UNC|command|wsl|Enter" | RemoveEmptyLines)";
  time="$(${G}date +"$format" -d "$time")"
  logp1 "$time\n"; echo "$time"
}

# getNtpTime [HOST](timeServer) - get time from host using the NTP protocol
getTimeNtp()
{
  local host="${host:-$(getTimeServer)}"

  ! InPath ntpdate && { ScriptErrQuiet "cannot get time from '$host' using NTP"; return 1; }
  HostAvailable "$host" || return

  logp1 "getting NTP time from $host..."
  local result; result="$(RunLog2 ntpdate -q "$host" | ${G}tail --lines=-1)" || return
  local time="$(echo "$result" | RemoveAfter "ntpdate" | awk '{ print $NF; }')" # ... HH:MM:SS ntpdate...
  local offset="$(echo "$result" | awk '{print $(NF - 1)}')"
  time="$(${G}date +"$format" -d "$time + $offset second")" || return
  logp1 "$time (offset $offset)\n"; echo "$time"
}

# getTimeSmb HOST - get time from host using the SMB protocol
getTimeSmb()
{
  local host="$(GetUncServer "$1")"

  logp1 "getting SMB time from $host..."
  if InPath net.exe; then
    local time; time="$(net.exe time '\\'"$host" | head -1 | RemoveCarriageReturn | cut -d" " -f6-)" || return
  else
    ScriptErrQuiet "cannot get time from '$host' using SMB"; return 1
  fi

  time="$(${G}date +"$format" -d "$time")" || return
  logp1 "$time\n"; echo "$time"
}

#
# show command
#

showUsage()
{
  ScriptUsageEcho "\
Usage: $(ScriptName) show [gui|terminal](gui)
Show a clock."
}

showCommand() { showGuiCommand; }

showGuiCommand()
{
  if [[ $DISPLAY ]] && InPath xclock; then coproc xclock -title $HOSTNAME -digital -update 1
  else showTerminalCommand
  fi
}

showTerminalCommand()
{
  if InPath tty-clock; then tty-clock -s -c; 
  else ${G}date;
  fi
}

#
# status command
#

statusUsage()
{
  ScriptUsageEcho "\
Usage: $(ScriptName) status [client|server](client)
Show clock status using the Chrony service (if running) and the configured time server."
}

statusCommand() { statusClientCommand; }

statusClientUsage() { ScriptUsageEcho "Usage: $(ScriptName) status client [all|chrony|ntp|win](all)"; }
statusClientCommand() { statusClientAllCommand; }
statusClientAllCommand() { statusClientChrony && statusClientNtp && statusClientWin; }
statusClientChronyCommand() { statusClientChrony; }
statusClientNtpCommand() { statusClientNtp; }
statusClientWinCommand() { statusClientWin; }

statusClientChrony()
{
  ! InPath chronyc && return
  InitColor

  local tracking; tracking="$(chronyc tracking)" || return
  local chronyServer="$(echo "$tracking" | grep "^Reference ID" | cut -d"(" -f2 | cut -d")" -f1)"
  local chronyReferenceTime="$(echo "$tracking" | grep "^Ref time" | cut -d: -f2- | RemoveSpaceTrim)"
  local chronyDifference="$(echo "$tracking" | grep "^System time" | cut -d: -f2 | cut -d" " -f2)"
  echo "   ${GREEN}chrony:${RESET} $(${G}date +"$formatDisplay" -d "$chronyReferenceTime UTC") ($chronyServer, $chronyDifference seconds from system)"
  [[ $verbose ]] && { chronyc tracking || return; }
  return 0
}

statusClientNtp()
{
  ! InPath ntpdate && return
  InitColor

  local timeServer="$(getTimeServer)"
  local format="$formatSerial"
  local winSerial; IsPlatform win && winSerial="$(getTimeLocalWin)"
  local localSerial="$(getTimeLocal)"
  local serverSerial="$(getTimeNtp "$timeServer")"

  # show reference server time  
  echo "${GREEN}reference:${RESET} $(${G}date +"$formatDisplay" -d @$serverSerial) ($timeServer)"

  # show local time
  if IsPlatform wsl2; then # WSL time and Windows time are the same in WSL1
    echo "    ${GREEN}local:${RESET} $(timeDiff "$winSerial" "$serverSerial")"
  elif IsPlatform wsl2; then # WSL time and Windows time are separate in WSL2
    echo "      ${GREEN}WSL:${RESET} $(timeDiff "$localSerial" "$serverSerial")"
    echo "  ${GREEN}windows:${RESET} $(timeDiff "$winSerial" "$serverSerial")"
  else
    echo "    ${GREEN}local:${RESET} $(timeDiff "$localSerial" "$serverSerial")"
  fi

  # show tolerance  
  if IsPlatform wsl1; then
    echo "${GREEN}tolerance:${RESET} $toleranceWindowsSeconds second(s)"
  elif IsPlatform wsl2; then
    echo "${GREEN}tolerance:${RESET} $toleranceSeconds second(s), windows $toleranceWindowsSeconds second(s)"
  else
    printf "${GREEN}tolerance:${RESET} $toleranceSeconds second(s)"
  fi
}

statusClientWin()
{
  IsPlatform win && return
  w32tm.exe /query /status /verbose || return
}

statusServerCommand() 
{ 
  ! isRunningChronyServer && return
  
  header "Chrony Sources"
  chronyc sources || return
  echo

  header "Chrony Server Statistics"
  sudoc chronyc serverstats
}

#
# helper
#

getSkewChrony() { InPath chronyc && chronyc tracking | grep "^System time" | cut -d" " -f8; }
getSkewNtp() { InPath ntpdate && ntpdate -q "${host:-$(getTimeServer)}" | ${G}tail --lines=-1 | awk '{ print $(NF-1); }' | RemoveFront "-" | RemoveFront "+"; }

isInstalledChrony() { InPath chronyc && [[ -f "/etc/chrony/chrony.conf" ]] && service exists chrony && service start chrony --wait --quiet; }
isInstalledNtp() { ! IsPlatform wsl1 && InPath ntpdate; }
isInstalledWinTime() { ! IsParallelsVm && CanElevate && service start W32Time --wait --quiet; } # W32Time not needed under Parallels and requires ability to elevate

getTimeServer()
{
  [[ $timeServerCache ]] && { echo "$timeServerCache"; return; }
  local server="$(ConfigGetCurrent "timeServer")"
  ! IsAvailable "$server" && server=""
  echo "${server:-time.apple.com}"
}

isRunningChronyServer()
{
  local service="chrony"; IsPlatform mac && service="org.tuxfamily.chronyc"
  [[ -f "/etc/chrony/chrony.conf" ]] && grep "^allow" "/etc/chrony/chrony.conf" >& /dev/null && service running "$chrony"
}

# timeDiff TIME_SERIAL REFERENCE_TIME_SERIAL - show time with reference difference as "TIME (DIFFERENCE)"
timeDiff()
{
  local time="$1" reference="$2"
  echo "$(${G}date +"$formatDisplay" -d @$time) ($(echo "$time-$reference" | bc -l) seconds from reference)"
}

ScriptRun "$@"
