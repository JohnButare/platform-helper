#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "Usage: $(ScriptName) [check|set|show|terminal](show)
Clock (date and time) maintenance.

	-H, --host HOST			time server host"; 
}

init() { defaultCommand="show"; }
argStart() { unset hostArg; }

opt()
{
	case "$1" in
		--H|--host=*|-H|-H=*) ScriptOptGet "hostArg" "host" "$@";;
		*) return 1;;
	esac
}

#
# commands
#

checkUsage() { EchoWrap "Usage: $(ScriptName) check\nCheck the current time and chrony time server (if running)."; }	
checkCommand()
{
	local host; host="$(timeServerGet)" || return
	if clockCompareInstalled && IsAvailable "$host"; then
		header "Compare ($host)"
		compareCommand "$host" || return;
	fi

	local service="chrony"; IsPlatform mac && service="org.tuxfamily.chronyc"
	if InPath chronyc && service running "$service"; then
		header "Chrony Sources"; chronyc sources || return
		header "Chrony Client"; chronyc tracking || return
	fi

	if [[ -f "/etc/chrony/chrony.conf" ]] && grep "^allow" "/etc/chrony/chrony.conf" >& /dev/null; then
		header "Chrony Server"
		sudoc chronyc serverstats || return
	fi
}

setUsage() { EchoWrap "Usage: $(ScriptName) set\nSet the current date and time from the time server."; }	
setCommand()
{
	local host; host="$(timeServerValidate)" || return

	hilight "Comparison ($host)..."; ntpdate -q "$host"
	hilight "Setting time..."; sudo ntpdate time || return
	hilight "Comparison ($host)..."; ntpdate -q "$host"
}

showUsage() { EchoWrap "Usage: $(ScriptName) show\nShow a clock, GUI clock preferred."; }	
showCommand()
{
	if [[ $DISPLAY ]] && InPath xclock; then coproc xclock -title $HOSTNAME -digital -update 1
	elif InPath tty-clock; then terminalCommand
	else date
	fi
}

terminalUsage() { EchoWrap "Usage: $(ScriptName) terminal\nShow a clock in the terminal."; }	
terminalCommand()
{
	if InPath tty-clock; then tty-clock -s -c; 
	else date;
	fi
} 

# ClockCompare [HOST](config|time) - compare systm clock with an NTP host (i.e. pi2, time.apple.com)
compareUsage() { EchoWrap "Usage: $(ScriptName) compare\nCompare the current date and time with a time server."; }	
compareCommand()
{
	local host; host="$(timeServerValidate)" || return
	
	if IsPlatform mac; then sudoc sntp -sS "$host"
	elif InPath ntpdate; then ntpdate -q "$host"
	fi
}

#
# helper
#

clockCompareInstalled() { IsPlatform mac || InPath ntpdate; }

timeServerGet()
{
	local host="$hostArg"
	[[ ! $host ]] && host="$(ConfigGet "timeServer")"
	[[ ! $host ]] && host="time"
	echo "$host"
}

timeServerValidate()
{
	local host="$(timeServerGet)"
	IsAvailable "$host" && { echo "$host"; return; }
	ScriptErr "the time server '$host' is not available"; return 1
}

ScriptRun "$@"
