#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|profile|program|restart|start|startup](wt)
$(ScriptName) commands."
}

init()
{
	defaultCommand="wt"
	profileName="WindowsTerminal"; IsPlatform wsl1 && profileName="WindowsTerminalWsl1"
	profileDir="$UADATA/Microsoft/Windows Terminal"
	profileMask="settings.json"
	program="$PUSER/Windows Terminal/wt.exe"; [[ ! -f "$program" ]] && program="$P/Windows Terminal/wt.exe"
	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "WindowsTerminal.exe"; }
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "WindowsTerminal.exe"; }
profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profile $noPrompt --no-control --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { pause; AppInstallCheck && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }

versionCommand()
{
	AppInstallCheck || return
	local v vFile; vFile="$(AppVersion "$program")" || return

	# hard code the file to version mapping, or get it freom the release page and cache it
	case "$vFile" in
		1.19.2311.13002) echo "1.19.3172.0";;
		*)
			local cache="version-WindowsTerminal-$vFile"
			v="$(UpdateGet "$cache")" && { echo "$v"; return; }
			v="$(curl --silent "https://github.com/microsoft/terminal/releases" | \
				${G}grep -A 10 "Binary files inside the unpackaged distribution archive bear the version number <code>$(echo "$vFile" | cut -d"." -f1-3)" | \
				${G}grep "Microsoft.WindowsTerminalPreview" | \
				shead -1 | \
				cut -d"_" -f2)" || return
			UpdateSet "$cache" "$v" && echo "$v"
			;;
	esac
}

#
# Wt Command
#

wtUsage()  { echot "Usage: $(ScriptName)  [OPTION]... [COMMAND]...\nRun a Windows Terminal (wt.exe) command."; }
wtArgStart() { unset -v wtArgs; }
wtArgs() { wtArgs="$@"; shift "$#"; }
wtCommand() { wt.exe ${wtArgs[@]} ${otherArgs[@]}; }

ScriptRun "$@"
