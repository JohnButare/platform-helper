#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|profile|program|restart|start|startup](wt)
$(ScriptName) commands."
}

init()
{
	defaultCommand="wt"
	profileName="WindowsTerminal"; IsPlatform wsl1 && profileName="WindowsTerminalWsl1"
	profileDir="$UADATA/Microsoft/Windows Terminal"
	profileMask="settings.json"
	program="$PUSER/Windows Terminal/wt.exe"; [[ ! -f "$program" ]] && program="$P/Windows Terminal/wt.exe"
	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "WindowsTerminal.exe"; }
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "WindowsTerminal.exe"; }
profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profile $noPrompt --no-control --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { pause; AppInstallCheck && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { startCommand; }

versionCommand()
{
	AppInstallCheck || return

	# get versions
	local v vFile; vFile="$(versionFileCommand)"
	log3 "vFile=$vFile"

	# hard code the file to version mapping, or get it freom the release page and cache it
	case "$vFile" in
		1.22.2408.23002) echo "1.22.2362.0";;
		1.19.2311.13002) echo "1.19.3172.0";;
		*)
			local cache="version-WindowsTerminal-$vFile" 
			if v="$(UpdateGet "$cache")"; then
				log3 "vFile=$vFile cache=$cache v=$v"
				echo "$v"; return
			fi

			# get release version if possible, otherwise use the file version
			local v vBear="${vFile%.*}${vFile##*.}"

			for i in {1..10}; do
				log3 "checking page $i..."
				v="$(curl --silent "https://github.com/microsoft/terminal/releases?page=$i" | \
					${G}grep -A 300 "Binary files inside the unpackaged distribution archive bear the version number <code>$vBear" | \
					${G}grep "expanded_assets" | shead -1 | ${G}sed 's/.*\///' | cut -d'"' -f1 | RemoveFront "v")"
				IsNumeric "$v" && break
			done

			log3 "vFile=$vFile cache=$cache vBear=$vBear v=$v"

			# validate
			[[ ! $v ]] && { ScriptErrQuiet "unable to get the Windows Terminal version"; return 1; }
			! IsNumeric "$v" && { ScriptErrQuiet  "the Windows Terminal version '$v' is not numeric"; return 1; }

			# cache
			UpdateSet "$cache" "$v" && echo "$v"
			;;
	esac
}

versionFileCommand()
{
	local v="$(AppVersion --allow-alpha "$program")" || return
	echo "$v" | RemoveEnd "-preview"
}

#
# Wt Command
#

wtUsage()  { echot "Usage: $(ScriptName)  [OPTION]... [COMMAND]...\nRun a Windows Terminal (wt.exe) command."; }
wtArgStart() { unset -v wtArgs; }
wtArgs() { wtArgs="$@"; shift "$#"; }
wtCommand() { wt.exe ${wtArgs[@]} ${otherArgs[@]}; }

ScriptRun "$@"
