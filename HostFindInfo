#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: HostFindInfo [target](local)
	Find information about the specified target (a host or directory).  If the target is \"host\", find
	a mounted host, such as a virtual machine host of a guest virtual machine.
	-d, --detail			include more detailed information
	-u, --user USER($USER)	the user to find directories for
    -ntc,--no-target-check 	do not check if the target is available"
	exit $1
}

args()
{
	unset detail target noTargetCheck

	while [ "$1" != "" ]; do
		case "$1" in
			-h|--help) IsFunction "${command}Usage" && ${command}Usage 0 || usage 0;;		
			-d|--detail) detail="true";;
			-ntc|--no-target-check) noTargetCheck="true";;
			-u|--user) shift; user="$1";;
			*) 
				! IsOption "$1" && [[ ! $target ]] && { target="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
}

run() {	args "$@"; [[ $detail ]] && FindDetail || FindDirs; }

FindDirs()
{
	CheckTarget || return
	GetDirs || return
	ScriptReturn $show "${dirVars[@]}"
}

CheckTarget()
{
	# check if this computer has another computer mounted on a disk, such as a virtual machine host of a guest virtual machine.
	if [[ "$target" == "host" ]]; then
		local disks; GetDisks disks

		for disk in "${disks[@]}"; do
			if [[ -d "$disk/usr/local" || -d "$disk/Applications" || -d "$disk/Users/Public" ]]; then
				target="$disk"
				break
			fi
		done

		return 1
	fi

	if [[ "$target" && ! "$noTargetCheck" && ! -d "$target" ]] && ! IsAvailable "$target"; then
		EchoErr "Host $target is not available"
		return 1
	fi

	return 0
}

GetDirs()
{	
	dirVars=(_root _platform _platformLike _platformId _data _datad  _pub _users _user _home _adata)
	for var in "${dirVars[@]}"; do unset $var; done

	_user="$user"

	# local
	if [[ ! "$target" ]]; then
		_platform="$PLATFORM"
		_platformLike="$PLATFORM_LIKE"
		_platformId="$PLATFORM_ID"
		_root="/"	
		_users="$USERS" 
		_pub="$PUB"
		_data="$DATA"
		_datad="$DATAD"
		[[ "$_user" == "$USER" ]] && _home="$HOME"

	# directory - mounted USB drive
	elif [[ -d "$target/public" ]]; then
		_root="$target"
		_pub="$_root/public"
		_data="$_pub/documents/data"
		[[ -d "$target/home" ]] && _home="$_root/home"

	# directory - mounted host
	elif [[ -d "$target" ]]; then

		if [[ -d "$target/usr/local" ]]; then
			_platform="linux"
		elif [[ -d "$target/Applications" ]]; then
			_platform="mac"; 
		elif [[ -d "$target/Users/Public" ]]; then
			_platform="win"
		else
			EchoErr "Unable to determine the platform of $targetDir"
			return 1
		fi
		_root="$target"

	# host UNC - nas
	elif [[ $target =~ nas ]]; then
		_platform="linux" _platformLike="synology"_platformId="dsm"
		[[ $target =~ "nas3" ]] && { _platformLike="qnap" _platformId="qts"; }
		GetNasDirs || return
	
	# host UNC - get platform using SSH
	elif GetPlatform "$target" >& /dev/null; then
		_platform="$platform" _platformLike="$platformLike"	_platformId="$platformId"
		_root="//$target/root"; IsPlat win && _root="//$target/c$"
		IsPlat qnap,synology && { GetNasDirs || return; }

	# host UNC - Windows c$ share
	elif unc mount "//$target/c$" >& /dev/null; then 
		_platform="win"
		_root="//$target/c$"

	else
		EchoErr "Unable to find os directories on $target"
		return 1

	fi

	[[ $_users ]] || { IsPlat mac,win && _users="$_root/Users"; IsPlat linux && _users="$_root/home"; };
	[[ $_pub ]] || { IsPlat mac,win && _pub="$_users/Shared"; IsPlat win && _pub="$_users/Public"; };
	[[ $_data ]] || { _data="$_root/usr/local/data"; IsPlat win && _data="$_pub/Documents/data"; }
	[[ $_datad ]] || { _datad="$_root"; }
	_user="${_user:-$USER}"
	[[ ! $_home && $_users ]] && _home="$_users/$_user"
	[[ $_adata ]] || { IsPlat mac && _adata="$_home/Library/Application Support"; IsPlat win && _adata="$WIN_HOME/AppData/Roaming"; }

	return 0
}

# GetNasDirs() - assume a NAS exposes these shares
GetNasDirs()
{
	_root="//$target"
	_users="$_root/homes"
	_pub="$_root/public"
	_data="$_pub/documents/data"
	_home="$_root/home"
}

IsPlat() { [[ ! $_platform ]] && return 1; IsPlatform $1 $_platform $_platformId $_platformLike; }

FindDetail()
{
	GetDirs || return

	infoVars=( pd ud udoc uhome udata adata)
	pd="$_pub/Desktop"
	ud="$_home/Desktop"
	udoc="$_home/Documents"
	uhome="$_home"
	udata="$udoc/data"
	adata="$_adata"

	case "$_platform" in

		win)
			infoVars+=( psm pp ao adata usm up )
			psm="$_root/mnt/c/ProgramData/Microsoft/Windows/Start Menu"
			pp="$psm/Programs"
			ao="$pp/Applications/Other"
			usm="$adata/Microsoft/Windows/Start Menu"	
			up="$usm/Programs"
			;;

		mac)
			infoVars+=( si la ula )
			si="/Library/StartupItems"
			la="/Library/LaunchAgents"
			ula="$HOME/Library/LaunchAgents"
			;;

	esac

	ScriptReturn "${dirVars[@]}" "${infoVars[@]}"
}

run "$@"
