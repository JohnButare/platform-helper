#!/usr/bin/env bash
. script.sh || return

run() {	init && args "$@" && "${command}Command" "${args[@]}"; }

init() { unset -v protocol; }

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [target](local)
Find information about the specified target (a host or directory).  
If the target is \"host\", find a mounted host, such as a virtual machine host of a guest virtual machine.

	-d,	--detail						include more detailed information
	-p, --protocol=[NFS|SMB|SSH](SMB)
	-u,	--user USER($USER)	the user to find directories for
	-v,	--verbose						display detailed output"
}

args()
{
	unset -v detail protocol target verbose

	# commands
	ScriptCommand info "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage 0 || usage 0;;		
			-d|--detail) detail="true";;
			-p|--protocol|-p*|--protocol=*) ScriptGetNetworkProtocol "$@" || return;;
			-u|--user) shift; user="$1";;
			-v|--verbose) verbose="--verbose";;
			--) shift; otherArgs+=("$@"); set --; break;;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"
	[[ $1 ]] && ScriptGetArg "target" "$1"; shift
	[[ $@ ]] && usage
	return 0
}

infoCommand()
{
	local basicVars=() detailVars=()

	protocol="${protocol:-smb}"

	getBasic || return
	[[ $detail ]] && { getDetail || return; }

 	ScriptReturn $verbose "${basicVars[@]}" "${detailVars[@]}"
}

#
# helper
#

getBasic()
{	
	# define GetPlatform function
	. bash.bashrc || return 

	# variables
	local var
	basicVars=(_platform _platformLike _platformId _data ) 		# platform
	basicVars+=(_root _media _pub _users _user _home _adata)	# directory
	basicVars+=(_protocol)																			# other
	for var in "${basicVars[@]}"; do unset $var; done

	# find target for a mounted host
	if [[ "$target" == "host" ]]; then

			local drive drives; IFS=$'\n' drives=( $(drive mounts) ); unset target
			for drive in "${drives[@]}"; do
				[[ -d "$drive/usr/local" || -d "$drive/Users/Public" ]] && { target="$drive"; break; }
			done

			[[ ! $target ]] && { ScriptErr "unable to find information for host"; return 1; }
	fi

	# local
	if [[ "$target" == @(|/) ]]; then
		_platform="$PLATFORM" _platformLike="$PLATFORM_LIKE" _platformId="$PLATFORM_ID"
		_root="/" _users="$USERS" _pub="$PUB"	_data="$DATA"; [[ ! $_user ]] && _home="$HOME"

	elif [[ -d "$target" ]]; then
		getBasicDir || return

	else
		getBasicHost || return
	fi	
	
	# standard shares - for QNAP and Synology SMB connections
	if [[ "$protocol" == "smb" ]] && IsHostPlatform qnap,synology; then
		_root="//$target" _users="$_root/homes" _pub="$_root/public" _data="$_pub/documents/data" _home="$_root/home" _media="$_root/data/media"
	fi

	# _users
	[[ ! $_users && $_root ]] && IsHostPlatform mac,win && _users="$_root/Users"
	[[ ! $_users && $_root ]] && IsHostPlatform linux && _users="$_root/home"

	# _pub
	[[ ! $_pub && $_users ]] && _pub="$_users/Shared"

	# _data
	[[ ! $_data && $_root ]] && _data="$_root/usr/local/data"

	# _user
	_user="${user:-$USER}"

	# _home
	[[ ! $_home && $_users ]] && _home="$_users/$_user"

	# _adata
	[[ ! $_adata && $_home ]] && IsHostPlatform mac && _adata="$_home/Library/Application Support"
	[[ ! $_adata && $_root ]] && IsHostPlatform win && _adata="$_root/mnt/c/Users/$_user/AppData/Roaming"

	return 0
}

getBasicDir()
{
	# dir - USB drive with a public and option home directory
	if [[ -d "$target/public" ]]; then
		_pub="$target/public" _data="$_pub/documents/data"
		[[ -d "$target/home" ]] && _home="$target/home"

	# dir -  public directory
	elif [[ -d "$target/documents/data/platform" ]]; then
		_pub="$target" _data="$_pub/documents/data"

	# dir - home directory
	elif [[ -d "$target/documents/data/bin" ]]; then
		_home="$target"

	# dir - host root directory
	else

		if [[ -d "$target/mnt/c" ]]; then
			_platform="win"
		elif [[ -d "$target/usr/local" ]]; then
			_platform="linux"
		elif [[ -d "$target/Applications" ]]; then
			_platform="mac"; 
		else
			ScriptErr "unable to find host information in \`$target\` directory"
			return 1
		fi
		_root="$target"

	fi
}

getBasicHost()
{
	local host="$(RemoveDnsSuffix "$target")"
	local network="$(UpdateGet "network")"

	# Wiggin hosts - Synology 
	if [[ "$network" == "wiggin" && "$host" == @(nas1) ]]; then
		_platform="linux" _platformLike="synology" _platformId="dsm" _root="//$target/root"
	
	# Wiggin hosts - QNAP
	elif [[ "$network" == "wiggin" && "$host" == @(nas3) ]]; then
		_platform="linux" _platformLike="qnap" _platformId="qts" _root="//$target/root"
	
	# other host - determine platform using SSH
	elif GetPlatform "$target" >& /dev/null; then
		_platform="$platform" _platformLike="$platformLike"	_platformId="$platformId" _root="//$target/root"

		# fall back to SSH if SMB is not available
		[[ "$protocol" == "smb" ]] && ! IsAvailablePort "$target" "445" && protocol="ssh"
	
	else
		ScriptErr "host $target is not available"
		return 1

	fi

	# Synology does not support SMB connections
	IsPlatform synology && protocol="--ssh"

	_protocol="$protocol"

	return 0
}

getDetail()
{
	# variables
	local var; detailVars=( pd ud udoc uhome udata adata)
	for var in "${detailVars[@]}"; do unset $var; done

	# additional directory information
	pd="$_pub/Desktop"
	ud="$_home/Desktop"
	udoc="$_home/Documents"
	uhome="$_home"
	udata="$udoc/data"
	adata="$_adata"

	#
	# platform information
	#
	case "$_platform" in

		win)
			detailVars+=( psm pp ao adata usm up )
			psm="$_root/mnt/c/ProgramData/Microsoft/Windows/Start Menu"
			pp="$psm/Programs"
			ao="$pp/Applications/Other"
			usm="$adata/Microsoft/Windows/Start Menu"	
			up="$usm/Programs"
			;;

		mac)
			detailVars+=( si la ula )
			si="/Library/StartupItems"
			la="/Library/LaunchAgents"
			ula="$HOME/Library/LaunchAgents"
			;;

	esac

	#
	# host specific information
	#
	local vars=( _minimalInstall )
	unset "${vars[@]}"
	detailVars+=( "${vars[@]}" )
		
	# limit what is installed on embedded systems such as Raspberry Pi, nas, and docker systems
	IsHostPlatform pi,pikernel && _minimalInstall="true" 
	[[ ! $target ]] && IsPlatform docker && _minimalInstall="true"

	return 0
}

run "$@"
