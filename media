#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... backup|date|get|info|rename
media commands."
}

init() 
{
	dateTakenMetadata=( -Make -Model -HandlerVendorId -Keywords 
		-CompressorName -Software -CreatorTool -DateTimeOriginal -CreationTime
		-ImportedFileSizeBytes 	-CreateDate -MediaCreateDate -ModifyDate)

	pictureExtensions=( jpg png )
	videoExtensions=( 3gp avi mpg mp4 mts m2ts moff modd mov 3gp )
}

argStart() { unset -v dest person source; operation="move"; }

opt() 
{
	case "$1" in
		-c|--copy) operation="copy";;
		-d|--dest|-d=*|--dest=*) ScriptOptGet "dest" "$@";;
		-m|--move) operation="move";;
		-p|--person|-p=*|--person=*) ScriptOptGet "person" "$@";;
		-s|--source|-s=*|--source=*) ScriptOptGet "source" "$@";;
		*) return 1;;
	esac
}

#
# Backup Command
#

backupUsage()
{
	echot "Usage: $(ScriptName) backup
Backup media."
}

backupCommand()
{
	printf "backup..."

	printf "data..."
	local dir1="$(unc mount public)/media" || return
	local dir2="$(unc mount media)" || return
	BeyondCompare "$dir1" "$dir2" &

	local drive drives; IFS=$'\n' ArrayMake drives "$(drive mounts)"
	for drive in "${drives[@]}"; do
		[[ ! "$(drive label "$drive")" =~ backup ]] && continue
		local dir="$(drive mount "$drive")" || continue
		[[ ! -d "$dir/media" ]] && continue

		printf "$(drive label "$drive")..."
		BeyondCompare "$dir" "/mnt/$drive/media" &
	done

	echo "done"
}

#
# Date Command
#

dateUsage()
{
	echot "Usage: $(ScriptName) date FILES
Add DateTimeOriginal to the specified files."
}

dateCommand() { for file in "${files[@]}"; do addDate "$file" || return; done; }

addDate()
{
	local file="$1"
	local fileName="$(GetFileName "$file")"; printf "$fileName..."
	local mediaType; mediaType="$(getMediaType "$fileName")" || return
	local -A fileMetadata; metadataGet "$file" fileMetadata || return
	local dateTaken; getDateTaken "$file" fileMetadata dateTaken && { echo "date already present"; return 0; }
	local modificationDate="$(${G}stat -c%y "$file")" || return;
	local additionalMetadata=( "-DateTimeOriginal=$(exifDate "$modificationDate")" )
	printf "adding date..."; metadataAdd "$file" "${additionalMetadata[@]}"; echo "done"
}

#
# Get Command
#

getUsage()
{
	echot "Usage: $(ScriptName) get
Get media from a device.

	-c, --copy				copy media 
	-d, --dest DEST 	destination directory
	-m, --move				move media
	-p, --person NAME person's name used in the destination folder
	-s, --source DIR	media source directory"
}

getCommand()
{
	getInit || return
	
	if [[ $source ]]; then
		processDir "$(GetFullPath "$source")" || return
	else
		for dir in "${localDirs[@]}"; do processDir "$dir" || return; done

		drive mount all || return

		local drive drives; IFS=$'\n' ArrayMake drives "$(drive mounts)"
		for drive in "${drives[@]}"; do processDrive "$drive"; done

		drive unmount all || return
	fi
}

getInit()
{
	localDirs=( "$DOC/data/download/pictures" )

	! InPath exiftool && { package exiftool || return; }

	# set directioes to check.  options: GMT, copy, move
	unset mediaDirs
	mediaDirs=(  )
	mediaDirs+=( "/dcim/100GOPRO" ) 
	mediaDirs+=( "/dcim/100msdcf" "/dcim/101msdcf" "/avchd/bdmv/stream" ) # Sony-DSC-HX5V
	mediaDirs+=( "/DCIM/100EOS_R"  ) # Canon EOS
	
	fileFormat="^[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9] [0-9][0-9]_[0-9][0-9]_[0-9][0-9]" # YYYY_MM_DD HH_MM_SS

	if [[ $source && ! -d "$source" ]]; then
		IsUncPath "$source" && { source="$(unc mount "$dest")"; } || return
		[[ ! -d "$source" ]] && { EchoErr "source directory \"$source\" does not exist"; return 1; }
	fi

	unset useSuffix pictureDir videoDir

	if [[ $dest ]]; then
		IsUncPath "$dest" && { dest="$(unc mount "$dest")" || return; }
	else
		dest="$(unc mount "//file/public/media")" || return
		useSuffix="true"
	fi

	[[ ! -d "$dest" ]] && { EchoErr "destination directory  \"$dest\" does not exit"; return 1; }

	if [[ $useSuffix ]]; then
		[[ ! $person ]] && person="$(FullName)"

		pictureDir="$dest/photo/Camera/$person" || return
		${G}mkdir --parents "$pictureDir" || return

		videoDir="$dest/video/Camera/$person" || return
		${G}mkdir --parents "$videoDir" || return
	fi

	return 0
}

processDir()
{ 
	local dir="$1"
	
	[[ ! -d "$dir" ]] && return

	printf "Processing $dir..."	

	shopt -s nullglob
	for file in "$dir/"*; do
		processFile "$file" || return
	done

	echo "done"
}

processDrive()
{
	local drive="$1" dir

	for dir in "${mediaDirs[@]}"; do
		processDir "$drive$dir" || return
	done
}

processFile()
{
	local src="$1" additionalMetadata
	local srcName="$(GetFileName "$src")"
	local ext="$(GetFileExtension "$src" | LowerCase)"
	local srcDesc="$(GetFileNameWithoutExtension "$src")"
	local mediaType; mediaType="$(getMediaType "$srcName")" || return
	local -A srcMetadata; metadataGet "$src" srcMetadata || return
	local dateTaken; getDateTaken "$src" srcMetadata dateTaken || { echo "no DateTaken"; return 0; }
	local srcNamePrefix; getNewName "$dateTaken" srcNamePrefix || return
	local destDir="$dest"
	
	if [[ $useSuffix ]]; then
		destDir="$pictureDir"; [[ "$mediaType" == "video" ]] && destDir="$videoDir"
		destDir="$destDir/$(${G}date +%Y -d "$dateTaken")/$(${G}date +%Y%m -d "$dateTaken")" # add YYYY/YYYYMM
		${G}mkdir --parents "$destDir" || return
	fi
	
	local dest="$destDir/$srcNamePrefix.$ext"

	[[ $verbose ]] && metadataPrint "(metadata)" srcMetadata

	local suffix alreadyProcessed # add a suffix for media taken in the same second
	while [[ -f "$dest" ]]; do
		IsFileSame "$src" "$dest" && { alreadyProcessed="true"; break; }
		(( ++suffix )); dest="$destDir/$srcNamePrefix-$suffix.$ext"
	done

	printf "$srcNamePrefix${suffix:+-$suffix}..."

	if [[ $alreadyProcessed ]]; then
		printf "skipping (already processed)..."
	else
		[[ $verbose ]] && { echo "(cp \"$src\" \"$dest\")"; }
		[[ ! $test ]] && { cp "$src" "$dest" || return; }
	fi

	if [[ "$operation" == "move" ]]; then
		log1 "(rm \"$src\")"
		[[ ! $test ]] && { rm "$src" || return; }
	fi

	[[ $verbose ]] && pause

	return 0
}

#
# Info Command
#

infoUsage()
{
	echot "Usage: $(ScriptName) info FILES
Display media metadata for the specified files."
}

infoCommand() { for file in "${files[@]}"; do info "$file" || return; done; }

info()
{
	local file="$1"
	declare -A fileMetadata; metadataGet "$file" fileMetadata || return
	metadataPrint "$file" fileMetadata
}

#
# Rename Command
#

renameUsage()
{
	echot "Usage: $(ScriptName) rename FILES
Rename specified files using the date taken."
}

renameCommand() { for file in "${files[@]}"; do rename "$file" || return; done; }

rename()
{
	local file="$1"
	local path="$(GetFilePath "$file")"
	local fileName="$(GetFileName "$file" fileName)"; printf "$fileName..."
	local name="$(GetFileNameWithoutExtension "$file")"; 
	local ext="$(GetFileExtension "$file" | LowerCase)"
	local suffix; [[ "$name" =~ .*-[0-9]+ ]] && suffix="-${name##*-}"
	local -A fileMetadata; metadataGet "$file" fileMetadata || return
	local dateTaken; getDateTaken "$file" fileMetadata dateTaken || { echo "no DateTaken"; return 0; }
	local newName; getNewName "$dateTaken" newName || return
	local expected="$newName$suffix" 
	local newFile="${path:+$path/}$expected.$ext"

	[[ "$name" == "$expected" && ! $additionalMetadata ]] && { echo "name is correct"; return 0; }

	if [[ "$name" != "$expected" ]]; then
		printf "$expected..."
		[[ $verbose ]] && { echo "(mv \"$file\" \"$newFile\")" || return; }
		[[ ! $test ]] && { mv "$file" "$newFile" || return; }
	fi

	[[ $additionalMetadata ]] && metadataAdd "$newFile" "${additionalMetadata[@]}"

	[[ ! $verbose ]] && echo "done"
}

#
# helper
# 

exifDate() {	r "$(${G}date "+%Y:%m:%d %H:%M:%S" -d "$1")" $2; }
getNewName() { r "$(${G}date "+%Y_%m_%d %H_%M_%S" -d "$1")" $2; }
normalizeDate() {	r "$(${G}date "+%Y-%m-%d %H:%M:%S" -d "$1")" $2; }

getDateTaken() # returns the files date taken in the format YYYY-MM-DD HH:MM:SS
{
	local file="$1" metadataVar="$2" returnVar="$3" s
	local -A md; ArrayCopy $metadataVar md
	local mm="${md[Make]}-${md[Model]}" dto="${md[DateTimeOriginal]}" isUtc
	local mediaType; mediaType="$(getMediaType "$file")" || return

	# Apple
	if [[ "$mm" ==  @(Apple-iPad|Apple-iPhone*) || "${md[HandlerVendorID]}" == "Apple" ]]; then
		s="$dto"
		[[ "$mediaType" == "video" ]] && { s="${md[MediaCreateDate]}"; isUtc=true; }

	# Use DateTimeOriginal if present - Windows shows this as Date taken
	elif [[ $dto ]]; then
		s="$dto"

	# no metadata - file modification date
	elif (( ${#md[@]} == 0 )); then
		printf "no metadata (using file modification date)..."
		s="$(${G}stat -c%y "$file")" || return;
		additionalMetadata+=( "-DateTimeOriginal=$(exifDate "$s")" )

	# metadata is preset, but could not determine the original datetime
	else
		return 1

	fi

	[[ ! $s ]] && return 1
	[[ $isUtc ]] && s="$(${G}date -d "${md[CreateDate]} UTC")";
	normalizeDate "$s" $returnVar
}

getMediaType()
{
	local file="$(GetFileName "$1")"
	local ext="$(GetFileExtension "$file" | LowerCase)"

	if [[ ! $ext ]]; then
		ScriptErr "unable to determine the media type for file '$file' since it does not have an extension"; return 1
	elif IsInArray "$ext" pictureExtensions; then
		echo "picture"
	elif IsInArray "$ext" videoExtensions; then
	 echo "video"
	else
		ScriptErr "file '$file' is not a known media type"; return 1
	fi 
}

metadataAdd()
{
	local file="$1" metadata=( "${@:2}" )
	printf "metadata..."
	[[ $verbose ]] && { echo "(exiftool \"$file\" ${metadata[@]})"; }
	[[ $test ]] && return
	if ! exiftool -preserve "$(utw "$file")" "${metadata[@]}" >& /dev/null; then
		EchoErr -e "\nmedia get: unable to add metadata to \`$file\`"; return 1
	fi
}

metadataGet() # metadataGet FILE ARRAY [METADATA...](dateTakenMetadata) - put file metadata into an associate array
{
	local file="$1" array="$2" metadata=( "${@:3}" ) result

	[[ ! $metadata ]] && metadata=( "${dateTakenMetadata[@]}" )

	result="$(exiftool -fast2 -s2 "$file" "${metadata[@]}" 2> /dev/null | sed -e 's/: /]="/' -e 's/^/[/' -e 's/$/"/' -e 's/:/-/' -e 's/:/-/' )"
	eval "$array=( $result )"
}

metadataPrint()
{
	local file="$1" metadataVar="$2"
	local -A md; ArrayCopy $metadataVar md

	printf "%s:\n" "$(GetFileName "$file")"
	for var in "${!md[@]}"; do printf "	$var=${md[$var]}\n"; done
	echo ""
}

ScriptRun "$@"
