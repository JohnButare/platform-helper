#!/bin/bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: media collect|get|sync
  local [NUM](100)		copy NUM random picutres to the local computer
  frame  							copy media to a picture frame 
  nas									synchronize media with nas"
	exit $1
}

args()
{
	unset -v command help
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			*)
				! IsOption "$1" && IsInArray "$1" versions && { version="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(get) ]] && break																						# defer argument processing
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=("$@")
}

init() 
{
	mediaRoo=oversoul
	mediaUnc="//$mediaRoo/Public"
	nas="//nas"
	#videoSources=`"$mediaUnc/Videos" "$mediaDriveDir"`

	# getDate - get videos only after the specified date, useful if #ove pictures
	getDate=1/1/2000

	# Music: exclude WPL (Windows Playlists) - Sonos shows WPL but doesn't support auto playlists, so save auto playlists as M3U before copying
	musicFilters=-*.wpl
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

getCommand()
{
	GetArgs "${args[@]}" || return
	GetInit || return
	
	if [[ "$source" ]]; then
		ProcessDir || return
	else
		for dir in "${localDirs[@]}"; do ProcessDir "$dir" || return; done
		for drive in "/cygdrive/"*; do ProcessDrive "$drive" || return; done
	fi

}

ProcessDrive()
{
	local drive="$1" dir gmt operation="$operation" options
	
	[[ "$drive" == "c" ]] && return 0

	for dir in "${externalDirs[@]}"; do
		IFS=":" read -a options <<<"$dir"; dir="${options[0]}"
		IsInArray GMT options && gmt=true
		if [[ "$operation" == "default" ]]; then
			if IsInArray copy options; then operation="copy"
			elif IsInArray move options; then operation="move"
			else operation="move"; fi
		fi
		ProcessDir "${drive}${dir}" || return
	done
}

ProcessDir()
{ 
	local dir="$1"
	[[ ! -d "$dir" ]] && return
	shopt -s  nullglob
	for file in "$dir/"*; do ProcessFile "$file" || return; done
}

ProcessFile()
{
	local file="$1" fileName ext fileDesc mediaType destPrefix
	GetFileName "$file" fileName || return
	GetFileExtension "$file" ext || return
	GetFileNameWithoutExtension "$file" fileDesc || return

	[[ "$operation" == "default" ]] && operation="move"

	if IsInArray "$ext" pictureExtensions; then
		mediaType="picture"; destPrefix="$destPicturePrefix"
	elif IsInArray "$ext" videoExtensions; then
	 mediaType="video"; destPrefix="$destVideoPrefix"
	else
		return 1
	fi 

	if [[ ! -d "$destPrefix" ]]; then
		ask "Create the destination directory $destPrefix" || return 1
		mkdir "$destPrefix" || return
	fi

	ProcessDate "$file" || return
	CompareTime $seconds "<" $getDate && return

	local destDir="$destPrefix/$year/$yearMonth" 
	[[ ! -d "$destDir" ]] && { mkdir --parents "$destDir" || return; }

	# check for duplicate files (same name and size)
	local fileSize="$(GetFileSize "$file" B)"
	local dups; dups="$(find "$destDir" -maxdepth 1 -type f -size "${fileSize}c" '(' -iname "$fileNameDateTime.$ext" -or -iname "$fileNameDateTime-*.$ext" -or -iname "$fileName" ')')" || return
	if [[ "$dups" != "" ]]; then
		[[ "$operation" == "copy" ]] && return 0 
		printf "Removing duplicate file \`$fileDesc\`..."
		[[ $test ]] && printf "(removing \`$file\`)" || { DelFile "$file" || return; }
		echo "done"
		return 0
	fi

	# increment suffix if file exists with a different size (rapid picture taking) 
	local destFileDesc="$fileNameDateTime" suffix=0
	while [[ -f "$destDir/$destFileDesc.$ext" ]]; do
		(( ++suffix ))
		destFileDesc="$fileNameDateTime-$suffix"
	done

	local srcDir destFileName="$destFileDesc.$ext"
	GetFilePath "$file" srcDir || return

	IsInArray "$destDir" processedDirs || processedDirs+=( "$destDir" )

	local operationDesc="Moving"; [[ "$operation" == "copy" ]] && operationDesc="Copying"
	printf "$operationDesc $fileName ($destFileDesc)..."
	
	local bigFile; (( fileSize >= 1000000 )) && bigFile="true"
	GetCopyFile "$file" "$destDir" || return

	if [[ ! $noiCloud && -d "$iCloudPhotoUpload" && "$dir" != "$iCloudPhotoStream" ]]; then
		printf "iCloud..."; destDir="$iCloudPhotoUpload"; GetCopyFile || return
	fi

	if [[ "$operation" == "move" ]]; then
		[[ $test ]] && printf "(rm \`$file\`)" || { DelFile "$file" || return; }
	fi

	[[ ! $bigFile ]] && echo "done"
	[[ $test ]] && pause
}

GetCopyFile() 
{
	[[ $test ]] && { printf "(cp \`$file\` \`$destDir/$destFileName\`)"; return 0; }

	[[ ! $bigFile ]] && { cp "$file" "$destDir/$destFileName"; return; }

	[[ "$fileName" != "$destFileName" ]] && { mv "$file" "$srcDir/$destFileName" || return; }
	CopyDir "$file" "$destDir" "$destFileName" || return
	[[ "$fileName" != "$destFileName" ]] && { mv "$srcDir/$destFileName" "$file" || return; }
}

ProcessDate()
{
	[[ "$mediaType" == "picture" ]] && { ProcessExifDate "$file" || return; } ||
		{ ProcessFileDate "$file" || return; }

	fileDate="${fileDateTime% *}"; fileTime="${fileDateTime#* }"
	year="${fileDateTime%%-*}"
	yearMonth="${fileDate%-*}"; yearMonth="${yearMonth/-/}"
	seconds="$(GetSeconds "$fileDateTime")"
	fileNameDateTime="${fileDate//-/_} ${fileTime//:/_}"
	
	# ensure date returned is the date time media was take (start of video)
	# if needed: add GMT adjustment code, date/time from filename 
	#echo "$fileName-$fileDate-$fileTime"
}

ProcessExifDate()
{
	fileDateTime=( $(exiftool -s3 -d "%Y-%m-%d %H:%M:%S" "$(utw "$file")" -CreateDate -ModifyDate -FileCreateDate | sed 's/\r\n//') )
	fileDateTime="${fileDateTime[@]:0:2}"
	[[ $fileDateTime ]] || ProcessFileDate
}

ProcessFileDate()
{
	fileDateTime="$(stat -c%w "$1")" || return
	fileDateTime="${fileDateTime%%.*}"	
}

getUsage() { echot "\
usage: media get 
	-c, --copy				copy media 
	-d, --dest DEST 	destination directory
	-m, --move				move media
	    --no-iCloud 		do not get pictures from iCloud
	-p, --person NAME person's name used in the destination folder
	-s, --source DIR	media source directory
	-t, --test 				test the operation without making any changes
"; exit $1; }

GetArgs()
{
	unset noiCloud test person
	dest="$PUB" operation="default" ;
	while (( $# != 0 )); do
		case "$1" in
			--copy|-c) operation="copy";;
			--dest) dest="$2"; shift;;
			--move|-m) operation="move";;
			--no-icloud) noiCloud="true";;
			--person|-p) person="$2"; shift;;
			--test|-t) test="--test";;
			--source|-s) source="$2"; shift;;
			*) getUsage 1;;
		esac
		shift
	done
	[[ "$dest" && ! -d "$dest" ]] && { EchoErr "media get: directory  \`$dest\` does not exit"; return 1; }
	[[ ! $person ]] && person="$(FullName)"
	return 0
}

GetInit()
{
	getDate="$(GetSeconds 1/1/2000)"

	pictureExtensions=( jpg )
	videoExtensions=( 3gp mpg mp4 mts m2ts moff modd mov 3gp )

	iCloudPhotoStream="$userPictures/Photo Stream/My Photo Stream"
	iCloudPhotoUpload="$userPictures/Photo Stream/Uploads"

	localDirs=( "$DOC/data/download/pictures" "$iCloudPhotoStream" "$HOME/Dropbox/Camera Uploads" )

	# options: GMT, copy, move
	externalDirs=( /DCIM/100OLYMP /mssony/moml0001 /dcim/100PHOTO )
	externalDirs+=( /DCIM/Camera /handcent/download ) # Android
	externalDirs+=( /private/avchd/bdmv/stream:move ) # Sony DSC-HX5v /private/avchd/bdmv/stream (video) /dcim/101msdcf (pictures)
	externalDirs+=( /dcim/100msdcf /dcim/101msdcf /mp_root/101pnv01:copy /avchd/bdmv/stream:copy ) # Sony HDR-SR12 (HandyCam) and DSC-U60 (underwater camera) /dcim/100msdcf /dcim/101msdcf /mp_root/101pnv01 /avchd/dbmv/stream, copy videos to preserve integrity of media catalog

	local nas="nas.hagerman.butare.net" suffix="Camera/$person"
	if network cache "$nas"; then
		destPicturePrefix="//$nas/photo/$suffix"
		destVideoPrefix="//$nas/video/$suffix"
	else
		destPicturePrefix="$(PublicPictures)/$suffix"
		destVideoPrefix="$(PublicVideos)/$suffix"
	fi

	processedDirs=()
}

run "$@"
