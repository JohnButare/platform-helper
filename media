#!/bin/bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: media collect|get|sync
  local [NUM](100)		copy NUM random picutres to the local computer
  frame  							copy media to a picture frame 
  nas									synchronize media with nas"
	exit $1
}

args()
{
	unset -v command help
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			*)
				! IsOption "$1" && IsInArray "$1" versions && { version="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(get) ]] && break																						# defer argument processing
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=("$@")
}

init() 
{
	mediaRoo=oversoul
	mediaUnc="//$mediaRoo/Public"
	nas="//nas"
	#videoSources=`"$mediaUnc/Videos" "$mediaDriveDir"`

	# getDate - get videos only after the specified date, useful if #ove pictures
	getDate=1/1/2000

	# Music: exclude WPL (Windows Playlists) - Sonos shows WPL but doesn't support auto playlists, so save auto playlists as M3U before copying
	musicFilters=-*.wpl
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

getCommand()
{
	GetInit || return
	GetArgs "${args[@]}" || return
	
	if [[ "$source" ]]; then
		processDir || return
	else
		for dir in "${pictureDirs[@]}"; do ProcessDir "$dir" || return; done
		for drive in "/cygdrive/"*; do ProcessDrive "$drive" || return; done
	fi

}

ProcessDrive()
{
	local drive="$1" dir gmt operation="$operation" options

	for dir in "${mediaDirs[@]}"; do
		IFS=":" read -a options <<<"$dir"; dir="${options[0]}"
		IsInArray GMT options && gmt=true
		if [[ "$operation" == "default" ]]; then
			if IsInArray copy options; then operation="copy"
			elif IsInArray move options; then operation="move"
			else operation="move"; fi
		fi
		ProcessDir "${drive}${dir}" || return
	done
}

ProcessDir()
{ 
	local dir="$1"
	[[ ! -d "$dir" ]] && return
	shopt -s  nullglob
	for file in "$dir/"*; do ProcessFile "$file" || return; done
}

ProcessFile()
{
	local file="$1"
	echo $file # here
}

# [test] [AskRemoveDups] [NoRename] [KeepName]
getUsage() { echot "\
usage: media get 
	-c, --copy				copy media 
	-d, --dest DEST 	destination directory
	-m, --move				move media
	    --no-iCloud 		do not get pictures from iCloud
	-p, --person NAME person's name used in the destination folder
	-s, --source DIR	media source directory
	-t, --test 				test the operation without making any changes
"; exit $1; }

GetArgs()
{
	unset noiCloud test
	dest="$PUB"; operation="default"; personName="$fullName";
	while (( $# != 0 )); do
		case "$1" in
			--copy|-c) operation="copy";;
			--dest) dest="$2"; shift;;
			--move|-m) operation="move";;
			--no-icloud) noiCloud="true";;
			--person|-p) personName="$2"; shift;;
			--test|-t) test="true";;
			--source|-s) source="$2"; shift;;
			*) getUsage 1;;
		esac
		shift
	done
	[[ "$dest" && ! -d "$dest" ]] && { EchoErr "media get: directory  \`$dest\` does not exit"; return 1; }
	return 0
}

GetInit()
{
	videoExtensions=( 3gp mpg mp4 mts m2ts moff modd mov 3gp )

	fullName="$(FullName)"
	userPictures="$(UserPictures)"
	userVideos="$(UserVideos)"

	iCloudPhotoStream="$userPictures/Photo Stream/My Photo Stream"
	iCloudPhotoUpload="$userPictures/Photo Stream/Uploads"

	pictureDirs=( "$DOC/data/download/pictures" "$iCloudPhotoStream" "$HOME/Dropbox/Camera Uploads" )
		
	# Media Directories: GMT, copy, move
	mediaDirs=( /DCIM/100OLYMP /mssony/moml0001 /dcim/100PHOTO )
	mediaDirs+=( /DCIM/Camera /handcent/download ) # Android
	mediaDirs+=( /private/avchd/bdmv/stream:move ) # Sony DSC-HX5v /private/avchd/bdmv/stream (video) /dcim/101msdcf (pictures)
	mediaDirs+=( /dcim/100msdcf /dcim/101msdcf /mp_root/101pnv01:copy /avchd/bdmv/stream:copy ) # Sony HDR-SR12 (HandyCam) and DSC-U60 (underwater camera) /dcim/100msdcf /dcim/101msdcf /mp_root/101pnv01 /avchd/dbmv/stream, copy videos to preserve integrity of media catalog
}

run "$@"
