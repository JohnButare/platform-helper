#!/bin/bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: media collect|get|sync
	info FILE 					display FILE metadata
	rename FILE						rename FILE using the date taken  
  local [NUM](100)		copy NUM random picutres to the local computer
  frame  							copy media to a picture frame 
  nas									synchronize media with nas

  -t, --test 				test the operation without making any changes
	-v, --verbose			verbose output"
	exit $1
}

getUsage() { echot "\
usage: media get 
	-c, --copy				copy media 
	-d, --dest DEST 	destination directory
	-m, --move				move media
	    --no-metadata do not add import metadata
	-p, --person NAME person's name used in the destination folder
	-s, --source DIR	media source directory
	-t, --test 				test the operation without making any changes
	-v, --verbose			verbose output"; exit $1; }

args()
{
	unset -v command file help test berbose
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			--test|-t) test="--test";;
			--verbose|-v) verbose="--verbose";;
			TestMetadata) command="TestMetadata";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(info|rename) ]] && { file="$1"; shift; continue; }
				[[ "$command" == @(get) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	if [[ "$command" == @(info|name) ]]; then 
		[[ ! $file ]] && MissingOperand "file"
		[[ ! -f "$file" ]] && { EchoErr "media name: cannot access \`$file\`: No such file"; return 1; }
	fi;
	args=("$@")
}

GetArgs()
{
	unset noMetadata person
	dest="$PUB" operationArg="default" ;
	while (( $# != 0 )); do
		case "$1" in
			--copy|-c) operation="copy";;
			--dest) dest="$2"; shift;;
			--move|-m) operation="move";;
			--no-metadata) noMetadata="true";;
			--person|-p) person="$2"; shift;;
			--source|-s) source="$2"; shift;;
			*) getUsage 1;;
		esac
		shift
	done
	[[ "$dest" && ! -d "$dest" ]] && { EchoErr "media get: directory  \`$dest\` does not exit"; return 1; }
	[[ ! $person ]] && person="$(FullName)"
	return 0
}

init() 
{
	mediaRoo=oversoul
	mediaUnc="//$mediaRoo/Public"
	nas="//nas"

	metadata=( -Make -Model -DateTimeOriginal -ImportedFileSizeBytes -CreateDate -MediaCreateDate -ModifyDate -CompressorName )

	pictureExtensions=( jpg )
	videoExtensions=( 3gp mpg mp4 mts m2ts moff modd mov 3gp )
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

getCommand()
{
	local driveLabel importLocation processedDirs srcDirs metadataProcessed

	GetArgs "${args[@]}" || return
	GetInit || return
	
	if [[ "$source" ]]; then
		ProcessDir || return
	else
		for dir in "${localDirs[@]}"; do ProcessDir "$dir" || return; done
		for drive in "/cygdrive/"*; do ProcessDrive "$drive" || return; done
	fi

	if [[ $processedDirs ]]; then

		for dir in "${processedDirs[@]}"; do start explorer "$dir"; done
		pause "Review media then press any key to continue..."

		if [[ $metadataProcessed ]] && ask "Remove original images"; then
			printf "Removing original images..."
			for dir in "${srcDirs[@]}"; do 
				if ls "$dir/"*_original &> /dev/null; then
					[[ $verbose ]] && printf "\n(removing \`$dir/*_original\`)"
					[[ ! $test ]] && { rm "$dir/"*_original || return; }
					[[ ! $verbose ]] && printf "."
				fi
			done
			[[ ! $verbose ]] && echo "done"
		fi

	fi
}

ProcessDrive()
{
	local drive="$1" dir operation options driveLabel importLocation driveLabel dirs="${externalDirs[@]}"
	
	[[ "$drive" == "c" ]] && return 0

	GetDriveLabel "$drive" driveLabel
	if [[ "$driveLabel" =~ .*(iPad|iPhone).* ]]; then
		dirs=( . )
		[[ "$operation" == "default" ]] && operation="copy"
	fi

	for dir in "${dirs[@]}" ; do
		operation="$operationArg"
		IFS=":" read -a options <<<"$dir"; importLocation="${options[0]}"; 
		if [[ "$operation" == "default" ]]; then
			if IsInArray copy options; then operation="copy"
			elif IsInArray move options; then operation="move"
			else operation="move"; fi
		fi
		ProcessDir "${drive}${importLocation}" || return
	done
}

ProcessDir()
{ 
	local dir="$1" lastGetSeconds

	[[ ! -d "$dir" ]] && return

	case "$dir" in
		"$dropbox") importLocation="Dropbox";;
		"$iCloud") importLocation="iCloud";;
		*) [[ ! $importLocation ]] && importLocation="${dir///cygdrive/}";;
	esac
	printf "**************************************************\n* $importLocation\n**************************************************\n"	

	[[ -f "$dir/$lastGetDateFile" ]] && lastGetSeconds="$(cat "$dir/$lastGetDateFile")"

	shopt -s  nullglob
	for file in "$dir/"*; do ProcessFile "$file" || return; done
}

ProcessFile()
{
	local file="$1" fileName ext fileDesc mediaType destPrefix additionalMetadata
	local fileSize="$(GetFileSize "$file" B)"
	GetFileName "$file" fileName || return
	GetFileExtension "$file" ext || return
	GetFileNameWithoutExtension "$file" fileDesc || return

	[[ "$operation" == "default" ]] && operation="move"

	GetMediaType "$ext" || return

	if [[ ! -d "$destPrefix" ]]; then
		ask "Create the destination directory $destPrefix" || return 1
		mkdir --parents "$destPrefix" || return
	fi

	printf "$fileName..."

	local -A fileMetadata destMetadata; GetMetadate file fileMetadata "${metadata[@]}" || return
	local dateTaken; GetDateTaken "$file" dateTaken || return
	local dateTakenSeconds=$(GetSeconds "$dateTaken")
	local prefix; GetNewName "$dateTaken" prefix || return
	
	[[ $lastGetSeconds ]] && CompareTime $lastGetSeconds ">=" $dateTakenSeconds && 
		{ RemoveProcessedFile "$file" "$prefix"; return; }

	local destDir="$destPrefix/$(date +%Y -d "$dateTaken")/$(date +%Ym -d "$dateTaken")" 
	[[ ! -d "$destDir" ]] && { mkdir --parents "$destDir" || return; }

	local suffix dest="$destDir/$prefix.$ext"
	while [[ -f "$dest" ]]; do
		IsDuplicateFile && { RemoveProcessedFile "$file" "$prefix-$suffix"; return; } 
		(( ++suffix )); dest="destDir/$prefix-$suffix.$ext" # use a suffix for rapid picture taking (same name, different size)
	done
	
	IsInArray "$destDir" processedDirs || processedDirs+=( "$destDir" )	
	IsInArray "$dir" srcDirs || srcDirs+=( "$dir" )	

	local operationDesc="moving"; [[ "$operation" == "copy" ]] && operationDesc="copying"
	printf "$prefix-$suffix..."

	[[ ! $noMetadata && "$ext" != @(mts|m2ts) ]] && { AddMetadata || return; }

	local bigFile;	(( fileSize >= $bigFileSizeBytes )) && bigFile="true"
	GetCopyFile "$file" "$dest" || return

	[[ ! $test ]] && { echo "$dateTakenSeconds" > "$dir/$lastGetDateFile" || return; }

	if [[ "$operation" == "move" ]]; then
		[[ $verbose ]] && printf "\n(rm \`$file\`)"
		[[ ! $test ]] && { rm "$file" || return; }
	fi

	[[ ! $bigFile || $test ]] && echo "done"
	[[ $verbose ]] && pause
	return 0
}

IsDuplicateFile()
{
	# videos are duplicate if names match
	[[ "$mediaType" == "video" ]] && return 0 

	# current size is the same
	[[ "$fileSize" == "$(GetFileSize "$file" B)" ]] && return 0

	# original size is the same
	[[ "$fileSize" == "$(exiftool -fast2 -s3 -ImportedFileSizeBytes "$dest" 2> /dev/null)" ]] && return 0

	return 1
}

AddMetadata()
{
	metadataProcessed="true"
	printf "metadata..."
	[[ $verbose ]] && printf "\n(exiftool \"$file\")"
	[[ $test ]] && return
	exiftool "$(utw "$file")" \
		-ImportedDate="$(date '+%Y:%m:%d %H:%M:%S')" \
		-ImportedFileModificationTime="$(date '+%Y:%m:%d %H:%M:%S' -d @$(stat -c%Y "$file"))" \
		-ImportedFileSizeBytes="$fileSize" \
		-ImportedOnHost="$COMPUTERNAME" \
		-ImportedByUser="$USERNAME" \
		-ImportedFromFolder="$importLocation" \
		-ImportedFileName="$fileName" \
		-ImportedToFolder="${destDir///cygdrive/}"
		"${additionalMetadata[@]}" >& /dev/null
}

RemoveProcessedFile()
{
	local file="$1" desc="$2"
	[[ "$operation" == "copy" ]] && { echo "$desc already processed...skipping"; return 0; }
	printf "$desc already processed...removing..."
	[[ $verbose ]] && printf "(removing \`$file\`)"
	[[ ! $test ]] && { rm "$file" || return; }
	echo "done"
	return 0
}

GetCopyFile() # SRC DEST
{
	local src="$1" dest="$2" srcDir destDir srcFileName destFileName
	GetFilePath "$src" srcDir || return
	GetFilePath "$dest" destDir || return
	GetFileName "$src" srcFileName || return
	GetFileName "$dest" destFileName || return

	printf "$operationDesc..."
	[[ $verbose ]] && { printf "\n(cp \"$src\" \"$dest\")"; }
	[[ $test ]] && return 0
	[[ ! $bigFile ]] && { cp "$src" "$dest"; return; }

	[[ "$srcFileName" != "$destFileName" ]] && { mv "$src" "$srcDir/$destFileName" || return; }
	CopyDir --quiet "$srcDir" "$destDir" "$destFileName" || return
	[[ "$srcFileName" != "$destFileName" ]] && { mv "$srcDir/$destFileName" "$src" || return; }
}

GetMediaType()
{
	local ext="$1"

	if IsInArray "$ext" pictureExtensions; then
		mediaType="picture"; destPrefix="$destPicturePrefix"
	elif IsInArray "$ext" videoExtensions; then
	 mediaType="video"; destPrefix="$destVideoPrefix"
	else
		return 0
	fi 
}

GetNewName() { r "$(date "+%Y_%m_%d %H_%M_%S" -d "$1")" $2; }
NormalizeDate() {	r "$(date "+%Y-%m-%d %H:%M:%S" -d "$1")" $2; }

GetDateTaken() # format: YYYY-MM-DD HH:MM:SS
{
	# Determine DateTaken using: 
	# - fileMetadata: Make Model DateTimeOriginal ImportedFileSizeBytes CreateDate CompressorName
	# - mediaType=picture|video

	#PrintMetadata; pause

	local s file="$1" mm="${fileMetadata[Make]}-${fileMetadata[Model]}"

	# Apple
	if [[ "$mm" ==  @(Apple-iPad|Apple-iPhone*) ]]; then
		[[ "$mediaType" == "picture" ]] && s="${fileMetadata[DateTimeOriginal]}" ||
			s="${fileMetadata[MediaCreateDate]}"

	# Sony HDR-SR12 (video), DSC-HX5V (still)
	elif [[ "$mm" == @(sony-HDR-SR12|sony-DSC-HX5V) || ( "$mediaType" == "video" && "$mm" == @(sony-) )]]; then # no model for HDR-SR12 videos
		s="${fileMetadata[DateTimeOriginal]}"

	# Motorola DROID RAZR
	elif [[ "$mm" ==  @(motorola-DROID RAZR) || ( "$mediaType" == "video" && "${fileMetadata[CompressorName]}" == "MOTO" ) ]]; then
		s="${fileMetadata[DateTimeOriginal]}"
		if [[ ! $s ]]; then
			[[ "$mediaType" == "picture" ]] && s="${fileMetadata[ModifyDate]}" ||
				s="$(date -d "${fileMetadata[CreateDate]} UTC")";
			additionalMetadata+=( "-DateTimeOriginal=\"$(NormalizeDate "$s")\"" )
		fi

	# Media with no metadata - use file modification date
	# elif (( ${#fileMetadata[@]} == 0 )); then
	# 	s="$(stat -c%y "$file")" || return;

	else
		EchoErr "media get: DateTaken media information has not been defined for ``$file\`"
		return 1

	fi

	[[ ! $s ]] && { EchoErr "media get: unable to find a date for \`$file\`"; return 1; }
	NormalizeDate "$s" $2
}

renameCommand()
{
	local ext name path; declare -A fileMetadata

	GetFilePath "$file" path || return
	GetFileName "$file" name || return
	GetFileExtension "$file" ext || return

	GetMetadata "$file" fileMetadata "${metadata[@]}" || return
	GetMediaType "$ext" || return
	local dateTaken; GetDateTaken "$file" dateTaken || return
	local newName; GetNewName "$dateTaken" newName || return
	local expected="$newName.$ext"

	[[ "$name" == "$expected" ]] && return 0;

	printf "Renaming $name to $expected..."
	[[ $verbose ]] && { echo "(mv \"$file\" \"${path:+$path/}$expected\")" || return; }
	[[ ! $test ]] && { mv "$file" "${path:+$path/}$expected" || return; }
	echo "done"
}

infoCommand()
{
	declare -A fileMetadata
	GetMetadata "$file" fileMetadata "${metadata[@]}" || return
	PrintMetadata
}

PrintMetadata()
{
	printf "%s: " "$(GetFileName "$file")"
	for var in "${!fileMetadata[@]}"; do
		printf "$var=${fileMetadata[$var]} "
	done
	echo ""
}


testCommand() { TestMetadataCommand; }

TestMetadataCommand()
{
	declare -A srcMetadata
	GetMetadata "/cygdrive/d/users/jjbutare/Desktop/DSC01581.JPG" srcMetadata -Make -Model -FileModifyDate 

	for var in "${!srcMetadata[@]}"; do
		echo "$var=${srcMetadata[$var]}"
	done
	echo "${srcMetadata[FileModifyDate]}=$(date -d "${srcMetadata[FileModifyDate]}")"
}

GetMetadata() 
{
	local file="$1" array="$2"
	# -fast2
	eval "$array=( $(exiftool -s2 "$(utw "$file")" "${@:3}" 2> /dev/null | sed -e 's/: /]="/' -e 's/^/[/' -e 's/$/"/'  -e 's/:/-/' -e 's/:/-/' ) )"
}

GetInit()
{
	bigFileSizeBytes=5000000 # 5 MiB

	dropbox="$HOME/Dropbox/Camera Uploads"
	iCloud="$userPictures/iCloud Photos/My Photo Stream"
	localDirs=( "$DOC/data/download/pictures" "$iCloud" "$dropbox" )

	# options: GMT, copy, move
	unset externalDirs
	#externalDirs=( /DCIM/100OLYMP /mssony/moml0001 /dcim/100PHOTO )
	#externalDirs+=( /private/avchd/bdmv/stream:move )
	externalDirs+=( /dcim/100msdcf /dcim/101msdcf /mp_root/101pnv01:copy /avchd/bdmv/stream:copy )

	lastGetDateFile=".media_last_get_date"
	fileFormat="^[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9] [0-9][0-9]_[0-9][0-9]_[0-9][0-9]" # YYYY_MM_DD HH_MM_SS

	local nas="nas.hagerman.butare.net" suffix="Camera/$person"
	if network cache "$nas"; then
		destPicturePrefix="//$nas/photo/$suffix"
		destVideoPrefix="//$nas/video/$suffix"
	else
		destPicturePrefix="$(PublicPictures)/$suffix"
		destVideoPrefix="$(PublicVideos)/$suffix"
	fi

	processedDirs=()
}

syncCommand()
{
	merge "$PUB/Music" "//nas/music" || return
	merge "$PUB/Pictures" "//nas/photo" || return
	merge "$PUB/Videos" "//nas/video" || return
}

run "$@"
