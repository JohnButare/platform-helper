#!/bin/bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: media collect|get|sync
	info FILES 					display metadata
	rename FILES				rename using the date taken  
  local [NUM](100)		copy NUM random picutres to the local computer
  frame  							copy media to a picture frame 
  nas									synchronize media with nas

  -t, --test 				test the operation without making any changes
	-v, --verbose			verbose output"
	exit $1
}

getUsage() { echot "\
usage: media get 
	-c, --copy				copy media 
	-d, --dest DEST 	destination directory
	-m, --move				move media
	-nc,--no-cleanup  do not cleanup original images
	-nm,--no-metadata do not add import metadata
	-nr,--no-review   do not review imported images
	-p, --person NAME person's name used in the destination folder
	-s, --source DIR	media source directory
	-t, --test 				test the operation without making any changes
	-v, --verbose			verbose output"; exit $1; }

args()
{
	unset -v command files help test verbose
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			--test|-t) test="--test";;
			--verbose|-v) verbose="--verbose";;
			TestMetadata) command="TestMetadata";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(info|rename) ]] && { files+=( "$1" ); shift; continue; }
				[[ "$command" == @(get) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage 0 || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	if [[ "$command" == @(info|rename) ]]; then 
		[[ ! $files ]] && MissingOperand "file"
		for file in "${files[@]}"; do [[ ! -f "$file" ]] && { EchoErr "media name: cannot access \`$file\`: No such file"; return 1; }; done
	fi;
	args=("$@")
}

GetArgs()
{
	unset noMetadata person
	dest="$PUB" operation="default" review="true" cleanup="true"
	while (( $# != 0 )); do
		case "$1" in
			--copy|-c) operation="copy";;
			--dest) dest="$2"; shift;;
			--move|-m) operation="move";;
			--no-cleanup|-nc) unset cleanup;;
			--no-metadata|-nm) noMetadata="true";;
			--no-review|-nr) unset review;;
			--person|-p) person="$2"; shift;;
			--source|-s) source="$2"; shift;;
			--test|-t) test="--test";;
			--verbose|-v) verbose="--verbose";;
			*) getUsage 1;;
		esac
		shift
	done
	[[ "$dest" && ! -d "$dest" ]] && { EchoErr "media get: directory  \`$dest\` does not exit"; return 1; }
	[[ ! $person ]] && person="$(FullName)"
	return 0
}

init() 
{
	mediaRoo=oversoul
	mediaUnc="//$mediaRoo/Public"
	nas="//nas"

	dateTakenMetadata=( -Make -Model -DateTimeOriginal -ImportedFileSizeBytes -Keywords
		-CreateDate -MediaCreateDate -ModifyDate -CompressorName -Software -CreatorTool)

	pictureExtensions=( jpg )
	videoExtensions=( 3gp avi mpg mp4 mts m2ts moff modd mov 3gp )
}

run() {	args "$@" || return; init || return; ${command}Command "${args[@]}"; }

#
# Helper Functions
# 

GetMediaType()
{
	local ext="$1"

	if IsInArray "$ext" pictureExtensions; then
		mediaType="picture"
	elif IsInArray "$ext" videoExtensions; then
	 mediaType="video"
	else
		return 1
	fi 
}

GetNewName() { r "$(date "+%Y_%m_%d %H_%M_%S" -d "$1")" $2; }
NormalizeDate() {	r "$(date "+%Y-%m-%d %H:%M:%S" -d "$1")" $2; }

GetDateTaken() # format: YYYY-MM-DD HH:MM:SS
{
	local s file="$1" mm="${fileMetadata[Make]}-${fileMetadata[Model]}" dto="${fileMetadata[DateTimeOriginal]}"

	#PrintMetadata; pause

	# Apple
	if [[ "$mm" ==  @(Apple-iPad|Apple-iPhone*) ]]; then
		[[ "$mediaType" == "picture" ]] && s="$dto" || s="${fileMetadata[MediaCreateDate]}"

	# Sony HDR-SR12 (video), DSC-HX5V (still)
	elif [[ "$mm" == @(sony-HDR-SR12|sony-DSC-HX5V|CASIO COMPUTER CO.,LTD.-EX-Z150) || ( "$mediaType" == "video" && "$mm" == @(sony-) )]]; then # no model for HDR-SR12 videos
		s="$dto"

	# Motorola DROID RAZR
	elif [[ "$mm" ==  @(motorola-DROID RAZR) || ( "$mediaType" == "video" && "${fileMetadata[CompressorName]}" == "MOTO" ) ]]; then
		s="$dto"
		if [[ ! $s ]]; then
			if [[ "$mediaType" == "video" ]]; then
				s="$(date -d "${fileMetadata[CreateDate]} UTC")";
			else # picture
				if [[ ${fileMetadata[CreatorTool]} ]]; then # photo editos change the ModifyDate
					unset s
				else	
					s="${fileMetadata[ModifyDate]}"
				fi
			fi
			additionalMetadata+=( "-DateTimeOriginal=\"$(NormalizeDate "$s")\"" )
		fi

	# File modification date: Photo Booth, no metadata (( ${#fileMetadata[@]} == 0 ))
	elif [[ "${fileMetadata[Keywords]}" == "Photo Booth" ]]; then
		s="$dto"
		if [[ ! $s ]]; then
			s="$(stat -c%y "$file")" || return;
			additionalMetadata+=( "-DateTimeOriginal=\"$s\"" )
		fi

	# No make or model, but we do have DateTimeOriginal
	elif [[ "$mm" == "-" && $dto ]]; then
		s="$dto"

	else
		EchoErr "media get: no DateTaken for \`$file\`"
		return 1
	fi

	[[ ! $s ]] && { EchoErr "media get: unable to find a date for \`$file\`"; return 1; }
	NormalizeDate "$s" $2
}

PrintMetadata()
{
	printf "%s:\n" "$(GetFileName "$file")"
	for var in "${!fileMetadata[@]}"; do
		printf "	$var=${fileMetadata[$var]}\n"
	done
	echo ""
}

AddMetadata()
{
	local file="$1" metadata=( "${@:2}" )
	printf "metadata..."
	[[ $verbose ]] && { echo -e -n "\n(exiftool \"$file\" ${metadata[@]})"; }
	[[ $test ]] && return
	if ! exiftool "$(utw "$file")" "${metadata[@]}" >& /dev/null; then
		EchoErr -e "\nmedia get: unable to add metadata to \`$file\`"; return 1
	fi
}

GetMetadata() 
{
	local file="$1" array="$2" metadata=( "${@:3}" )
	[[ ! $metadata ]] && metadata=( "${dateTakenMetadata[@]}" )
	eval "$array=( $(exiftool -fast2 -s2 "$(utw "$file")" "${metadata[@]}" 2> /dev/null | sed -e 's/: /]="/' -e 's/^/[/' -e 's/$/"/'  -e 's/:/-/' -e 's/:/-/' ) )"
}

#
# Get Command
#

GetInit()
{
	bigFileSizeBytes=5000000 # 5 MiB

	dropbox="$HOME/Dropbox/Camera Uploads"
	iCloud="$userPictures/iCloud Photos/My Photo Stream"
	localDirs=( "$DOC/data/download/pictures" "$iCloud" "$dropbox" )

	# options: GMT, copy, move
	unset externalDirs
	#externalDirs=( /DCIM/100OLYMP /mssony/moml0001 /dcim/100PHOTO )
	externalDirs+=( /dcim/100msdcf /private/avchd/bdmv/stream:move ) # Sony-DSC-HX5V
	externalDirs+=( /dcim/100CASIO ) # Casio Exilim 8.1 MP ( CASIO COMPUTER CO.,LTD.-EX-Z150 )
	externalDirs+=( /dcim/100msdcf /dcim/101msdcf /mp_root/101pnv01:copy /avchd/bdmv/stream:copy )

	lastGetDateFile=".media_last_get_date"
	fileFormat="^[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9] [0-9][0-9]_[0-9][0-9]_[0-9][0-9]" # YYYY_MM_DD HH_MM_SS

	local nas="nas.hagerman.butare.net" suffix="Camera/$person"
	if network cache "$nas"; then
		destPicturePrefix="//$nas/photo/$suffix"
		destVideoPrefix="//$nas/video/$suffix"
	else
		destPicturePrefix="$(PublicPictures)/$suffix"
		destVideoPrefix="$(PublicVideos)/$suffix"
	fi

	processedDirs=()
}

getCommand()
{
	local driveLabel importLocation processedDirs srcDirs metadataProcessed

	GetArgs "${args[@]}" || return
	GetInit || return
	
	if [[ "$source" ]]; then
		ProcessDir "$operation" || return
	else
		for dir in "${localDirs[@]}"; do ProcessDir "$dir" "$operation" || return; done
		for drive in "/cygdrive/"*; do ProcessDrive "$drive" "$operation" || return; done
	fi

	if [[ $review && $processedDirs ]]; then
		for dir in "${processedDirs[@]}"; do start explorer "$dir"; done
		pause "Review media then press any key to continue..."
	fi

	if [[ $cleanup && $metadataProcessed ]]; then
		printf "Removing original images..."
		for dir in "${srcDirs[@]}"; do 
			if ls "$dir/"*_original &> /dev/null; then
				[[ $verbose ]] && printf "\n(removing \`$dir/*_original\`)"
				[[ ! $test ]] && { rm "$dir/"*_original || return; }
				[[ ! $verbose ]] && printf "."
			fi
		done
		[[ ! $verbose ]] && echo "done"
	fi

}

ProcessDrive()
{
	local drivePath="$1" operation="$2" dirs=( "${externalDirs[@]}" )
	local dir drive options driveLabel importLocation driveLabel 

	GetFileName "$drivePath" drive || return

	[[ "$drive" == "c" ]] && return 0

	GetDriveLabel "$drive" driveLabel
	if [[ "$driveLabel" =~ .*(iPad|iPhone).* ]]; then
		[[ "$operation" == "default" ]] && operation="copy"
		importLocation = "$driveLabel"
		ProcessDir "${drivePath}${dir}" "$op"
		return
	fi

	for dir in "${dirs[@]}"; do
		IFS=":" read -a options <<<"$dir"; 

		dir="${options[0]}"; [[ ! -d "$drivePath$dir" ]] && continue
		importLocation="$dir";

		local op="$operation"
		if [[ "$op" == "default" ]]; then
			IsInArray copy options && op="copy" ||
			IsInArray move options && op="move"
		fi

		ProcessDir "$drivePath$dir" "$op" || return
	done
}

ProcessDir()
{ 
	local dir="$1" operation="$2" lastGetSeconds

	[[ ! -d "$dir" ]] && return

	case "$dir" in
		"$dropbox") importLocation="Dropbox";;
		"$iCloud") importLocation="iCloud";;
		*) [[ ! $importLocation ]] && importLocation="${dir///cygdrive/}";;
	esac
	printf "**************************************************\n* $importLocation\n**************************************************\n"	

	[[ -f "$dir/$lastGetDateFile" ]] && lastGetSeconds="$(cat "$dir/$lastGetDateFile")"

	shopt -s  nullglob
	for file in "$dir/"*; do ProcessFile "$file" "$operation" || return; done
}

ProcessFile()
{
	local file="$1" operation="$2" fileName ext fileDesc mediaType additionalMetadata
	local fileSize="$(GetFileSize "$file" B)"
	GetFileName "$file" fileName || return
	GetFileExtension "$file" ext || return
	GetFileNameWithoutExtension "$file" fileDesc || return

	[[ "$operation" == "default" ]] && operation="move"

	GetMediaType "$ext" || return 0

	local destPrefix="$destPicturePrefix"; [[ "$mediaType" == "video" ]] && destPrefix="$destVideoPrefix"
	if [[ ! -d "$destPrefix" ]]; then
		ask "Create the destination directory $destPrefix" || return 1
		mkdir --parents "$destPrefix" || return
	fi

	printf "$fileName..."

	local -A fileMetadata destMetadata; GetMetadata "$file" fileMetadata || return
	local dateTaken; GetDateTaken "$file" dateTaken || return
	local dateTakenSeconds=$(GetSeconds "$dateTaken")
	local prefix; GetNewName "$dateTaken" prefix || return
	
	[[ $lastGetSeconds ]] && CompareTime $lastGetSeconds ">=" $dateTakenSeconds && 
		{ RemoveProcessedFile "$file" "$prefix"; return; }

	local destDir="$destPrefix/$(date +%Y -d "$dateTaken")/$(date +%Y%m -d "$dateTaken")" 
	[[ ! -d "$destDir" ]] && { mkdir --parents "$destDir" || return; }

	local suffix dest="$destDir/$prefix.$ext"

	while [[ -f "$dest" ]]; do
		IsDuplicateFile && { RemoveProcessedFile "$file" "$prefix${suffix:+-$suffix}"; return; } 
		(( ++suffix )); dest="destDir/$prefix-$suffix.$ext" # use a suffix for rapid picture taking (same name, different size)
	done

	IsInArray "$destDir" processedDirs || processedDirs+=( "$destDir" )	
	IsInArray "$dir" srcDirs || srcDirs+=( "$dir" )	

	local operationDesc="moving"; [[ "$operation" == "copy" ]] && operationDesc="copying"
	printf "$prefix${suffix:+-$suffix}..."

	[[ ! $noMetadata && "$ext" != @(avi|mts|m2ts) ]] && { AddImportedMetadata || return; }

	local bigFile;	(( fileSize >= $bigFileSizeBytes )) && bigFile="true"

	GetCopyFile "$file" "$dest" || return

	[[ ! $test ]] && { echo "$dateTakenSeconds" > "$dir/$lastGetDateFile" || return; }

	if [[ "$operation" == "move" ]]; then
		[[ $verbose ]] && printf "\n(rm \`$file\`)"
		[[ ! $test ]] && { rm "$file" || return; }
	fi

	[[ ! $bigFile || $test ]] && echo "done"
	[[ $verbose ]] && pause
	return 0
}

IsDuplicateFile()
{
	# videos are duplicate if names match
	[[ "$mediaType" == "video" ]] && return 0 

	# current size is the same
	[[ "$fileSize" == "$(GetFileSize "$file" B)" ]] && return 0

	# original size is the same
	[[ "$fileSize" == "$(exiftool -fast2 -s3 -ImportedFileSizeBytes "$dest" 2> /dev/null)" ]] && return 0

	return 1
}

AddImportedMetadata()
{
	metadataProcessed="true"
	AddMetadata "$file" "${additionalMetadata[@]}" \
		-ImportedDate="$(date '+%Y:%m:%d %H:%M:%S')" \
		-ImportedFileModificationTime="$(date '+%Y:%m:%d %H:%M:%S' -d @$(stat -c%Y "$file"))" \
		-ImportedFileSizeBytes="$fileSize" \
		-ImportedOnHost="$COMPUTERNAME" \
		-ImportedByUser="$USERNAME" \
		-ImportedFromFolder="$importLocation" \
		-ImportedFileName="$fileName" \
		-ImportedToFolder="${destDir///cygdrive/}"
		
}

RemoveProcessedFile()
{
	local file="$1" desc="$2"
	[[ "$operation" == "copy" ]] && { echo "$desc already processed...skipping"; return 0; }
	printf "$desc already processed...removing..."
	[[ $verbose ]] && printf "(removing \`$file\`)"
	[[ ! $test ]] && { rm "$file" || return; }
	echo "done"
	return 0
}

GetCopyFile() # SRC DEST
{
	local src="$1" dest="$2" srcDir destDir srcFileName destFileName
	GetFilePath "$src" srcDir || return
	GetFilePath "$dest" destDir || return
	GetFileName "$src" srcFileName || return
	GetFileName "$dest" destFileName || return

	printf "$operationDesc..."
	[[ $verbose ]] && { printf "\n(cp \"$src\" \"$dest\")"; }
	[[ $test ]] && return 0
	[[ ! $bigFile ]] && { cp "$src" "$dest"; return; }

	[[ "$srcFileName" != "$destFileName" ]] && { mv "$src" "$srcDir/$destFileName" || return; }
	CopyDir --quiet "$srcDir" "$destDir" "$destFileName" || return
	[[ "$srcFileName" != "$destFileName" ]] && { mv "$srcDir/$destFileName" "$src" || return; }
}

#
# Other Commands
#

renameCommand() { for file in "${files[@]}"; do Rename "$file" || return; done; }
Rename()
{
	local file="$1" ext name path suffix; declare -A fileMetadata

	GetFilePath "$file" path || return
	GetFileNameWithoutExtension "$file" name || return
	GetFileExtension "$file" ext || return
	[[ "$name" =~ .*-[0-9]+ ]] && suffix="-${name##*-}"

	GetMetadata "$file" fileMetadata || return
	GetMediaType "$ext" || return 0
	[[ ! $mediaType ]] && return
	local dateTaken; GetDateTaken "$file" dateTaken || return
	local newName; GetNewName "$dateTaken" newName || return
	local expected="$newName$suffix" 
	local newFile="${path:+$path/}$expected.$ext"
	
	[[ "$name" == "$expected" && ! $additionalMetadata ]] && return 0;

	printf "\"$name\"..."

	if [[ "$name" != "$expected" ]]; then
		printf "renaming to \"$expected\"..."
		[[ $verbose ]] && { printf "\n(mv \"$file\" \"$newFile\")" || return; }
		[[ ! $test ]] && { mv "$file" "$newFile" || return; }
	fi

	[[ $additionalMetadata ]] && AddMetadata "$newFile" "${additionalMetadata[@]}"

	[[ ! $verbose ]] && echo "done"
}

infoCommand() { for file in "${files[@]}"; do Info "$file" || return; done; }
Info()
{
	local file="$1"; declare -A fileMetadata
	GetMetadata "$file" fileMetadata || return
	PrintMetadata
}

syncCommand()
{
	merge "$PUB/Music" "//nas/music" || return
	merge "$PUB/Pictures" "//nas/photo" || return
	merge "$PUB/Videos" "//nas/video" || return
}

run "$@"
