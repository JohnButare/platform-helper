#!/bin/bash
. app.sh || exit

usage() {	echot "usage: templateApp [start|startup|close|restart|cd](start)
  profile dir|SaveDir|backup|restore [<profile name>|default](latest)"; exit $1; }

args()
{
	unset command help
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";; # case-insensitive aliases
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "${command}" == @(start|startup|profile|service) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && { command="start"; }
	[[ $help ]] && IsFunction "${command}Usage" && { ${command}Usage || usage 0; }
	args=( "$@" )
}

init() { program="$DATA/platform/win/windirstat.exe"; }
run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }
cdCommand() { echo "$cd"; }
closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } # task close|CloseKill [--wait] [--title "$title"] "$program"; ProcessKill "$program"; SendKeys "$title" "!FX"; 
IsInstalledCommand() { [[ -f "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; } # task IsRunning --title "$title" "$program"; WinExists "$title";
restartCommand() { closeCommand && startCommand; }

startCommand()
{
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start "$program" "$@"
}

startupCommand()
{
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start --minimize "$program" "$@"
}

run "$@"