#!/usr/bin/env bash
. app.sh || exit
. office.sh || exit

init()
{
	command='start'
	title="${OfficeTitle}Word";
	program="$WordProgram";
	fastStart="$DATA/setup/wfs.docx"
	replicate="$UDATA/replicate"
}

usage() {	echot "usage: word [start|startup|close|restart](start)
	configure|info|RestoreNormal|SaveNormal|show
	hide|restore: hide or restore the FastStart document
	-b, --brief		brief status messages"; exit $1; }

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

args()
{
	unset -v brief
	while [[ "$1" != "" ]]; do
		case "$1" in
			--brief|-b) brief="--brief";;
			--help) usage 0;;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";;
			configure) command="Configure";; RestoreNormal) command="RestoreNormal";; SaveNormal) command="SaveNormal";;
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(start|profile) ]] && break;
				UnknownOption "$1"
		esac
		shift
	done
	args=( "$@" )
}

startCommand()
{
	! IsInstalledCommand && return 1
	start "$program" "$@"
}

startupCommand()
{
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start --window-style minimized "$program" /w /q "$fastStart"
}

IsInstalledCommand() { [[ -e "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
restartCommand() { closeCommand && startCommand; }
profileCommand() {	tc profile.btm "$@" || usage; }

restoreCommand() { WinSetState "$WordFastStartTitle" restore; }
hideCommand() { WinSetState "$WordFastStartTitle" hide; }

SaveNormalCommand()
{
	cp "$OfficeTemplates/Normal.dotm" "$replicate/Normal $(ProperCase "$PLATFORM") Original.dotm" || return $?
	return 0
}

RestoreNormalCommand()
{
	! IsInstalledCommand && return 1

	local IsRunning=0

	if [[ -f "$OfficeTemplates/toc.docx" && -d "$USERPROFILE/templates" ]] && 
		! diff "$OfficeTemplates/toc.docx" "$USERPROFILE/templates/toc.docx" >& /dev/null; then
		printf "Update table of contents..."
		cp "$OfficeTemplates/toc.docx" "$USERPROFILE/templates" || return
		echo "done"
	fi

	for ext in dot dotm; do RestoreNormalExtension "Normal" "$ext" || return; done

	[[ $IsRunning == 1 ]] && startupCommand

	return 0
}

RestoreNormalExtension()
{
	local template="$1"
	local ext="$2"
	local normal="$OfficeTemplates/$template.$ext"
	local original="$replicate/$template $PLATFORM Original.$ext"

	[[ ! -f "$original" ]] && return 0

	[[ ! -f "$normal" ]] && { cp "$original" "$normal"; return; }
	
 	diff "$normal" "$original" >& /dev/null && return

  printf "Restoring the $template template..."
   
	if [[ "$PLATFORM" == "win" ]] && word IsRunning; then
		IsRunning=1
		word close
		sleep 2
	fi
	
  while true; do
    
    printf "copying..."
    cp "$original" "$normal" && echo "done"
    
    diff "$original" "$normal" && break

    if which handle >& /dev/null; then
	    handle "$template"
	    echo ""
	    pause "Manually close the above tasks then press any key to continue..."
		fi

  done
}

ConfigureCommand()
{
	local options="$DATA/setup/Set Options $(ProperCase "$PLATFORM").docm"

	[[ ! -f "$options" ]] && { ScriptErr "the configuration file \`$options\` does not exist"; return 1; }

	start "$options"
}


run "$@"










