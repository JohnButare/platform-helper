#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script office || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]...  [close|configure|hide|info|normal|restart|restore|show|start|startup|version](start)
Word commands."
}

init()
{
	title="${OfficeTitle}Word";
	program="$WordProgram";
	versionProgram="$program"; IsPlatform mac && versionProgram="Microsoft Word"
	fastStart="$DATA/setup/wfs.docx"
	replicate="$UDATA/replicate"

	normalFileName="Normal $(ProperCase "$PLATFORM_OS") Original.dotm"
	normalCloud=""; CloudConf && normalCloud="$CLOUD/network/application/word/$normalFileName"
	normalFile="$OfficeTemplates/Normal.dotm"
	normalTemplate="$replicate/$normalFileName"
}

#
# commands
#

closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
hideCommand() { WinSetState "$WordFastStartTitle" hide; }
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
restartCommand() { closeCommand && startCommand; }
restoreCommand() { WinSetState "$WordFastStartTitle" restore; }
startArgStart() { startArgs=(); }
startArgs() { startArgs=( "$@" ); (( shift+=$# )); return 0; }
startCommand() { AppInstallCheck && start "$program" "${startArgs[@]}"; }
startupCommand() { AppInstallCheck || return; IsRunningCommand && return; start --window-style minimized "$program" /w /q "$fastStart"; }
versionCommand() { AppInstallCheck && AppVersion "$versionProgram"; }

configureCommand()
{
	local options="$DATA/setup/Set Options $(ProperCase "$PLATFORM_OS").docm"
	[[ ! -f "$options" ]] && { ScriptErr "the configuration file '$options' does not exist"; return 1; }
	cp -f "$options" "$HOME/desktop" && start "$options"
}

#
# Normal Commands
#

normalUsage() {	echot "Usage: $(ScriptName) normal backup|info|restore|IsChanged\nNormal template commands."; }

normalArgStart()
{
	[[ ! -f "$normalTemplate" ]] && { ScriptErr "the template file '$normalTemplate' does not exist"; return 1; }
	[[ ! -d "$OfficeTemplates" ]] && { mkdir --parents "$OfficeTemplates" || return; }
	[[ ! -f "$normalFile" ]] && { cp "$normalTemplate" "$normalFile"; return; }
	return 0
}

normalCommand() { usage; }
normalIsChangedCommand() { normalIsChanged; }

normalInfoUsage() {	echot "Usage: $(ScriptName) normal info cloud|file|template\nNormal information commands."; }
normalInfoCommand() { printf "cloud=$normalCloud\nfile=$normalFile\ntemplate=$normalTemplate\n"; }
normalInfoCloudCommand() { echo "$normalCloud"; }
normalInfoFileCommand() { echo "$normalFile"; }
normalInfoTemplateCommand() { echo "$normalTemplate"; }

normalBackupCommand()
{
	! normalIsChanged && return

	printf "Backing up the normal template..."		

	if ! cmp -s "$normalFile" "$normalTemplate"; then
		printf "replicate..."
		cp "$normalFile" "$normalTemplate" || return
	fi

	if [[ -d "$(GetFilePath "$normalCloud")" ]] && ! cmp -s "$normalFile" "$normalCloud"; then
		printf "cloud..."
		cp "$normalFile" "$normalCloud" || return
	fi

	echo "done"
}

normalRestoreCommand()
{
	# remove default normal
	local file="$HOME/Library/Group Containers/UBF8T346G9.Office/User Content.localized/Templates.localized/Normal.dotm"
	if IsPlatform mac && [[ -f "$file" ]]; then
		ask "Remove default Normal.dotm" || return
		rm "$file" || return
	fi

	# return if the normal template is unchanged
	! normalIsChanged && return

	# restore the normal template
  printf "Restoring the normal template..."
  cp "$normalTemplate" "$normalFile" || return
  echo "done" 
}

normalIsChanged()
{ 
	if cmp -s "$normalFile" "$normalTemplate"; then
		echo "The normal template is unchanged."
		return 1
	else
		echo "The normal template has been changed."
		[[ $verbose ]] && ls -al "$normalFile" "$normalTemplate"
		return 0
	fi
}

ScriptRun "$@"
