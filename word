#!/usr/bin/env bash
. app.sh || exit
. office.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]...  [close|configure|hide|info|normal|restart|restore|show|start|startup](start)
Word commands."
}

init()
{
	title="${OfficeTitle}Word";
	program="$WordProgram";
	fastStart="$DATA/setup/wfs.docx"
	replicate="$UDATA/replicate"
	cloudDir="$CLOUD/network/application/word"
	normalFile="$OfficeTemplates/Normal.dotm"
	normalTemplate="Normal $(ProperCase "$PLATFORM") Original.dotm"
	templateFile="$replicate/$normalTemplate"
}

#
# commands
#

closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
hideCommand() { WinSetState "$WordFastStartTitle" hide; }
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsTaskRunning "$program"; }
restartCommand() { closeCommand && startCommand; }
restoreCommand() { WinSetState "$WordFastStartTitle" restore; }

configureCommand()
{
	local options="$DATA/setup/Set Options $(ProperCase "$PLATFORM").docm"
	[[ ! -f "$options" ]] && { ScriptErr "the configuration file '$options' does not exist"; return 1; }
	start "$options"
}

startArgStart() { startArgs=(); }
startArgs() { startArgs=( "$@" ); (( shift+=$# )); }
startCommand() { IsInstalledCommand && start "$program" "${startArgs[@]}"; }
startupCommand() { ! IsInstalledCommand && return 1; IsRunningCommand && return 0; start --window-style minimized "$program" /w /q "$fastStart"; }


#
# Normal Commands
#

normalUsage()
{
	echot "Usage: $(ScriptName) normal backup|restore|IsChanged
Normal template commands."
}

normalArgStart()
{
	[[ ! -f "$templateFile" ]] && { ScriptErr "the template file '$templateFile' does not exist"; return 1; }
	[[ ! -d "$OfficeTemplates" ]] && { mkdir --parents "$OfficeTemplates" || return; }
	[[ ! -f "$normalFile" ]] && { cp "$templateFile" "$normalFile"; return; }
	return 0
}

normalCommand() { usage; }
normalIsChangedCommand() { normalIsChanged; }

normalBackupCommand()
{
	! normalIsChanged && return

	printf "Backing up the normal template..."		

	if ! cmp -s "$normalFile" "$replicate/$normalTemplate"; then
		printf "replicate..."
		cp "$normalFile" "$replicate/$normalTemplate" || return
	fi

	if [[ -d "$cloudDir" ]] && ! cmp -s "$normalFile" "$cloudDir/$normalTemplate"; then
		printf "cloud..."
		cp "$normalFile" "$cloudDir/$normalTemplate" || return
	fi

	echo "done"
}

normalRestoreCommand()
{
	! normalIsChanged && return

  printf "Restoring the normal template..."
  cp "$templateFile" "$normalFile" || return
  echo "done" 
}

normalIsChanged()
{ 
	if cmp -s "$normalFile" "$templateFile"; then
		echo "The normal template is unchanged."
		return 1
	else
		echo "The normal template has been changed."
		[[ $verbose ]] && ls -al "$normalFile" "$templateFile"
		return 0
	fi
}

ScriptRun "$@"
