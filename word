#!/usr/bin/env bash
. app.sh || exit
. office.sh || exit

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

init()
{
	title="${OfficeTitle}Word";
	program="$WordProgram";
	fastStart="$DATA/setup/wfs.docx"
	replicate="$UDATA/replicate"
	cloudDir="$CLOUD/network/application/word"
	normalFile="$OfficeTemplates/Normal.dotm"
	normalTemplate="Normal $(ProperCase "$PLATFORM") Original.dotm"
	templateFile="$replicate/$normalTemplate"
}

usage()
{
	echot "\
usage: word [close|configure|info|restart|show|start|startup](start)
	hide|restore											hide or restore the FastStart document
	normal backup|restore|IsChanged		backup or restore the normal template

	-b, --brief		brief status messages"
	exit $1
}

args()
{
	unset -v command brief

	while [[ "$1" != "" ]]; do
		case "$1" in
			--brief|-b) brief="--brief";;
			--help) usage 0;;
			IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";; configure) command="Configure";;
			*) 
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; command="${1,,}"; shift; continue; }
				[[ "$command" == @(normal|profile|start|) ]] && break;
				UnknownOption "$1"
		esac
		shift
	done
	args=( "$@" )
}

configureCommand()
{
	local options="$DATA/setup/Set Options $(ProperCase "$PLATFORM").docm"
	[[ ! -f "$options" ]] && { ScriptErr "the configuration file \`$options\` does not exist"; return 1; }
	start "$options"
}

startCommand()
{
	! IsInstalledCommand && return 1
	start "$program" "$@"
}

startupCommand()
{
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start --window-style minimized "$program" /w /q "$fastStart"
}

closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
hideCommand() { WinSetState "$WordFastStartTitle" hide; }
IsInstalledCommand() { [[ -e "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
profileCommand() {	tc profile.btm "$@" || usage; }
restartCommand() { closeCommand && startCommand; }
restoreCommand() { WinSetState "$WordFastStartTitle" restore; }

#
# Normal Commands
#

normalIschangedCommand() { normalIsChanged; }

normalIsChanged()
{ 
	if cmp -s "$normalFile" "$templateFile"; then
		echo "The normal template is unchanged."
		return 1
	else
		echo "The normal template has been changed."
		return 0
	fi
}

normalCommand()
{	
	[[ ! -f "$templateFile" ]] && { ScriptErr "the template file \`$templateFile\` does not exist"; return 1; }
	[[ ! -f "$normalFile" ]] && { cp "$templateFile" "$normalFile"; return; }

	local command; CheckSubCommand normal "$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"
	$command "$@"
}

normalRestoreCommand()
{
	! normalIsChanged && return

  printf "Restoring the normal template..."
  cp "$templateFile" "$normalFile" || return
  echo "done" 

	return 0
}

normalBackupCommand()
{
	! normalIschangedCommand && return

	printf "Backing up the normal template..."		

	if ! cmp -s "$normalFile" "$replicate/$normalTemplate"; then
		printf "replicate..."
		cp "$normalFile" "$replicate/$normalTemplate" || return
	fi

	if [[ -d "$cloudDir" ]] && ! cmp -s "$normalFile" "$cloudDir/$normalTemplate"; then
		printf "cloud..."
		cp "$normalFile" "$cloudDir/$normalTemplate" || return
	fi

	echo "done"

	return 0
}

run "$@"
