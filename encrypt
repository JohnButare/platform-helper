#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... IsInstalled|IsMounted|mount|program|unmount|version
Mount or unmount an encrypted file system.   Currenltly only CryFS is supported."
}

init()
{
	defaultCommand="start"
	mountDirRoot="$(drive dir user)"
	program="cryfs"
}

#
# Commands
#

isInstalledCommand() { InPath "$program"; }
programCommand() { echo "$program"; }
versionCommand() { AppInstallCheck && AppVersion "$program"; }

#
# IsMounted Command
#

isMountedUsage() { echo "Usage: $(ScriptName) IsMounted DIR\nReturn true if the specified encrypted directory is mounted."; }
isMountedArgStart() { unset dir; }
isMountedArgs() { ScriptArgGet "dir" -- "$@" && ScriptCheckDir "$dir"; }
isMountedCommand() { [[ -d "$mountDirRoot/$(GetLastDir "$dir")" ]]; }

# Mount Command
#

mountUsage() { echo "\
Usage: $(ScriptName) mount DIR
Mount the specified directory.

	-p, --password PASSWORD			password for the file"
}

mountArgStart() { unset dir noPassword password; }

mountOpt() 
{
	case "$1" in
		-np|--no-password) noPassword="true";;
		-p|--password|-p=*|--password=*) ScriptOptGet password "$@" || return;;
		*) return 1
	esac
}

mountArgs() { ScriptArgGet "dir" -- "$@" && ScriptCheckDir "$dir"; }

mountCommand() { mount "$dir"; }

mount()
{
	local dir="$1" baseDir="$1" mountDir="$mountDirRoot/$(GetLastDir "$1")"
	local result; mountWorker; result="$?"
	(( $result != 0 )) && { rmdir "$mountDir"; return "$result"; }
	echo "$mountDir"
}

mountWorker()
{
	# ensure all of the encrypted files are downloaded
	local check="encrypt-$(GetFileName "$mountDir")"
	if UpdateNeeded "$check"; then
		EchoErr "Downloading encrypted files..."
		CloudGet "$baseDir" 1>&2 || return
		UpdateDone "$check" || return
	fi

	# check if the directory is already mounted
	[[ -d "$mountDir" ]] && { echo "$mountDir"; return; }
	mkdir "$mountDir" || return

	# get the password
	[[ ! $password && ! $noPassword ]] && credential exists secure strong --fallback && { password="$(credential get secure strong --fallback)" || return; }

	# log mount
	[[ ! $quiet ]] && EchoErr "Mounting encrypted directory '$(FileToDesc "$baseDir")' to '$(FileToDesc "$mountDir")'..."

	# mount without a password
	[[ ! $password ]] && { RunLog cryfs "$baseDir" "$mountDir"; return; }
	
	# mount using supplied password
	local script="$(cat <<-EOF
		spawn cryfs "$baseDir" "$mountDir"
		expect "Password: "
		send "$password\r";
		expect eof
		EOF
	)"

	export CRYFS_FRONTEND="noninteractive" CRYFS_NO_UPDATE_CHECK="true"
	log1 "$script"
	local result="$(expect -c "$script")" || return
	log1 "$result"
	echo "$result" | grep --quiet "Mounting filesystem." || { ScriptErr "unable to mount encrypted directory '$(FileToDesc "$baseDir")'"; return 1; }
	return 0
}

#
# Unmount Command
#

unmountUsage() {
EchoWrap "\
Usage: $(ScriptName) unmount DIR
Unmount the specified directory.  Only the last part of the directory is used and is assumed to be mounted in '$(drive dir root)', which means it can be the mount point or the base directory that was mounted."
}

unmountArgStart() { unset dir; }
unmountArgs() { ScriptArgGet "dir" -- "$@"; }

unmountCommand()
{
	local mountDir="$mountDirRoot/$(GetLastDir "$dir")"
	local args=(); [[ $force ]] && args+=(--immediate)

	# cleanup and return if not mounted
	rmdir "$mountDir" >& "/dev/null"
	[[ ! -d "$mountDir" ]] && return

	# unmount
	[[ ! $quiet ]] && echo "Unmounting encrypted volume '$(FileToDesc "$mountDir")'..."
	RunLog cryfs-unmount "$mountDir" "${args[@]}" && rmdir "$mountDir"
}

ScriptRun "$@"
