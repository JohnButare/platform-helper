@echo off
SetLocal

REM Initialize
set GacDir=%WinDir\assembly
set GacPhysicalDir=%WinDir\assembly\gac

set FrameworkDir=%WinDir\Microsoft.NET\Framework

set FrameworkVersions=1 2 4
set version=4
iff %@IsInList[%1 %FrameworkVersions] == 1 then
	set version=%1
	shift
endiff

switch %version
case 1
	set version=v1.1.4322
case 2
	set version=v2.0.50727
case 4
	set version=v4.0.30319
endswitch

set FrameworkFileVersion=v4.0 3.5 3.0 2.0 1.1 1.0
set AssemblyVersions=4.0.0.0 3.5.0.0 3.0.0.0 2.0.0.0 1.0.5000.0 1.0.3300.0

iff not defined FrameworkDir then
	call VisualStudio vars >& nul:
endiff

gosub init

REM Get arguments
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

set command=cd
iff IsLabel %1 then
	set command=%1
	shift
endiff
if not IsLabel %command goto usage

REM Run command
gosub %command
quit %_?

:usage
text 1>&2
.NET [1|2|4](4) [command](dir)
  dir|SdkDir|MachineConfig|gac|GacDir|GacUtil|clr
  sNet|name|version|RuntimeVersion|FrameworkVersion|target <executable or assembly>
  register <assemblies> - register assemblies in the current directory, supports wildcards
endtext
quit 1

:init

set ToolPath=%FrameworkDir\%version
set InstallUtil=%ToolPath\InstallUtil.exe
set MsBuild=%ToolPath\MsBuild.exe
set GacUtil=%FrameworkDir\v1.1.4322\gacutil.exe"

return

:MachineConfig
set file=%FrameworkDir\%version\CONFIG\machine.config
iff not IsFile "%file" then
	EchoErr %file does not exist
	return 1
endiff
call TextEdit "%FrameworkDir\%version\CONFIG\machine.config"
return 0

:CdDir
if not IsDir "%dir" return 1
cde "%dir"
EndLocal /d
return 0

:SdkDir
set dir=%WindowsSdkDir
gosub CdDir
return %_?

:cd
:dir
set dir=%FrameworkDir
gosub CdDir
return %_?

:GacDir
set dir=%GacPhysicalDir
gosub CdDir
return %_?

:gac
start /pgm explorer.exe "%GacDir"
return

:GacView
if "%@search[GacView]" == "" return 1
start /pgm GacView
return 0

:clr
if not "%@search[ClrVer]" == "" return 1
ClrVer
echo Runtime versions used by active processes:
ClrVer -all
return 0

:IsNet

gosub GetFile

REM CorFlags requires the .NET framework 2.0 runtime
iff not IsFile "%FrameworkDir\v2.0.50727\ngen.exe" then
	return 1
endiff

CorFlags "%file" >& nul:
echo %@if[%? == 0,1,0]

return 0

REM Test using 
:target

gosub GetNetFile

set pe=%@word[2,%@ExecStr[CorFlags "%file" | egrep "PE        :"]]
set Force32Bit=%@word[2,%@ExecStr[CorFlags "%file" | egrep "32BIT     :"]]

iff "%pe" == "PE32" .and. "%Force32Bit" == "0" then
  echo any
elseiff "%pe" == "PE32" .and. "%Force32Bit" == "1" then
	echo x86
elseiff "%pe" == "PE32+" then
	echo x64
endiff

return

:RuntimeVersion

gosub GetNetFile

echo %@word[2,%@ExecStr[CorFlags "%file" | egrep "Version   :"]]

return 0

:version

gosub GetNetFile

REM The .NET version of the file is the version of the first dependency
echo %@word["=",1,%@word[1,%@ExecStr[NetDepends "%file"]]]

return

:name

gosub GetNetFile

REM The .NET name of the file is the name of the first dependency
echo %@ExecStr[NetDepends "%file"]

return

REM Determine the framework required version by checking for references to framework assemblies.   This is valid as long 
REM as there are no other assembly references with the same version as the .NET Framrwork.
:FrameworkVersion

gosub GetNetFile
if %# != 0 goto usage

set DependencyFile=%@unique[%temp]

REM Get the dependencies
NetDepends "%file" >& "%DependencyFile"
iff %? != 0 then
	echo Unable to determine the dependencies for %file. 1>&2
	return 1
endiff

REM Check the dependencies 
for /l %i in (0,1,%@eval[ %@words[%FrameworkFileVersion] - 1]) (
	
	set FrameworkVersion=%@word[%i,%FrameworkFileVersion]
	set AssemblyVersion=%@word[%i,%AssemblyVersions]
	
	egrep -i Version=%AssemblyVersion "%DependencyFile" >& nul:
	iff %? == 0 then
		gosub FrameworkVersionCleanup
		echo %version
		quit 0
	endiff
)

echo unknown
gosub FrameworkVersionCleanup

return 1

:FrameworkVersionCleanup
call DelFile "%DependencyFile"
return

REM Get argument from the command line that must be a file
:GetFile

set file=%@UnQuote[%1]
iff not IsFile "%file" then
	echo Could not find %file.  1>&2
	quit 1
endiff

shift
if %# != 0 goto usage

return

REM Get argument from the command line that must be a .NET file
:GetNetFile

gosub GetFile

iff %@IsNet[%file] != 1 then
	echo %file is not a .NET executable or assembly. 1>&2
	quit 1
endiff

return

:test

set p=%PublicData\install\Microsoft\.NET\test

echo Testing runtime and framework version...
for %file in (%p\version\*) (
	echo %@name[%file]: runtime %@NetRuntimeVersion[%file] framework %@NetFrameworkVersion[%file]
)

echo.
echo Testing target...
for %file in (%p\target\*) (
	echo %@name[%file]: target %@NetTarget[%file]
)

return

:VerifyGacUtil

iff not IsFile "%GacUtil" then
  echo gacutil could not be located.
  quit 1
endiff

return

:register

for %assembly in (%$) (
	echos Registring %@Name[%assembly]... 
	"%GacUtil" /nologo /if %@quote[%assembly]
)

return

:GacUtil
"%GacUtil" /logo %$
return

:MsBuild
"%MsBuild%" %$
return %?