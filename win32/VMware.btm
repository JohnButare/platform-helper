@echo off
SetLocal

gosub init
gosub %command
quit %_?

REM
REM Usage
REM
:usage
text
usage: VMware [p[n]] [command](start)
  p[n](first) - locate virtual machines on first or specified portable drive

  startup|start|new|console|DiskManager|tray
  cd [<vm>] - change to the guest directory
  copy <vm> <vm> - Copy a virtual machine
  clip <vm> -  Put the virtual machine configuration file into the clipboard
  close - power down runnings virtual machines and close VMware workstation console
  create <vm> [<template>](wxp) - create a new virtual machine from a template
  debugger enable|disable - enable or disable the VMware integrate virtual debugger
  delete <vm> - delete a virtual machine
  dhcp restart|edit
  exist <vm> - return 1 if the VM exists
  guest [init|compact|rename|SharedFolders|setup|snap|tools](tools)
  list [size|<vm>] - List all virtual machines and their size, or specific virtual machine
  (un)mount [<vm>] - mount the virtual machine hard drive to v:
  network - display or change guest networks
  open [new] - open a virtual machine, optionally in a new window
  resume|repair - update VMware after host machine has resumed or the bridged network stops working
  run <start|suspend|...>|help
  running [num|list|listVmx|close](list) - running virtual machines
  service start|stop|demand|auto|StartDefault|StartCore|StartConsole
  snapshot list|delete|revert <vm> <snapshot> - snapshot commands for a virtual machine
endtext
quit 1

REM 
REM VMware guest DHCP Server commands
REM
:dhcp

if %# != 1 goto usage
set command=%1
shift

if not IsLabel Dhcp%command goto usage
gosub Dhcp%command

return

:DhcpEdit
call TextEdit "%AllUsersProfile\Application Data\VMware\vmnetdhcp.conf"
pause Press any key to restart the VMware DHCP service...
gosub dhcprestart
return

:DhcpRestart
service restart VMnetDHCP
echo For the changes to reflect on the guest, execute vmip -renew
return

:run

REM Find the VmRun program
gosub ValidateVmRun

REM Get the configuration file for the VM
set ConfigArg=

iff "%name" != "" then
	gosub FindVmConfig
	set ConfigArg=%@quote[%config]
endiff

iff %# == 0 .or. %@IsHelpArg[%@UnQuote[%1]] == 1 then
  "%VMrun" --help
	return 0
endiff

set command=%1
shift
	
switch "%command"
		
default
	"%VMrun" -gu %UserName %command %ConfigArg %$
	
endswitch

return %?

:running

REM command
set command=list
iff %# != 0 then
  set command=%1
  shift
endiff

if %# != 0 goto usage

switch "%command"

case "num"
	echo %@word[3, %@ExecStr[call VMware.btm run list]]

case "close"
	
	for vm in (%@ExecStr[call VMware.btm running listVmx]) (
		echos Closing %@FileName[%@parent[%vm]]...
		call VMware.btm run suspend %@quote[%vm]
		echo done.
	)

case "listVmx"
	echos %@ExecList[`call VMware.btm run list | tail /n+1`]
		
case "list"

	REM find the location of the VMware folder in the VMware folder path, as we assume the name  of the running VM is the name of the folder it is contained in
	set folderIndex=%@eval[ %@words["\",%vm] + 1 ]

	REM Output the running guests on a single line
	echos %@ExecList[`call VMware.btm run list | tail /n+1 | cut -d \ -f %folderIndex`]
	
default
	goto usage
endswitch

return 0

:clip
gosub FindVmConfig
echo %@ClipW[%config] >& nul:
return

:close

if %# != 0 goto usage

REM Close running guests - TODO: vmware run list is returning all bm's not just those running
REM call VMware.btm running close

REM Close the VMware console
if %@IsTaskRunning[%@name[%program]] == 0 return 0
process.exe -q %@FileName[%program]

return

:snapshot

if %# lt 1 goto usage
set command=%1
shift

if not IsLabel Snapshot%command goto usage
gosub Snapshot%command

return

:SnapshotList
gosub FindVmConfig
"%VMrun" ListSnapshots "%config"
return

:SnapshotDelete
:SnapshotRevert

if %# != 2 goto usage
gosub FindVmConfig
set snapshot=%2

REM Deleting a snapshot sometimes causes the virtual machine to be renamed to the snapshot name
REM if the virtual machine is open, so close VMware.
iff "%command" == "delete" then
  call VmWare close
endiff

call ask `Are you sure you want to %command %snapshot for %name?` n
if %? == 0 quit 1

"%VMrun" %command "%config" %snapshot
quit %?

:copy

iff "%name" == "" then
	EchoErr The source vm does not exist.
	return 1
endiff

set SrcVm=%vm
set SrcName=%name
set src=%vm\%name

REM Find the destination portable flag and virtual machine name
gosub GetPortable
if %_? == 1 gosub FindVmFolder
gosub ValidateVmFolder

iff %# == 0 then
	EchoErr The destination vm was not specified.
	return 1
endiff

set name=%1
shift

if %# != 0 goto usage

set DestVm=%vm
set DestName=%name
set dest=%vm\%name

iff "%src" == "%dest" then
  EchoErr The source and destination directory cannot be the same.
  quit 1
endiff

REM Delete the destination if it exists
gosub DeleteHelper

call CopyDir /time /fast "%src" "%dest"

text
- (name change) When starting the guest select Create, and run VMware rename from the guest
- (new host) Stop the guest.  Change the network adapter to bridged or NAT (for VPN) 
endtext

return

:delete
gosub ValidateVm
gosub DeleteHelper
return

:DeleteHelper

iff not IsDir "%vm\%name" then
  return
endiff

echo Deleting %vm\%name...

call ask `First confirmation: Are you sure you want to delete all %@label[%vm] %name files?` n
if %? == 0 quit 1

call ask `Second confirmation: Are you sure you want to delete all %@label[%vm] %name files?` n
if %? == 0 quit 1

call DelDir "%vm\%name"

iff IsDir "%vm\%name" then
  echo Unable to delete %name.
  quit 1
endiff

return

:create

REM Arguments
iff %# == 2 then
  set template=%2
else
  set template=wxp
endiff

gosub ValidateVmFolder

REM Verify the template directory exists
iff not IsDir "%vm\template\%template" then
  echo The %template template does not exist.
  quit 1
endiff

REM Delete the virtual machine if it exists
gosub DeleteHelper

REM Copy the template
call CopyDir "%vm\template\%template" "%vm\%name"

REM Mount the template OS installation CD and display OS specific instructions
iff exist "%vm\%name\os.btm" then
  call "%vm\%name\os" install
else
  pause Mount the OS installation CD then press any key to continue...
endiff

REM Start the virtual machine
gosub FindVmConfig
"%VMrun" start "%config"
echo - Right click CD-ROM, Edit..., check Connected and Connected at power on, Use physical drive=<first iso drive>, Reset
pause When the OS installation has completed, press any key to continue...

call iso unmount all

REM Final configuration
echo - Right click CD-ROM, Edit..., uncheck Connected and Connected at power on, Use physical drive=Auto detect
echo - Options, General, Virtual machine name=%name
pause

return

REM
REM  Start VMware
REM 

:startup
if %# != 0 goto usage
set idle=%@if[%@numeric[%cpu] == 1,idle %cpu,]
call task start MaxMin %idle title "%VMwareTitleW" "%VMwareW"
return

:start
if %# != 0 goto usage
call task start max title "%VMwareTitleW" "%VMwareW"
return

:tray
call task start "%programs32\VMware\VMware Workstation\vmware-tray.exe"
return

:new
gosub ValidateVmwareWorkstation
start /pgm "%VMwareW" -n
return

:console

REM Arguments
gosub GetHost

REM Check to see if the console service is installed
iff %@ServiceExist[VMwareHostd,%host] == 0 then
	EchoErr VMware console is not installed on %host.
	return 1
endiff

REM Start the VMwareHostd service in case it was stopped to allow host sleep (defect in VMware server  2.0 beta 1 and 2)
iff %@ServiceExist[VMwareHostd,%host] == 1 then
	iff %@IsServiceRunning[VMwareHostd,%host] == 0 then
		call service start wait VMwareHostd %host
		call PauseDelay 2
	endiff
endiff

ShellRun https://%host:8333/ui/
return

:open

iff "%name" == "" then
	set config=
else
	gosub FindVmConfig
endiff

set NewWindow=
set NewWindowOption=-t
iff "%1" == "new" then
  set NewWindow=true
	set NewWindowOption=
  shift
endiff

gosub ValidateVmwareWorkstation

REM Restore the existing window
iff "%config" == "" .and. not defined NewWindow .and. %@WindowExist[%VMwareTitleW] == 1 then
	activate "%VMwareTitleW" max restore	
else
	start /pgm "%VMwareW" %NewWindowOption %@quote[%config]
endiff

return

REM
REM cd.
REM
:cd

iff "%name" == "" then
	gosub ValidateVmFolder
else
	gosub ValidateVm
endiff

cde "%vm\%name"

REM Endlocal preserving the current directory
endlocal /d

REM Force a refresh of the current directory (updates the format of the prompt)
cdd "%_CWD"

return

REM
REM eixst - return 1 if the virtual machine exists
REM
:exist
return %@if[ defined name ,1,0]

REM
REM list
REM
:list
pushd
gosub cd
iff "%name" == "" .and. "%1" == "size" then
  call DiskUsage summary
elseiff "%name" != "" then
  du --summarize --human-readable "%name"
else
	ls.exe | sort | egrep -v `backup|template`
endiff
popd
return

REM
REM NetCfg - show network configuration dialog
REM
:network
start /pgm "%NetworkEditor"
return

REM
REM Mount
REM
REM Mount the first found virtual hard disk file for the virtual machine.  The current verion
REM of the disk is always used.
:mount

gosub UnMount
gosub FindVmDisk
VMmount /y v: "%disk"
echo %@FindClose[] >& nul:

return

:UnMount

iff IsDir v:\ then

  VMmount v: /d
  
  iff %? != 0 then
    echo Unable to unmount to virtual disk.
    quit 1
  endiff
  
endiff

return

REM
REM Helper functions
REM

REM Initialization
:init
gosub FindVmFolder
set VmWareServerServices=vmount2 VMnetBridge VMnetuserif "VMware NAT Service" VMnetDHCP VMnetAdapter hcmon VMparport  vmserverdWin32 VMAuthdService vmx86

REM Arguments
set command=start
set name=

function IsPortableArg=`%@if[ "%1" == "p" .or. ("%@InStr[0,1,%1]" == "p" .and. %@numeric[%@right[-1,%1]] == 1),1,0]`

if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

:GetArgs

iff %# gt 0 .and. IsLabel %1 then
	set command=%1
	shift & goto GetArgs	
endiff

iff %@IsPortableArg[%1] == 1 then
	gosub GetPortable
	goto GetArgs
endiff

REM Guest name
iff "%vm" != "" .and. %# gt 0 .and. IsDir "%vm\%1" then
	set name=%1
	shift
endiff

REM Find VMware program  directory
iff IsDir "%programs32\VMware\VMware Workstation" then
	set VMwareProgramDir=%programs32\VMware\VMware Workstation
else
	set VMwareProgramDir=%programs32\VMware\VMware Server
endiff

REM Workstation
set VMwareW=%VMwareProgramDir\vmware.exe
set VMwareTitleW=*VMware Workstation
set program=%VMwareW

REM Common
set NetworkEditor=%VMwareProgramDir\vmnetcfg.exe

REM VMrun
iff IsFile "%programs32\VMware\VMware VIX\vmrun.exe" then
	set VMrun=%programs32\VMware\VMware VIX\vmrun.exe
else
	set VMrun=%VMwareProgramDir\vmrun.exe
endiff

return

:GetPortable

set vm=

if %@IsPortableArg[%1] == 0 return 1

set index=%@right[-1,%1]
shift

iff defined index then
	call portable find
	for %portable in (%portables) (
		iff "%@label[%portable]" == "portable%index" then
			set vm=%portable\data\VMware
			LeaveFor
		endiff
	)

	return %@if[ defined vm ,0,1]
endiff

for %drive in (%_drives) (
	iff %@ready[%drive] == 1 then
		iff IsDir %drive\data\VMware then
			set vm=%drive\data\VmWare
			LeaveFor
		endiff
	endiff
)

return %@if[ defined vm ,0,1]

REM FindVmFolder - find the virtual machine default folder
:FindVmFolder

set vm=

REM VMware Workstation preferneces
set prefs=%UserProfile\Application Data\VMware\preferences.ini
if not exist "%prefs" return 1

set vm=%@trim[%@UnQuote[%@word["=",1,%@ExecStr[egrep defaultVMPath "%prefs"]]]]

REM VMware Server configration	
iff not IsDir "%vm" then
	set prefs=%ProgramData\VMware\VMware Server\config.ini
	
	iff exist "%prefs" then
		set vm=%@trim[%@UnQuote[%@word["=",1,%@ExecStr[egrep defaultVMPath "%prefs"]]]]
	endiff
endiff

return %@if[ IsDir "%vm" ,0,1]

REM FindVmDisk - Find the virtual machines virtual disk file
:FindVmDisk

gosub ValidateVm

set disk=%@FindFirst["%vm\%name\*.vmdk"]
iff not exist "%disk" then
  echo Could not find %name virtual disk.
  quit 1
endiff

return

REM FindVmConfig - Find a virtual machine configuration file.
:FindVmConfig

gosub ValidateVm

set config=%@FindFirst["%vm\%name\*.vmx"]
iff not exist "%config" then
  echo Could not find %name configuration.
  quit 1
endiff

return

REM Services
REM
REM Core services: VMnetuserif VMnetDHCP VMnetAdapter hcmon VMparport  vmserverdWin32 vmx8 VMnetBridge 
REM Typically not used: vmount2 "VMware NAT Service" 
REM Console: VMAuthdService (Authorization Service), vmserverdWin32 (Registration Service)
REM Network services: VMnetBridge "VMware NAT Service" VMnetDHCP 
:service

set command=StartDefault
iff %# gt 0 .and. IsLabel Service%1 then
  set command=%1
  shift
endiff

gosub GetHost

if %# != 0 goto usage

gosub Service%command

return

:ServiceStart
:ServiceStop
:ServiceDemand
:ServiceAuto
:ServiceStatus

for service in (%VmWareServerServices) (
  call service %command %service %host
)

return

:ServiceStartCore

for service in (VMnetuserif vmx86 hcmon VMnetBridge) (
  iff %@ServiceExist[%service,%host] == 1 then
    call service start %service %host
  endiff
)

return

:ServiceStartConsole
call service start VMAuthdService %host
call service start vmserverdWin32 %host
return

:ServiceStartDefault
gosub ServiceStartCore
gosub ServiceStartConsole
return

:GetHost

iff %# != 1 then 
  set host=%ComputerName
else
  set host=%1
  shift
endiff

return

:ValidateVmwareServer

iff not defined vmwareS then
  echo VMware server is not installed.
  quit 1
endiff

return

:ValidateVmwareWorkstation

iff not IsFile "%VMwareW" then
  echo VMware Workstation is not installed.
  quit 1
endiff

return

:ValidateVmRun

iff not exist "%VMrun" then
  echo VMrun is not installed.
  quit 1
endiff

return

:ValidateVmFolder

iff not IsDir "%vm" then
  echo Unable to locate the virtual machine folder in %vm.
  quit 1
endiff

return

REM Verify that a virtual machine with name exists
:ValidateVm

gosub ValidateVmFolder

iff "%name" == "" .and. %# == 0 then
	echo A virtual machine name must be specified.
	quit 1
endiff

iff "%name" == "" then
	echo Virtual machine %1 does not exist.
	quit 1
endiff

return

REM Enable or disable the VMware Visual Studio integrated debugger.  The add-in slows Visual Studio load time by about 2 seconds.
:debugger

set RegFile=%programs32\VMware\VMware Workstation\Enable Visual Studio Integrated Debugger.reg
set RegKey=HKLM\SOFTWARE\Microsoft\VisualStudio\9.0\AddIns

REM Return if VisualStudio is not installed
if %@RegExist["%RegKey"] == 0 return 1
	
iff "%1" == "enable" then

	iff exist "%Regfile" then
		regedit /s "%RegFile"	
		echo The Visual Studio integrated debugger has been enabled.
	else
		echo Unable to locate the setup file.
		return 1
	endiff
	
elseiff "%1" == "disable" then

	call registry.btm delete "%RegKey\VMDebugger.Connect" >& nul:
	echo The Visual Studio integrated debugger has been disabled.

else
	goto usage
endiff

return 0

REM
REM Guest
REM


:guest

gosub GuestValidate

set command=GuestTools
iff %# gt 0 then
	set command=Guest%1
	shift
endiff
if not IsLabel %command goto usage

gosub %command
return %_?

REM Verify that we are running on a guest
:GuestValidate

iff %@IsVirtualMachine[] == 0 then
  echo This command must be run from the guest OS.
  quit 1
endiff

return

:GuestSnap
gosub GuestSnapshot checkpoint
return

:GuestSnapshot [name]

cd
cls
echo ***** %ComputerName %@trim[%name] on %_Date %_Time **** 

return

:GuestSharedFolders
explorer /e,"\\.host\Shared Folders"
return

:GuestInit
call service.btm restart VMtools
start /pgm "%programs\VMware\VMware Tools\VMwareUser.exe
start /pgm "%programs\VMware\VMware Tools\VMwareTray.exe"
return

:GuestSetup

REM VMware tools configuration for startup scripts
iff IsDir "%programs32\VMware\VMware Tools" then

	call FindPublicDoc data\install\VMware\workstation\tools.conf
	iff %? == 0 then
		copy /q "%file" "%programs32\VMware\VMware Tools\tools.conf"
	endiff
	
endiff

return

:GuestTools
start /pgm rundll32 Shell32.dll,Control_RunDLL "%programs\VMware\VMware Tools\VMControlPanel.cpl"
return

REM
REM Compact - Update the guest, then compact the hard drive so it doesn't take any more space than needed
REM 
:GuestCompact

REM Delete snapshots
echo - Snapshot Manager, right click on image snapshot, Delete Snapshot and Children
pause

REM Defragment system files
call defragment SystemFiles

REM Defragment since we have removed snapshots and need  to compact free space
call defragment
pause

REM Prepare for shrink
echo - Shrink, Prepare to shrink, and Shrink
call sudo.btm VMware.btm guest tools
pause

gosub GuestSnapshot image

return

REM
REM Rename
REM
:GuestRename

REM Arguments

set name=
iff %# == 1 then
  set name=%1
  shift
endiff

if %# != 0 goto usage

echo - (change virtual machine name) VM, Settings..., Options, name=%name
echo - (change guest unique identifiers, MAC, etc) When starting Guest, select Create a new identifier
pause 

echo Rename the guest SID and hostname, and uncheck Automatically reboot after SID is applied...
call host.btm rename sid %name
pause

text
Notes:
- Shutdown, not restart, required requried to pickup the new MAC.
endtext
pause

return

:resume

REM Virtual machines lose connectivity after a resume - restart the VMnetBridge to correct
iff %@ServiceExist[VMnetBridge] == 1 then
	REM VMnetBridge Service does not restart if started immediately after stop
	call service stop VMnetBridge
	sleep 2
	call service start VMnetBridge
endiff

return

REM IsVirtualMachine - helper for function 
:IsVirtualMachine

REM Initialize
set host=%@if[ defined name ,%name,%ComputerName]

REM Arguments

iff %# gt 0 then
	set host=%1
	shift
endiff

if %# != 0 goto usage

REM Check the host file
set IsVirtual=%@HostInfo[%host, virtual]
if "%IsVirtual" == "yes" return 1

REM Use vmcheck on the local host
iff "%host" == "%ComputerName" then
	vmchk >& nul:
	return %@if[ %? == 0 ,0,1]
endiff

REM Assume host is not virtual
return 0

:DiskManager
"%programs32\VMware\VMware Workstation\vmware-vdiskmanager.exe" %$
return


