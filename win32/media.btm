@echo off
SetLocal
on break cancel 1

REM Initialize
set MediaRoo=oversoul
set MediaUnc=\\%MediaRoo\Public
set nas=\\nas
set VideoSources=`"%MediaUnc\Videos" "%MediaDriveDir"`

REM GetDate - get videos only after the specified date, useful if remove pictures
set GetDate=1/1/2000

REM Music: exclude WPL (Windows Playlists) - Sonos shows WPL but doesn't support auto playlists, so save auto playlists as M3U before copying
set MusicFilters=-*.wpl

REM Initialize arguments
set command=
set quiet=

REM Arguments
:GetArgs
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

iff "%1" == "/q" .or. "%1" == "/quiet" then
  set quiet=/quiet
	shift & goto GetArgs
endiff

iff not defined command .and. IsLabel %1 then
  set command=%1
  shift & goto GetArgs
endiff

if not IsLabel %command goto usage
gosub %command
quit %_?

:usage
text
media backup|clean|collect|get|music|sync [/q[uiet]]
  backup - backup local pictures to the portable drive
  collect [<num pictures>](50) - Collect specified number of picutres from a picture host
  frame -  fill a picture frame device with pictures until full
  nas all|media|install|books
  router [all|music|pictures|videos|convert|clean|check](all) - update media on router drive
    all - copy, convert, and clean all media on the router
    music|pictures|videos|audible - copy media to the router
    convert - convert files to a DLNA device common format
    clean - clean router by deleting media on the router but not on a media source
    check - check for media on the media that requires manual conversion
  transfer - transfer pictures after a trip
  get [<src>|drive <drive>] [dest <destination>] [person <name>] [copy|move](move)
      [test] [AskRemoveDups] [NoiCloud] [NoPostProcess] [NoRename] [KeepName]
    [<src>|drive <drive>] - source directory or drive that contains media
    dest <destination> - picture destination folder
    person <name> - person's name used in distrination folder
    NoRename - do not rename using the creation date
endtext
quit 1
	
return 0

:sync
call media nas all
REM call WindowsMediaPlayer SyncPlaylist
REM call AmazonMp3 sync
REM call WindowsMediaPlayer sync
REM call media router sync
return %?


:backup

for portable in (1 2) (
	set dir=c:\dev\portable%portable\backup
	
	iff IsDir "%dir" then
		rc /purge "%@UserPictures[]" "%dir\Pictures" /xf thumbs.db
		rc /purge "%@UserVideos[]" "%dir\Videos" /xf thumbs.db
	endiff
	
)

return 0

:GetInit

REM VideoFile extensions to place in the videos directory
REM - Sony DSC-HX5v: moff and modd are metadata for Sony m2ts video files 
set VideoExtensions=3gp mpg mp4 mts m2ts moff modd mov 3gp

set FullName=%@FullName[]

REM iCloud
set iCloudPhotoStream=%@UserPictures[]\Photo Stream\My Photo Stream
set iCloudPhotoUpload=%@UserPictures[]\Photo Stream\Uploads

REM
REM PictureCleanDirs
REM
set p=

REM Sony import folder and all drives
set p=%p "%@UserPictures[]\%_month-%_day-%_year"

set PictureCleanDirs=%p

REM
REM PictureDirs
REM

set p=%UserData\download\pictures

REM Applie iCloud Photo Stream
iff "%ComputerName" == "%MediaRoo" then
	set p=%p "%iCloudPhotoStream" "%CloudDocuments\Camera Uploads"
endiff

set PictureDirs=%p

REM
REM Media Directories
REM
REM Arguments
REM - GMT: Media is stored in GMT for this media
REM - move or copy: move is  default
REM
REM Archive
REM - Verizon VX10000: my_pix and my_flix, \my_pix:GMT \my_flix:GMT
REM - Nikon: \DCIM\100NIKON \DCIM\101NIKON \DCIM\102NIKON \DCIM\103NIKON \DCIM\104NIKON \DCIM\105NIKON \DCIM\106NIKON \DCIM\107NIKON \DCIM\107NIKON \DCIM\108NIKON 

set m=\DCIM\100OLYMP \mssony\moml0001 \dcim\100PHOTO

REM Android
set m=%m \DCIM\Camera \handcent\download

REM Sony DSC-HX5v Cyber-shot Picture and Video camera with GPS: \private\avchd\bdmv\stream (video) \dcim\101msdcf (pictures)
set m=%m \private\avchd\bdmv\stream:move

REM Sony HDR-SR12 (HandyCam) and DSC-U60 (underwater camera)
REM  - \dcim\100msdcf (pictures) \dcim\101msdcf (pictures) \mp_root\101pnv01 (SD video) \avchd\dbmv\stream (HD video)
REM - Copy videos to preserve integrity of media catalog
set m=%m \dcim\100msdcf \dcim\101msdcf \mp_root\101pnv01:copy \avchd\bdmv\stream:copy

set MediaDirs=%m

return

:get

REM Initialize
gosub GetInit
set ProcessedDirs=

REM Argument 
set test=
set OperationArg=default
set drive=
set source=
set destination=
set PersonName=%FullName
set AskRemoveDups=
set NoiCloud=
set NoPostProcess=
set NoRename=
set KeepName=

:GetArguments

iff "%1" == "test" then
  set test=/test
  shift
	goto GetArguments
endiff

iff "%1" == "copy" .or. "%1" == "move" then
	set OperationArg=%1
	shift
	goto GetArguments
endiff

iff "%1" == "drive" then
  if %# lt 2 goto usage
  set drive=%2
  shift 2
	goto GetArguments
endiff

iff "%1" == "dest" .or. "%1" == "destination" then
	if not IsDir %@quote[%2] goto usage
	set destination=%@full[%2]
	shift 2 
	goto GetArguments
endiff

iff "%1" == "person" then
  set PersonName=%@UnQuote[%2]
  shift 2
	goto GetArguments
endiff

iff "%1" == "NoiCloud" then
	set NoiCloud=true
	shift
	goto GetArguments
endiff

iff "%1" == "AskRemoveDups" then
	set AskRemoveDups=true
	shift
	goto GetArguments
endiff

iff "%1" == "NoRename" then
	set NoRename=true
	shift
	goto GetArguments
endiff

iff "%1" == "KeepName" then
	set KeepName=true
	shift
	goto GetArguments
endiff

iff "%1" == "NoPostProcess" then
	set NoPostProcess=true
	shift
	goto GetArguments
endiff

iff IsDir "%1" then
  set source=%@full[%1]
  shift
	goto GetArguments
endiff

if %# != 0 goto usage

REM Initialize
set GMT=
set operation=%OperationArg

REM Process specified drive
iff "%drive" != "" then
	gosub ProcessDrive
	
REM Find a drive to process
elseiff "%source" != "" then	
	gosub ProcessDir "%source" clean
	
REM Default directories and all drives
else
	for dir in (%PictureDirs) gosub ProcessDir %dir
	for dir in (%PictureCleanDirs) gosub ProcessDir %dir clean
	for drive in (%_ready) gosub ProcessDrive

endiff

REM Process the media
iff defined ProcessedDirs then
	echo.
	if not defined NoPostProcess gosub PostProcess
endiff

return 0

REM Process newly downloaded media
:PostProcess

iff "%ProcessedDirs" != "" then
	gosub NasMedia
endiff

for dir in (%ProcessedDirs) (

	REM Use the 32 bit explorer to improve video thumbnail generation
	call explorer.btm 32 "%dir"
	
)

return 0

:ProcessDrive

if "%drive" == "" return

REM Ensure we have the drive letter only by removing :, \, /, and "
set drive=%@strip[:\/^",%drive]

REM Return if the drive is not ready and removable
if %@ready[%drive:] !=  1 .or. %@removable[%drive:] != 1 return

REM Look for various picture directories
for MediaDir in (%MediaDirs) (

	REM Determine the options to use from the media directory, change : separate options into space separated list
	set options=%@replace[:, ,%@field[":",1-100,%MediaDir]]

	set GMT=
	set operation=%OperationArg
	
	iff "%options" != "" then
	
		if %@IsInList[GMT %options] == 1 set GMT=true
		
		REM Use copy operation if it is the default option and an operation has not been specified on the command line
		iff %@IsInList[copy %options] == 1 .and. "%operation" == "default" then
			set operation=copy
		endiff
		
  endiff
		
	REM Process the media on the drive
	gosub ProcessDir "%drive:%@field[":",0,%MediaDir]"
  
)

return

:ProcessDir [DirArg clean]

set dir=%@UnQuote[%DirArg]

REM Return if the directory does not exist
if not IsDir "%dir" return 0	

REM Return if the directory is empty
if %@DirSize[b,%dir] == 0 return 0
		
REM Process each file in the directory
echo Processing %dir...
for %file in ("%dir\*") gosub ProcessFile

REM Remove the folder if we are cleaning and the directory is empty (can't use defined clean with gosub arguments)
if "%clean" == "clean" if %@DirSize[b,%dir] == 0 RmDir /q "%dir"
		
return

:ProcessFile

set file=%@UnQuote[%file]
set FileName=%@FileName[%file]

REM Set the default operation
if "%operation" == "default" set operation=move

REM Determine the source and destination extension
set ext=%@ext[%file]
set DestExt=%ext

REM AVCHD Video - mpg, mts, m2ts, or mp4 - Pre-Windows 7 did not recognize mts, mpg not recognized by Sony Motion Picture Broweser and stutter on Win 7, Sony Handycam import utility renames from mts to m2ts, so keep mts extension
REM if "%ext" == "mts" set DestExt=mpg

REM Determine the type of media  (picture or video)
set MediaType=picture
if %@index[%VideoExtensions,%ext] != -1 set MediaType=video

REM If not specified, detemrine the destination directory based on the computer name and media type
set DestPrefix=%destination
iff "%DestPrefix" = "" then
	
	iff "%ComputerName" == "%MediaRoo" .and. "%MediaType" == "picture" then
		set DestPrefix=%@PublicPictures[]\Camera\%PersonName
	elseiff "%ComputerName" == "%MediaRoo" .and. "%MediaType" == "video" then
		set DestPrefix=%@PublicVideos[]\Camera\%PersonName
	elseiff "%MediaType" == "picture" then
		set DestPrefix=%@UserPictures[]\Camera
	else
		set DestPrefix=%@UserVideos[]\Camera
	endiff
  
	iff not IsDir "%DestPrefix" then
		call ask.btm `Create the destination directory %DestPrefix?` y
		if %? == 0 quit 1
		call MakeDir "%DestPrefix"
	endiff
	
endiff

REM Get the date and time the media was taken
gosub ProcessDate

REM Convert GMT to Mountain Time for devices that store date and time in GMT
iff defined GMT then
	set FileAgeDate=%@AgeDate[%@eval[%@MakeAge[%FileDate %FileTime] - (36000000000 * 6)],1]

	set FileDate=%@word[0,%FileAgeDate]
	set FileTime=%@word[".",0,%@word[1,%FileAgeDate]]	
endiff

REM Don't download files before the specified get date to save time
if "%GetDate" != "" .and. %@MakeAge[%FileDate,%FileTime] lt %@MakeAge[%GetDate] return 0

set DestDir=%DestPrefix\%@year[%FileDate]\%@year[%FileDate]%@word["-",1,%FileDate]
set FileDateTime=%@replace[-,_,%FileDate] %@replace[:,_,%FileTime]
set DestFile=%@if[ defined NoRename ,%@name[%FileName],%@if[ defined KeepName ,%FileDateTime - %@name[%FileName],%FileDateTime]]
set DestSuffix=
set DestFileName=`%DestFile%%DestSuffix%.%DestExt%`
set dest=`%DestDir\%DestFileName%`
if not IsDir "%DestDir" call MakeDir "%DestDir"

REM Check for duplicate and prompt to remove if moving
gosub ProcessDuplicates
iff %_? == 1 then
	
	if "%operation" == "copy" return
	
	iff defined AskRemoveDups then
		call ask `Remove identical file %FileName from the source media?` n
		if %? == 0 return
	endiff

	echos Removing duplicate file %FileName...
	call DelFile %test "%file"
	echo done.
	
	return
	
endiff

REM If the destination filename already exists but it is  a different size (rapid picture taking), append a numeric suffix
do while IsFile "%dest"
	
	iff "%DestSuffix" == "" then
		set DestSuffix= 1
	else
		set DestSuffix= %@eval[%DestSuffix + 1]
	endiff

enddo

REM Update the list of processed directories
iff %@IsInList["%DestDir" %ProcessedDirs] == 0 then
	set ProcessedDirs=%ProcessedDirs "%DestDir"
endiff

set BigFile=%@if[ %@FileSize["%file",m] gt 50,true]

REM Process the file 
echos %@if[ "%operation" == "move",Moving,Copying] %FileName%%@if[ "%FileName" != "%DestFile" , (%DestFile)]...
gosub GetCopyFile

iff not defined NoiCloud .and. ^
	"%MediaType" == "picture" .and. IsDir "%iCloudPhotoUpload" .and. "%dir" != "%iCloudPhotoStream" then

	echos iCloud...
	set dest=%iCloudPhotoUpload\%DestFileName%
	gosub GetCopyFile
	
endiff

iff "%operation" == "move" then
	call DelFile.btm %test "%file"
endiff

echo done.

return 0

:GetCopyFile

copy %@if[ defined test ,/n] %@if[ defined BigFile ,/g] ^
	%@if[ not defined test and not defined BigFile ,/q] "%file" "%dest"

return

REM Return 1  if the file exists with the same size and name (original new nanme) 
:ProcessDuplicates

set FileSize=%@FileSize["%file"]

set DupFile=%@FindFirst[ /[s%FileSize,%FileSize] "%DestDir\%DestFile%*.%DestExt"]
if "%DupFile" != "" return 1

set DupFile=%@FindFirst[ /[s%FileSize,%FileSize] "%DestDir\%FileName"]
if "%DupFile" != "" return 1

REM For mts/m2ts file the extension and date/time stamp may is different when importing through Picture Motion Browser as the 
REM start time of the video is used, so don't look at the minutes, seconds, or extension
iff %@index[mts m2ts,%ext] != -1 then
	set DupFile=%@FindFirst[ /[s%FileSize,%FileSize] "%DestDir\%@left[-5,%DestFile%]*.m?ts"]
	if "%DupFile" != "" return 1
endiff

return 0

REM Get the data and time of the file to process 
:ProcessDate

set FileDate=
set FileTime=

iff "%MediaType" == "picture" then
	gosub ProcessFileExifDate
endiff

iff "%FileDate" == "" .or. "%FileTime" == "" then
	gosub ProcessFileDate
endiff

return

REM Get file FileDate  (YYYY-MM-DD) and FileTime (HH:MM:SS)  from the EXIF data last write time
:ProcessFileExifDate

set FileDateTime=%@ExecStr[exiftool.exe -s3 -d `"%Y-%m-%d %H:%M:%S"` -CreateDate "%file"]
set FileDate=%@word[0,%FileDateTime]
set FileTime=%@word[1,%FileDateTime]

return

REM Get file FileDate  (YYYY-MM-DD) and FileTime (HH:MM:SS)  from the file system last write time
:ProcessFileDate

REM Get the file date and time from the last modification time by defails
set FileDate=%@FileDate["%file",w,4]
set FileTime=%@FileTime["%file",w,s]

REM DSC-HX5v importerd video last modification date is not correct, but the file name is in the  format YYYYMMDDHHMMSS
REM   This is the preferred date to use as it is the start time of the recording not the end time.
set p=%@word[".",0,%@name["%file"]]
iff %@numeric[%p] == 1 .and. %@len[%p] == 14 then
	set FileDate=%@InStr[0,4,%p]-%@InStr[4,2,%p]-%@InStr[6,2,%p]
	set FileTime=%@InStr[8,2,%p]:%@InStr[10,2,%p]:%@InStr[12,2,%p]
endiff

return

:frame

REM Initialize
set FrameDir=`%drive\frame`

iff %@IsInstalled[ImageMagick] == 0 then
	EchoErr ImageMagick is not installed.
	return 1
endiff

REM Search for drives with picture frame media
set found=
for drive in (%_ready) (
	iff IsDir "%FrameDir" then
		gosub ProcessFrameDrive
		if %_? != 0 LeaveFor
	endiff
)

call FindRandomFile done

iff not defined found then
	EchoErr Media with a frame directory is not present.
	return 1
endiff

return 0

:ProcessFrameDrive

iff not defined found then
	gosub FindPictures
	if %_? != 0 return %_?
endiff
set found=true

echos Adding pictures to frame media in drive %drive...

do 

	REM Get the next file
	call FindRandomFile next
	if %? != 0 leave
	
	set dest=%FrameDir\%@FileName[%file]
	if IsFile "%dest" iterate
	
	REM Leave if the drive does not have enough disk space for the file
	if %@diskfree[%drive. M] lt 200 .or. %@diskfree[%drive] lt %@FileSize["%file"] leave

	REM Copy the file
	iff not IsFile "%dest" then
		echos %@FileName[%dest]..
		call ImageMagick.btm convert -resize 1024x768 "%file" "%dest"
	endiff
	
	echos .
enddo

echo done.
return

:collect

REM Arguments
iff %# == 0 then
  set NumPictures=50
elseiff %@Numeric[%1] == 1 then
  set NumPictures=%1
else
  goto usage
endiff

REM Prepare destination folder
set dest=%@PublicPictures[]\Collected
if not IsDir "%dest" md /s "%dest"

gosub FindPictures
if %_? != 0 return %_?

echos Copying %NumPictures pictures from %host... 
do %NumPictures
  call FindRandomFile next
  if %? != 0 return %?
  copy /q "%file" "%dest"
  echos .
enddo

echo done.

call FindRandomFile done
if %? != 0 return %?

return 0

REM Get an active host with media, checking if the localhost supports media first
:FindPictures

set host=%ComputerName
set dir=%PublicHome\Pictures

iff "%ComputerName" != "oversoul" then

	set host=oversoul
	
	if %@PrepareHost[%host] == 0 return 1
	
	set dir=\\%host\Public\Pictures
	
endiff

iff not IsDir "%dir" then
	EchoErr Public picture folder does not exist on %host.
	return 1
endiff

echo Collecting pictures...
call FindRandomFile "%dir\*.jpg"
return %?

:transfer

REM Return if we are already on Oversoul
iff "%ComputerName" == "oversoul" then
	EchoErr Already on Oversoul
	return 1
endiff

REM Transfer media to oversoul
call ask.btm `Transfer media?` y
iff %? == 1 then
	call Explorer.btm "\\oversoul\Public"
	call Explorer.btm "%UserHome"
	pause Move pictures to Oversoul then press any key to continue...
endiff

:clean
:cleanup

echo Hiding media files...
call HideFiles.btm "pub:\Music" "folder.jpg foo.jpg"

return 0

:router

REM Arguments
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

REM Find router
set router=
for /d device in (c:\dev\router* \\router\router1) (
	iff IsDir "%device\Music" then
		set router=%device
		LeaveFor
	endiff	
)
iff "%router" == "" then
	EchoErr Could not find the router.
	return 1
endiff

set command=all
iff %# gt 0 then
	set command=%1
	shift
endiff
if not IsLabel Router%command goto usage

gosub Router%command
return %_?

:RouterAll
gosub RouterMusic
gosub RouterAudible
gosub RouterPictures
gosub RouterVideos
gosub RouterConvert
gosub RouterClean
return

:RouterAudible

set dir=%UserDocuments\data\Audible\downloads
if not IsDir "%dir" return 0

REM - Use /fft  (2 second granularity between file times) as router does not store exact times
echo Copying Audible audio books to the router...
robocopy "%dir" "%router\Audible" ^
	/s /mir /fft /if *.aa
	
return

:RouterMusic

call ask.btm `Update MP3 playlists?` n 3
iff %? == 1 then 
	text
- In Windows Media Player, click Playlists
- Right click the playlist and select play (Auto Playlists: 5 stars, Best)
- Save list as... (on the drop down to the right of Clear list)
- Save as type-M3u playlist, location D:\Users\Public\Music\Playlists
	endtext
	call wmp start
	pause
endiff

REM - Use /fft  (2 second granularity between file times) as router does not store exact times
REM - Exclude WPL (Windows Playlists) - Sonos shows WPL but doesn't support auto playlists, so save auto playlists as M3U before copying
echo Copying %MediaRoo Music to the router...
robocopy "%MediaUnc\Music" "%router\Music" ^
	/s /mir /fft /xd Podcasts /xf *.jpg *.ini *.db *.wpl *.plist

echo (optional) Update the Sonos library immediately: Manage, Update Music Library Now
call Sonos start

return

:RouterPictures

REM - Use /fft  (2 second granularity between file times) as router does not store exact times
echo Copying %MediaRoo Pictures to the router...
robocopy "%MediaUnc\Pictures" "%router\Pictures" ^
	/s /mir /fft /xd "iPod Photo Cache" /xf *.modd *.moff *.db *.lnk *.txt *.nri *.ini *.url *.mov *.mpg *.3g2 *.wav *.docx *.jps *.msg *.pdf *.zip

return

:RouterVideos

REM - Copy Videos from all video sources
for %dir in (%VideoSources) gosub RouterCopyVideo %dir

return

:RouterCopyVideo [source]

if not IsDir "%source" return 1

echos Copying %source mp4 videos to the router...

set DestPrefix=%router\Videos
set SrcPrefix=%@UnQuote[%source]

pushd "%SrcPrefix"
for /r %src in ("*.mp4") (
	set dest=%DestPrefix%%@right[-%@len[%SrcPrefix],%src]
	
	set DestPath=%@path[%dest]
	if not IsDir "%DestPath" call MakeDir "%DestPath"

	set SplitFile=%@name[%src]_???.mp4
	
	REM Copy small files 
	iff %@FileSize["%src",G] le 1 then
		call CopyFile /SizeDifferent "%src" "%dest" /g
		echos .
		
	REM Break up large files - they cause the router DLNA service to fail and are cumbersome to view
	elseiff not IsFile "%SplitFile" then
		echo.
		echo Splitting %@FileName["%src"] because it is too large....
		mp4box -split 300 "%src"
		for %SrcSplit in ("%SplitFile") (
			call CopyFile /SizeDifferent "%SrcSplit" "%DestPath" /g
		)
	endiff
)
popd

echo ...done

return

REM Clean old files and directories from the router
:RouterClean

echo Cleaning extra router videos...

REM Only clean if all sources are present
set clean=true
for src in (%VideoSources) (
	iff not IsDir %@quote[%src] then
		set clean=
		LeaveFor
	endiff
)

iff not defined clean then 
	echo Not cleaning since not all video sources could be found.
	return
endiff

echos Searching for extra video files on the router...

REM Delete files that are not in one of the sources.  Nested for loop must be in a separate function otherwise file variable is corrupted.
pushd "%router\Videos"
for /r %file in ("*") gosub RouterCleanFile
popd

echo done.

REM Remove empty directories from the router
call DelDir quiet empty "%router\Videos"

return

:RouterCleanFile

REM Find files not present in one of the soruces
for VideoSource in (%VideoSources) (
	set SrcFile=%@ChangeExtension[ "%@UnQuote[%VideoSource%]%@right[-%@len[%router\Videos],%file]",*]
	iff IsFile "%SrcFile" then
		set file=
		LeaveFor
	endiff
	echos .
)

REM Clean file if not found in a source
iff defined file then
	echo.
	echo del /p "%file"
endiff

return

:RouterConvert

REM - Convert Videos from all video sources
for %dir in (%VideoSources) gosub RouterConvertVideo %dir

return

REM Convert video files for use on DLNA devices.  Note very short videos will not be converted and must be deleted manually.
:RouterConvertVideo [source]

set DestPrefix=%router\Videos
set SrcPrefix=%@UnQuote[%source]

if "%SrcPrefix" == "" return

echo Converting %source mts video files to mp4 and copying to the router...

osd /c >& nul:

pushd "%SrcPrefix"

REM Get counts
set current=0
set total=0
echos Calculating the number of videos to convert...
for /r %src in ("*.mts") (
	set dest=%@ChangeExtension[ "%DestPrefix%%@right[-%@len[%SrcPrefix],%src]" , mp4]

	iff not IsFile "%dest" then 
		set total=%@eval[ %total + 1 ]
		echos .
	endiff
)
echo %total videos

REM convert
for /r %src in ("*.mts") (
	set dest=%@ChangeExtension[ "%DestPrefix%%@right[-%@len[%SrcPrefix],%src]" , mp4]
	
	iff not IsFile "%dest" then 
		set current=%@eval[ %current + 1 ]
		osd /n /time=60 Converting %@name[%src] (%current of %total)... 
		call handbrake convert DLNA "%src" "%dest"
		set result=%?
		osd /c >& nul:
		
		iff %result != 0 then
			EchoErr Could not convert %src (%@FileSize["%src",K]K). 
			echo HandBrake does not convert small video files and exits with "No title found."
			
			call ask `Do you want to play this video file?` n
			if %? == 1 "%src"
			
			call ask `Do you want to delete this video file?` n
			if %? == 1 call DelFile "%src"
		endiff
		
	endiff
)

popd

return

:RouterCheck

pushd C:\dev\media1\videos\Camera\John

echo Files requiring conversion:
for /r %file in (*.wmv *.mpg) (
	set dest=%@ChangeExtension[ "%file" , mp4]
	iff not IsFile "%dest" then
		echo %file
	endiff
)

return

:nas

REM Arguments
if %@IsHelpArg[%@UnQuote[%1]] == 1 goto usage

iff %@IsHostAvailable[%nas] == 0 then
	EchoErr Could not find the NAS server
	return 1
endiff

set command=all
iff %# gt 0 then
	set command=%1
	shift
endiff
if not IsLabel Nas%command goto usage

gosub Nas%command
return %_?

:NasAll

call ask `Sync install?` n
if %? == 1 gosub NasInstall

call ask `Sync media?` n
if %? == 1 gosub NasMedia

call ask `Sync books?` n
if %? == 1 gosub NasBooks

return

:NasMedia
call BeyondCompare start "%MediaUnc\Music" "%nas\music" /filters`=`%MusicFilters
call BeyondCompare start "%MediaUnc\Pictures" "%nas\photo"
call BeyondCompare start "%MediaUnc\Videos" "%nas\video"
return

:NasInstall
call BeyondCompare start "%MediaUnc\Documents\data\install" "%nas\public\documents\data\install"
return

:NasBooks
call ask `Update OPD2 catalog?` n
if %? == 1 call calibre.btm opds
call BeyondCompare start "%UserData\books" "%nas\web\books"
return
