@echo off
SetLocal
pushd

REM Initialize
on break cancel 1
set silent=
set NoBak=
set ExcludeFiles=112
set subDirs= 

set LastSyncSuffix=_sync.txt
set SyncMethod=sync
set SelectDir=

REM Arguments
if %@IsHelpArg[%@unquote[%1]] == 1 goto usage

:GetArgs

iff "%1" == "silent" then
  set silent=true
  shift
  goto GetArgs
endiff

REM Arguments in quotes will cause a synctax error in this if statement
set arg=%@UnQuote[%1]
iff %# gt 0 .and. ("%arg" == "sync" .or. "%arg" == "SrcOlder" .or. "%arg" == "DestOlder") then
  set SyncMethod=%arg
  shift
  goto GetArgs
endiff

iff "%1" == "NoBak" then
  set NoBak=NoBak
  shift
endiff

iff "%1" == "/xf" then
  shift
  
  REM Change ExcludeFiles from a # separated list to a space separated list
	set OrigExcludeFiles=%1
  set ExcludeFiles=%@UnQuote[%@replace[#, ,%@quote[%OrigExcludeFiles]]]

  shift
  goto GetArgs
endiff

iff "%1" == "/s" then
  set SubDirs=/s
  shift
  goto GetArgs
endiff

if %# != 2 goto Usage

set SrcDirOrig=%1
set DestDirOrig=%2

set file=%@unquote[%1]
iff IsDir "%file" then
  set pattern=*
  set SrcDir=%@full[%file]\
else
  set pattern=%@FileName[%file]
  set SrcDir=%@path["%@full[%file]"]
endiff

if "%SrcDir" == "" set SrcDir=%_cwd\

set file=%@unquote[%2]

REM Ensure we can get the destination locations, so we do not overwrite the current folder if the destination drive becomes unavailable %@full will return the empty string

set description=

set description=%@FileName[%@full[%file]]
iff "%description" == "" then
  echo Unable to get the destination description (%DestDir)
  quit 1
endiff

set DestDir=
set DestDir=%@full[%file]\
iff "%DestDir" == "" then
  echo Unable to get the destination directory (%DestDir)
  quit 1
endiff

iff not IsDir "%SrcDir" .and. not IsDir "%DestDir" then 
  echo Source and destination directories do not exist (%SrcDir)
  quit 1
endiff

REM Don't sync the sync timestamp files
set ExcludeFiles=*%LastSyncSuffix% %ExcludeFiles%

REM If the source directory does not exist, swap the src and dest dirs so that the dest dir is copied to the source.
iff not IsDir "%SrcDir" then
  set hold=%SrcDir
  set SrcDir=%DestDir
  set DestDir=%hold
endiff

iff not IsDir "%DestDir" then 

	echo %DestDir does not exist.
	call ask `Do you want to (D)elete or (C)opy %SrcDir?` ValidResponses=DC C
	iff %? == 0 then
		call DelDir ask "%SrcDir"
		if %? != 0 EchoErr Unable to delete %SrcDir.
		quit 0
		
	else
		echo Copying "%SrcDir%" to "%DestDir"
			
		md /s "%DestDir"
		iff %? != 0 then
			echo Unable to create the destination folder (%DestDir)
			quit 1
		endiff
		
		set xf=%ExcludeFiles
		iff defined subDirs then
			robocopy "%SrcDir." "%DestDir%." /e /r:2 /w:2 /Purge /xf %xf
		else
			robocopy "%SrcDir." "%DestDir%." /r:2 /w:2 /Purge /xf %xf
		endiff
	endiff
	
endiff

REM Store a LastSync file in both the src and dest dirs, so no matter which folder is the source
REM when a sync is run again, we will have a last sync time.
REM We use the dest id to prefix the sync file in the source folder, and vice versa, so that the 
REM the src dir can sync against unique destinations (computers when the src and dest ID are computers)
set LastSyncSrcFile=%SrcDir%.%DestId%%LastSyncSuffix%
set LastSyncDestFile=%DestDir%.%SrcId%%LastSyncSuffix%

gosub GetLastSync
gosub SyncDir

if not defined subDirs goto done

REM Collect directories that do not exist in src
set dirs=
set dir=%@FindFirst["%DestDir%*",d]
do until "%dir" == ""

  iff "%@FileName[%dir]" != "bak" then
    set NewSrcDir=%SrcDir%%@FileName[%dir]
    if not IsDir "%NewSrcDir" set dirs=%dirs "%NewSrcDir"
  endiff
  
  set dir=%@FindNext["%SrcDir%*",d]
EndDo
set dir=%@FindClose["%SrcDir%*",d]

REM Recurse on all directories not in src to see if we should create them or delete them
for %dir in (%dirs) gosub RecurseDir

REM Collect all directories in src
set dirs=
set dir=%@FindFirst["%SrcDir%*",d]
do until "%dir" == ""

  iff "%dir" != "" .and. "%@FileName[%dir]" != "bak" then
		if %@IsInList[%@quote[%@FileName[%dir]] wild %ExcludeFiles] == 0 set dirs=%dirs "%dir"
	endiff

  set dir=%@FindNext["%SrcDir%*",d]
EndDo
echo %@FindClose["%SrcDir%*",d] >& nul:

REM Recurse on all directories in src
for %dir in (%dirs) gosub RecurseDir

goto Done

:RecurseDir
call SyncDir %silent %SyncMethod %NoBak %SubDirs ^
	%@if[ defined OrigExcludeFiles,/xf %OrigExcludeFiles] ^
	"%@full[%dir]\%pattern" "%DestDir%%@FileName[%dir]"
return

:SyncDir

echos Syncing %description

set SrcDirList=%@Unique[%Temp]
set DestDirList=%@Unique[%Temp]

set OnlyInSrcList=%@Unique[%Temp]
set OnlyInDestList=%@Unique[%Temp]

gosub DeleteBackupFiles

REM Prepare directory listings

echos .
set dir=%SrcDir%%pattern & set DirList=%SrcDirList & gosub GetDirList

echos .
set dir=%DestDir%%pattern & set DirList=%DestDirList & gosub GetDirList

echo .

set SrcFileHandle=%@FileOpen[%SrcDirList,read]
set DestFileHandle=%@FileOpen[%DestDirList,read]

set SrcLine=%@FileRead[%SrcFileHandle]
set DestLine=%@FileRead[%DestFileHandle]

REM timer on >& nul:

do	
  REM Exit if we are at the end of both files
  if "%SrcLine" == "**EOF**" .and. "%DestLine" == "**EOF**" leave
  
  REM For performance, perform a quick check and return if the lines are the same (same size, same date)
  iff "%SrcLine" == "%DestLine" then
    set SrcLine=%@FileRead[%SrcFileHandle]
    set DestLine=%@FileRead[%DestFileHandle]
    iterate
  endiff
 
  set SrcName=%@instr[%NamePos,,%SrcLine]
  set DestName=%@instr[%NamePos,,%DestLine]

	REM Debug
	REM echo %SrcName - excluded=%@IsInList[%@quote[%SrcName] wild %ExcludeFiles] 
	REM echo %DestName excluded=%@IsInList[%@quote[%DestName] wild %ExcludeFiles] 
	REM echo Exclude files=%ExcludeFiles

  REM Process files if names are the same, if the file names are different, add the name in the list that is lower in the alphabet to a list
  REM of files only in that directory, and advance that file.  Since both lists are alphabatize, this brings the lists "closer in sync"
  
  iff "%SrcName" == "%DestName" then
		if %@IsInList[%@quote[%SrcName] wild %ExcludeFiles] == 0 gosub SyncFile 
    set SrcLine=%@FileRead[%SrcFileHandle]
    set DestLine=%@FileRead[%DestFileHandle]  
    
  elseiff "%SrcName" != "" .and. ("%SrcName" lt "%DestName" .or. "%DestName" == "") then
		if %@IsInList[%@quote[%SrcName] wild %ExcludeFiles] == 0 echo %SrcName >> "%OnlyInSrcList"
    set SrcLine=%@FileRead[%SrcFileHandle]
    
  elseiff "DestName" lt "SrcName" .or. "%SrcName" == "" then
		if %@IsInList[%@quote[%DestName] wild %ExcludeFiles] == 0 echo %DestName >> "%OnlyInDestList"
    set DestLine=%@FileRead[%DestFileHandle]
		
  endiff

enddo

REM cat "%OnlyInSrcList" & pause OnlyInSrcList
REM cat "%OnlyInDestList" & pause OnlyInDestList
REM echo %SrcName %SyncMethod

switch %SyncMethod

case Sync
  set FromDir=%SrcDir & set ToDir=%DestDir & set FileList=%OnlyInSrcList & gosub SyncMissing
  set FromDir=%DestDir & set ToDir=%SrcDir & set FileList=%OnlyInDestList & gosub SyncMissing

case SrcOlder
  set FileList=%OnlyInSrcList & set FileDir=%SrcDir & gosub DeleteFiles
  set FileList=%OnlyInDestList & set CopySrcDir=%DestDir & set CopyDestDir=%SrcDir & gosub CopyFiles
  
case DestOlder
  set FileList=%OnlyInDestList & set FileDir=%DestDir & gosub DeleteFiles
  set FileList=%OnlyInSrcList & set CopySrcDir=%SrcDir & set CopyDestDir=%DestDir & gosub CopyFiles

endswitch

echo %@FileClose[%SrcFileHandle] > nul:
echo %@FileClose[%DestFileHandle] > nul:

gosub CleanupTempFiles

REM timer off
REM pause

return

:DeleteFiles

for file in (@%FileList) (

  set file=%FileDir%%@FileName[%file]
  iff defined NoBak then
    if exist "%file" del /f /q "%file"
  else
    call bak move local "%file"
  endiff
) 

return

:CopyFiles

for file in (@%FileList) (
  echos Copying %@FileName[%file]... 
  copy /q "%CopySrcDir%%@FileName[%file]" "%CopyDestDir"
  echo done.
) 

return


REM Put the directory listing of %Dir to %DirList
:GetDirList

REM Return a directory listing in the format <date> <time> <file size> <file name>
REM  	time -  12 hour time and includes a or p - required to differentiate files modified 12h apart (pdir th:m:s:d is 12h time and not return a or p)
REM 	full time -  in 12 hour format with seconds and milliseconds, but no a or p (needed for file modified in the same second)
REM 	file name - set the NamePos variable in initialziation section to the column that the file name will start in
REM
REM Notes: 
REM - pdir includes time in milliseconds so is able to differentiate files that have changed in the same second
REM - pdir is very slow so it is not used.  2.86s vs .35s on LAN, WAN pdir takes minutes for larger number of files)

set command=dir /oa/m/k
set NamePos=35

REM set NamePos=48
REM set command=pdir /oa /(dm/d/y t zc th:m:s:d fn)

%command "%dir" |& egrep -v `<DIR>` >& "%DirList"
REM Truncate the file if the dir was not found
iff %@wild[%@execstr[head /n 1 "%DirList"],*The system cannot find the file specified.] == 1 then
  echos > "%DirList"
endiff

return

:SyncFile

set SrcSize=%@word[" ",2,%SrcLine]
set DestSize=%@word[" ",2,%DestLine]    

set SrcDate=%@word[" ",0,%SrcLine],%@TimeTo24[%@word[1,%SrcLine]]
set DestDate=%@word[" ",0,%DestLine],%@TimeTo24[%@word[1,%DestLine]]

set SrcFile=%SrcDir%%SrcName
set DestFile=%DestDir%%DestName

set SrcAge=%@FileAge["%SrcFile"]
set DestAge=%@FileAge["%DestFile"]

set ext=%@ext[%SrcName]
set IsText=
set IsBinary=
Iff %ext == dll .or. %ext == exe .or. %ext == com Then
  set IsBinary=True
ElseIff %ext == btm .or. %ext == txt Then
  set IsText=True
endiff

iff "%SrcSize" == "%DestSize" then
  set SyncTime=

	REM Compare the files
	diff %3$ "%SrcFile" "%DestFile" > nul:
  if %? == 0 set SyncTime=true
  
  REM Only the file times are different, so make the update the older file time to match the new file.
  iff defined SyncTime then
    iff %SrcAge gt %DestAge .or. "%SyncMethod" == "DestOlder" then
      echo Syncing destination %DestName file date to %SrcDate
      touch /r "%SrcFile" "%DestFile"
    else
      echo Syncing source %SrcName file date to %DestDate
      touch /r "%DestFile" "%SrcFile"
    endiff
    return
  endiff
  
endiff

echo Syncing %SrcName file

REM echo %SrcLine
REM echo %DestLine
REM pause %SrcName %SrcDate %DestDate %SrcAge %DestAge

iff %DestAge lt %SrcAge then
  set older=%DestFile
  set OlderAge=%DestAge
  set DestDesc=Older
  
  set newer=%SrcFile
  set SrcDesc=Newer
 
else
  set older=%SrcFile
  set OlderAge=%SrcAge
  set SrcDesc=Older
  
  set newer=%DestFile
  set DestDesc=Newer
endiff

iff "%SyncMethod" == "SrcOlder" then
  gosub ReplaceSrc
  return
endiff

iff "%SyncMethod" == "DestOlder" then
  gosub ReplaceDest
  return
endiff

iff "%LastSync" != "" Then
  iff %OlderAge lt %@MakeAge[%LastSync] Then
    gosub ReplaceOlder
    return
  endiff
endiff

echo Differences: 
diff "%SrcFile" "%DestFile"
echo.

echo %SrcDesc: %SrcDate %SrcFile %@FileSize["%SrcFile",K]K(%@FileSize["%SrcFile",B] bytes)
echo %DestDesc: %DestDate %DestFile %@FileSize["%DestFile",K]K(%@FileSize["%DestFile",B] bytes)

iff defined silent then
  echo Silent mode...skipping %SrcFile
  return
endiff

set DefaultChoice=3
iff defined IsBinary Then
  set DefaultChoice=3
elseiff defined IsText Then
  set DefaultChoice=1
endiff

call ask ` (1) Edit (2) Delete (3) Replace older (4) Replace newer` ValidResponses=1234 %DefaultChoice

switch %@eval[%? + 1]

case 1
  gosub EditBoth
  diff %3$ "%SrcFile" "%DestFile" > nul:
  Iff %? != 0 Then
    echo %SrcName is still different.
    pause
    goto SyncFile
  endiff

case 2
  gosub DeleteBoth

case 3
  gosub ReplaceOlder

case 4
  gosub ReplaceNewer
endswitch

return

:EditBoth
call merge.btm "%older" "%newer"
pause
return

:DeleteBoth

iff defined NoBak then
  rm -f "%newer" "%older"
else
  call bak local "%newer" "%older"
endiff

return

:ReplaceOlder
set src=%newer & set dest=%older & gosub replace
return

:ReplaceNewer
set src=%older & set dest=%newer & gosub replace
return

:ReplaceSrc
set src=%DestFile & set dest=%SrcFile & gosub replace
return

:ReplaceDest
set src=%SrcFile & set dest=%DestFile & gosub replace
return

:replace

iff not defined NoBak then 
  call bak local "%dest"
endiff

echos Replacing %dest...
copy /q "%src" "%dest"
echo done.

return

:SyncMissing

if %@Lines[%FileList] == -1 return

iff defined silent then
  echo Silent mode...skipping files only in %FromDir directory
  ls "%SelectDir"
  return
endiff

gosub SelectFilesPrep

:SyncMissingRest

echo.
echo Sync files only in %FromDir directory
for file in (%SelectDir\*) (echos  "%@FileName[%file]")
echo.

call ask ` (1) Copy (2) Delete` ValidResponses=12 1

switch %@eval[%? + 1]

case 1

  select /h ` &^
    set file=(%SelectDir) &^
    set file=%@FileName[%file] &^
    echos Copying %file... &^
    copy /q "%FromDir%%file" "%ToDir" &^
    del /q "%SelectDir\%file" &^
    echo done.`

case 2
  select /h ` &^
    set file=(%SelectDir) &^
    set file=%@FileName[%file] &^
    call bak move local "%FromDir%%file" &^
    del /q "%SelectDir\%file"`

endswitch

if "%@FindFirst[%SelectDir\*]" != "" goto SyncMissingRest

REM Clean the select dir
gosub DelDir "%SelectDir"

return

:SelectFilesPrep

REM Create a unique temporary directory
set SelectDir=%@unique["%temp"]
del /q /f "%SelectDir"
if not exist "%SelectDir" mkdir "%SelectDir"

del /q /y "%SelectDir\*" >& nul:

REM Create the file list in the temporary directory
for file in (@%FileList) *touch /c /q "%SelectDir\%file"

return

:DeleteBackupFiles

pushd "%SrcDir"

REM Use the full path to BatchDir in case it is not in our path (for initial installs)
call "%@BatchDir[]\bak" move local *~

popd

return

:CleanupTempFiles
rm -f "%SrcDirList" "%DestDirList" "%OnlyInSrcList" "%OnlyInDestList"
return

:done
gosub SetLastSync
gosub DeleteBackupFiles
popd
quit 0

:usage
text
usage: SyncDir [NoBak] [/s] [/xf <exlude files>] [sync|SrcOlder|DestOlder] <SrcFilePattern> <DestDir>`
  /s - Sync subdirectories
  /xf - # separated list of files to exclude from the synchronization
  NoBak - do not backup files
  
  sync|SrcOlder|DestOlder - the syncrhonization method.  
    Sync uses stores uses the last sync time stored on the host to perform conflict resolution.
    SrcOlder or DestOlder assumes all files on the source or destination machine are out of date.
  
  SrcId, DestId - Input environment variables that, if specified, are used as unique identifiers 
    for the last syncronization date.  The source and destination machine name could be used. 
endtext
quit 1

:GetLastSync

REM Get the last sync time from the src folder
set file=%LastSyncSrcFile & gosub GetLastSyncHelper
set LastSyncSrc=%LastSync

REM Get the last sync time from the dest folder
set file=%LastSyncDestFile & gosub GetLastSyncHelper
set LastSyncDest=%LastSync

REM echo LastSyncSrcFile=%@FileName[%LastSyncSrcFile] at %LastSyncSrc
REM echo LastSyncDestFile=%@FileName[%LastSyncDestFile] at %LastSyncDest
REM pause

iff "%LastSyncSrc" == "" then
  set LastSync=%LastSyncDest
  return
endiff

iff "%LastSyncDest" == "" then
  set LastSync=%LastSyncSrc
  return
endiff

iff %@MakeAge[%LastSyncSrc] gt %@MakeAge[%LastSyncDest] then
  set LastSync=%LastSyncSrc
else
  set LastSync=%LastSyncDest
endiff

REM echo LastSync=%LastSync
REM pause 

return

:GetLastSyncHelper
set LastSync=
if not exist "%file" return
set LastSync=%@Line["%file",0]
if "%file" == "**EOF**" set LastSync=
REM echo %file=%LastSync
return

REM Update the last sync time both last sync files (src and dest)
:SetLastSync
set file=%LastSyncSrcFile & gosub SetLastSyncHelper
set file=%LastSyncDestFile & gosub SetLastSyncHelper
return

:SetLastSyncHelper
if exist "%file" attrib /q -h "%file"
echo %_date,%_time > "%file"
attrib /q +h "%file"
return

:DelDir dir
set dir=%@UnQuote[%dir]
if IsDir "%dir" rm -fr "%dir" >& nul:
return
