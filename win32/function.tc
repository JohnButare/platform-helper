:
: Other
:

: IsComment[s] - return 1 if the line is a comment (starts with ; or #)
IsComment=%@if[%@index[ ;#,%@left[1,%@trim[%1] ]] == -1,0,1]

IsFunction=%@if["%1" != "" .and. %@exec[function %1 >& nul:] == 0,1,0]
IsHelpArg=%@if["%1" == "help" .or. "%1" == "-help" .or. "%1" == "-h" .or. "%1" == "/?" .or. "%1" == "-?",1,0]

: EvalVar[var] - return the value of the variable specific by variable
EvalVar=`%@ExecStr[set EvalVar=%%%1 & echos %EvalVar]`

: RegExWild name: Convert name from Take Command style wildcards (? and *) to regular egrep style (.* and .?)
RegExWild=%@replace[*,.*,%@replace[?,.?,%$]]

PPC=%@if[ exist "%programs32\Microsoft ActiveSync\wcescomm.exe" .or. ^
	exist "%WinDir\WindowsMobile\wmdc.exe" ,1,0]
	
:
: Programs
:

: IsInstalled[program] - return 1 if the program is installed, 0 otherwise
IsInstalled=%@exec[call AppUtil.btm IsInstalled %1]
IsRunning=%@exec[call AppUtil.btm IsRunning %1]

IsExecutable=%@IsInList[ %@quote[%@ExeFileType[%$]] "EXECUTABLE IMAGE" DLL ]
ExeSubsystem=%@left[-1,%@right[-1,%@word[2-,%@ExecStr[dumpbin.exe /headers "%@search[%@quote[%@trim[%$]]]" | egrep " subsystem \("]]]]
;ExeSubsystem=%@word[2,%@ExecStr[PeInfo.exe "%@search[%@quote[%$]]" | egrep -i Subsystem:]
ExeArchitecture=%@InStr[1,3,%@word[2,%@ExecStr[dumpbin.exe /headers "%@search[%@quote[%@trim[%$]]]" | egrep " machine \("]]]
;ExeArchitecture=%@word[1,%@ExecStr[PeInfo.exe "%@search[%@quote[%@trim[%$]]]" | egrep -i Architecture:]]
ExeHeader=%@word[0,%@ExecStr[filever /a /d %@trim[%$]]]

; ExeFileType - returns EXECUTABLE IMAGE or DLL, COFF OBJECT (ico/iso files), works in cases where TakeCommand ExeType does not (autochk.exe)
ExeFileType=%@right[-11,%@ExecStr[dumpbin.exe "%@search[%@quote[%@trim[%$]]]" | egrep "File Type:"]]

; ExePlatform[program] - return the platform of the program: win, sfu, linux, mac.  Needs to be extended for other platforms.
ExePlatform=%@if[ "%@ExeHeader[%$]" == "PSX",sfu,win]
ExeBits=%@if[ "%@ExeArchitecture[%$]" == "x64" ,64,32]
ExePlatformBits=%@ExePlatform[%$]%@ExeBits[%$]

:
: Explorer
:

UserDocuments=%@ShFolder[5]
UserMusic=%@ShFolder[13]
UserPictures=%@ShFolder[39]
UserVideos=%@ShFolder[14]
UserStartMenu=%@ShFolder[11]
UserDesktop=%@ShFolder[16]

PublicDocuments=%@ShFolder[46]
PublicMusic=%@ShFolder[53]
PublicPictures=%@ShFolder[54]
PublicVideos=%@ShFolder[55]
PublicStartMenu=%@ShFolder[22]
PublicDesktop=%@ShFolder[25]

SendTo=%@ShFolder[9]

;
; Display
;

IsAeroEnabled=%@if[ %@index[%@RegQuery[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\InstallTheme],aero] == -1 ,0,1]

:
: .NET
:

IsNet=%@ExecStr[call .Net.btm IsNet %@quote[%$] >&> nul:]
NetName=%@ExecStr[call .Net.btm name %@quote[%$] >&> nul:]
NetVersion=%@ExecStr[call .Net.btm version %@quote[%$] >&> nul:]
NetRuntimeVersion=%@ExecStr[call .Net.btm RuntimeVersion %@quote[%$] >&> nul:]
NetFrameworkVersion=%@ExecStr[call .Net.btm FrameworkVersion %@quote[%$] >&> nul:]
NetTarget=%@ExecStr[call .Net.btm target %@quote[%$] >&> nul:]

:
: Firewall
:
FirewallEnabled=%@if[ "%@word[3,%@ExecStr[netsh firewall show state | egrep -i "Operational Mode"]]" == "Enable" ,1,0]
FirewallRuleExist=%@if[ %@exec[netsh AdvFirewall firewall show rule name=%@quote[%$] >& nul:] == 0,1,0]

:
: Registry
:

: These functions are slower than Take Command RegQuery, but can query 64 bit keys and can return special characters

: RegExist32|64[value] - return 1 if the value exists, 0 otherwise.  
RegExist32=%@if[ %@exec[ call registry.btm 32 exist %@quote[%$] ] == 0,1,0]
RegExist64=%@if[ %@exec[ call registry.btm 64 exist %@quote[%$] ] == 0,1,0]
RegExist=%@RegExist64[%$]

: RegGet32|64[value]
RegGet32=%@word[2-999,%@ExecStr[ call registry.btm 32 query %@quote[%$] |& tail /n2 ]]
RegGet64=%@word[2-999,%@ExecStr[ call registry.btm 64 query %@quote[%$] |& tail /n2 ]]
RegGet=%@RegGet64[%$]

: IsRegKey key - return 1 if key is a valid registry key
IsRegKey=%@IsInList[%@drive[%1] HKCR HKCU HKLM HKU HKCC MHKEY_CLASSES_ROOT HKEY_CURRENT_USER HKEY_LOCAL_MACHINE HKEY_USERS HKEY_CURRENT_CONFIG]

: RegQuote value - quote a registry value for use in a registry file
RegQuote=%@replace[\,\\,%$]

:
: Service - State=RUNNING|STOPPED|PAUSED
:

IsServiceRunning=%@if[ "%@ExecStr[call service.btm state %$]" == "running",1,0]
ServiceState=%@ExecStr[call service.btm state %$]
ServiceStartType=%@ExecStr[call service.btm StartType %$]
ServiceExist=%@if[ %@exec[call service.btm ExistCheck %$] == 1,1,0]

: 
: Running commands
:

: ExecList[`command`] - execute the command and return each line of the result in a single line
ExecList=%@ExecStr[call ExecList.btm %$]

:
: String
:

: IsInList [wild] value list - Return 1 if value is in the space separated list.
:   If wild is specified the value can contain wildards (* or ?)
IsInList=%@exec[call IsInList %$]
ListCount=%@words[%$]

:
: Windows and Processes
:

IsWindowActive=%@wild[%_WinFgWindow,%$]
WindowExist=%@ExecStr[call WindowExist %$]
IsTaskRunning=%@ExecStr[call IsTaskRunning %$]
Pid=%@word[0,%@ExecStr[tasklist %@quote[%$]]]

:IsTaskRunningOld=%@if[%@exec[pslist -e %@quote[%@name[%$]] >& nul:] == 0,1,0]

: IsTaskRunning - return 1 if the task passed is running, otherwise return 0
: - pslist does not function under Vista
: - Ignore standard error since on lower prilege account TaskList with an argument will display "Take Command: (Sys) Not all 
:   privileges referenced are assigned to the caller",
: - Return the first word of the task list (the process id), since the window title on the rest of the line may cause a
:   syntax error in the if statement (if it contains quotes or other reserved characters)
:IsTaskRunning=%@if["%@word[0,%@execstr[TaskList %@name[%$] >&> nul:]]" != "",1,0]

:
: String
:
ProperName=%@upper[%@left[1,%1]]%@lower[%@right[-1,%1]]

: ped[n,text] - Pad text to n characters with spaces
pad=%@repeat[ ,%@eval[%1 - %@len[%2$]]]%2$

:
: Operating System
:

OsArchitecture=%@if[ %_x64 == 1 .or. %_wow64 == 1 ,x64,x86]
OsBits=%@if[ %@OsArchitecture[] == x64,64,32]

WinProductId=%@RegQuery["HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductId"]
WinProductName=%@RegQuery["HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName"]
WinEdition=%@RegQuery["HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\EditionID"]

IsWindowsClient=%@if[ %@index[%@WinProductName[],server] == -1 ,1,0]
IsWindowsServer=%@if[ %@index[%@WinProductName[],server] != -1 ,1,0]

WindowsVersion=%@if[ %@IsWindows8[] == 1 ,8,7]
IsWindows8=%@if[%_WinVer == 6.2,1,0]
IsWindows7=%@if[%_WinVer == 6.1,1,0]
IsVista=%@if[%_WinVer == 6.0,1,0]
IsXp=%@if[%_WinVer==5.1,1,0]

: Return 1 if the OS is Vista or above.  Useful since Vista and beyond has several architectural changes that require different treatment in batch files.
IsNewOs=%@if[%_WinVer ge 6.0,1,0]

: VssSpaceUsed[drive] - space used by Volume ShadowCopy Service (VSS, i.e. SystemResore) 
VssSpaceUsed=%@word[5-6, %@ExecStr[ vssadmin.exe list shadowstorage /On=%1 | egrep -i "Used Shadow Copy Storage" ]]

: UAC
IsUacEnabled=%@if["%@RegQuery[HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA]" == "1",1,0]

: IsAdmin[] - return 1 if the user is in the administrators group. 
IsAdmin=%@group[%ComputerName,Administrators,%UserName]
: New LocalGroup returns username in the format <domain>\<username> (if in a domain) or <username>, so match the end of the username
:IsAdmin=%@if[ %@exec[net LocalGroup Administrators | egrep %UserName%$ >& nul:] == 0,1,0]

: IsElevated[] - returns 1 if the user is running with an elevated administrator token (in the administrors group running with elevated permissions)
: Don't use handle, which returns 5 if the user does not have administrator privileges.  Handle is blacklisted by SecuROM and if executed will prevent SecuROM games from running.
IsElevated=%@ExecStr[IsElevated.btm]

: Event Log 
: RecentEvent hours EventLog text - return 1 if text is contained in the event log in the last hours hours
RecentEvent=`%@execstr[psloglist -h %1 %2 |& egrep -i "%3$" >& nul: & echo %@if[%? == 0,1,0]]`

: GroupExist[group] - return 1 if the specified local group exists, 0 otherwise
GroupExist=%@if[%@exec[net LocalGroup %@quote[%$] >& nul:] == 0,1,0]

: IsInGroup group [user](current user)
IsInGroup=%@ExecStr[net LocalGroup %@quote[%1] |& egrep -c -i %@if[ %# == 1,%UserName%,%@UnQuote[%2]]$]

: UserExist user
UserExist=%@if[ "%1" == "",0,%@ExecStr[net user %@quote[%1] >& nul: & echo %@if[%? == 0,1,0]]]

: AccountFullName [user](current user)
FullName=%@ExecStr[call account FullName %$]

: ShareExist share
ShareExist=%@if[ "%1" == "",0,%@ExecStr[net share %@quote[%1] >& nul: & echo %@if[%? == 0,1,0]]]

: 
: Files and Directories
: 

: FileExists[files] - return 1 if one of the files exists
FileExists=%@exec[call FileExists.btm %$]

: IsArchvie file - return 1 if file is an archive
IsArchive=%@exec[call archive.btm IsArchive %$]

: FindDirdir[DirSearch,DirFind] - return the first occurence of DirFind in DirSearch
FindDir=%@ExecStr[ffind /a:d /s %@quote[%1] | egrep -i %2]

: NumFiles - return the number of files and directories in the specified directory.  
NumFiles `%@eval[%@files[%@quote[%$]] - %@if[ %@IsWild[%$] == 1,0,2] ]`
NumDirs `%@eval[%@files[%@quote[%$],+d] - %@if[ %@IsWild[%$] == 1,0,2] ]`

DirSize=%@ExecStr[call DirSize %$]
NewestFile=%@FileName[%@ExecStr[dir /h /f /r /o-d /k /m /a:-d %@quote[%$] >&> nul:]]
IsLink=%@if[%@exec[linkd "%@UnQuote[%$]" >& nul:] == 0,1,0]

: Return the current time in the format YYYY_MM_DD_HH_MM_SS for use as a file timestamp
TimeStamp=%@replace[-,,%_IsoDate]_%@replace[:,,%_time]
DateStamp=%@replace[-,,%_IsoDate]

: drive - Return the drive letter or UNC machine name of the passed path
drive=%@UnQuote[%@lower[%@if[%@index[%$,:] != -1,%@quote[%@word[":",0,%@UnQuote[%$]]],%@quote[%@word["\",0,%@UnQuote[%$]]]]]]

: FileCase - Return the file with the case specified in the file system.
FileCase=%@UnQuote[%@expand[%@Quote[%$]]]

: ChangeExtension file ext - change the extension of the file to ext
ChangeExtension=%@path[%@quote[%1]]%@name[%@quote[%1]].%@UnQuote[%2]

: FixPath path - fix a path by removing quotes and trailing slashes
FixPath=%@rtrim[\,%@full[%@UnQuote[%$]]]

: PosixPath - return a POSIX comaptible path by changing \ to /
PosixPath=%@replace[\,/,%$]

: IsWild FileName - Return 1 if the FileName contains wildcards (* or ?)
IsWild=%@if[ %@index[%$,*] == -1 .and. %@index[%$,?] == -1,0,1]

IsDrive=%@IsInList[%1 %_drives]

: FindFreeDriveLetter - return a drive letter that is not being used
FindFreeDriveLetter=%@ExecStr[call FindFreeDriveLetter]

: DriveTypeDescription[drive] - Return the drive type description of the specified drive 
DriveTypeDescription=%@ExecStr[call drive type %1]

: DriveSpace[drive] - return the drive space used/free/total in units scaled to the size of the drive
DriveSpace=%@ExecStr[call drive space %1]

: Parent[path] - return the parent folder of path
parent=%@instr[0,%@eval[%@len[%@path[%@quote[%$]]]-1],%@UnQuote[%$]]

:
: VMware
:

VmExist=%@exec[call VmWare exist %$]
VmNumSnapshots=%@eval[%@ExecStr[call VMware ListSnapshots %1 | wc -l] - 1]

: Alternative is to use vmchk.exe
REM IsVirtualMachine=%@if[exist "%programs\VMware\VMware Tools\VMip.exe",1,0]
IsVirtualMachine=%@exec[call VmWare IsVirtualMachine %$]

:
: Batch Programs
:

BatchDir=%@left[-1,%@path[%_batchname]]
BatchDrive=%@drive[%_batchname]:
IsKey=%@if[ IsDir "%@BatchDir[]\UserBin" ,1,0]

: LabelExists label - return true if the label exists in the currently executing batch file
:   faster than IsLabel for very large batch files
: Label must have format :<label name>[ <argments>]
: CheckLabelExists[<file>,<label name>]
: LabelExists[<label name>] - asssumes label is in the currently running batch file
CheckLabelExists=`%@if[ %@exec[egrep -i ^^:%2((" "+.*)`|`)^$ %@quote[%1] >& nul:] == 0,1,0]`
LabelExists=`%@CheckLabelExists[%@quote[%_BatchName],%1]`

:
: Date and Time
:

Tomorrow=%@makedate[%@inc[%@date[%_date]]]
ElapsedSeconds=%@eval[(%@makeage[%_date,%_time] - %StartTime) / 10000000]
TimeTo24=%@ExecStr[call TimeTo24.btm %$]

:
: Network
:

WorkgroupOrDomain=%@if["%@WorkGroup[]" == "",%@Domain[],%@WorkGroup[]]

IsIpAddress=%@if[%@words[".",%1] == 4,1,0]
IpAdapterExist=`%@execstr[ipconfig |& egrep -i "adapter %1" >& nul: & echo %@if[%? == 0,1,0]]`
IpAdapterDescription=%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "Description"]]]
IpAdapterState=%@trim[%@word[1,%@Trim[%@word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "Media State"]]]]]
Ip=%@replace[(Preferred),,%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "  IP.. Address"]]]]
Wins=%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "Primary WINS Server"]]]
Mac=%@replace[-,,%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "Physical Address"]]]]
SubnetMask=%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "Subnet Mask"]]]
DefaultGateway=%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "Default Gateway"]]]
DnsSuffix=%@Left[-1,%@Trim[%@Word[":",1,%@ExecStr[IpAdapterInfo %1 | egrep -i "DNS Suffix"]]]]

OnNetwork=%@if[%@exec[call network check %$] == 0,1,0]
NetworkSite=%@ExecStr[call network site]
Networks=%@ExecStr[call network list]

: NetworkInfo[<host>,<variable>,[<default>]] - return the value of the host variable, i.e. %@NetworkInfo[wiggin,SystemAccount] returns wsystem
NetworkInfo=%@ExecStr[call network info %1 & %@if["%[%2]" != "", echo %[%2], %@if["%3" != "", echo %3]]]

: Returns the system account for this computer
SystemAccount=%@NetworkInfo[%@WorkgroupOrDomain[],SystemAccount,system]

: IpOctet[IpAddress,n]: Return the nth IP octet, when n=0-3
IpOctet=%@word[".",%2,%1]

: IpLocal[IpAddress]: Return 1 if the IpAdress is on the local subnet.  This assumes the local subnet has a subnet mask of 255.255.255.0.
IsIpLocal=%@if[%@exec[route print %@IpOctet[%1,0].%@IpOctet[%1,1].%@IpOctet[%1,2].* | egrep --after-context=1 "Active Routes" | egrep "Network Destination" >& nul] == 0,1,0]

InDomain=%@if[%UserDomain == %ComputerName,0,1]
InIntelDomain=%@if[%UserDomain == AMR,1,0]

IsIntelHost=%@ExecStr[call intel IsIntelHost %1]
IsWigginHost=%@if["%@HostInfo[%1, network]" == "Wiggin",1,0]

: Attempts to return the true hostname of the specified machine, i.e. %@HostName[www.yahoo.com] returns p22.www.re2.yahoo.com, 
HostNameDns=%@IpName[%@IpAddress[%1]]

: HostName <alias> [quick] - Determine the actual host name.  If quick is specified
:   Do not query the host on the network.
HostName=%@ExecStr[call host NameQuery %1 %2 >&> nul:]

: Return 1 if the host is connected on a network.
IsHostConnected=%@if["%_ip" == "127.0.0.1",0,1]

: HostInfo <host>,<variable> - return the value of the host variable, i.e. %@HostInfo[mobl,sleep] returns yes
HostInfo=%@ExecStr[call host info %$]

 IsHostIp[IpAddress] - Return 1 if IpAddress is a valid IP address for this host.
IsHostIp=%@if[%@Index[%_ip,%1] == -1,0,1]

: FindHost criteria - Find hosts that match the criteria.  If criteria is not specified, all hosts are returned.  
: Example: %@FindHost[sleep=yes]
FindHost=%@if[%@exec[call host find %$ &>& nul:] == 0,%hosts,]

: ActiveHost criteria - Find the first active host, not including the localhost, that match the specified criteria.  
ActiveHost=%@FindHost[active %$]

: IsHostAvailable host [timeout](200) - return 1 if the specified host is available, waiting timeout milliseconds for a response
IsHostAvailable=%@if[%@exec[call host available %$ >& nul:] == 0,1,0]

: PrepareHost host - prepare host for NetBIOS connections by connecting to it's IPC share if needed
PrepareHost=%@if[%@exec[call host prepare %$] == 0,1,0]
IsHostPrepared=%@if[%@exec[net use | egrep -i %1 >& nul:] == 0,1,0]

: Boot host - boot the host and wait 10 seconds for it to become available
Boot=%@exec[call host boot %1 wait %2]
