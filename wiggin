#!/usr/bin/env bash
. app.sh || exit
. color.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) backup|check|config|host|maintenance|network|renew|setup|sync|update [OPTION]...
Manage the Wiggin network."
}

init()
{
	backupDir="$DATA/.bak"
	confDir="$HOME/$(ConfigGet "confDir")"
	hashiConfig="$confDir/hashi"

	# network devices
	aps=(LivingRoomAp BackYardAp FrontYardAp GarageAp StudyAp) # reboot Living Room AP first
	switches=(BackShedSwitch BensRoomSwitch DenSwitch GarageIotSwitch GarageSwitch HallSwitch LivingRoomSwitch StudyClosetSwitch1 StudyClosetSwitch2 StudyClosetSwitch3 StudyDeskSwitch)
	routers=(router)
	networkAll=("${aps[@]}" "${switches[@]}" "${routers[@]}")
}

#
# backup commands
#

backupCommands=( consul ContainerStation cups domains HomeAssistant LastPass nginx pool ProxyManager qnap ApacheWeb )

backupUsage() 
{
	ScriptUsageEcho "Usage: $(ScriptName) backup job|$(ArrayDelimit backupCommands "|")
Backup data for the Wiggin network.

	job			run the backup job which backs up all relevant data for the Wiggin network

$(ScriptOptHostUsage)"
}

backupCommand() { usage; }
backupArgStart() { unset hostArg hostOpt; borgArgs=(); }
backupOpt() {	ScriptOptHost "$@"; }
backupCupsCommand() { borgBackupService "cups" "cups" "/etc/cups"; }
backupDomainsCommand() { backupDomain "butare.net" && backupDomain "juntosholdings.com"; }
backupNginxCommand() { borgBackupService "Nginx" "lb" "/etc/nginx"; }
backupProxymanagerCommand() { borgBackupService "ProxyManager" "nginx-proxy-manager" "/srv/nginx-proxy-manager"; }
backupHomeassistantCommand() { borgBackupService "HomeAssistant" "home-assistant" "/home/homeassistant/.homeassistant"; }
backupPoolCommand() { borgBackupService "PoolController" "pool-controller" "/opt/pool-controller" && borgBackupService "PoolDashPanel" "pool-dash-panel" "/opt/pool-dash-panel"; }
backupApachewebCommand() { local borgArgs=(--exclude "/srv/apache-web/logs/"); borgBackupService "apache-web" "apache-web" "/srv/apache-web"; }
backupWireguardCommand() { borgBackupService "WireGuard" "wire-guard" "/etc/wireguard" "/etc/pivpn"; }

backupConsulCommand()
{
	local dest="$(AppGetBackupDir)/consul" || return
	[[ ! -d "$dest" ]] && { ${G}mkdir --parents "$dest" || return; }
	pushd "$dest" && hashi consul backup "${globalArgs[@]}" && popd
}

backupContainerstationCommand()
{ 
	local server="nas3"
	! unc IsAvailable "$server" && { ScriptErr "'$server' is not available"; return 1; }
	AppBackup "$(RemoveDnsSuffix "$server").ContainerStation" "//$server/root/share/data/Container/container-station-data/application"
}

backupDomain()
{
	local domain="$1"

	hilight "Backup up domain $domain..."
	local dest; dest="$(AppBackupFile "$domain.zip")" || return
	CloudFlare dns list "$domain" | ZipStdin "$dest" || return

  echo "Domain backup completed to '$dest'"
}

backupHomebridgeCommand()
{
	GetHostsApp "homebridge" && ForAllHosts HomebridgeHelper backup --header "Homebridge Backup"
}

backupLastpassCommand()
{
	header "LastPass Backup"

	local dir; dir="$(mountVol "$CDATA/VeraCrypt/personal.hc")/backup/LastPass" || return

	echo "Logging in to LastPass..."
	LastPass login || return

	echo "Exporting LastPass..."
	lpass export > "$(GetDateStampNext "$dir/" "csv")" || return
		
	unmountVol || return
}

backupQnapCommand()
{
	! IsPlatform QNAP && { ScriptErr "can only backup QNAP operating system"; return 1; }

	# initialize
	local dest="$(AppGetBackupDir)/${HOSTNAME}.qnap.settings" || return
	[[ -f "$dest" ]] && { bak --move "$dest" || return; }

	# maybe intended to be a backup number, but it is filled with a constant (127) when
	# using the backup function from the webpage, file is not removed after backup, but
	# missing after next reboot...
	echo "127" | sudo tee "/etc/save_no.conf" || return

	sudoc tar cvf - "/etc/config/"* "/etc/save_no.conf" | gzip > "$dest.tgz" || return

	PC1 e ICPIPNASWAREV301 "$dest.tgz" "$dest.bin" || return
	PC2 "$dest.bin" "" "" || return

	rm "$dest.tgz" || return
}

#
# backup job command
#

backupJobCommand()
{
	header "Wiggin Backup Job"

	hilight "Configuration..."
	echo "HOSTNAME=$HOSTNAME"
	echo "USER=$USER"
	echo "PATH=$PATH"
	echo "globalArgs=${globalArgs[@]}"	
	echo

	# network current update || return
	echo

	# hilight "Testing credentials..."
	credential manager status "${globalArgs[@]}" || return
	echo "test/check=$(credential get test check "${globalArgs[@]}")"
	echo

	# hilight "SSH Agent status..."
	SshAgent status "${globalArgsLessForce[@]}" || exit

	# backup 
	local fail=0 success=0
	echo
	runAll "update" CloudFlare JumpCloud WireGuard || return
	runAll "backup" consul cups domains domotz homebridge nginx UniFi ApacheWeb WireGuard || return

	# result
	header "Wiggin Backup Complete"
	(( fail > 0 )) && { HilightRed "$success succeeded, $fail failed"; return 1; }
	hilight "all $success succeeded, 0 failed"
}

HilightRed() { echo "${RED}$1${reset}"; }

runAll()
{
	local type="$1" w; shift
	for w in "$@"; do $type$(UpperCaseFirst "$w") || return; done
}

runApp()
{
	local type="$1" name="$(UpperCaseFirst "$2")"; shift 2
	local desc="$(UpperCaseFirst "$type")"
	local cache="$desc$name"

	header "$desc $name"

	! UpdateNeeded "$cache" && { echo "$name $type already done today."; runAppSuccess; return; }

	if RunLog "$@" "${globalArgs[@]}"; then
		runAppSuccess
		UpdateDone "$cache"
	else
		HilightRed "failed"; echo
		(( fail+=1 ))
	fi
}

runAppSuccess() { hilight "succeeded"; echo; (( success+=1 )); }

backupApacheWeb() { runApp "backup" "ApacheWeb" wiggin backup ApacheWeb; }
backupConsul() { runApp "backup" "consul" wiggin backup consul; }
backupCups() { runApp "backup" "cups" wiggin backup cups; }
backupDomains() { runApp "backup" "domains" wiggin backup domains; }
backupDomotz() { runApp "backup" "domotz" DomotzHelper backup; }
backupHomeAssistant() { runApp "backup" "HomeAssistant" wiggin backup HomeAssistant; }
backupHomebridge() { runApp "backup" "homebridge" wiggin backup Homebridge; }
backupNginx() { runApp "backup" "Nginx" wiggin backup nginx; }
backupProxyManager() { runApp "backup" "ProxyManager" wiggin backup ProxyManager; }
backupUniFi() { runApp "backup" "UniFi" UniFiController backup; }
backupWireGuard() { runApp "backup" "WireGuard" wiggin backup WireGuard; }

updateCloudFlare() { runApp "update" "CloudFlare" wiggin update CloudFlare; }
updateJumpCloud() { runApp "update" "JumpCloud" wiggin update JumpCloud; }
updateWireGuard() { runApp "update" "WireGuard" wiggin update WireGuard; }

#
# check commands
#

checkUsage() 
{
	ScriptUsageEcho "Usage: $(ScriptName) check dhcp
Perform checks.

	dhcp		check for a DHCP server on the current host"
}

checkCommand() { usage; }

# checkDhcpCommand - check if the local DHCP server is working
# - requires root privileges, or nmap capabilities (https://www.maketecheasier.com/run-nmap-without-root-or-sudo)
checkDhcpCommand()
{	
	local ip; ip="$(GetIpAddress)" || return
	local adapter; adapter="$(GetPrimaryAdapterName)"

	printf "checking for a local DHCP server at $ip..."

	local i 
	for (( i = 0; i < 5; i++ )); do		
		nmap --script broadcast-dhcp-discover -e "$adapter" |& grep --quiet "Server Identifier: $ip" && { echo "found"; return; }
		sleep 1
		printf "."
	done
	echo "not found"
	return 1
}

#
# config commands
#

configUsage() { ScriptUsageEcho "Usage: $(ScriptName) config change|monitor\nConfigure the system."; }
configCommand() { usage; }

configChangeUsage() { ScriptUsageEcho "Usage: $(ScriptName) config change\nChange the system configuration to match the current network and number of monitors."; }

configChangeCommand()
{
	# update network
	network current update "${globalArgs[@]}" || return

	# update display configuration based on the number of attached monitors
	! IsPlatform mac && return
	local monitorGetCount; monitorGetCount="$(monitorGetCount)" || return
	wiggin config monitor "$(monitorGetCount)" "${globalArgs[@]}"
}

configMonitorUsage() { ScriptUsageEcho "Usage: $(ScriptName) config monitor N\nConfigure the system for N monitors."; }
configMonitorArgs() { ScriptArgGet --integer "monitors" -- "$@"; shift; }

configMonitorCommand()
{
	local autoHide; autoHide="$(defaults read com.apple.Dock autohide)" || return
	local orientation; orientation="$(defaults read com.apple.Dock orientation)" || return
	local newAutoHide newOrientation

	if (( monitors == 1 )); then
		newAutoHide="1" newOrientation="bottom"
	elif (( monitors > 1 )); then
		newAutoHide="0" newOrientation="right"
	fi

	if [[ $force || "$newAutoHide" != "$autoHide" || "$newOrientation" != "$orientation" ]]; then
		local autoHideBool="FALSE"; (( newAutoHide == 1 )) && autoHideBool="TRUE"
		defaults write com.apple.Dock orientation -string "$newOrientation" || return
		defaults write com.apple.Dock autohide -bool "$autoHideBool" || return
		killall Dock || return
		EchoQuiet "The monitor configuration was changed to ${monitors} monitor(s)."
	else
		EchoQuiet "The monitor configuration did not change."
	fi

	return 0
}

monitorGetCount() { system_profiler SPDisplaysDataType | ${G}grep -E "^\s{8}\S" | wc -l | RemoveSpaceTrim; }

#
# host commands
#

hostUsage() {	ScriptUsageEcho "Usage: $(ScriptName) host [credential|info|ls|network|power|sync|update](ls)\n\n$(ScriptOptHostUsage)\n$commonUsage\n$waitUsage"; }

hostArgStart()
{
	unset -v hostArg hostOpt errors wait; hosts=(); 
	unset -v totalErrors

	commonUsage="	-e, --errors							keep processing if a host operation fails, return the total number of failed hosts"
	waitUsage="	-w,  --wait								wait for the operation to finish"
	syncUsage="\
	-do, --dest-older		assume destination files are than the local source files
	-so, --src-older		assume local files are older than the destination files
	-u,  --unison				perform synchronization using Unison"
}

hostOpt()
{
	ScriptOptHost "$@" && return

	case "$1" in
		--errors|-e) errors="--errors";;
		--wait|-w) wait="--wait";;
		*) return 1
	esac
}

hostArgEnd()
{
	local resolve="DnsResolveBatch $quiet"
	local resolveMac="DnsResolveMacBatch --full $errors $quiet"
	local sort="sort --ignore-case --version-sort"

	# default host
	[[ ! $hostArg && "${commandNames[2]}" == @(reboot|unlock) ]] && hostArg="${commandNames[2]}"

	# alias
	case "${hostArg,,}" in
		network) IFS=$'\n' ArrayMake hosts "$(ArrayDelimit networkAll $'\n' | $resolve | $sort)" || return; wait="--wait";;
	esac
 
	# initialize Hashi, credentials, network, and SSH agent
	AllConf --quiet "${globalArgsLessForce[@]}" || return

	return 0
}

hostCommand() { hostLsCommand; }
hostInfoUsage() { ScriptUsageEcho "Usage: $(ScriptName) info\n\n	-d, --detail						display detailed information\n$(ScriptOptHostUsage)\n$commonUsage"; }
hostInfoArgStart() { unset -v detail; }
hostInfoOpt() { scriptOptDetail "$@"; }
hostInfoCommand() { GetHosts && RunLog os info "$(ArrayDelimit hosts ",")" $detail; }
hostLsCommand() { GetHosts && ArrayDelimit hosts $'\n'; }

hostExit() { (( totalErrors+=${1:-0} )); [[ $errors ]] && return; ScriptExit 1; }

#
# Host Credential Commands
#

hostCredentialUsage() { ScriptUsageEcho "Usage: $(ScriptName) host credential [unlock](unlock)\n\n$(ScriptOptHostUsage)\n$commonUsage\n$waitUsage"; }
hostCredentialCommand() { hostCredentialUnlockCommand; }
hostCredentialUnlockCommand() { ForAllHosts $errors hostCredentialUnlock --header "Unlock"; }

hostCredentialUnlock()
{
	# --credential supplies password from various sources
	# --interactive ensure credential manager unlock state is persisted after SSH terminates, otherwise the GNOME Keyring will lock after the SSH command exits
	SshHelper connect --credential --interactive "$1" -- 'HashiConfStatus '"${globalArgs[@]}"' && echo && CredentialConfStatus '"${globalArgs[@]}"' && SshAgentConfStatus '"${globalArgs[@]}"
}

#
# Host Network Commands
#

hostNetworkUsage() { ScriptUsageEcho "Usage: $(ScriptName) host network [fix](fix)\n\n$(ScriptOptHostUsage)\n$commonUsage\n$waitUsage"; }
hostNetworkCommand() { hostNetworkFixCommand; }
hostNetworkFixUsage() { ScriptUsageEcho "Usage: $(ScriptName) fix\nFix host by forcing it to reconnect to the network.\n\n$(ScriptOptHostUsage)\n$commonUsage\n$waitUsage"; }
hostNetworkFixCommand() { ForAllHosts $errors hostNetworkFix --header "Fix"; }

hostNetworkFix()
{
	local host="$1"; host="$(DnsResolve "$host")" || return
	local mac; mac="$(MacLookup --ethers "$host")" || return

	# disconnect	
	log1 "host=$host mac=$mac"
	UniFiController device disconnect "$mac" "${globalArgs[@]}" || return

	# wait
	[[ ! $wait ]] && return
	WaitForAvailable "$host" 20
}

#
# Host Power Commands
#

hostPowerUsage() {	ScriptUsageEcho "Usage: $(ScriptName) host power [on|off|reboot|status](status)\n\n$(ScriptOptHostUsage)\n$commonUsage\n$waitUsage"; }
hostPowerCommand() { hostPowerStatusCommand; }
hostPowerOffCommand() { ForAllHosts $errors hostOff --header "Powering Off"; }
hostPowerOnCommand() { ForAllHosts $errors hostOn --header "Powering On"; }
hostPowerRebootCommand() { ForAllHosts $errors hostReboot --header "Reboot"; }
hostPowerStatusCommand() { ForAllHosts $errors hostStatus --header "Status"; }

hostOff() { RunLog power off "$1" $wait "${globalArgs[@]}"; }
hostOn() { RunLog power on "$1" $wait "${globalArgs[@]}"; }

hostReboot()
{
	local host="$1"
	local waitArg="$wait"; isVaultHost "$host" && waitArg="--ssh"
	RunLog power reboot "$1" $waitArg $waitSeconds "${globalArgs[@]}" && hostCredentialUnlock "$host" && vaultUnseal "$host"
}

hostStatus()
{
	if [[ $verbose ]]; then
		power status "$host" --verbose
	else
		local status; status="$(power status "$host")" && echo "$host is $status"
	fi
}

#
# Host Sync Commands
#

hostSyncUsage()
{
	ScriptUsageEcho "Usage: $(ScriptName) host sync [files|root](files)
Synchronize host files or root user configuration.

Synronization options:
$syncUsage
	-- 									other synchronization options

Common options:
$(ScriptOptHostUsage)
$commonUsage
$waitUsage"
}

hostSyncCommand() { hostSyncFilesCommand; }
hostSyncRootCommand() { ForAllHosts $errors hostSyncRoot --brief --show-result; }
hostSyncRoot() { SshHelper connect --x-forwarding --interactive "$1" -- 'SshHelper config sync root'; }

hostSyncFilesUsage()
{
	ScriptUsageEcho "Usage: $(ScriptName) host sync files
Synchronize host files.

Synronization options:
$syncUsage
	-- 									other synchronization options

Common options:
$(ScriptOptHostUsage)
$commonUsage
$waitUsage"
}

hostSyncFilesArgStart() { unset -v method unison; }

hostSyncFilesOpt()
{
	case "$1" in
		--destination-older|--dest-older|-do) method="--dest-older";;
		--source-older|--src-older|-so) method="--src-older";;
		-u|--unison) unison="--unison";;
		*) return 1;;
	esac
}

hostSyncFilesCommand() { setOtherHosts; ForAllHosts hostSyncFiles; }

hostSyncFiles()
{
	local host="$1" args=($method "${globalArgs[@]}")
	[[ "$(RemoveDnsSuffix "$host")" != @(nas1) ]] && args+=($unison)
	{ IsLocalHost "$host" || ! HostAvailable "$host"; } && return
	SyncLocalFiles "$host" "${args[@]}" "${otherArgs[@]}"
}

#
# Host Update Command
#

hostUpdateUsage()
{
	ScriptUsageEcho "Usage: $(ScriptName) host update [all|reboot|restart|update](all)
Update hosts, then reboot hosts if needed.

	all			perform all actions
	reboot	only reboot hosts which require it
	restart	only restart required processes
	update	only update hosts

Synronization options:
$syncUsage
	-- 									other synchronization options

Common options:
$(ScriptOptHostUsage)
$commonUsage
$waitUsage"
}

hostUpdateArgStart() { hostSyncFilesArgStart; }
hostUpdateOpt() { hostSyncFilesOpt "$@"; }
hostUpdateCommand() { hostUpdateAllCommand; }
hostUpdateUpdateCommand() { ForAllHosts $errors hostUpdate; }

hostUpdateAllCommand()
{
	hostUpdateUpdateCommand || hostExit;
	header "reboot"; hostUpdateRebootCommand || hostExit
	header "restart"; hostUpdateRestartCommand || hostExit
	return $totalErrors
}

hostUpdate()
{
	local cache="wiggin-host-update-$host"; ! UpdateNeeded "$cache" && return
	local host="$1" args=($method); [[ "$(RemoveDnsSuffix "$host")" != @(nas1) ]] && args=($unison)
	HostAvailable "$host" && HostUpdate "$host" "${args[@]}" "${globalArgs[@]}" "${otherArgs[@]}" && UpdateDone "$cache"
}

#
# Host Update Reboot Command
#

hostUpdateRebootCommand() { hostUpdateRebootFindHost && hostUpdateReboot; }

# hostUpdateRebootFindHost - sets hosts to the hosts which require reboot
hostUpdateRebootFindHost()
{
	printf "hosts..."
	local host rebootHosts=(); GetHosts || return

	for host in "${hosts[@]}"; do
		local cache="wiggin-host-reboot-$host"
		! UpdateNeeded "$cache" && continue
		local status; status="$(os info -w=reboot $host)" || return
		if echo "$status" | ${G}grep --quiet " yes"; then
			printf "$(RemoveDnsSuffix "$host")..."; rebootHosts+=("$host")
		else
			printf "."; UpdateDone "$cache"
		fi
	done

	echo "done"
	ArrayCopy rebootHosts hosts
}

hostUpdateReboot() { wait="--ssh" ForAllHosts --no-get $errors hostUpdateRebootHost --header "reboot"; }
hostUpdateRebootHost() { wait="--wait" waitSeconds="--wait-seconds 240" hostReboot "$1"; }

#
# Host Update Restart Command
#

hostUpdateRestartCommand()
{
	local hostsOrig; ArrayCopy hosts hostsOrig || return

	# restart processes
	unset hosts; hostUpdateRestartFindHost || hostExit; [[ ! $hosts ]] && return
	ForAllHosts --no-get $errors hostUpdateRestartHost --header "restart" || return

	# reboot hosts where the restart was not enough
	header "checking restart"
	ArrayCopy hostsOrig hosts || return
	unset hosts; hostUpdateRestartFindHost || hostExit; [[ ! $hosts ]] && return
	hostUpdateReboot || hostExit
	return $totalErrors
}

# hostUpdateRestartFindHost - sets hosts to the hosts which require process restarts
hostUpdateRestartFindHost()
{
	printf "hosts..."
	local host restartHosts=(); GetHosts || return
	
	for host in "${hosts[@]}"; do
		local cache="wiggin-host-restart-$host"
		! UpdateNeeded "$cache" && continue
		local status; status="$(os info -w=restart $host)" || return
		if echo "$status" | ${G}grep --quiet " yes"; then
			printf "$(RemoveDnsSuffix "$host")..."; restartHosts+=("$host")
		else
			printf "."; UpdateDone "$cache"
		fi
	done
	
	echo "done"
	ArrayCopy restartHosts hosts
}

hostUpdateRestartHost() { SshHelper connect --x-forwarding --interactive "$1" -- sudoc needrestart -r a; }

#
# Maintenance Commands
#

maintenanceUsage() 
{
	ScriptUsageEcho "Usage: $(ScriptName) maintenance all|ap
Perform network maintenance.

	all			perform all maintenance tasks
	ap			perform a controlled reboot of all access points.  The Living Room access point is rebooted.   When it is back online, all other access points are rebooted."
}

maintenanceCommand() { usage; }
maintenanceAllCommand() { maintenanceApCommand; }

maintenanceApCommand()
{
	local firstAp="LivingRoomAp.hagerman.butare.net"
	#local firstAp="FrontYardAp.hagerman.butare.net"

	RunLog power reboot --wait "$firstAp" "${globalArgs[@]}" || return
	SleepStatus 30 || return # --wait-ssh fails running under Nomad

	local ap aps=(); IFS=$'\n' ArrayMakeC aps UniFiController ls --access-point || return
	for ap in "${aps[@]}"; do
		[[ "${ap,,}" == "${firstAp,,}" ]] && continue
		RunLog power reboot "$ap" "${globalArgs[@]}" || return
	done
}

#
# network commands
#

networkUsage() { ScriptUsageEcho "Usage: $(ScriptName) network backup|config|edit|update|validate"; }

networkArgStart()
{
	unset -v hostArg hostOpt hosts

	# DNS domain
	domain="$(ConfigGetCurrent "domain")" || return
	baseDomain="$(ConfigGetCurrent "baseDomain")" || return

	# network configuration
	network="$(ConfigGet "network")"
	subnetPi1="10.10.102.1 - 10.10.102.99"
	subnetPi2="10.10.102.100 - 10.10.102.199"
	subnetPi3="10.10.103.1 - 10.10.103.99"
	subnetPi4="10.10.103.100 - 10.10.103.199"

	# server file locations
	dhcpDirPackageDir="/etc/kea" # package location
	dhcpDirBuild="/usr/local/etc/kea" # build location	
	dnsDir="/etc/bind"

	# configuration
	dhcpConfig="$confDir/dhcp"
	dnsConfig="$confDir/dns"
	dhcpReservations="$dhcpConfig/$network/kea-dhcp4-$network-reservations.json"
}

networkCommand() { usage; }

#
# Network Backup Command
#

networkBackupUsage() { ScriptUsageEcho "Usage: $(ScriptName) network backup [dns|dhcp|all](all)\nBackup the DHCP or DNC configuration of HOST.\n\n$(ScriptOptHostUsage)"; }
networkBackupCommand() { networkBackupAllCommand; }
networkBackupAllCommand() { networkBackupDhcpCommand && networkBackupDnsCommand; }
networkBackupDhcpCommand() { getDhcpHosts && ForAllHosts networkBackupDhcp; }
networkBackupDnsCommand() { getDnsHosts && ForAllHosts networkBackupDns; }

networkBackupDhcp()
{
	local host="$1" hostShort hostIp stamp="$(GetDateStamp)"; getHost || return

	hilight "Backing up DHCP configuration from $hostShort..."

	# find a unique filename
	local file="$hostShort.dhcpd.zip" i=1
	while [[ -f "$backupDir/$stamp.$i.$file" ]]; do (( ++i )); done

	# create the backup	
	ssh $hostIp "rm -f ~/tmp/$file; zip -r ~/tmp/$file $dhcpDir" || return

	# copy the backup to the backup directory
	scp "$hostIp:~/tmp/$file" "$backupDir/$stamp.$i.$file" || return
}

networkBackupDns()
{
	local host="$1" hostShort hostIp stamp="$(GetDateStamp)"; getHost || return

	hilight "Backing up DNS configuration from $hostShort..."

	# find a unique filename
	local file="$hostShort.dns.zip" i="1"
	while [[ -f "$backupDir/$stamp.$i.$file" ]]; do (( ++i )); done

	# create the backup
	ssh "$hostIp" "rm -f ~/tmp/$file; zip -r ~/tmp/$file $dnsDir --exclude \*.key \*.zip" || return

	# copy the backup to the backup directory
	scp "$hostIp:~/tmp/$file" "$backupDir/$stamp.$i.$file" || return
}

#
# Network Config
#


networkConfigUsage()
{
	ScriptUsageEcho "Usage: $(ScriptName) network config active|compare|current|issues|reservations
Display network configuration.

	-i, --ip		display the IP address"; 
}

networkConfigCommand() { usage; }

networkConfigArgStart() { unset -v ip; }

networkConfigOpt()
{
	case "$1" in
		-i|--ip) ip="--ip";;
	esac
}

networkConfigIssueCommand()
{
	local file="/tmp/active.json"
	UniFiController api "/stat/sta" | jq > "$file" || return

	# missign IP
	#local missingIp; missingIp="$(cat "$file" | jq '.data[] | select(has("last_ip") | not) | .name' | RemoveQuotes | toDnsName | sort | uniq)"	
	#echo $missingIp

	# MAC address with no reservation
	
	# DNS name -
	#local active; IFS=$'\n' active=( $(cat "$file" | configActive | toDnsName) )
	#time parallel -i bash -c ". function.sh; DnsResolve {}" -- "${active[@]}"

	# DNS name - check against name	
	#local active; ip=true IFS=$'\n' active=( $(cat "$file" | configActive | toDnsName) )

	# list inactive

	# IsAvailable
	local active; ip= IFS=$'\n' active=( $(cat "$file" | configActive | toDnsName) )
	time parallel -i bash -c ". function.sh; IsAvailable {} 5000 || echo {}" -- "${active[@]}"
	
	# time for a in "${active[@]}"; do DnsResolve "$a"; done
}

networkConfigActiveCommand() { UniFiController api "/stat/sta" | configActive; }

# configActive - return active host "name" or "ip,name"
configActive()
{
	if [[ $ip ]]; then
		jq '.data[] | { ip: .last_ip, name: .name } | join(",") ' | RemoveQuotes | grep -v null | ${G}sort -V | uniq
	else
		jq '.data[].name' | RemoveQuotes | sort | uniq
	fi
}

networkConfigReservationsUsage() { ScriptUsageEcho "Usage: $(ScriptName) network config reservations\nGet DHCP reservation DNS names and MAC addresses in CSV format."; }

networkConfigReservationsCommand()
{
	EchoErr "Getting device reservations..."
	local what='print $1 "," $2'; [[ $ip ]] && what+='"," $3'
	configFileToCommaDelimited "$dhcpReservations" | tr A-Z a-z | awk -F "," "{ $what }"
}

networkConfigCurrentUsage() { ScriptUsageEcho "Usage: $(ScriptName) network config current\nGet current network device DNS names and MAC addresses in CSV format."; }

networkConfigCurrentCommand()
{
	EchoErr "Getting current devices..."
	{ UniFiController api "/rest/user" | unifiToCsv; UniFiController api "/stat/device" | unifiToCsv; } | sort
}

unifiToCsv()
{
	local what='name: .name, mac: .mac'; [[ $ip ]] && what+=', ip: .last_ip, dip: .ip'
	jq '.data[]
			| select((has("note") and (.note | startswith("ignore") | not)) or (has("note") | not))
			| {'"$what"'}
			| join(",")' \
		| RemoveQuotes | toDnsName | sort | unifiIpFix; 
}

toDnsName() { sed 's/[- ()]//g' | sed 's/'\''//g' | LowerCase; }

# unifiIpFix - consolidate the IP address in columns 3, 4, and 5
unifiIpFix()
{
	[[ ! $ip ]] && { cat; return; }
	awk -F, '{ if ($3 == "") $3=$4; print $1 "," $2 "," $3 }'
}

networkConfigCompareCommand()
{
	local current="/tmp/current.csv" reservations="/tmp/reservations.csv"
	networkConfigCurrentCommand > "$current" || return
	networkConfigReservationsCommand > "$reservations" || return
	merge "$reservations" "$current"
}

#
# Network Edit Command
#

networkEditUsage() { ScriptUsageEcho "Usage: $(ScriptName) network edit\nEdit the DHCP and DNC configuration files."; }

networkEditCommand()
{
	local n="$(ConfigGet "network")"

	# edit all files to ensure retrieval from cloud
	TextEdit \
		"$DATA/setup/ports" \
		"$dnsConfig/$baseDomain" \
		"$dnsConfig/forward.txt" \
		"$dnsConfig/reverse.txt" \
		"$dhcpConfig/$n/kea-dhcp4-$n.json" \
		"$dhcpConfig/$n/kea-dhcp4-$n-reservations.json"
}

#
# Network Update Command
#

networkUpdateUsage()
{
	EchoWrap "Usage: $(ScriptName) network update [dns|dhcp|all](all)
Update the DHCP or DNS configuration of HOST.

$(ScriptOptHostUsage)
	-nb,	--no-backup					do not backup the existing configuration before updating
	-nv,	--no-validate				do not validate the service after updating"
}

networkUpdateArgStart() { unset -v noBackup noValidate; }

networkUpdateOpt() 
{
	ScriptOptHost "$@" && return

	case "$1" in
		-nb|--no-backup) noBackup="true";;
		-nv|--no-validate) noValidate="true";;
		*) return 1
	esac
}

networkUpdateCommand() { networkUpdateAllCommand; }
networkUpdateAllCommand() { networkUpdateDhcpCommand && networkUpdateDnsCommand; }
networkUpdateDhcpCommand() { getDhcpHosts && ForAllHosts networkUpdateDhcp --header "Update DHCP"; }
networkUpdateDnsCommand() {	getDnsHosts && ForAllHosts networkUpdateDns --header "Update DNS"; }

#
# Network Update DHCP Command
#

networkUpdateDhcp()
{
	local host="$1" hostShort hostIp; networkUpdateCommon "DHCP" || return
	local config="$dhcpConfig/$network"; CloudGet "$config"/* || return
	local dir="$(mktemp -d -t 'dhcp.XXXXXXXXXX')" || return
	local subnetVar="subnet$(ProperCase "$hostShort")"
	local subnet="${!subnetVar}"

	# validate subnet range for the host
	[[ ! $subnet ]] && { ScriptErr "unable to find a DHCP pool for host '$hostShort'"; return 1; }

	hilight "Updating DHCP on $hostShort..."

	echo "Creating DHCP configuration files..."
	cp "$config/"* "$dir" || return
	${G}sed -i "s/SUBNET4_POOL/$subnet/" "$dir/kea-dhcp4-$network.json" || return
	${G}sed -i "s/DHCP_DIR/$(echo "$dhcpDir" | QuotePath)/" "$dir/kea-dhcp4-$network.json" || return
	${G}sed -i "s/DHCP_DIR/$(echo "$dhcpDir" | QuotePath)/" "$dir/kea-dhcp4.conf" || return

	# update ethers files - downcase to make etherwake case agnostic
	configFileToCommaDelimited "$dhcpReservations" | tr A-Z a-z | awk -F "," '{ print $2 " " $1 }' > "$DATA/setup/ethers" || return

	# update the hosts configuration file
	configFileToCommaDelimited "$dhcpReservations" | awk -F "," '{ print $1 }' > "$DATA/setup/hosts" || return

	echo "Copying DHCP configuration files to $hostShort..."
	local pw; pw="$(credential get secure default)" || return
	rsync --no-perms --chmod=ugo=rw --info=progress2 "$dir/"* "root@$host:$dhcpDir" || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service
	echo "Restarting the DHCP service on $host..."
	service restart kea-dhcp4-server --host="$host" || return

	# validate
	[[ ! $noValidate ]] && { networkValidateHost "$host" DHCP || return; }

	return 0
}

#
# Network Update DNS Command
#

networkUpdateDns()
{
	local host="$1" hostShort hostIp; networkUpdateCommon "DNS" || return
	local config="$dnsConfig"; CloudGet "$config" "${globalArgs[@]}" || return
	local dir="$(mktemp -d -t 'dns.XXXXXXXXXX')" || return

	hilight "Updating DNS on $hostShort..."

	echo "Creating DNS configuration files..."
	cp "$config/named.conf."* "$dir" || return
	cp "$config/$baseDomain" "$dir" || return
	cp "$config/forward.txt" "$dir/$domain" || return
	configFileToCommaDelimited "$dhcpReservations" | awk -F "," '{ print $1 ".'$domain'.	A	" $3 }' | column -t	>> "$dir/$domain" || return

	# create reverse lookup zone files
	for zone in 100 101 102; do
		local z="$dir/$zone.10.10.in-addr.arpa"

		cat "$config/$zone.txt" > "$z" || return

		{ printf "\n; static\n"; cat "$config/reverse.txt" | ${G}grep "^[0-9]*.$zone.10.10"; } >> "$z"

		{ printf "\n; dynamic\n"
			configFileToCommaDelimited "$dhcpReservations" |
				grep ",10.10.$zone." |
				sed "s/10.10.$zone.//" |
				awk -F "," '{ print $3 ".'$zone'.10.10.in-addr.arpa. PTR " $1 ".'$domain'." }' |
				column -t; } >> "$z"

	done

	echo "Copying DNS configuration files to $host..."
	rsync --no-perms --chmod=ugo=rw "$dir/"* "root@$hostIp:$dnsDir" --info=progress2 || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service - use X Forwarding to enable local credential manager
	echo "Restarting the DNS service on $host..."
	service restart named --host="$host" || return

	# validate
	if [[ ! $noValidate ]]; then
		{ DnsFlush && sleep 1 && networkValidateHost "$host" DNS; } || return
	fi

	return 0
}

#
# Network Update Helper
#

networkUpdateCommon()
{
	getHost || return	
	networkConfigFileValidate "$dhcpReservations" || return
	[[ ! $noBackup ]] && { networkBackup$(ProperCase "$1") "$host" || return; }
	return 0
}

# configFileToCommaDelimited FILE - convert a Kea configuration file to comma delimited
configFileToCommaDelimited()
{
	configFileToJson "$1" |
		jq '.[]|{a: .hostname, b: ."hw-address", c: ."ip-address"}|join(",")' | # convert to comma delimited
		sed 's/\"//g'	|	# remove quotes
		sort
}

# configFileToJson FILE - convert a Kea configuration file to valid JSON
configFileToJson()
{
	cat "$1" |
		sed '/^[	 ]*\/\//d' |  # remove comments - lines that begin with //
		sed '/<\?include/d'  	# remove <?include ?> directives
}

networkConfigFileValidate()
{
	configFileToJson "$1" | jq > /dev/null && return

	# view the file issues in a text editor
	local file="$(mktemp)" || return
	configFileToJson "$1" > "$file" 2> /dev/null
	TextEdit "$1" "$file" || return
	return 1
}

#
# Network Validate Command
#

networkValidateUsage() { ScriptUsageEcho "Usage: $(ScriptName) network validate [dns|dhcp|all](all)\nValidate the DHCP or DNC operation of HOST.\n\n$(ScriptOptHostUsage)"; }
networkValidateCommand() { networkValidateAllCommand; }
networkValidateAllCommand() { networkValidateDhcpCommand && networkValidateDnsCommand; }
networkValidateDhcpCommand() { networkValidateHosts "DHCP"; }
networkValidateDnsCommand() { networkValidateHosts "DNS"; }

networkValidateDhcp()
{
	local host="$1" hostShort hostIp; getHost || return
	if IsPlatform win; then
		dhcptest.exe --bind "$(GetAdapterIpAddress)" --query --wait --timeout 2 |& grep -q "^Received packet from $hostIp"
	else
		sudoc nmap --script broadcast-dhcp-discover -e $(GetPrimaryAdapterName) |& grep -q "Server Identifier: $hostIp"
	fi
}

networkValidateDns()
{
	local host="$1" hostShort hostIp; getHost || return
	IsAvailablePort "$hostIp" 53 || return
	nslookup router "$hostIp" >& /dev/null || return			# validate forward lookup
	nslookup 10.10.100.1 "$hostIp" >& /dev/null || return	# validate reverse lookup
}

# networkValidateHost HOST dhcp|dns - validate DHCP or DNS for the specified host
networkValidateHost()
{
	local host="$1" what="${2^^}" hostShort hostIp; getHost || return	
	printf "Waiting for $what on $hostShort..."

	if networkValidateWait "$what" 10; then
		echo "${GREEN}available${RESET}"
	else
		echo "${RED}failed${RESET}"
		return 1
	fi
}

# networkValidateHosts dhcp|dns - validate DHCP or DNS for the hosts
networkValidateHosts()
{
	local what="$1" hosts host hostShort hostIp; get$(ProperCase "$what")Hosts || return

	printf "Validating ${what^^}..."
	for host in "${hosts[@]}"; do
		getHost || return	
		printf "$hostShort..."
		networkValidateWait "$what" 5 && printf "ok..." || printf "${RED}failed${RESET}..."
	done
	echo "done"
}

# networkValidateWait dns|dhcp SECONDS - wait SECONDS to validate DNS or DHCP
networkValidateWait()
{	
	local function="networkValidate$(ProperCase "$1")" seconds="$2" 

	$function "$hostIp" && return

	for (( i=1; i<=$seconds; ++i )); do
 		read -n 1 -t 1 -s && { echo "cancelled"; exit 1; }
 		$function "$hostIp" && return
		[[ ! $quiet ]] && printf "."
	done

	return 1
}

#
# renew command
#

renewUsage() { ScriptUsageEcho "Usage: $(ScriptName) renew cert\nRenew Wiggin data."; }
renewCommand() { usage; }

renewCertUsage() { ScriptUsageEcho "Usage: $(ScriptName) renew cert\nRenew Wiggin certificates."; }

renewCertCommand()
{
	hilight "Renewing certificate..."
	sudoc certbot certonly -d '*.butare.net' --dns-cloudflare --dns-cloudflare-credentials "/etc/letsencrypt/credentials/cloudflare.ini" || return

	hilight "Copying certificate to the encrypted store..."
	local certDir="/etc/letsencrypt/live/butare.net"
	local encryptedDir; encryptedDir="$(encrypt mount "$CLOUD/data/app/CryFS/personal")/data/letsencrypt" || return
	( cd "$encryptedDir" && bak "butare.net" ) || return 	# backup existing certificate
	rm -fr "$encryptedDir/butare.net" || return						# remove existing certificate
	{ sudoc cp -Lr "$certDir" "/tmp/" && 	sudoc chown -R $USER "/tmp/butare.net" && mv "/tmp/butare.net" "$encryptedDir"; } || return

	hilight "Updating the certificate on the Load Balancer (NGINX)..."
	{ wiggin sync lb-cert -H=bc && wiggin sync lb-cert && wiggin sync lb; } || return

	hilight "Updating the certificate on Hubitat..."
	cd "$encryptedDir/butare.net" || return
	{ renewHubitat 1 && renewHubitat 2; } || return

	hilight "Updating Study Color Printer..."
	echo "– Import, ServerCertificate=cert?.pem, Private Key=privkey?.pem:"
	open https://studycolorprinter.butare.net/PRESENTATION/ADVANCED/NWS_CERT_SSLTLS/TOP

	hilight "Cleaning up..."
	cd || return
	encrypt unmount "personal" || return
}

renewHubitat()
{
	local n="$1"
	open "https://hubitat${n}.butare.net/hub/advanced/certificate" || return

	clipw "$(cat "cert.pem")" || return
	pause "Paste certifcate, then press any key to continue..."

	clipw "$(cat "privkey.pem")"
	pause "Paste private key, then press any key to continue..."	
}

#
# setup command
#

setupUsage() { ScriptUsageEcho "Usage: $(ScriptName) setup hashi"; }
setupCommand() { usage; }

#
# setup hashi command
#

setupHashiUsage() { ScriptUsageEcho "Usage: $(ScriptName) setup hashi\nSetup programs."; }

setupHashiCommand()
{
	header "Installing Hashi jobs..."
	local job jobs=(backup chrony file git home-assistant lb node-red pool-controller pool-dash-panel pool-temperature squid wire-guard)
	for job in "${jobs[@]}"; do hashiJob "backup" || return; done

	header "Installing Hashi Consul services..."
	hashiService "hubitat" 3 || return
	hashiService "nomad-web" 1,2,3,4 || return
}

hashiRun() { hashi "$@" $force $test "${globalArgs[@]}" "${otherArgs[@]}"; }
hashiJob() { local job="$1"; shift; hashiRun nomad job run "$job" "$@"; }

hashiService()
{
	local service="$1" hostNum hostNums; StringToArray "$2" "," hostNums; shift 2

	# hcl is the default extension
	[[ "$(GetFileExtension "$service")" == "" ]] && service=+".hcl"

	# add the service
	for hostNum in "${hostNums[@]}"; do
 		hashiRun consul service add "$hashiConfig/service/$service.hcl" --api="pi$hostNum" "$@"
	done
}

#
# synchronize commands
#

syncUsage()
{
	ScriptUsageEcho "Usage: $(ScriptName) sync apache-web|broadlink-manager|credential|home-assistant|lb|lb-cert|netbootxyz|pool-controller|pool-dash-panel|public|wire-guard
Synronize Wiggin application data with '$(FileToDesc "$UDATA/sync")' (on clients).\n\n$syncUsage"
}

syncCommand() { usage; }

syncArgStart()
{
	unset hostArg hostOpt hosts noServiceRestart; timeout="$(AvailableTimeoutGet)"; timeoutArg="--timeout=$timeout"
	unset unisonArgs
	syncUsage="$(ScriptOptHostUsage)
	-nsr, --no-service-restart	do not restart services
	-t, --timeout	the network host timeout in milliseconds, defaults to $timeout ms"
}

syncOpt()
{
	ScriptOptHost "$@" && return
	case "$1" in
		--no-service-restart|-nsr) noServiceRestart="--no-service-restart";;
		--timeout|-t|--timeout=*|-t=*) ScriptOptGet --integer "timeout" "$@"; timeoutArg="--timeout=$timeout";;
		*) return 1;;
	esac
}

syncCredentialUsage()
{
		echot "Usage: $(ScriptName) sync credential
Syncronize frequently used credentials from m2 to m1.

	-m1,	--manager1			first credential manager, defaults to local
	-m2,	--manager2			second credential manager, defaults to remote"
}

syncCredentialArgStart() { m1="local" m2="remote"; }

syncCredentialOpt() 
{
	case "$1" in
		-m1|--manager1|-m1=*|--manager1=*) ScriptOptGet m1 "$@";;
		-m2|--manager2|-m2=*|--manager2=*) ScriptOptGet m2 "$@";;
		*) return 1
	esac
}

syncCredentialCommand()
{
	local cred creds=(borg certbot CloudFlare domotz dropbox firefox GitKraken hashi HomeAssistant homebridge HoudahSpot hubitat JumpCloud namecheap secure ssh system unifi)

	HeaderBig "Sync Credential ($m2 -> $m1)"

	for cred in "${creds[@]}"; do
		header "$cred"
		[[ ! $force ]] && credential ls --manager="$m1" $timeoutArg | grep --quiet "^$cred/$" && continue
		credential mirror --from "$m2" --to "$m1" "$cred" --force --recursive $timeoutArg "${globalArgs[@]}" || return
	done

	if IsPlatform wsl2 && [[ "$m1" != @(gk|GnomeKeyring|st|SecretTool) ]]; then
		wiggin sync credential --manager1="GnomeKeyring" $timeoutArg || return
	fi

	return 0
}

# local sync

syncApache-webUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb cert\nSyncronize Apache web site data.\n\n$syncUsage"; }
syncApache-webCommand() { apache sync "${hostOpt[@]}" "${globalArgs[@]}"; }

syncBroadlink-managerUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync broadlink-manager\nSyncronize Broadlink Manager configuration.\n\n$syncUsage"; }
syncBroadlink-managerCommand() { GetHostsApp "broadlink-manager" && ForAllHosts syncBroadlinkManager --header "Sync Broadlink Manager"; }
syncBroadlinkManager() { syncDir "$1" "/srv/broadlinkmanager"; }

syncLbUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb [cert]\nSyncronize load balancer configuration (NGINX rever proxy servers).\n\n$syncUsage"; }
syncLbCommand() { GetHostsApp "lb" && ForAllHosts syncLb --header "Sync Load Balancer"; }
syncLb() { unisonArgs=(-ignore "Name {sites-available/*.conf}" -ignorenot "Name {default.conf,outage.conf}"); syncDir "$1" "/etc/nginx,/etc/consul-template.d" "consul-template,nginx"; }

syncLb-certUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb cert\nSyncronize load balancer SSL certificates.\n\n$syncUsage"; }
syncLb-certCommand() { GetHostsApp "lb" && ForAllHosts syncLbCert --header "Sync Certificates"; }
syncLbCert() { syncDir "$1" "/etc/letsencrypt"; }

syncPool-controllerUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb [cert]\nSyncronize Pool Dash Panel configuration.\n\n$syncUsage"; }
syncPool-controllerCommand() { GetHostsApp "pool-controller" && ForAllHosts syncPoolController --header "Sync Pool Controller Files"; }
syncPoolController() { unisonArgs=(); syncDir "$1" "/opt/pool-controller/data"; }

syncPool-dash-panelUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb [cert]\nSyncronize Pool Dash Panel configuration.\n\n$syncUsage"; }
syncPool-dash-panelCommand() { GetHostsApp "pool-dash-panel" && ForAllHosts syncPoolDashPanel --header "Sync Pool Dash Panel Files"; }
syncPoolDashPanel() { unisonArgs=(-ignorenot "Name {config.json}" -ignore "Regex .*[^.]" ); syncDir "$1" "/opt/pool-dash-panel"; }

syncWire-guardUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb [cert]\nSyncronize WireGuard configuration.\n\n$syncUsage"; }
syncWire-guardCommand() { GetHostsApp "wire-guard" && ForAllHosts syncWireGuard --header "Sync WireGuard Files"; }
syncWireGuard() { unisonArgs=(-ignore "Name {setupVars.conf}"); syncDir "$1" "/etc/wireguard,/etc/pivpn" "wg-quick@wg0"; }

# remote sync

syncNetbootxyzUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync lb [cert]\nSyncronize netboot.xyz configuration.\n\n$syncUsage"; }

syncNetbootxyzCommand()
{
	header "Sync netboot.xyz" && UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz" "rp2" "${globalArgs[@]}"
}
 
syncPublicUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync public [cert]\nSyncronize public files.\n\n$syncUsage"; }
syncPublicCommand()
{
	header "Sync Public Files"

	hilight 'Synchronizing ender <-> rp1...'
	UnisonHelper sync --host=ender "/Volumes/data/public" "rp1" "/mnt/data/public" "${globalArgs[@]}" || return

	hilight 'Synchronizing rp1 <-> rp2...'
	UnisonHelper sync --host=rp1 "/mnt/data/public" "rp2" "${globalArgs[@]}" || return

	local dir; dir="$(FindInstallFile --all | grep -v "^//" | grep "public" | head -1)" || return 0
	hilight 'Synchronizing ender <-> local...'
	UnisonHelper sync --no-props "$(GetFilePath "$dir")" "ender" "/Volumes/data/public" "${globalArgs[@]}" || return
}

#
# sync home-assistant command
#

syncHome-assistantUsage() { ScriptUsageEcho "Usage: $(ScriptName) sync hass [cert]\nSyncronize Home Assistant configuration.\n\n$$syncUsage"; }

syncHome-assistantCommand()
{
	local currentHost="$(GetServer home-assistant --quiet)"

	# sync active Home Assistant server
	if [[ ! $hostArg ]]; then
		if [[ $currentHost ]]; then
			header "Sync Active Home Assistant ($(RemoveDnsSuffix "$currentHost"))"
			hilight "The active Home Assistant server '$currentHost' will be syncronize first"
			syncHomeAssistant "$currentHost" || return
		else
			ScriptErr "the is current Home Assistant server is not known"	
		fi
	fi

	# sync other Home Assistant servers
	GetHostsApp "home-assistant" || return
	[[ $currentHost ]] && ArrayRemove hosts "$currentHost"
	ForAllHosts syncHomeAssistant --header "Sync Home Assistant"
}

syncHomeAssistant()
{
	local host="$1"
	unisonArgs=(-ignore "Name {*.log*,*.db-shm,*.db-wal}"); syncDir "$host" "/home/homeassistant/.homeassistant" || return
	updateOwner "$host" "homeassistant" "/home/homeassistant/.homeassistant"
}

#
# update commands
#

updateUsage() { ScriptUsageEcho "Usage: $(ScriptName) update CloudFlare|JumpCloud|WireGuard\nUpdate Wiggin network configuration."; }
updateCommand() { usage; }

updateJumpcloudUsage() { ScriptUsageEcho "Usage: $(ScriptName) update JumpCloud\nUpdate JumpCloud RADIUS IP Address with the the current WAN IP addresses."; }

updateJumpcloudCommand()
{
	local ip; ip="$(network internet address 1)" || return
	hilight "Updating JumpCloud wiggin-cable RADIUS Server to $ip..."
	JumpCloud radius update wiggin-cable "$ip" > /dev/null || return; echo

	ip="$(network internet address 2)" || return
	hilight "Updating JumpCloud wiggin-dsl RADIUS Server to $ip..."
	JumpCloud radius update wiggin-dsl "$ip" > /dev/null || return; echo
}

updateWireguardUsage() { ScriptUsageEcho "Usage: $(ScriptName) update WireGuard\nUpdate the router port forward rule for the current WireGuard server."; }

updateWireguardCommand()
{
	# get current WireGuard server
	log1 "getting the current WireGuard server..."
	local currentHost; currentHost="$(UniFiController port ls | jq ".data | .[] | select(.name == \"WireGuard\").fwd" | RemoveQuotes)" || return
	[[ $currentHost ]] && { currentHost="$(DnsResolve "$currentHost")" || return; }
	log1 "currentHost=$currentHost"

	# get active WireGuard server
	log1 "getting active WireGuard server..."
	local activeHost; activeHost="$(GetServer "wire-guard")" || return
	log1 "activeHost=$activeHost"

	# return if the WireGuard server has not changed	
	[[ "$currentHost" == "$activeHost" ]] && { echo "The WireGuard server ($currentHost) has not changed."; [[ ! $force ]] && return; }

	# update the port forwarding rule
	local ip; ip="$(GetIpAddress "$activeHost")" || return
	echo "Updating the WireGuard port forwarding to $ip ($activeHost)..."
	RunLog UniFiController port host "WireGuard" "$ip"
}

updateCloudflareUsage() { ScriptUsageEcho "Usage: $(ScriptName) update CloudFlare\nUpdate CloudFlare DNS with the current WAN IP addresses."; }

updateCloudflareCommand()
{
	local domain="$(ConfigGet "baseDomain")"
	updateCloudFlareDns "wan" && updateCloudFlareDns "wan1" "1" && updateCloudFlareDns "wan2" "2"
}

updateCloudFlareDns()
{
	local name="$1" port="$2"
	local desc="${name^^}"

	hilight "Updating $name..."

	# get the internet address
	local ip; ip="$(network internet address $port "${globalArgs[@]}")" || return

	# validate internet address
	[[ ! $ip || "$ip" == null ]] && { EchoErr "$desc internet address not found, internet may be failed over"; echo; return 0; }
	! IsIpAddress "$ip" && { EchoErr "$desc  internet address '$ip' is not valid"; return 1; }

	# update CloudFlare with the internet address
	echo "$desc address is $ip"
	CloudFlare update "$domain" "$name" "$ip" "${globalArgs[@]}" || return; echo
}

#
# helper
#

encm() { encrypt mount "$cdata/app/CryFS/personal" "$@"; }
encum() { encrypt unmount "personal" "$@"; }
getDnsHosts() { GetHostsApp "dns" active ; }
getDhcpHosts() { GetHostsApp "dhcp" active ; }
mountVol() { VeraCrypt mount "$@" p "${globalArgs[@]}"; }
unmountVol() { VeraCrypt unmount p "${globalArgs[@]}"; }

# backupBackupHost HOST - assumes archive, dirs, and borgArgs are set.
borgBackup()
{
	echo "${GREEN}Backing up ${service^} ($host)...${RESET}"
	echo "directories: ${dirs[@]}"
	[[ $borgArgs ]] && echo "borg arguments: ${borgArgs[@]}"

	RunLog BorgHelper remote "$1" "${globalArgs[@]}" -- backup "${dirs[@]}" --archive=$archive --host=all --prune=5 -- "${borgArgs[@]}"; 
}

# borgBackupService ARCHIVE SERVICE [DIR]... - backup service of first available host
borgBackupService()
{
	local archive="$1" service="$2" dirs=("${@:3}")
	[[ ! $hostArg ]] && { hostArg="$(GetServer "$service")" || return; }
	ForAllHosts borgBackup --header "Backup ${service^}"
}

getHost()
{
	! IsAvailable "$host" && { ScriptErr "host '$host' is not available"; return 1; }
	ScriptEval HostGetInfo "$host" || return
	IsPlatform pi --host && dhcpDir="$dhcpDirBuild" || dhcpDir="$dhcpDirPackageDir"
	hostShort="$(RemoveDnsSuffix "$host")"
	hostIp="$(GetIpAddress "$host")" || return	
}

isVaultHost()
{
	local host="$1" servers; StringToArray "$(ConfigGet hashiVaultServers)" "," servers
	IsInArray "$(RemoveDnsSuffix "$host")" servers
}

setOtherHosts() 
{
	local d="$(ConfigGet "hagermanDomain")"
	getHostsOther=(ender.$d) # nas1.$d
}

scriptOptDetail()
{
	case "$1" in
		-d|--detail) detail="--detail";;
		*) return 1;;
	esac
}

serviceReload()
{
	[[ $noServiceRestart ]] && return

	local service; StringToArray "$services" "," "services"
	for service in "${services[@]}"; do 

		hilight "Reloading service '$service'..."
		local error result; result="$(service reload "$service" --host="$host")"; error=$?;
		(( error == 0 )) && continue
		
		hilight "Starting service '$service'..."
		service start "$service" --host="$host" && continue

		# can't start service, show service log
		service log "$service" --host="$host" --no-pager | tail; return 1
	done	
}

# syncDir HOST DIRS [SERVICES] - syncronize DIRS with HOST and reload SERVICES
syncDir()
{
	local host="$1" dirs="$2" services="$3"

	# validate host
	os IsServer && IsLocalHost "$host" && return # on servers do not sync to ourself
	HostAvailable "$host" || return

	# sync dirs
	local dir; StringToArray "$dirs" "," "dirs"
	for dir in "${dirs[@]}"; do 

		# create the local directory if needed
		local localDir="$dir"; ! os IsServer && localDir="$UDATA/sync$dir"
		[[ ! -d "$localDir" ]] && { RunLog sudoc ${G}mkdir --parents "$localDir" || return; }

		# sync
		hilight "Syncing '$dir' to '$host'..."
		UnisonHelper sync "$localDir" "$host" "$dir" --root "${globalArgs[@]}" -- "${unisonArgs[@]}" || return		
		echo

	done	

	serviceReload "$services"
}

# updateOwner HOST OWNER DIRS
updateOwner()
{
	local host="$1" owner="$2" dirs="${@:3}" options=(--recursive --changes)

	hilight "Updating user and group ownership on '$host'..."
	RunLog SshSudoc "$host" "chown ${options[@]} $owner $dirs && sudoc chgrp ${options[@]} $owner $dirs" || return
}

# vaultUnseal HOST - unseal Vault if the host is a vault host, useful if host was rebooted
vaultUnseal()
{
	local host="$1"
	! isVaultHost "$host" && return
	hashi vault unseal
}

ScriptRun "$@"
