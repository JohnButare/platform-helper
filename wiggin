#!/usr/bin/env bash
. script.sh || exit
. app.sh || exit
. color.sh || exit

run() {	init && args "$@" && "${command}Command" "${args[@]}"; }

init()
{
	cameras=(BackShed BackYardEast ChickenYardNorth ChickenYardSouth FrontPatio FrontYardEast FrontYardWest LivingRoom)
	coreDevices=( pi1 pi2 pi3 pi4 pi5 )
	testDevices=( pi6 pi7 rp1 )

	fileServer="$(ConfigGet "fs")" || return
	domain="$(ConfigGet "domain")" || return
	baseDomain="$(ConfigGet "baseDomain")" || return
}

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Manage the Wiggin network.

	backup	backup data
	cam			control cameras
	setup		setup the environment
	network	configure network	
	on|off	turn devices on or off

	-t, --test 						test the operation without making any changes
	-v, --verbose 				show verbose information where possible"
}

args()
{
	unset -v command test verbose

	# commands
	ScriptCommand "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-h|--help) usage 0;;
			-t|--test) test="--test";;
			-v|--verbose) verbose="--verbose";;
			--) shift; otherArgs+=("$@"); set --; break;;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"
	
	# arguments
	ScriptArgs "$@" || return; shift "$shift"
	[[ $@ ]] && usage
	args=("$@")
}

#
# Backup Commands
#

backupCommands=( ContainerStation LastPass web qnap )

backupUsage() { echo "Usage: $(ScriptName) backup all|$(ArrayDelimit backupCommands "|")"; }
backupCommand() { usage; }
backupAllCommand() { local c; for c in "${backupCommands[@]}"; do $(FindFunction "backup${c}Command") || return; done; }
backupContainerStationCommand() { AppBackup "$(RemoveDnsSuffix "$fileServer").ContainerStation" "//$fileServer/root/share/data/Container/container-station-data/application" || return; }
backupWebCommand() { AppBackup "$(RemoveDnsSuffix "$fileServer").web" "//$fileServer/root/share/CACHEDEV1_DATA/Web" || return; }

backupLastPassCommand()
{
	local file="$CDATA/VeraCrypt/personal.hc"

	LastPass login || return
	VeraCrypt mount "$file" p || return

	VeraCrypt unmount p || return
}

backupQnapCommand()
{
	! IsPlatform QNAP && { ScriptErr "can only backup QNAP operating system"; return 1; }

	local file="$(AppGetBackupDir)/${HOSTNAME}.settings" || return

	# maybe intended to be a backup number, but it is filled with a constant (127) when
	# using the backup function from the webpage, file is not removed after backup, but
	# missing after next reboot...
	echo "127" | sudo tee "/etc/save_no.conf" || return

	sudo tar cvf - "/etc/config/"* "/etc/save_no.conf" | gzip > "$file.tgz" || return

	PC1 e ICPIPNASWAREV301 "$file.tgz" "$file.bin" || return
	PC2 "$file.bin" "" "" || return

	rm "$file.tgz" || return
}

#
# Network Commands
#

networkUsage() { echo "Usage: $(ScriptName) network backup|edit|update [host]"; }

networkArgStart()
{
	unset host hostName hostNameShort

	# network configuration
	network="wiggin"
	subnetPi1="192.168.102.1 - 192.168.102.254"
	subnetPi2="192.168.103.1 - 192.168.103.254"
	subnetDefault="$subnetPi1"

	# server file locations
	dhcpDir="/etc/kea"
	dnsDir="/etc/bind"

	# cloud configuration location
	nc="$CLOUD/network"
	ncd="$nc/configuration"
}

networkGetArgs() { [[ $1 ]] && { ScriptGetArg "host" "$1"; shift; }; return 0; }

networkArgEnd()
{
	[[ ! $host && "$command" != @(networkEdit) ]] && MissingOperand "host"

	if [[ $host ]]; then
		hostName="$host"
		hostNameShort="$(RemoveDnsSuffix "$host")"
		IsPlatform win && IsMdnsName "$host" && { host="$(MdnsResolve "$host")" || return; }
	fi

	return 0
}

networkCommand() { usage; }
networkEditCommand() { TextEdit "$DATA/setup/ports" "$ncd/dns/$baseDomain" "$ncd/dns/forward.txt" "$ncd/dhcp/wiggin/kea-dhcp4-wiggin-reservations.json"; }
networkBackupCommand() { networkBackup; }
networkUpdateCommand() { networkUpdate; }

networkBackup()
{	
	local h="$hostNameShort" d="$ncd/backup" stamp="$(GetDateStamp)"

	# DHCP
	echo "${BLUE}Backing up DHCP configuration from $h...${RESET}"
	local f="$h.dhcpd.zip" i=1
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $host "rm -f $f; zip -r $f $dhcpDir" || return
	scp $host:~/$f "$d/$stamp.$i.$f" || return

	# DNS
	echo "${BLUE}Backing up DNS configuration from $h...${RESET}"
	f="$h.dns.zip" i="1"
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $host "rm -f $f; zip -r $f $dnsDir --exclude \*.key \*.zip" || return
	scp $host:~/$f "$d/$stamp.$i.$f" || return

	echo "${GREEN}Successfully backed up $h network configuration${RESET}"
}

# network helper

networkUpdate()
{
	local r="$ncd/dhcp/$network/kea-dhcp4-$network-reservations.json"
	networkConfigFileValidate "$r" || return
	networkBackup || return
	networkUpdateDhcp || return
	networkUpdateDns || return
	return 0
}

networkUpdateDns()
{
	local config="$ncd/dns"
	local dir="$(mktemp -d -t 'dns.XXXXXXXXXX')" || return

	echo "Creating DNS configuration files..."
	cp "$config/named.conf."* "$dir" || return
	cp "$config/$baseDomain" "$dir" || return
	cp "$config/forward.txt" "$dir/$domain" || return
	configFileToCommaDelimited "$r" | awk -F "," '{ print $1 ".'$domain'.	A	" $3 }' | column -t	>> "$dir/$domain" || return

	for zone in 100 101 102; do
		local z="$dir/$zone.168.192.in-addr.arpa"

		cat "$config/$zone.txt" > "$z"

		{ printf "\n; static\n"; cat "$config/reverse.txt" | grep "^[0-10]*.$zone.168.192"; } >> "$z"

		{ printf "\n; dynamic\n"
			configFileToCommaDelimited "$r" |
				grep ",192.168.$zone." |
				sed "s/192.168.$zone.//" |
				awk -F "," '{ print $3 ".'$zone'.168.192.in-addr.arpa. PTR " $1 ".'$domain'." }' |
				column -t; } >> "$z"

	done

	echo "Updating DNS configuration files on $host..."
	rsync --no-perms --chmod=ugo=rw --rsync-path="sudo rsync" "$dir/"* "$host:$dnsDir" --info=progress2 || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service
	SshHelper $hostName service restart bind9 || return
}

networkUpdateDhcp()
{
	local config="$ncd/dhcp/$network"
	local dir="$(mktemp -d -t 'dhcp.XXXXXXXXXX')" || return
	local subnetVar="subnet$(ProperCase "$hostNameShort")"
	local subnet="${!subnetVar:-$subnetDefault}"

	echo "Updating DHCP configuration for $hostNameShort..."
	cp "$config/"* "$dir" || return
	sed -i "s/SUBNET4_POOL/$subnet/" "$dir/kea-dhcp4-$network.json" || return

	echo "Updating the ethers configuration..." # downcase to make etherwake case agnostic
	configFileToCommaDelimited "$r" | tr A-Z a-z | awk -F "," '{ print $2 " " $1 }' > "$DATA/setup/ethers" || return

	echo "Updating the host configuration data..."
	configFileToCommaDelimited "$r" |  awk -F "," '{ print $1 }' > "$DATA/setup/hosts" || return

	echo "Updating DHCP configuration on $host..."
	rsync --no-perms --chmod=ugo=rw --rsync-path="sudo rsync" --info=progress2 "$dir/"* "$host:$dhcpDir" || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service
	SshHelper $hostName service restart kea-dhcp4-server || return
}

configFileToCommaDelimited() # configFileToCommaDelimited FILE - convert a Kea configuration file to comma delimited
{
	configFileToJson "$1" |
		jq '.[]|{a: .hostname, b: ."hw-address", c: ."ip-address"}|join(",")' | # convert to comma delimited
		sed 's/\"//g'	|	# remove quotes
		sort
}

configFileToJson() # configFileToJson FILE - convert a Kea configuration file to valid JSON
{
	cat "$1" |
		sed '/^[	 ]*\/\//d' |  # remove comments - lines that begin with //
		sed '/<\?include/d'  	# remove <?include ?> directives
}

networkConfigFileValidate()
{
	configFileToJson "$1" | jq > /dev/null && return

	# view the file issues in a text editor
	local file="$(mktemp)" || return
	configFileToJson "$1" > "$file" 2> /dev/null
	TextEdit "$1" "$file" || return
	return 1
}

#
# Setup Commands
#

setupUsage() { echo "Usage: $(ScriptName) setup all|SystemUser"; }
setupCommand() { usage; }

setupAllCommand() { setupSystemUserCommand; }

setupSystemUserCommand()
{
	local user="$systemUser"

	if ! grep "^$user" "/etc/passwd" >& /dev/null; then
		sudoc adduser "$user" --gecos "" --disabled-login || return
		password linux --user "$user" --password "$(credential gets system default)" || return
	fi

	local file="/etc/sudoers.d/020_$user-nopasswd"
	if ! sudoc ls "$file" >& /dev/null; then 
		echo "$user ALL=(ALL) NOPASSWD: ALL" | sudo tee "/etc/sudoers.d/020_$user-nopasswd" || return
	fi
	
	if [[ ! -d "$USERS/$user/.ssh" ]]; then
		sudoc cp -r "$HOME/.ssh" "$USERS/$user/.ssh" || return
		SshPermissionFix "wsystem" || return
	fi
}

#
# on/off commands
#

powerUsage() { echo "Usage: $(ScriptName) on|off|status cam|core|test"; }

offUsage() { powerUsage; }
offCommand() { usage; }
offCamCommand() { camOffCommand; }
offCoreCommand() { doOff "${devices[@]}"; }
offTestCommand() { doOff "${testDevices[@]}"; }

onUsage() { powerUsage; }
onCommand() { usage; }
onCamCommand() { camOnCommand; }
onCoreCommand() { doOn "${devices[@]}"; }
onTestCommand() { doOn "${testDevices[@]}"; }

statusUsage() { powerUsage; }
statusCommand() { usage; }
statusCamCommand() { camStatusCommand; }
statusCoreCommand() { doStatus "${devices[@]}"; }
statusTestCommand() { doStatus "${testDevices[@]}"; }

doOff() { local d; for d in "$@"; do power off "$d" --force "$test" "$verbose" || return; done; }
doOn() { local d; for d in "$@"; do power on "$d" "$test"  "$verbose" || return; done; }
doStatus() { local d; for d in "$@"; do power status "$d" --verbose || return; done; }

#
# Camera Commands
#

camUsage() { echo "Usage: $(ScriptName) cam on|off|status"; }
camCommand() { usage; }
camOffCommand() { local c; for c in "${cameras[@]}"; do power off "${c}Camera" "$test" "$verbose" || return; done; }
camOnCommand() { local c; for c in "${cameras[@]}"; do power on "${c}Camera" "$test" "$verbose" || return; done; }
camStatusCommand() { local c; for c in "${cameras[@]}"; do power status "${c}Camera" --verbose || return; done; }

run "$@"
