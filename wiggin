#!/usr/bin/env bash
. function.sh || exit

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init()
{ 
	devices=( pi5 pi6 rp1 UnifiController )

	nc="$CLOUD/network" # network configuration
	ncd="$nc/dhcp"
}

usage()
{
	echot "\
usage: wiggin off
	config edit|backup|update [host]
	on|off - power on or off all devices in the Wiggin study network closet switch"
	exit $1
}

args()
{
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			--help) usage 0;;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; command="${1,,}"; shift; continue; }
				[[ "$command" == @(config) ]] && break	# defer argument processing
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { MissingOperand "command"; }

	args=("$@")
}

#
# configuration
#

# DHCP Reservation.txt-> dhcpd-eth0-static.conf
# DHCP Options.txt -> dhcpd-dns-dns.conf
# DNS Forward.txt -> hagerman.butare.net
# DNS Reverse.txt -> 100.168.192.in-addr.arpa

configCommand()
{
	local command; CheckSubCommand config "$1"; shift
	[[ "$command" != "edit" ]] && { local host="$1"; shift; [[ ! $host ]] && MissingOperand "host"; }
	[[ $# != 0 ]] && UnknownOption "$1"
	Config${command}Command "$@"
}

ConfigEditCommand() { TextEdit "$DATA/setup/ports" "$ncd/DNS Reverse.txt" "$ncd/DNS Forward.txt" "$ncd/DHCP Options.txt" "$ncd/DHCP Reservations.txt"; }

ConfigBackupCommand() 
{ 
	local h="$host" d="$ncd/backup" stamp="$(GetDateStamp)"

	[[ $h ]] || { EchoErr "USAGE: NetworkConfigurationBackup HOST"; return 1; }

	# DHCP
	echo "Backing up DHCP configuration from $h..."
	local f="$h.dhcpd.zip" i=1
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $h "rm -f $f; zip -r $f /etc/dhcpd" || return
	scp $h:~/$f "$d/$stamp.$i.$f" || return

	# DNS	
	echo "Backing up DNS configuration from $h..."
	f="$h.dns.zip" i="1"
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $h "rm -f $f; zip -r $f /var/packages/DNSServer/target/named/etc/zone/master" || return
	scp $h:~/$f "$d/$stamp.$i.$f" || return

	echo "Successfully backed up $h network configuration"
}

ConfigUpdateCommand()
{
	local h="$host" f="/tmp/reservations.txt"

	[[ $h ]] || { EchoErr "USAGE: NetworkConfigurationUpdate HOST"; return 1; }

 	# cleanup reservations by removing comments, empty lines, and lines with only spaces (fix etherwake warning)
	cat "$ncd/DHCP Reservations.txt" | sed '/^#/d' | sed '/^$/ d' | sed 's/^ *$//g' > "$f"

	# update ethers - downcase to make etherwake case agnostic
	echo "Updating the ethers configuration..."
	awk '{ FS=","; gsub(/dhcp-host=/,""); print $1 " " $2 }' "$f" | tr A-Z a-z > "$DATA/setup/ethers" || return

	echo "Updating the host configuration data..."
	awk '{ FS=","; gsub(/dhcp-host=/,""); print $2 }' "$f" | sort > "$DATA/setup/hosts" || return

	echo "Updating DHCP configuration on $h..."
	local target="root@$h:/etc/dhcpd"
	scp "$ncd/DHCP Options.txt" "$target/dhcpd-dns-dns.conf"

	target="root@$h:/etc/dhcpd"
	case "$h" in
		router) scp "$f" "$target/dhcpdStatic.ori"; scp "$f" "$target/dhcpd-static-static.conf";;
		nas?) scp "$f" "$target/dhcpd-eth0-static.conf";
	esac

	echo "Updating DNS configuration on $h..."
	local target="root@$h:/var/packages/DNSServer/target/named/etc/zone/master"
	scp "$ncd/DNS Forward.txt" "$target/hagerman.butare.net"

	local reverse="$ncd/DNS Reverse.txt" t="$ncd/template"
	{ cat "$t/100.txt"; grep 100.168.192 "$reverse"; } > "/tmp/100.txt"
	{ cat "$t/101.txt"; grep 101.168.192 "$reverse"; } > "/tmp/101.txt"
	{ cat "$t/102.txt"; grep 102.168.192 "$reverse"; } > "/tmp/102.txt"

	scp "/tmp/100.txt" "$target/100.168.192.in-addr.arpa"
	scp "/tmp/101.txt" "$target/101.168.192.in-addr.arpa"
	scp "/tmp/102.txt" "$target/102.168.192.in-addr.arpa"

	return 0
}

#
# on/off
#

offCommand() 
{ 
	ask "Are you sure you want to power off all Wiggin devices" -dr n || return

	for device in "${devices[@]}"; do
		power off "$device" --wait
	done
}

onCommand() 
{ 
	ask "Are you sure you want to power off all Wiggin devices" -dr n || return

	for device in "${devices[@]}"; do
		power on "$device"
	done
}

run "$@"
