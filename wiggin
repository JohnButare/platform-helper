#!/usr/bin/env bash
. function.sh || exit

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init()
{ 
	devices=( pi5 pi6 rp1 UnifiController )

	network="wiggin"
	network="test"

	nc="$CLOUD/network" # network configuration
	ncd="$nc/dhcp"
}

usage()
{
	echot "\
usage: wiggin off
	config edit|backup|update [host]
	on|off - power on or off all devices in the Wiggin study network closet switch"
	exit $1
}

args()
{
	unset -v command

	while (( $# != 0 )); do
		case "$1" in "") : ;;
			--help) usage 0;;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; command="${1,,}"; shift; continue; }
				[[ "$command" == @(config) ]] && break	# defer argument processing
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { MissingOperand "command"; }
	[[ "$comamnd" == @(edit) && ! $host ]] && MissingOperand "host"

	args=("$@")
}

#
# configuration
#

configCommand()
{
	# parse arguments
	local command; CheckSubCommand config "$1"; shift
	[[ "$command" != "edit" ]] && { local host="$1"; shift; [[ ! $host ]] && MissingOperand "host"; }
	[[ $# != 0 ]] && UnknownOption "$1"

	# update host
	if [[ "$command" != "edit" ]]; then
		local hostName="$host"
		IsPlatform win && IsLocalAddress "$host" && { host="$(MdnsResolve "$host")" || return; }
	fi

	# run command
	Config${command}Command "$@"
}

ConfigEditCommand() { TextEdit "$DATA/setup/ports" "$ncd/named.conf.local" "$ncd/DNS Reverse.txt" "$ncd/DNS Forward.txt" "$ncd/DHCP Options.txt" "$ncd/DHCP Reservations.txt"; }

ConfigBackupCommand() 
{ 
	local h="$host" d="$ncd/backup" stamp="$(GetDateStamp)"

	[[ $h ]] || { EchoErr "USAGE: NetworkConfigurationBackup HOST"; return 1; }

	# DHCP
	echo "Backing up DHCP configuration from $h..."
	local f="$h.dhcpd.zip" i=1
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $h "rm -f $f; zip -r $f /etc/dhcpd" || return
	scp $h:~/$f "$d/$stamp.$i.$f" || return

	# DNS	
	echo "Backing up DNS configuration from $h..."
	f="$h.dns.zip" i="1"
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $h "rm -f $f; zip -r $f /var/packages/DNSServer/target/named/etc/zone/master" || return
	scp $h:~/$f "$d/$stamp.$i.$f" || return

	echo "Successfully backed up $h network configuration"
}

ConfigUpdateCommand()
{
	updateDhcp || return
	updateDns || return
	return 0
}

updateDns()
{
	local dir="$TMP/dns.$RANDOM"; rm -fr "$dir"; mkdir "$dir" || return

	echo "Creating DNS configuration files..."
	cp "$ncd/named.conf."* "$dir" || return
	cp "$ncd/DNS Forward.txt" "$dir/hagerman.butare.net"
	for zone in 100 101 102; do
		{ cat "$ncd/template/$zone.txt"; grep "$zone.168.192" "$ncd/DNS Reverse.txt"; } > "$dir/$zone.168.192.in-addr.arpa"
	done

	echo "Updating DNS configuration files on $host..."
	rsync --no-perms --chmod=ugo=rw --rsync-path="sudo rsync" "$dir/"* "$host:/etc/bind" --info=progress2 || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service
	SshHelper $hostName service restart bind9 || return
}

updateDhcp()
{
	local dhcp="$ncd/$network"
	local r="$dhcp/kea-dhcp4-$network-reservations.json"

	echo "Updating the ethers configuration..." # downcase to make etherwake case agnostic
	configToCommaDelimited "$r" | tr A-Z a-z | awk -F "," '{ print $2 " " $1 }' > "$DATA/setup/ethers" || return

	echo "Updating the host configuration data..."
	configToCommaDelimited "$r" |  awk -F "," '{ print $1 }' > "$DATA/setup/hosts" || return 

	printf "Validating configuration files..."
	for file in "$dhcp/kea-"*-reservations.json; do validateFile "$file" || return; done
	echo "done"

	echo "Updating DHCP configuration on $host..."
	rsync --no-perms --chmod=ugo=rw --rsync-path="sudo rsync" --info=progress2 "$ncd/$network/kea-dhcp4"* "$host:/etc/kea" || return

	# restart the service
	SshHelper $hostName service restart kea-dhcp4-server || return
}

configToCommaDelimited() # configToCommaDelimited FILE - convert a Kea configuration file to comma delimited
{
	configToJson "$1" | 
		jq '.[]|{a: .hostname, b: ."hw-address", c: ."ip-address"}|join(",")' | # convert to comma delimited
		sed 's/\"//g'	|	# remove quotes
		sort
}

configToJson() # configToJson FILE - convert a Kea configuration file to valid JSON
{
	cat "$1" | 
		sed '/^[ ]*\/\//d' |  # remove comments - lines that begin with //
		sed '/<\?include/d'  	# remove <?include ?> directives
}

validateFile()
{
	printf "$(GetFileName "$1")..."; configToJson "$1" | jq > /dev/null && return
	configToJson "$1" > "/tmp/dhcp.json" 2> /dev/null
	TextEdit "$1" "/tmp/dhcp.json" || return
	return 1
}

#
# on/off
#

offCommand() 
{ 
	ask "Are you sure you want to power off all Wiggin devices" -dr n || return

	for device in "${devices[@]}"; do
		power off "$device" --wait
	done
}

onCommand() 
{ 
	ask "Are you sure you want to power off all Wiggin devices" -dr n || return

	for device in "${devices[@]}"; do
		power on "$device"
	done
}

run "$@"
