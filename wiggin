#!/usr/bin/env bash
. app.sh || exit
. color.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [COMMAND]... [OPTION]...
Manage the Wiggin network.

	backup	backup wiggin data
	device	control devices
	remove	remove applications from the environment
	setup		setup the environment
	network	configure network	
	sync		syncronize items"
}

init()
{
	# credentials
	credentialPaths=( domotz JumpCloud LastPass namecheap ssh system unifi )

	# devices
	camDevices=(BackShed BackYardEast ChickenYardNorth ChickenYardSouth FrontPatio FrontYardEast FrontYardWest LivingRoom)
	coreDevices=( pi1 pi2 pi3 )
	testDevices=( pi4 pi5 pi6 pi7 ) # pi8 rp1

	# file server
	fileServer="$(UpdateGet "FileServer")" || return
	domain="$(ConfigGet "domain")" || return
	baseDomain="$(ConfigGet "baseDomain")" || return

	# configuration
	ncd="$CLOUD/network"
	hashiConfig="$ncd/system/hashi"
}

#
# Backup Commands
#

backupCommands=( consul ContainerStation domains LastPass ProxyManager qnap web )

backupUsage() 
{
	echot "Usage: $(ScriptName) backup job|$(ArrayDelimit backupCommands "|")
Backup data for the Wiggin network.

	job			run the backup job which backs up all relevant data for the Wiggin network."
}

backupCommand() { usage; }

backupContainerstationCommand()
{ 
	local server="nas3"
	! unc IsAvailable "$server" && { ScriptErr "'$server' is not available"; return 1; }
	AppBackup "$(RemoveDnsSuffix "$server").ContainerStation" "//$server/root/share/data/Container/container-station-data/application"
}

backupConsulCommand()
{
	local dest="$(AppGetBackupDir)/consul" || return
	[[ ! -d "$dest" ]] && { ${G}mkdir --parents "$dest" || return; }
	pushd "$dest" || return
	hashi consul backup || return
}

backupDomainsCommand()
{
	hilight "Backup up domain..."
	
	# initialize
	local dest="$(AppGetBackupDir)/hosts.butare.net.xml" || return
	[[ -f "$dest" ]] && { bak --move "$dest" || return; }

	# backup
 	namecheap "hosts" "butare.net" > $dest || return 

  echo "Domain backup completed to $(FileToDesc "$dest")"
}

backupLastpassCommand()
{
	header "LastPass Backup"

	local dir; dir="$(mountVol "$CDATA/VeraCrypt/personal.hc")/backup/LastPass" || return

	echo "Logging in to LastPass..."
	LastPass login || return

	echo "Exporting LastPass..."
	lpass export > "$(GetDateStampNext "$dir/" "csv")" || return
		
	unmountVol || return
}

backupProxymanagerCommand() { borgBackup "ProxyManager" "ProxyManager.butare.net" "/srv/nginx-proxy-manager"; }

backupQnapCommand()
{
	! IsPlatform QNAP && { ScriptErr "can only backup QNAP operating system"; return 1; }

	# initialize
	local dest="$(AppGetBackupDir)/${HOSTNAME}.qnap.settings" || return
	[[ -f "$dest" ]] && { bak --move "$dest" || return; }

	# maybe intended to be a backup number, but it is filled with a constant (127) when
	# using the backup function from the webpage, file is not removed after backup, but
	# missing after next reboot...
	echo "127" | sudo tee "/etc/save_no.conf" || return

	sudoc tar cvf - "/etc/config/"* "/etc/save_no.conf" | gzip > "$dest.tgz" || return

	PC1 e ICPIPNASWAREV301 "$dest.tgz" "$dest.bin" || return
	PC2 "$dest.bin" "" "" || return

	rm "$dest.tgz" || return
}

backupWebCommand()
{
	local server servers=(); StringToArray "$(network current servers "web")" "," servers

	for server in $(hashi resolve web --all); do
		borgBackup "web" "$(DnsResolve "$server")" "/var/www/html" "/etc/apache2" || return
	done
}

#
# Backup Job Command
#

backupJobCommand()
{
	header "Wiggin Backup Job"

	hilight "Configuration..."
	echo "HOSTNAME=$HOSTNAME"
	echo "USER=$USER"
	echo "PATH=$PATH"
	echo

	hilight "Testing credentials..."
	echo "credential type=$(credential type)"
	echo "test/key1=$(credential get test key1)"
	echo

	hilight "SSH Agent status..."
	SshAgent status || exit

	# backup 
	local result
	backupConsul && backupDomains && backupDomotz && backupHomebridge && backupProxyManager && backupUniFi && backupWeb
	result="$?"
	echo

	# result
	(( $result == 0 )) && hilight "success" || echo "${RED}fail${reset}"
	return "$result"
}

backupDo()
{
	local name="$1"; shift
	header "Backup $name"

	! UpdateNeeded "Backup$name" && { echo "$name backup already done today."; return; }
	"$@" "${globalArgs[@]}" || return
	UpdateDone "Backup$name"
}

backupConsul() { backupDo "Consul" "wiggin" "backup" "consul"; }
backupDomains() { backupDo "Domains" "wiggin" "backup" "domains"; }
backupDomotz() { backupDo "Domotz" "DomotzHelper" "backup"; }
backupHomebridge() { backupDo "Homebridge" "HomebridgeHelper" "backup" "pi1" "pi2"; }
backupProxyManager() { backupDo "ProxyManager" "wiggin" "backup" "ProxyManager"; }
backupUniFi() { backupDo "UniFi" "UniFiController" "backup"; }
backupWeb() { backupDo "Web" "wiggin" "backup" "web"; }

#
# Remove Command
#

removeUsage() { echo "Usage: $(ScriptName) remove hashi [test]
Remove applications from the environment."; }

removeCommand() { usage; }

removeHashiArgStart() { unset -v configPrefixArg; }
removeHashiCommand() { hashiRun remove --what=program,service,consul-vault-data,local-certs,local-credentials,private-certs,public-certs; }
removeHashiTestCommand() { configPrefixArg=( --config-prefix=test ); removeHashiCommand; }

#
# Network Commands
#

networkUsage() { echo "Usage: $(ScriptName) network backup|edit|update|validate"; }

networkArgStart()
{
	unset hostsArg

	# network configuration
	network="$(ConfigGet "network")"
	subnetPi1="10.10.102.1 - 10.10.102.254"
	subnetPi2="10.10.103.1 - 10.10.103.254"
	subnetDefault="$subnetPi1"

	# server file locations
	dhcpDir="/etc/kea" # package location
	dhcpDir="/usr/local/etc/kea" # build location
	dnsDir="/etc/bind"

	dhcpConfig="$ncd/system/dhcp"
	dnsConfig="$ncd/system/dns"
}

networkArgs() { hostsArg=( "$@" ); (( shift+=$# )); true; }

networkArgEnd()
{
	[[ "$command" == @(networkEdit) ]] && return
	[[ ! $hostsArg && "$command" != @(networkEdit) ]] && MissingOperand "host"
	return 0
}

networkCommand() { usage; }

#
# Network Backup Command
#

networkBackupUsage() { echo "Usage: $(ScriptName) network backup [dns|dhcp|all](all) [HOST|all]...
Backup the DHCP or DNC configuration of HOST."; }

networkBackupCommand() { networkBackupAllCommand; }
networkBackupAllCommand() { networkBackupDhcpCommand && networkBackupDnsCommand; }

#
# Network Backup DHCP Command
#

networkBackupDhcpCommand()
{	
	local hosts host; getHosts "dhcpServers" || return

	for host in "${hosts[@]}"; do
		networkBackupDhcp "$host" || return
	done
}

networkBackupDhcp()
{
	local host="$1" hostShort hostIp stamp="$(GetDateStamp)"; getHost || return

	hilight "Backing up DHCP configuration from $hostShort..."

	local f="$hostShort.dhcpd.zip" i=1
	local d="$dhcpConfig/backup"
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $hostIp "rm -f $f; zip -r $f $dhcpDir" || return
	scp $hostIp:~/$f "$d/$stamp.$i.$f" || return
}

#
# Network Backup DNS Command
#

networkBackupDnsCommand()
{	
	local hosts host; getHosts "dnsServers" || return

	for host in "${hosts[@]}"; do
		networkBackupDns "$host" || return
	done
}

networkBackupDns()
{
	local host="$1" hostShort hostIp stamp="$(GetDateStamp)"; getHost || return

	hilight "Backing up DNS configuration from $hostShort..."

	f="$hostShort.dns.zip" i="1"
	d="$dnsConfig/backup"
	while [[ -f "$d/$stamp.$i.$f" ]]; do (( ++i )); done
	ssh $hostIp "rm -f $f; zip -r $f $dnsDir --exclude \*.key \*.zip" || return
	scp $hostIp:~/$f "$d/$stamp.$i.$f" || return
}

#
# Network Edit Command
#

networkEditUsage() { echo "Usage: $(ScriptName) network edit
Edit the DHCP and DNC configuration files."; }

networkEditCommand()
{
	# edit all files to ensure retrieval from cloud
	TextEdit \
		"$DATA/setup/ports" \
		"$dnsConfig/$baseDomain" \
		"$dnsConfig/forward.txt" \
		"$dhcpConfig/wiggin/kea-dhcp4-wiggin.json" \
		"$dhcpConfig/wiggin/kea-dhcp4-wiggin-reservations.json"
}

#
# Network Update Command
#

networkUpdateUsage() { echot "Usage: $(ScriptName) network update [dns|dhcp|all](all) [HOST|all]...
Update the DHCP or DNS configuration of HOST.

	-nb,	--no-backup			do not backup the existing configuration before updating
	-nv,	--no-validate		do not validate the service after updating"; }

networkUpdateArgStart() { unset -v noBackup noValidate; }

networkUpdateOpt() 
{
	case "$1" in
		-nb|--no-backup) noBackup="true";;
		-nv|--no-validate) noValidate="true";;
		*) return 1
	esac
}

networkUpdateCommand() { networkUpdateAllCommand; }
networkUpdateAllCommand() { networkUpdateDhcpCommand && networkUpdateDnsCommand; }

#
# Network Update DHCP Command
#

networkUpdateDhcpCommand()
{	
	local hosts host; getHosts "dhcpServers" || return

	for host in "${hosts[@]}"; do
		(( ${#hosts[@]} > 1 )) && header "Update DHCP ($host)"
		networkUpdateDhcp "$host" || return
	done
}

networkUpdateDhcp()
{
	local host="$1" hostShort hostIp reservations; networkUpdateCommon "DHCP" || return
	local config="$dhcpConfig/$network"
	local dir="$(mktemp -d -t 'dhcp.XXXXXXXXXX')" || return
	local subnetVar="subnet$(ProperCase "$hostShort")"
	local subnet="${!subnetVar:-$subnetDefault}"

	echo "Updating DHCP configuration for $hostShort..."
	cp "$config/"* "$dir" || return
	${G}sed -i "s/SUBNET4_POOL/$subnet/" "$dir/kea-dhcp4-$network.json" || return

	echo "Updating the ethers configuration file..." # downcase to make etherwake case agnostic
	configFileToCommaDelimited "$reservations" | tr A-Z a-z | awk -F "," '{ print $2 " " $1 }' > "$DATA/setup/ethers" || return

	echo "Updating the hosts configuration file..."
	configFileToCommaDelimited "$reservations" |  awk -F "," '{ print $1 }' > "$DATA/setup/hosts" || return

	echo "Updating DHCP configuration on $hostShort..."
	rsync --no-perms --chmod=ugo=rw --rsync-path="sudo rsync" --info=progress2 "$dir/"* "$host:$dhcpDir" || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service
	SshHelper --x-forwarding connect "$hostIp" -- service restart kea-dhcp4-server || return

	# validate
	[[ ! $noValidate ]] && { networkValidateHost "$host" DHCP || return; }

	return 0
}

#
# Network Update DNS Command
#

networkUpdateDnsCommand()
{	
	local hosts host; getHosts "dnsServers" || return

	for host in "${hosts[@]}"; do
		(( ${#hosts[@]} > 1 )) && header "Update DNS ($host)"
		networkUpdateDns "$host" || return
	done
}

networkUpdateDns()
{
	local host="$1" hostShort hostIp reservations; networkUpdateCommon "DNS" || return
	local config="$dnsConfig"
	local dir="$(mktemp -d -t 'dns.XXXXXXXXXX')" || return

	echo "Creating DNS configuration files..."
	cp "$config/named.conf."* "$dir" || return
	cp "$config/$baseDomain" "$dir" || return
	cp "$config/forward.txt" "$dir/$domain" || return
	configFileToCommaDelimited "$reservations" | awk -F "," '{ print $1 ".'$domain'.	A	" $3 }' | column -t	>> "$dir/$domain" || return

	for zone in 100 101 102; do
		local z="$dir/$zone.10.10.in-addr.arpa"

		cat "$config/$zone.txt" > "$z"

		{ printf "\n; static\n"; cat "$config/reverse.txt" | grep "^[0-10]*.$zone.10.10"; } >> "$z"

		{ printf "\n; dynamic\n"
			configFileToCommaDelimited "$reservations" |
				grep ",10.10.$zone." |
				sed "s/10.10.$zone.//" |
				awk -F "," '{ print $3 ".'$zone'.10.10.in-addr.arpa. PTR " $1 ".'$domain'." }' |
				column -t; } >> "$z"

	done

	echo "Updating DNS configuration files on $host..."
	rsync --no-perms --chmod=ugo=rw --rsync-path="sudo rsync" "$dir/"* "$hostIp:$dnsDir" --info=progress2 || return

	# cleanup
	rm -fr "$dir" || return

	# restart the service - use X Forwarding to enable local credential manager
	SshHelper --x-forwarding connect "$hostIp" -- service restart bind9 || return

	# validate
	[[ ! $noValidate ]] && { networkValidateHost "$host" DNS || return; }

	return 0
}

#
# Network Update Helper
#

networkUpdateCommon()
{
	getHost || return
	reservations="$dhcpConfig/$network/kea-dhcp4-$network-reservations.json"
	networkConfigFileValidate "$reservations" || return
	[[ ! $noBackup ]] && { networkBackup$(ProperCase "$1") "$host" || return; }
	return 0
}

configFileToCommaDelimited() # configFileToCommaDelimited FILE - convert a Kea configuration file to comma delimited
{
	configFileToJson "$1" |
		jq '.[]|{a: .hostname, b: ."hw-address", c: ."ip-address"}|join(",")' | # convert to comma delimited
		sed 's/\"//g'	|	# remove quotes
		sort
}

configFileToJson() # configFileToJson FILE - convert a Kea configuration file to valid JSON
{
	cat "$1" |
		sed '/^[	 ]*\/\//d' |  # remove comments - lines that begin with //
		sed '/<\?include/d'  	# remove <?include ?> directives
}

networkConfigFileValidate()
{
	configFileToJson "$1" | jq > /dev/null && return

	# view the file issues in a text editor
	local file="$(mktemp)" || return
	configFileToJson "$1" > "$file" 2> /dev/null
	TextEdit "$1" "$file" || return
	return 1
}

#
# Network Validate Command
#

networkValidateUsage() { echo "Usage: $(ScriptName) network validate [dns|dhcp|all](all) [HOST|all]...
Validate the DHCP or DNC operation of HOST."; }

networkValidateCommand() { networkValidateAllCommand; }
networkValidateAllCommand() { networkValidateDhcpCommand && networkValidateDnsCommand; }
networkValidateDhcpCommand() { networkValidateHosts "DHCP"; }
networkValidateDnsCommand() { networkValidateHosts "DNS"; }

networkValidateDhcp()
{
	local host="$1" hostShort hostIp; getHost || return
	dhcptest.exe --bind "$(GetAdapterIpAddress)" --query --wait --timeout 2 |& grep -q "^Received packet from $hostIp"
}

networkValidateDns()
{
	local host="$1" hostShort hostIp; getHost || return
	IsAvailablePort "$hostIp" 53 || return
	nslookup router "$hostIp" >& /dev/null || return
	nslookup 10.10.100.1 "$hostIp" >& /dev/null || return
}

# networkValidateHost HOST dhcp|dns - validate DHCP or DNS for the specified host
networkValidateHost()
{
	local host="$1" what="${2^^}" hostShort hostIp; getHost || return	
	printf "Waiting for $what on $hostShort..."

	if networkValidateWait "$what" 10; then
		echo "${GREEN}available${RESET}"
	else
		echo "${RED}failed${RESET}"
		return 1
	fi
}

# networkValidateHosts dhcp|dns - validate DHCP or DNS for the hosts
networkValidateHosts()
{
	local what="$1" hosts host hostShort hostIp; getHosts "${what,,}Servers" || return

	printf "Validating ${what^^}..."
	for host in "${hosts[@]}"; do
		getHost || return	
		printf "$hostShort..."
		networkValidateWait "$what" 5 && printf "ok..." || printf "${RED}failed${RESET}..."
	done
	echo "done"
}

# networkValidateWait dns|dhcp SECONDS - wait SECONDS to validate DNS or DHCP
networkValidateWait()
{	
	local function="networkValidate$(ProperCase "$1")" seconds="$2" 

	$function "$hostIp" && return

	for (( i=1; i<=$seconds; ++i )); do
 		read -n 1 -t 1 -s && { echo "cancelled"; exit 1; }
 		$function "$hostIp" && return
		[[ ! $quiet ]] && printf "."
	done

	return 1
}

#
# Setup Command
#

setupUsage() { echo "Usage: $(ScriptName) setup all|hashi|SystemUser"; }
setupCommand() { usage; }

setupAllCommand() {	setupSystemUserCommand && setupHashiCommand && syncCredentialCommand; }

setupSystemUserCommand()
{
	local user="$systemUser"

	if ! grep "^$user" "/etc/passwd" >& /dev/null; then
		sudoc adduser "$user" --gecos "" --disabled-login || return
		password linux --user "$user" --password "$(credential gets system default --fallback)" || return
	fi

	local file="/etc/sudoers.d/020_$user-nopasswd"
	if ! sudoc ls "$file" >& /dev/null; then 
		echo "$user ALL=(ALL) NOPASSWD: ALL" | sudo tee "/etc/sudoers.d/020_$user-nopasswd" || return
	fi
	
	if [[ ! -d "$USERS/$user/.ssh" ]]; then
		sudoc cp -r "$HOME/.ssh" "$USERS/$user/.ssh" || return
		SshHelper permission "wsystem" || return
	fi
}

#
# Setup Hashi Command
#

setupHashiUsage() { echot "\
Usage: $(ScriptName) setup hashi [test]
Setup HashiCorp programs."; }

setupHashiArgStart()
{
	unset -v configPrefixArg
}

setupHashiCommand() 
{	
	hashiRun install --encrypt || return
	[[ ! $otherArgs ]] && { setupHashiFinalCommand || return; }
	return 0
}

setupHashiTestCommand() { configPrefixArg=( --config-prefix=test ); setupHashiCommand; }

setupHashiFinalCommand()
{
	header "Remote Configuration"
	hashiRun config set remote || return

	header "Nomad Configuration"
	hashiRun config deploy nomad "$hashiConfig/config/nomad/03_raw_exec.hcl" --host=all

	header "Service"
	hashiService "dns1" --host=first || return
	hashiService "dns2" --host=second || return
	hashiService "domotz-agent" --host=second || return
	hashiService "node-red" --host=third || return
	hashiService "proxy-manager" --host=third || return
	hashiService "unifi-controller" --host=second || return
	hashiService "web1" --host=first || return
	hashiService "web2" --host=second || return

	header "Jobs"
	hashiJob "backup" || return
}

hashiRun() { hashi "$@" $force $test $verbose "${configPrefixArg[@]}" "${otherArgs[@]}"; }
hashiService() { local service="$1"; shift; hashiRun consul service register "$hashiConfig/services/$service.hcl" "$@"; }
hashiJob() { local job="$1"; shift; hashiRun nomad job run "$job" "$@"; }

#
# Syncronize Commands
#

syncUsage() { echo "Usage: $(ScriptName) sync credential|internet|JumpCloud"; }

syncCommand() { usage; }

syncCredentialCommand()
{
	local p
	for p in "${credentialPaths[@]}"; do
		credential sync "$p" $verbose || return
	done
}

syncInternetCommand()
{
	hilight "Updating wan1.butare.net..."
	local wan1; wan1="$(network internet address $verbose)" || return
	echo "wan1 internet address is $wan1"
	namecheap update wan1 "$wan1" $verbose || return; echo

	hilight "Updating wan2.butare.net..."
	local wan2; wan2="$(network internet address DslModem $verbose)" || return
	echo "wan2 (DslModem) internet address is $wan2"
	namecheap update wan2 "$wan2" $verbose || return; echo
}

syncJumpcloudCommand()
{
	local ip; ip="$(network internet address)" || return
	hilight "Updating JumpCloud wiggin-cable RADIUS Server to $ip..."
	JumpCloud radius update wiggin-cable "$ip" || return

	ip="$(network internet address DslModem)" || return
	hilight "Updating JumpCloud wiggin-dsl RADIUS Server to $ip..."
	JumpCloud radius update wiggin-dsl "$ip" || return 
}

#
# Device Commands
#

deviceUsage() { echo "Usage: $(ScriptName) info|list|on|off|status|update cam|core|test"; }
deviceCommand() { usage; }

deviceInfoUsage() { deviceUsage; }
deviceInfoCommand() { usage; }
deviceInfoCamCommand() { deviceInfo "${camDevices[@]}"; }
deviceInfoCoreCommand() { deviceInfo "${coreDevices[@]}"; }
deviceInfoTestCommand() { deviceInfo "${testDevices[@]}"; }

deviceListUsage() { deviceUsage; }
deviceListCommand() { usage; }
deviceListCamCommand() { deviceList "${camDevices[@]}"; }
deviceListCoreCommand() { deviceList "${coreDevices[@]}"; }
deviceListTestCommand() { deviceList "${testDevices[@]}"; }

deviceOffUsage() { deviceUsage; }
deviceOffCommand() { usage; }
deviceOffCamCommand() { suffix="Camera"; deviceOff "${camDevices[@]}"; }
deviceOffCoreCommand() { deviceOff "${coreDevices[@]}"; }
deviceOffTestCommand() { deviceOff "${testDevices[@]}"; }

deviceOnUsage() { deviceUsage; }
deviceOnCommand() { usage; }
deviceOnCamCommand() { suffix="Camera"; deviceOn "${camDevices[@]}"; }
deviceOnCoreCommand() { deviceOn "${coreDevices[@]}"; }
deviceOnTestCommand() { deviceOn "${testDevices[@]}"; }

deviceStatusUsage() { deviceUsage; }
deviceStatusCommand() { usage; }
deviceStatusCamCommand() { suffix="Camera"; deviceStatus "${camDevices[@]}"; }
deviceStatusCoreCommand() { deviceStatus "${coreDevices[@]}"; }
deviceStatusTestCommand() { deviceStatus "${testDevices[@]}"; }

deviceUpdateUsage() { deviceUsage; }
deviceUpdateCommand() { usage; }
deviceUpdateCoreCommand() { deviceUpdate "${coreDevices[@]}"; }
deviceUpdateTestCommand() { deviceUpdate "${testDevices[@]}"; }

deviceList() { local devices="$@"; ArrayDelimit devices; }
deviceOff() { local d; for d in "$@"; do d+="${suffix^}"; power off "$d" $force $test $verbose || return; done; }
deviceOn() { local d; for d in "$@"; do d+="${suffix^}"; power on "$d" $force $test $verbose || return; done; }

deviceInfo()
{
	local device
	for device in "$@"; do
		! IsAvailable "$device" && continue
		header "$device"
		device+="${suffix^}"
		HostGetInfo show "$device" || return
	done
}

deviceUpdate()
{
	local device
	for device in "$@"; do
		! IsAvailable "$device" && continue
		header "$device"
		device+="${suffix^}"
		HostUpdate "$device" || return
	done
}

deviceStatus()
{
	local device
	for device in "$@"; do
		device+="${suffix^}"
		if [[ $verbose ]]; then
			power status "$device" --verbose || return
		else
			local status; status="$(power status "$device")" || return
			echo "$device is $status"
		fi
	done
}

#
# Helper
#

mountVol() { VeraCrypt mount "$@" p "${globalArgs[@]}"; }
unmountVol() { VeraCrypt unmount p "${globalArgs[@]}"; }

# backupDo ARCHIVE SERVER [PATHS]
borgBackup()
{
	local archive="$1" server="$2"; shift 2

	! SshIsAvailable "$server" && { ScriptErr "'$server' is not available"; return 1; }

	SshHelper "$(ConfigGet "user")@$server" --interactive --pseudo-terminal "${globalArgs[@]}" -- \
		BorgHelper backup "$@" --archive "$archive" --prune 2 "${globalArgs[@]}" || return
}

getHosts() 
{
	[[ "$hostsArg" != "all" ]] && { ArrayCopy hostsArg hosts; return; }
	StringToArray "$(ConfigGet "$1")" "," hosts
	[[ ! $hosts ]] && MissingOperand "hosts"
	return 0
}

getHost()
{
	! IsAvailable "$host" && { ScriptErr "host '$host' is not available"; return 1; }
	hostShort="$(RemoveDnsSuffix "$host")"	
	hostIp="$(GetIpAddress "$host")" || return
}

ScriptRun "$@"
