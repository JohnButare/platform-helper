#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
$(ScriptName) commands.
	
	build			build an ISO using a downloaded UUP script"
}

init() { defaultCommand="build"; }

#
# build commands
#

buildUsage()
{
	ScriptUsageEcho "\
Usage: $(ScriptName) build FILE|DIR... [all|init|iso|install|installers](all)
Build an ISO using a downloaded UUP script.

	-l,	--linux		force linux build under Windows (will not get updates, component cleanup, or Windows Store apps)"
}

buildArgStart() { unset -v file buildDir; buildScript="uup_download_windows.cmd"; }
buildCommand() { buildAllCommand; }
buildArgs() { ScriptArgGet "file" -- "$@" && ScriptCheckPath "$file"; }
buildAllCommand() { buildIsoCommand && buildInstallCommand && buildInstallersCommand; }

buildOpt()
{
	case "$1" in
		--linux|-l) script="uup_download_linux.sh";;
		*) return 1;;
	esac
}

buildArgEnd()
{
	# file directory - remove directory component if it exists and change to it
	local dir="$(GetFilePath "$file")"
	[[ $dir ]] && { command cd "$dir" || return; file="$(GetFileName "$file")"; }

	# file - BUILD.ARCH.zip - ARCH is amd64|arm64
	if [[ -f "$file" ]]; then
		[[ "$(GetFileExtension "$file")" != "zip" ]] && { ScriptErr "UUP download file '$file' is not a ZIP file"; return 1;  }
		buildDir="$(echo "$file" | cut -d. -f1)"; ! IsNumeric "$buildDir" && { ScriptErr "UUP script '$file' does have a numeric build number (expected format is BUILD.DESC.zip)"; return 1; }
		[[ "$file" =~ arm64 ]] && buildDir+="-arm"
		
		if [[ $force || ! -d "$buildDir" ]]; then
			rm -fr "$buildDir" || return
			${G}mkdir --parents "$buildDir" || return
			${G}unzip "$file" -d "$buildDir" || return
		fi

		bak --local --move "$file" || return

	# directory
	else
		buildDir="$(GetWord "$file" 1 "-")"; ! IsNumeric "$buildDir" && { ScriptErr "UUP directory '$file' does have a numeric build number (expected format is BUILD[-arm])"; return 1; }
		[[ "$(GetWord "$file" 2 "-")" == "arm" ]] && buildDir+="-arm"
	fi

	# validate the build script
	IsPlatform mac && buildScript="uup_download_macos.sh"	
	[[ ! -f "$buildDir/$buildScript" ]] && { ScriptErr "the ISO build script '$buildScript' does not exist"; return 1; }

	# update the configuration
	sed -i "s/AppsLevel    =0/AppsLevel    =1/g" "$buildDir/ConvertConfig.ini" || return

	cd "$buildDir"
}

buildIsoValidate()
{
	iso="$(getIso)" && return
	ScriptErr "the ISO image for Windows build $buildDir does not exist"; return 1
}

buildIsoUsage() { ScriptUsageEcho "Usage: $(ScriptName) build install FILE\n.  Build the ISO image using the build script."; }

buildIsoCommand()
{
	hilight "Building the ISO image..."
	[[ ! $force ]] && getIso > /dev/null && return
	if [[ "$buildScript" =~ cmd ]]; then
		elevate cmd.exe /c "$buildScript" || return
		pause
	else
		"./$buildScript" || return
	fi
}

buildInitUsage() { ScriptUsageEcho "Usage: $(ScriptName) build init FILE\nSetup the build directory.   This allows for configuration changes before a build."; }
buildInitCommand() { :; }

buildInstallUsage() { ScriptUsageEcho "Usage: $(ScriptName) build install FILE\n.  Copy the ISO to the installation directory."; }

buildInstallCommand()
{
	hilight "Copying ISO to the install directory..."
	buildIsoValidate || return	
	local setupDir; setupDir="$(FindInstallFile "other/Microsoft/Windows/setup")" || return; setupDir="$setupDir/$buildDir"	
	local destIso="$setupDir/$(GetFileName "$iso")"
	log1 "destIso=$destIso"
	[[ ! $force && -f "$destIso" ]] && return

	${G}mkdir --parents "$setupDir" && CopyFileProgress "$iso" "$setupDir"
}

buildInstallersUsage() { ScriptUsageEcho "Usage: $(ScriptName) build installers FILE\n.  Extract ISO to the installers directory."; }

buildInstallersCommand()
{
	hilight "Extracting ISO to the installers directory..."
	buildIsoValidate || return
	local server; server="$(GetServer "netbootxyz")" || return
	local installDir; installDir="$(unc mount "//$server/root/srv/netbootxyz/installers/windows")/$buildDir" || return
	log1 "installDir=$installDir"
	[[ ! $force && -d "$installDir" ]] && return
	[[ -d "$installDir" ]] && { rm -fr "$installDir" || return; }
	${G}mkdir --parents "$installDir" || return
	CopyFileProgress "$iso" "$installDir" || return
	cd "$installDir" || return
	7z x "$iso" && rm "$installDir/$(GetFileName "$iso")"
}

getIso()
{
	local iso="$(${G}find $PWD -iname "*.ISO")"
	[[ -f "$iso" ]] || return
	echo "$iso"
}

ScriptRun "$@"