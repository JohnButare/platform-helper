#!/usr/bin/env bash
. function.sh || exit

# this script will check the ping
# check we (ICS Dev AD) have access
# and grant sys_cs access
# we can give the output to jeff if there are issues

usage()
{
	echot "/
usage: ScadaPortalInstall
	Install SCADA Portal servers for the specified environment.   Must be run as a member of ICS Dev AD.

  -e|--environment ENVIRONMENT  pf, dev, or DevQa
  -nf|--no-firewall							skip firewall servers
  -nl|--no-local								skip local servers
  -s, --script  								generate a runnable CMD shell script instead of running the commands directly
  -sa, --sql-account ACCOUNT  	the account to run SQL Server under
  -sp, --sql-password ACCOUNT		the password of the account to run SQL server under

  -nd|--no-deploy               do not perform a limited SCADA Portal deployment to the servers
  -fd|--full-deployment         perform a full SCADA Portal deployment

  -np|--no-prep									do not prepare the SCADA Portal servers.   Preparation consists of:
                                   1) check that server is up and running under the fully qualified DNS name
                                   2) check that we have administrator access to the server to we can add the appropriate
                                      groups to the Administrators group
	                                 3) add the appropriate groups to the Administors group on the server (developers, 
	                                    support, build server)
	                                 4) reboot each machine to ensure patches are fully applied
  -nr|--no-reboot               do not reboot the servers
  -na|--no-admins               do not update the administrators group
"

	exit $1
}

args()
{
	unset environment noBuild noLocal noFirewall noPrep script fullDeployment noReboot noAdmins

	sqlAccount='amr\sys_cs'

	while (( $# != 0 )); do
		case "$1" in
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			-e|--environment) environment="$2"; shift;;
			-nl|--no-local) noLocal="true";;
			-nf|--no-firewall) noFirewall="true";;
			-s|--script) script=true;;
			-sa|--sql-account) sqlAccount="$2"; shift;;
			-sp|--sql-password) sqlPassword="$2"; shift;;

			-nd|--no-deploy) noDeploy="true";;
			-fd|--full-deployment) fullDeployment="true";;

			-np|--no-prep) noPrep="true";;
			-nr|--no-reboot) noReboot="true";;
			-na|--no-admins) noAdmins="true";;
			*) [[ ! $environment ]] && environment="$1";;
		esac
		shift
	done
	environment="${environment:-eqa}"
	args=("$@")
}

init()
{
	unset buildAccount servers relayServer firewallServers

	# "Continuous"  "Gold"  "Pathfinding"  "Production"  "Qualification"  "QualityAssurance" 
	# environment: this is normalized from the environment specified by the user to an environment we can pass to deploy
	#    and the sub directory on the build server that contains this code
	case "$environment" in
		pf|PathFinding) environment="Pathfinding" servers="RasPF1FmsPrCimf RasPF1FmsBkCimf RasPF1FmsEmus RasPF1Web1 RasPF1PrSqls RasPF1BkSqls";;
		dev|development) environment="Development" servers="RasDevFmsPrCimf RasDevFmsBkCimf RasDevFmsEmus RasDev1Web1 RasDev1PrSqls RasDev1BkSqls";;
		dqa|DevQa|DevelopmentQualityAssurance) environment="DevQa" servers="rasdqaWeb1 rasdqaWeb2"; relayServer="rasdqabksqls" firewallServers="rasdqaprsqls rasdqabksqls RasDqaFmsPrCimf RasDqaFmsBkCimf" ;;
		eqa|EngQa|EngineeringQualityAssurance) environment="EngQa" servers=" raseqaWeb2"; relayServer="raseqabksqls" firewallServers="raseqaprsqls raseqabksqls raseqaFmsPrCimf raseqaFmsBkCimf" ;;
		prod|production) environment="production" servers="rasdqaWeb2"; relayServer="" firewallServers="" ;;
		*) echo "$1 is not a valid environment"; return 1;;
	esac

	domain=".amr.corp.intel.com"
	buildAccount="amr\sys_cs"; [[ "$environment" == "production" ]] && buildAccount="sys_csProd"

	return 0
}

updateAdministratorsGroup()
{
	[[ $noAdmins ]] && return 0
	addToAdministratorsGroup "$server" "$buildAccount" || return 						  			# CI system	
	addToAdministratorsGroup "$server" "Global SCADA Admins" || return; 						# production service access
	[[ "$environment" == "production" ]] || { addToAdministratorsGroup "$server" "ICS Dev AD" || return; } # developer administrator access
}

addToAdministratorsGroup()
{
	local server="$1" group="$2" result

	if [[ $script ]]; then
		echo psexec -accepteula -h '\\'$server net LocalGroup Administrators \"$group\" /add
		return 0
	fi

	echo -n "$group..."	
	psexec -h '\\'$server net LocalGroup Administrators "$group" /add >& /dev/null
	result=$?

	if ! [[ $result = 0 || $result = 2 ]]; then # new returns 0 if added to the group, 2 if already in the group
		printf "\n\nUnable to add $group to the Administrators group on $server"
		psexec -h '\\'$server net LocalGroup Administrators "$group" /add
		return 1
	fi

	return 0
}

waitForReboot()
{
	local server servers="$1"

	[[ $script || $noReboot ]] && return 0

	printf "checking..."

	# wait for all servers to become available
	for server in $servers; do 
			printf "$server."
			while ! ping -n 1 -w 1000 $server > /dev/null; do
				printf ".";
			done
			printf "up."
	done;

	printf "done\n"
}

rebootServer()
{
	local server="$1"
	local cmd='shutdown /m \\'$server' /r /f /t 0 /c "patch install before SCADA Portal installation"'

	[[ $noReboot || ! "$server" ]] && return 0

	if [[ $script ]]; then
		echo "$cmd"
		return 0
	fi

	echo -n "reboot..."	
	if ! shutdown /m '\\'$server  /r /f /t 0 /c "patch install before SCADA Portal installation" >& /dev/null ; then 
		printf "\n\nUnable to reboot $server"
		shutdown /m '\\'$server  /r /f /t 0 /c "patch install before SCADA Portal installation"
		return 1
	fi

	# wait for  server to become unavailable
	while ping -n 1 -w 1000 $server > /dev/null; do
		sleep 1s
		printf "."
	done
	printf "down..."

	return 0
}

checkAccess()
{
	local server="$1"

	echo -n "unc..."
	if ! net use '\\'$server'\c$' >& /dev/null; then # if we can access c$ share we are an administrator
		echo "ERROR: $server UNC is not accessible as $(whoami), add \"ICS Dev AD\" to the Administrators group"
		return 1
	fi

	return 0
}

pingServer()
{
	local server="$1"

	echo -n "ping..."
	if ! ping -n 1 $server >& /dev/null; then
		echo "ERROR: $server is not available"
		return 1
	fi

	return 0
}

prepServer()
{
	local server="$1"

	if [[ ! "$script" ]]; then
		echo -n "$server: "
		pingServer "$server" || return    # check that server is up and running under the fully qualified DNS name
		checkAccess "$server" || return		# check that we have administrator access to the server to we can add the appropriate groups to the Administrators group
	fi

	updateAdministratorsGroup "$server" || return # add the appropriate groups to the Administors group on the server (developers, supports, build server)
	rebootServer "$server" || return 							# reboot the server to ensuire any pending patches are applied

	[[ "$script" ]] || echo "done"
}

prepServers() 
{ 
	local servers="$1" firewall oldScript="$script"

	[[ "$servers" ]] || return 0

	[[ "$2" == "firewall" ]]	&& { firewall="true"; script="true"; }

	echo

	if [[ "$firewall" ]]; then
		printf 'Run the following command on the BK1 SQL Server:\n\n'
		echo 'copy /y \\CsisBuild.intel.com\c$\Windows\System32\psexec.exe c:\Windows\System32'
	fi

	for server in $1; do prepServer "$server$domain" || exit 1 ; done;

	if [[ "$firewall" ]]; then

		if [[ ! "$sqlPassword" ]]; then
		 	echo "The SQL Server service password must be specified using --sql-password"
		 	exit 1
		fi

		echo '"\\CsisBuild.intel.com\install\Microsoft\SQL Server\image\2017\setup.exe" /action=install /q /IACCEPTSQLSERVERLICENSETERMS /FEATURES=SQLEngine,Replication /InstanceName=MSSQLSERVER /SQLUSERDBDIR=C:\MSSQL\Data /SQLUSERDBLOGDIR=C:\MSSQL\Log /SQLBACKUPDIR=C:\MSSQL\Backup /INSTALLSHAREDDIR="C:\Program Files\Microsoft SQL Server" /NPENABLED=1 /SQLSVCACCOUNT="'$sqlAccount'" /SQLSVCPASSWORD="'$sqlPassword'" /AGTSVCACCOUNT="'$sqlAccount'" /AGTSVCPASSWORD="'$sqlPassword'" /SQLSYSADMINACCOUNTS="AMR\AD_JJBUTARE" "AMR\JJBUTARE" "AMR\ICS Dev" "AMR\ICS Dev AD" "BUILTIN\ADMINISTRATORS"
c:\windows\system32\reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQLServer" /f /t REG_DWORD /v LoginMode /d 2
c:\windows\system32\reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQLServer\SuperSocketNetLib\Tcp\IpAll" /f /v TcpPort /d 3180
net stop MSSQLSERVER
net start  MSSQLSERVER
'
		[[ ! "$noDeploy" ]] && pause
	fi

	script="$oldScript"
}

deploy() 
{ 
	local code="/cygdrive/c/Projects/ScadaPortal/$environment/Source"

	[[ ! -d "$code" ]] && code="/cygdrive/c/Projects/ScadaPortal/Source"

	pushd "$code/Deploy/Deploy/bin/Debug" > /dev/null;
	start --direct ./deploy.exe "$@"
	popd > /dev/null
}

deployAll()
{
	local args="environment=$environment verbose=true"

	#deploy AlarmShelvingService $args force=true || return
	#return

	deploy HistorianCentralDb $args RestoreDatabase=false DeployScripts=true DeployClr=true DeployService=true || return
	deploy HistorianDb $args include="$relayServer;BK" || return # deploy project database to the BK first so we can install the relay agent
return
	deploy RelayAgent $args force=true || return
	deploy SqlServer $args || return # install SQL Server everyere else (for example the Historian PR)

	# the remaining deployment steps could be run from Antidote at this points
	[[ ! "$fullDeployment" ]] && return 0; 
	deploy HistorianDb $args DeployScripts=true DeployClr=true DeployHistorianSharedClr=true RebuildReplication=false || return # this may hang on replication, if it does runthe next line
	#deploy HistorianDb $args DeployScripts=true DeployClr=true DeployHistorianSharedClr=true RebuildReplication=true || return
	deploy Web $args || return
	deploy HistorianRelayDb $args DeployScripts=true DeployClr=true || return
	deploy HistorianService $args  || return
	deploy ProjectService $args  || return
	deploy DataLogger $args  || return
	deploy AlarmShelvingService $args  || return
	deploy configuration $args ConfigureLogger=true AddPoints=true PopPoints=true || return		
	deploy alarms $args enabled=true || return
}

install() 
{ 
	if [[ ! "$noPrep" ]]; then
		echo "Preparing the SCADA Portal servers..."

		if [[ ! $noLocal ]]; then 
			prepServers "$servers" || return
			waitForReboot "$servers" || return
		fi

		[[ ! $noFirewall ]] && prepServers "$firewallServers" firewall
	fi

	if [[ ! "$noDeploy" ]]; then
		printf "\nDeploying SCADA Portal to $environment...\n"
		deployAll || return
	fi
}

run() {	args "$@"; init || return; install "${args[@]}" || return; }

run "$@"
