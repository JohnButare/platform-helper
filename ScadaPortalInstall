#!/usr/bin/env bash
. function.sh || exit

globalArgs="verbose=true force=false" # these properties will be passed to all deployments
buildAccount="amr\sys_cs" sqlAccount="$buildAccount" groups=("$buildAccount" "Global SCADA Admins")

initializeEnvironment()
{
	case "$environment" in
		c|Continuous) environment="Continuous" branch="I-continuous";;
		pf|PathFinding) environment="Pathfinding" branch="I-pf" servers="RasPF1FmsPrCimf RasPF1FmsBkCimf RasPF1FmsEmus RasPF1Web1 RasPF1PrSqls RasPF1BkSqls";;
		dev|development) environment="Development" branch="I-dev" servers="RasDevFmsPrCimf RasDevFmsBkCimf RasDevFmsEmus RasDev1Web1 RasDev1PrSqls RasDev1BkSqls";;
		dqa|DevQa|DevelopmentQualityAssurance) environment="DevQa" branch="I-dqa" servers="rasdqaWeb1 rasdqaWeb2"; relayServer="rasdqabksqls" firewallServers="RasDqaFmsPrCimf RasDqaFmsBkCimf rasdqaprsqls rasdqabksqls";;
		eqa|EngQa|EngineeringQualityAssurance) environment="EngQa" branch="I-eqa" servers="raseqaWeb1 raseqaWeb2"; relayServer="raseqabksqls" firewallServers="aseqaFmsPrCimf raseqaFmsBkCimf raseqaprsqls raseqabksqls";;
		g|gs|gold|GoldStandard) environment="Gold" branch="I-gold" servers="rasgs1Web1"; relayServer="rasgs1bksqls" firewallServers="rasgs1FmsPrCimf rasgs1FmsBkCimf rasgs1prsqls rasgs1bksqls";;
		prod|production) environment="production" branch="I-prod" servers="rasdqaWeb2"; relayServer="" firewallServers="" ;;
		*) echo "$environment is not a valid environment"; return 1;;
	esac
}

deployRebuildReplication()
{
	deploy HistorianDb $args DeployScripts=true DeployClr=false DeployHistorianSharedClr=false RebuildReplication=true || return
}

deployNew()
{
	# deploy HistorianCentralDb $args InstallSql=true || return
	# deploy HistorianDb $args include="$relayServer;BK" || return # deploy project database to the BK first so we can install the relay agent
	deploy Web $args ForceConfiguration=true || return
	# deploy RelayAgent $args || return
	# deploy SqlServer $args ForceConfiguration=true || return # install SQL Server everywhere else (for example the Historian PR) and ensure the configuration is correct (the BK is missing the lock pages privilege)
	# deploy HistorianDb $args DeployScripts=true DeployClr=true DeployHistorianSharedClr=true RebuildReplication=false || return # this may hang on replication, if it does runthe next line
	# TODO: test without this step, Leo may have fixed replication
	# deploy HistorianDb $args DeployScripts=true DeployClr=true DeployHistorianSharedClr=true RebuildReplication=true || return
	# deploy HistorianRelayDb $args DeployScripts=true DeployClr=true || return
	# deploy HistorianService $args  || return
	# deploy ProjectService $args  || return
	# deploy DataLogger $args  || return
	# deploy AlarmShelvingService $args || return
	# deploy configuration $args ConfigureLogger=true AddPoints=true PopPoints=false || return		
	# deploy alarms $args enabled=true || return
}

deployDefault()
{
	deploy HistorianCentralDb,RelayAgent,Alarms $args enabled=false || return
	deploy HistorianDb,Web,HistorianRelayDb,HistorianService,ProjectService,DataLogger,AlarmShelvingService $args || return
	deploy configuration $args ConfigureLogger=true AddPoints=true PopPoints=false || return		
	deploy alarms $args enabled=true || return
}

deployContinuous()
{
	deploy UnitTests $args || return
	deploy HistorianDb $args || return
	deploy HistorianDb $args delete=TB0 || return
	deploy HistorianDb $args delete=rassi1prsqls,rassi1bksqls || return
}

usage()
{
	echot "/
usage: ScadaPortalInstall [PROPERTIES]
	Install SCADA Portal servers for the specified environment.  

  -e|--environment ENVIRONMENT  environment to deploy to (c, pf, dev, dqa, eqa, gs, or prod)

  Preparation
  -p|--prep												check (prepare) the SCADA Portal servers, which consists of:
                                  	1) check that server is up and running under the fully qualified DNS name
                                  	2) check for administrator access to the server
	                                	3) add the appropriate additional groups to the Administors group
	                                	4) reboot each machine to ensure patches are fully applied
  -na|--no-admins               	do not update the administrators group
  -nf|--no-firewall								skip firewall servers
  -nl|--no-local									skip local servers
  -nr|--no-reboot               	do not reboot the servers
  -sa, --sql-account ACCOUNT  		the account to run SQL Server under
  -sp, --sql-password ACCOUNT			the password of the account to run SQL server under

  Deployment
  -b|--branch BRANCH							override the default branche
	-c|--code 											perform a GetCode operation, must have access to the GitLab ScadaPortal repository
  -dm|--deployment-method METHOD	the deployment method to use, defaults to deployEnvironment (i.e. deployDevQa).
  																If an environment specific deployment method does not exists deployDefault is used.
  																Otherwise, the specified method is used, i.e. -d Partial would use deployPartial
  -n|--new												perform a ground up deployment to new servers (deployNew is used)
"
	exit $1
}

args()
{
	unset args environment 
	unset prep noAdmins noFirewall noLocal noReboot sqlPassword # preparation
	unset deployBranch deploymentMethod getCode # deployment

	while (( $# != 0 )); do
		case "$1" in
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			-e|--environment) environment="$2"; shift;;

			-p|--prep) prep="true";;
			-na|--no-admins) noAdmins="true";;
			-nf|--no-firewall) noFirewall="true";;
			-nl|--no-local) noLocal="true";;
			-nr|--no-reboot) noReboot="true";;
			-sa|--sql-account) sqlAccount="$2"; shift;;
			-sp|--sql-password) sqlPassword="$2"; shift;;

			-b|--branch) deployBranch="$2"; shift;;
			-c|--code) getCode="true";;
			-n|--new) deployMethod="deployNew";;
			-dm|--deployment-method) deployMethod="deploy$2"; shift;;

			*) args="$1 $args";;
		esac
		shift
	done

	if [[ ! "$environment" ]]; then
			EchoErr "The environment must be specified"
			return 1
	fi

	if [[ "$deployMethod" ]] && ! IsFunction $deployMethod; then
		EchoErr "The $deployMethod does not exist"
		return 1;
	fi
}

init()
{
	initializeEnvironment || return
	domain=".amr.corp.intel.com"
	[[ "$environment" == "production" ]] && buildAccount="sys_csProd"
	[[ "$environment" != "production" ]] && groups+=("ICS Dev AD")
	return 0
}

deploy() 
{ 
	local code="/cygdrive/c/Projects/ScadaPortal/$environment/Source" result

	[[ ! -d "$code" ]] && code="/cygdrive/c/Projects/ScadaPortal/Source"

	pushd "$code/Deploy/Deploy/bin/Debug" > /dev/null;
	start --direct ./deploy.exe "$@"; result=$?
	popd > /dev/null
	return $result
}

codeUpdate()
{
	[[ "$getCode" ]] || return 0

	local result program="$ROOT/Projects/Antidote/Source/Tools/CodeUpdate/bin/Debug/CodeUpdate.exe"

	pushd "$ROOT/Projects/ScadaPortal/$environment" || return
	GitHelper ToHttp || return # SSH pulls do not work unless a key is setup
	"$program" "ScadaPortal" "$environment" "${deployBranch-$branch}" "origin"; result="$?"
	GitHelper ToSsh || return
	popd || return
	return $result
}

pingServer()
{
	local server="$1"

	echo -n "ping..."
	if ! ping -n 1 $server >& /dev/null; then
		echo "ERROR: $server is not available"
		return 1
	fi

	return 0
}

checkAccess()
{
	local server="$1"

	echo -n "unc..."
	if ! net use '\\'$server'\c$' >& /dev/null; then # if we can access c$ share we are an administrator
		echo "ERROR: $server UNC is not accessible as $(whoami), add \"ICS Dev AD\" to the Administrators group"
		return 1
	fi

	return 0
}

updateAdministratorsGroup()
{
	[[ $noAdmins ]] && return 0
	for group in "${groups[@]}"; do addToAdministratorsGroup "$server" "$group"; done
}

addToAdministratorsGroup()
{
	local server="$1" group="$2" result

	if [[ $script ]]; then
		echo psexec -accepteula -h '\\'$server net LocalGroup Administrators \"$group\" /add
		return 0
	fi

	echo -n "$group..."	
	psexec -h '\\'$server net LocalGroup Administrators "$group" /add >& /dev/null
	result=$?

	if ! [[ $result = 0 || $result = 2 ]]; then # new returns 0 if added to the group, 2 if already in the group
		printf "\n\nUnable to add $group to the Administrators group on $server"
		psexec -h '\\'$server net LocalGroup Administrators "$group" /add
		return 1
	fi

	return 0
}

rebootServer()
{
	local server="$1"
	local cmd='shutdown /m \\'$server' /r /f /t 0 /c "patch install before SCADA Portal installation"'

	[[ $noReboot || ! "$server" ]] && return 0

	echo -n "reboot..."	
	if ! shutdown /m '\\'$server  /r /f /t 0 /c "patch install before SCADA Portal installation" >& /dev/null ; then 
		printf "\n\nUnable to reboot $server"
		shutdown /m '\\'$server  /r /f /t 0 /c "patch install before SCADA Portal installation"
		return 1
	fi

	# wait for  server to become unavailable
	while ping -n 1 -w 1000 $server > /dev/null; do
		sleep 1s
		printf "."
	done
	printf "down..."

	return 0
}

waitForReboot()
{
	local server servers="$1"

	[[ $noReboot ]] && return 0

	printf "checking..."

	# wait for all servers to become available
	for server in $servers; do 
			printf "$server."
			while ! ping -n 1 -w 1000 $server > /dev/null; do
				printf ".";
			done
			printf "up."
	done;

	printf "done\n"
}

prepServer()
{
	local server="$1"

	echo -n "$server: "
	pingServer "$server" || return    # check that server is up and running under the fully qualified DNS name
	checkAccess "$server" || return		# check that we have administrator access to the server to we can add the appropriate groups to the Administrators group
	updateAdministratorsGroup "$server" || return # add the appropriate groups to the Administors group on the server (developers, supports, build server)
	rebootServer "$server" || return 							# reboot the server to ensuire any pending patches are applied
	echo "done"
}

scriptServers()
{
	local servers="$1"

	if [[ ! "$sqlPassword" ]]; then
	 	EchoErr "The SQL Server service password must be specified using --sql-password"
	 	exit 1
	fi

	echo '@echo off'
	echo 'copy /y \\CsisBuild.intel.com\c$\Windows\System32\psexec.exe c:\Windows\System32'
	echo 'copy /y \\CsisBuild.intel.com\c$\Windows\System32\psinfo.exe c:\Windows\System32'

	for server in $servers; do echo 'ping -n 1 -w 100 '$server$domain' >nul || echo DOWN: '$server''; done

	if [[ ! "$noAdmins" ]]; then
		echo; echo 'echo. & echo Press any key to update the Administrators groups... & pause >nul'
		for server in $servers; do
			echo "echo $server:"
			for group in "${groups[@]}"; do
				echo 'psexec -accepteula -h \\'$server$domain' net LocalGroup Administrators "'$group'" /add'
			done
		done
	fi

	if [[ ! "$noAdmins" ]]; then
		echo; echo 'echo. & echo Press any key to check server uptime (ensure recent reboot)... & pause >nul'
		for server in $servers; do
			echo 'echo '$server:' & psinfo \\'$server$domain' | find "Uptime"'
		done
	fi

	if [[ ! "$noReboot" ]]; then
		echo; echo 'echo. & echo Press any key to reboot servers (patch install)... & pause >nul'
		for server in $1; do
			echo 'echo '$server:' & shutdown /m \\'$server$domain' /r /f /t 0 /c "patch install before SCADA Portal installation"'
		done
	fi

	echo; echo 'echo. & echo Press any key to install SQL server... & pause >nul'
	echo '"\\CsisBuild.intel.com\install\Microsoft\SQL Server\image\2017\setup.exe" /action=install /q /IACCEPTSQLSERVERLICENSETERMS /FEATURES=SQLEngine,Replication /InstanceName=MSSQLSERVER /SQLUSERDBDIR=C:\MSSQL\Data /SQLUSERDBLOGDIR=C:\MSSQL\Log /SQLBACKUPDIR=C:\MSSQL\Backup /INSTALLSHAREDDIR="C:\Program Files\Microsoft SQL Server" /NPENABLED=1 /SQLSVCACCOUNT="'$sqlAccount'" /SQLSVCPASSWORD="'$sqlPassword'" /AGTSVCACCOUNT="'$sqlAccount'" /AGTSVCPASSWORD="'$sqlPassword'" /SQLSYSADMINACCOUNTS="AMR\AD_JJBUTARE" "AMR\JJBUTARE" "AMR\ICS Dev" "AMR\ICS Dev AD" "BUILTIN\ADMINISTRATORS"
c:\windows\system32\reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQLServer" /f /t REG_DWORD /v LoginMode /d 2
c:\windows\system32\reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQLServer\SuperSocketNetLib\Tcp\IpAll" /f /v TcpPort /d 3180
net stop MSSQLSERVER
net start  MSSQLSERVER
'
}

prepare()
{
	if [[ ! "$noLocal" && "$servers" ]]; then 
		for server in $servers; do prepServer "$server$domain" || exit 1 ; done;
		waitForReboot "$servers" || return
	fi

	[[ ! $noFirewall ]] && scriptServers "$firewallServers"
}

install() 
{ 
	[[ "$prep" ]] && { prepare; return; }

	codeUpdate || return

	if [[ ! "$deployMethod" ]]; then	
		deployMethod="deploy$environment"
		IsFunction $deployMethod || deployMethod="deployDefault"
	fi

	args="environment=$environment $globalArgs $args"

	printf "\nDeploying SCADA Portal to $environment ($deployMethod $args)...\n"
	$deployMethod || return
}

run() {	args "$@" || return; init || return; install "${args[@]}" || return; }

run "$@"
