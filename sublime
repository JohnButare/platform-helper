#!/usr/bin/env bash
. app.sh || exit

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

init()
{
	unset profileDirectory

	title=".* - Sublime Text"
	profileName="Sublime"
	
	case "$PLATFORM" in

		linux)
			program="$P/sublime_text/sublime_text"; [[ ! -f "$program" ]]	&& program="$P/sublime_text_3/sublime_text"
			profileDirectory="$ADATA/sublime-text-3"
			;;

		mac) 
			program="$P/Sublime Text.app/Contents/SharedSupport/bin/subl"
			profileDirectory="$ADATA/Sublime Text 3"
			;;

		win) 
			program="$P/Sublime Text 3/subl.exe"
			profileDirectory="$ADATA/Sublime Text 3"
			;;

	esac
	profileFilters="-*.pyc;-*.cache;-*.sublime_session;-*.sublime-package"

	${G}mkdir --parents "$profileDirectory" || return
}

usage() {	echot "usage: sublime [start|close|program|IsInstalled](start)
  profile dir|SaveDir|save|restore [<profile name>|default](latest)
  ProfileSync HOST
	-w, --wait					wait for the program to exit before returning"; exit $1; }

args()
{
	unset noPrompt wait waitArg
	
	while (( $# != 0 )); do
		case "$1" in
			--help|-h) usage 0;;
			--no-prompt|-np) noPrompt="--no-prompt";;
			--wait|-w) wait="--wait" waitArg="-w -n";; # -w=wait -n=new window
			ProfileSync) command="ProfileSync";; IsRunning) command="IsRunning";; IsInstalled) command="IsInstalled";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ -e "$1" ]] && break
				[[ "$command" == @(start|profile|ProfileSync) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='start'

	args=( "$@" )
} 

startCommand()
{
	! IsInstalledCommand && return 1
	
	start $wait "$program" $waitArg "$@"
}

ProfileSyncCommand()
{
	[[ $# == 0 ]] && MissingOperand "HOST"; local host="$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"

	ScriptEval HostInfo "$host" || return
	BeyondCompare "$ADATA\Sublime Text 2" "$_adata\Sublime Text 2" /filters=$profileFilters
}

closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } 
IsInstalledCommand() { [[ -f "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }

profileCommand()
{
	profile $noPrompt --platform --app "$profileName" --method "$profileDirectory" --files "*" "$@" || usage 1

	if [[ "$1" == "restore" ]]; then
		# https://packagecontrol.io/docs/syncing
		rm -fr "$profileDirectory/Installed Packages" || return
		rm -fr "$profileDirectory/Packages/"!("User") || return
	fi

	return 0
}

run "$@"
