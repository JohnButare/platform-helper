#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|profile|program|restart|start|startup](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start"
	platform=""
	profileName="Sublime"
	profileFilters="-*.pyc;-*.cache;-*.sublime_session;-*.sublime-package"
	title=".* - Sublime Text"

	# find program
	case "$PLATFORM" in
		linux)
			profileDir="$UADATA/sublime-text"
			program="$P/sublime_text/sublime_text"
			programRunning="$program"
			;;

		mac) 
			profileDir="$UADATA/Sublime Text"
			program="$P/Sublime Text.app/Contents/SharedSupport/bin/subl"
			[[ ! -f "$program" ]] && program="$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
			programRunning="$program"
			;;
		win)
			if [[ -f "$P/Sublime Text/subl.exe" ]]; then
				platform="--platform"
				profileDir="$UADATA/../Roaming/Sublime Text"
				program="$P/Sublime Text/subl.exe"
				programRunning="$P/Sublime Text/sublime_text.exe"
			elif [[ ! -f "$program" ]]; then
				profileDir="$HOME/.config/sublime-text"
				program="/opt/sublime_text/sublime_text"
				programRunning="$program"
			fi
			;;
	esac

	[[ "${1,,}" == "isinstalled" ]] && { isInstalledCommand; return; }
	[[ ! -f "$program" ]] && { ScriptErr "Sublime Text is not installed"; return 1; }

	return 0	
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsTaskRunning "$programRunning"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startupCommand() { startCommand; }

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }

profileCommand()
{
	local command="${profileArgs[0]}"	

	profile $noPrompt $platform --app "$profileName" --method "$profileDir" --files "*"  "${profileArgs[@]}" || return

	if [[ "$command" == "restore" ]]; then
		# https://packagecontrol.io/docs/syncing
		rm -fr "$profileDir/Installed Packages" || return
		rm -fr "$profileDir/Packages/"!("User") || return
	fi

	return 0
}

#
# Start Command
#

startArgStart() { unset -v newWindow; }
startArgs() { files=( "$@" ); shift="$#"; }

startOpt() 
{
	case "$1" in
		-n|--new-window) newWindow="--new-window";;
		*) return 1
	esac
}

startCommand()
{
	if isInstalledCommand; then
		local start; IsPlatform win && start="start" # start performs Windows path conversion
		
		if [[ $wait ]]; then
			wait="-w" # -w=wait
			isRunningCommand && wait+=" -n" # -n=new window - only open a new windows if sublime is running otherwise 2 windows are opened
		fi

		$start "$program" $newWindow $wait "${files[@]}"
	fi
}

ScriptRun "$@"
