#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [start|close|program|IsInstalled](start)
Sublime commands.

	-w, --wait					wait for the program to exit before returning"
}

init()
{
	defaultCommand="start"
	profileName="Sublime"
	title=".* - Sublime Text"

	# find program
	case "$PLATFORM" in
		linux) program="$P/sublime_text/sublime_text"; [[ ! -f "$program" ]];;
		mac) program="$P/Sublime Text.app/Contents/SharedSupport/bin/subl"; [[ ! -f "$program" ]] && program="$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl";;
		win) program="$P/Sublime Text/subl.exe"; [[ ! -f "$program" ]];;
	esac
	
	# find profile directory
	case "$PLATFORM" in
		linux) profileDirectory="$ADATA/sublime-text";;
		mac) profileDirectory="$ADATA/Sublime Text";;
		win) profileDirectory="$ADATA/../Roaming/Sublime Text";;
	esac

	profileFilters="-*.pyc;-*.cache;-*.sublime_session;-*.sublime-package"
}

argStart() { unset -v wait; }

opt()
{
	case "$1" in
		-w|--wait) wait="true" waitArg="-w -n";; # -w=wait -n=new window
		*) return 1;;
	esac
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsTaskRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgStart() { profileArgs=(); }

profileCommand()
{
	${G}mkdir --parents "$profileDirectory" || return
	
	profile $noPrompt --platform --app "$profileName" --method "$profileDirectory" --files "*" "$@" || usage 1

	if [[ "$1" == "restore" ]]; then
		# https://packagecontrol.io/docs/syncing
		rm -fr "$profileDirectory/Installed Packages" || return
		rm -fr "$profileDirectory/Packages/"!("User") || return
	fi

	return 0
}

startArgs() { files=( "$@" ); shift="$#"; }

startCommand()
{
	! isInstalledCommand && return 1

	local start; IsPlatform win && start="start" # start performs Windows path conversion
	$start "$program" $waitArg "${files[@]}"
}

ScriptRun "$@"
