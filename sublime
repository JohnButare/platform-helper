#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|profile|program|restart|start|startup|version](start)
$(ScriptName) commands.

	-a,	--alterate		load an alternative version, i.e. the Linux version of Sublime under Windows"
}

init() { defaultCommand="start"; }
argStart() { unset -v alternate; }

opt()
{
	case "$1" in
		-a|--alternate) alternate="--alternate";;
		*) return 1;;
	esac
}

argEnd()
{
	platform=""
	profileName="Sublime"
	profileFilters="-*.pyc;-*.cache;-*.sublime_session;-*.sublime-package"
	title=".* - Sublime Text"

	# find program
	case "$PLATFORM_OS" in
		linux)
			profileDir="$UADATA/sublime-text"
			program="$P/sublime_text/sublime_text"
			programRunning="$program"
			;;

		mac) 
			profileDir="$UADATA/Sublime Text"
			program="$P/Sublime Text.app/Contents/SharedSupport/bin/subl"
			[[ ! -f "$program" ]] && program="$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
			programRunning="sublime_text"
			;;
		win)
			if [[ $alternate && -d "/opt/sublime_text/sublime_text" ]]; then
				profileDir="$HOME/.config/sublime-text"
				program="/opt/sublime_text/sublime_text"
				programRunning="$program"
			elif [[ -f "$P/Sublime Text/subl.exe" ]]; then
				platform="--platform"
				profileDir="$UADATA/../Roaming/Sublime Text"
				program="$P/Sublime Text/subl.exe"
				programRunning="$P/Sublime Text/sublime_text.exe"
			elif [[ -f "$UADATA/Sublime Text/subl.exe" ]]; then
				platform="--platform"
				profileDir="$UADATA/Sublime Text/Data"
				program="$UADATA/Sublime Text/subl.exe"
				programRunning="$UADATA/Sublime Text/sublime_text.exe"
			fi
			;;
	esac
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "$programRunning"; }
programCommand() { AppInstallCheck && echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startupArgs() { files=(); }
startupCommand() { startCommand; }
versionCommand() { AppInstallCheck && "$program" -v | RemoveCarriageReturn | awk '{print $NF}'; } # remove Windows carriage return

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	profile $noPrompt $platform --app "$profileName" --method "$profileDir" --files "*"  "${profileArgs[@]}" || return

	if [[ "${profileArgs[0]}" == "restore" ]]; then
		# https://packagecontrol.io/docs/syncing
		rm -fr "$profileDir/Installed Packages" || return
		rm -fr "$profileDir/Packages/"!("User") || return
	fi

	return 0
}

#
# Start Command
#

startArgStart() { unset -v newWindow; }
startArgs() { files=( "$@" "${otherArgs[@]}" ); shift="$#"; }

startOpt() 
{
	case "$1" in
		-n|--new-window) newWindow="--new-window";;
		*) return 1
	esac
}

startCommand()
{
	AppInstallCheck || return

	local args=() start; IsPlatform win && start="start" # start performs Windows path conversion
	
	# file path conversion for Windows - ignore line specification at end of filename (:line or :line:column)
	if IsPlatform win; then
		local file oldFiles; ArrayCopy files oldFiles || return; files=()
		for file in "${oldFiles[@]}"; do
			local line; [[ $file =~ : ]] && { line=":$(RemoveBeforeFirst "$file" :)" file="$(RemoveAfter "$file" :)"; }
			files+=("$(utw "$file")$line")
		done
	fi

	# wait argument	
	if [[ $wait ]]; then
		args+=("-w") # -w=wait
		isRunningCommand && args+=("-n") # -n=new window - open a new windows if sublime is running, otherwise 2 windows are opened
	fi

	# BROWSER=chrome fixes the LSP plugin on Mac if Firefox is the default browser (https://github.com/python/cpython/issues/69143, Sublime console error is 'MacOSXOSAScript' object has no attribute 'basename')
	if IsPlatform mac; then
		BROWSER="" "$program" $newWindow "${args[@]}" "${files[@]}"
	else
		"$program" $newWindow "${args[@]}" "${files[@]}"
	fi
}

ScriptRun "$@"
