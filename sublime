#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [start|close|profile|program|IsInstalled](start)
Sublime commands.

	-w, --wait					wait for the program to exit before returning"
}

init()
{
	defaultCommand="start"
	profileName="Sublime"
	profileFilters="-*.pyc;-*.cache;-*.sublime_session;-*.sublime-package"
	title=".* - Sublime Text"

	# find program
	case "$PLATFORM" in
		linux) program="$P/sublime_text/sublime_text";;
		mac) program="$P/Sublime Text.app/Contents/SharedSupport/bin/subl"; [[ ! -f "$program" ]] && program="$HOME/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl";;
		win) program="$P/Sublime Text/subl.exe";;
	esac
	[[ ! -f "$program" ]] && { ScriptErr "Sublime Text is not installed"; return 1; }
	
	# find profile directory
	case "$PLATFORM" in
		linux) profileDir="$ADATA/sublime-text";;
		mac) profileDir="$ADATA/Sublime Text";;
		win) profileDir="$ADATA/../Roaming/Sublime Text";;
	esac

	[[ ! -d "$profileDir" ]] && { ${G}mkdir --parents "$profileDir" || return; }

	return 0	
}

argStart() { unset -v wait; }

opt()
{
	case "$1" in
		-w|--wait) wait="true" waitArg="-w -n";; # -w=wait -n=new window
		*) return 1;;
	esac
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsTaskRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }

profileCommand()
{	
	profile $noPrompt --platform --app "$profileName" --method "$profileDir" --files "*"  "${profileArgs[@]}" || return

	if [[ "$1" == "restore" ]]; then
		# https://packagecontrol.io/docs/syncing
		rm -fr "$profileDir/Installed Packages" || return
		rm -fr "$profileDir/Packages/"!("User") || return
	fi

	return 0
}

#
# Start Command
#

startArgStart() { files=(); }
startArgs() { files=( "$@" ); shift="$#"; }

startCommand()
{
	if isInstalledCommand; then
		local start; IsPlatform win && start="start" # start performs Windows path conversion
		$start "$program" $waitArg "${files[@]}"
	fi
}

ScriptRun "$@"
