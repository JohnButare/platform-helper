#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [api|config|pump|state|temp](api)
Manage the pool controller.

	api 			call an API command
	pump			manage the pool pump
	state			get the current state"
}

init()
{	
	server="pc.butare.net"
	pumpId=50
	pumpCircuitId=6
	curl='curl'
}

#
# commands
#

configCommand() { api "/config" | jq; }
stateCommand() { state | jq; }

#
# API Command
#

apiUsage()
{
	EchoWrap "Usage: $(ScriptName) api [available|put] [URI](/config) [JSON]({})
Perform an API command.

Examples:
	/config - current configuration
	/state/all - current state
	/state/circuit/setState '{"id":6,"state":false}'"
}

apiArgStart() { uri="/config" json="{}"; }

apiArgs()
{
	(( $# )) && { ScriptArgGet "uri" -- "$@" || return; shift; }
	(( $# )) && { ScriptArgGet "json" -- "$@" || return; shift; }
	return 0
}

apiCommand() { api "$uri" "$json"; }
apiavailableCommand() { IsAvailablePort "$server" 443; }
apiPutCommand() { apiPut "$uri" "$json"; }

#
# Pump Commands
#

pumpUsage()
{
	echot "Usage: $(ScriptName) pump [on|off|speed|config|detail|status](status)
Manage the pool pump."
}

pumpCommand() { pumpStatusCommand; }
pumpOnCommand() { apiPut "/state/circuit/setState" '{"id":'$pumpCircuitId',"state":true}'; }
pumpOffCommand() { apiPut "/state/circuit/setState" '{"id":'$pumpCircuitId',"state":false}'; }
pumpConfigCommand() { api "/config/options/pumps" | jq '.pumps[0]'; }

pumpDetailCommand()
{
	local state; state="$(api "/state/all")" || return

	if [[ "$(echo "$state" | isPumpOn)" != "true" ]]; then
		echo "The pool pump is off."
		return
	fi

	local watts="$(echo "$state" | jq '.pumps[] | select(.id == 50).watts')"
	local rpm="$(echo "$state" | jq '.pumps[] | select(.id == 50).rpm')"
	local gpm="$(echo "$state" | jq '.pumps[] | select(.id == 50).flow')"
	echo "The pool pump is on ($watts watts, $rpm rpm, $gpm gpm)."
}

pumpStatusCommand()
{
	local status; status="$(state | isPumpOn)" || return
	[[ "$status" == "true" ]] && printf "on" || printf "off"
}

isPumpOn() { cat | jq '.pumps[] | select(.id == 50).circuits[0].circuit.isOn'; }

pumpSpeedUsage() { echot "Usage: $(ScriptName) pump speed [set|status](status)\nControl the pool pump speed in RPM."; }
pumpSpeedCommand() { pumpSpeedStatusCommand; }
pumpSpeedStatusCommand() { pumpConfigCommand | jq '.circuits[0].speed'; }

pumpSpeedSetUsage() { echot "Usage: $(ScriptName) pump speed set RPM\nSet the pool pump speed in RPM."; }
pumpSpeedSetArgs() { ScriptArgGet --integer  "rpm" -- "$@"; shift; }

pumpSpeedSetCommand()
{
	local pumpConfig; pumpConfig="$(pumpConfigCommand)" || return

	# validate RPM	
	local maxSpeed; maxSpeed="$(echo "$pumpConfig" | jq '.maxSpeed')" || return
	local minSpeed; minSpeed="$(echo "$pumpConfig" | jq '.minSpeed')" || return
	(( rpm < minSpeed || rpm > maxSpeed )) && { ScriptErr "rpm must be between $minSpeed and $maxSpeed"; return 1; }
	log1 "rpm=$rpm maxSpeed=$maxSpeed minSpeed=$minSpeed"

	# get pump and circuit configuration
	local pumpId; pumpId="$(echo "$pumpConfig" | jq '.id')" || return
	local circuitId; circuitId="$(echo "$pumpConfig" | jq '.circuits[0].id')" || return
	local circuit; circuit="$(echo "$pumpConfig" | jq '.circuits[0].circuit')" || return
	log1 "pumpId=$pumpId circuitId=$circuitId circuit=$circuit"

	# set the pump speed
	local json; json="$(cat <<-EOF
		{
			"id":$pumpId,
			"circuits":[
				{
					"speed": $rpm,
					"units": {"val":0},
					"id":$circuitId,
					"circuit":$circuit}
				]
		}
		EOF
	)"
	apiPut "/config/pump" "$json" || return
}



#
# Temp Command
#

tempUsage()
{
	EchoWrap "\
Usage: $(ScriptName) temp
Show pool temperatures.

	-m|--monitor		monitor temperature"
}

tempArgStart() { unset -v monitor; }

tempOpt()
{
	case "$1" in
		-m|--monitor) monitor="--monitor";;
		*) return 1;;
	esac
}

tempCommand()
{
	if [[ $monitor ]]; then
		while true; do
			tempDo
			sleep 1
		done
	else
		tempDo
	fi
}

tempDo()
{
	local pool; pool="$(tempGet 0 "pool")" || return
	local solar; solar="$(tempGet 1 "solar")" || return
	printf "pool=%.2f solar=%.2f\n" "$pool" "$solar"
}

# tempGet NUMBER DESC
tempGet()
{
	local n="$1" desc="$2"
	local temp; temp="$(RunLog curl --silent "https://PoolTemperature.butare.net/AnalogTemperature/$n")" || return
	log2 "tempGet: result='$temp'"
	! IsNumeric "$temp" && { ScriptErr "unable to get the $desc temperature"; return; }
	echo "$temp"
}

#
# API Helper
#

api()
{
	local uri="$1" json="$2"
	RunLog $curl --silent "$server/$(echo "$uri" | RemoveFront "/")"
}

apiPut()
{
	local uri="$1" json="$2"
	RunLog $curl  -H "Content-Type: application/json" -X PUT --silent --data "$json" "$server/$(echo "$uri" | RemoveFront "/")"
}

state() { api "/state/all"; }

ScriptRun "$@"
