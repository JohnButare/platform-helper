#!/usr/bin/env bash
. app.sh || exit

usage() {	echot "usage: SqlServerManagementStudio [start|close|cd|profiler](start)"; exit $1; }

args()
{
	unset command help
	versions=( 2017 2016 2014 2012 2008r2 2008 2005 2000 )
	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			*)
				! IsOption "$1" && IsInArray "$1" versions && { version="$1"; shift; continue; }
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(cd) ]] && break
				break
		esac
		shift
	done

	[[ ! $command ]] && { command="start"; }
	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	args=( "$@" )
}

init()
{ 
	local p='$P32/Microsoft SQL Server' s='Tools/Binn/ManagementStudio/Ssms.exe'

	if [[ ! $version ]]; then
		if [[ -d "$p/140/$s" ]]; then
			version=2017
		elif [[ -d "$p/130/$s" ]]; then
			version=2016
		elif [[ -d "$p/120/$s" ]]; then
			version=2014
		elif [[ -d "$p/110/$s" ]]; then
			version=2012
		elif [[ -d "$p/100/$s" ]]; then
			version=20008r2
		fi
	fi

	if [[ ! $version ]]; then
		if [[ -d "$P32/Microsoft SQL Server/140" ]]; then
			version=2017
		elif [[ -d "$P32/Microsoft SQL Server/130" ]]; then
			version=2016
		elif [[ -d "$P/Microsoft SQL Server/120" ]]; then
			version=2014
		elif [[ -d "$P/Microsoft SQL Server/110" ]]; then
			version=2012
		elif [[ -d "$P/Microsoft SQL Server/100" ]]; then
			version=2008r2
		fi
	fi

	case "$version" in
		2017) versionNum=14; dataVersionNum=14;;
		2016) versionNum=13; dataVersionNum=13;;
		2014) versionNum=12; dataVersionNum=12;;
		2012) versionNum=11; dataVersionNum=11;;
		2008r2) versionNum=10; dataVersionNum=10_50;;
	esac

	projectDir="$UDATA/sql"
	sqlStudio="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/ManagementStudio/Ssms.exe"
	sqlProfiler="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/Profiler.exe"
	sqlTemp="$TEMP/temp.sql"
	program="$sqlStudio"

	if [[ "$version" == @(2008r2|2008) ]]; then
		sqlStudio="$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/VSShell/Common7/IDE/Ssms.exe"
	fi
}

initCommand()
{
	vars=( version versionNum ) 
	ScriptReturn "${vars[@]}"
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }
configCommand() { start "$configManager"; }

cdCommand()
{
	echo "$projectDir"	
}

startCommand() { startProgram "$sqlStudio" "$@"; }
profilerCommand() { startProgram "$sqlProfiler" /Slocalhost "$@"; }
closeCommand() { ! IsRunningCommand && return 0; ProcessClose "$program"; } # task close|CloseKill [--wait] [--title "$title"] "$program"; ProcessKill "$program"; SendKeys "$title" "!FX"; 
IsInstalledCommand() { [[ -f "$program" ]]; }
IsRunningCommand() { IsTaskRunning "$program"; }
restartCommand() { closeCommand && startCommand; }

startProgram()
{
	local program="$1"; shift
	! IsInstalledCommand && return 1; IsRunningCommand && return 0
	start "$program" "$@"
}

profileCommand() 
{
	local connectionDir="$APPDATA/Microsoft/Microsoft SQL Server/${versionNum}0/Tools/Shell"

	if [[ "$1" == @(save) && "$1" != "dir" ]] && grep PersistLoginNameAndPassword "$connectionDir/RegSrvr.xml" > /dev/null; then
		echo "Saved passwords must be removed from these connections:"
		grep --context=10 "PersistLoginNameAndPassword" "$connectionDir/RegSrvr.xml" | grep "RegisteredServers:Name"
		return 1	
	fi

	[[ "$1" == @(save|restore) ]] && echo -e "Aliases..."
	profile --app "SqlServerAliases" --method "HKLM/SOFTWARE/Wow6432Node/Microsoft/MSSQLServer/Client/ConnectTo" "$@" || return; 

	[[ "$1" == @(save|restore) ]] && echo -e "\nConnections..."
	profile --app "SqlServerConnections" --method "$connectionDir" --files "RegSrvr.xml" "$@" || return;

	[[ "$1" == @(save|restore) && "$1" != "dir" ]] && echo -e "\nEnvironment settings...
- Tools, Import and Export Settings..., Export|Import selected environment settings"
	[[ "$1" != "dir" ]] && { profile --app "SqlServer" --method "$sqlStudio" --save-extension "vssettings" "$@" || return; }
}

run "$@"