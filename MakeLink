#!/usr/bin/env bash
. function.sh || exit

usage()
{
	echot "\
MakeLink SRC LINK
	Create links to files and directories
	-a, --absolute			symbolic link is created as an absolute path
  -hl, --hide, --hide-link	hide the LINK after creating it
  -ht, --hide-target	    hide the TARGET after creating it
  -h, --hard				create a hard link to a file
  -j, --junction			create a junction, the default if SRC is a directory, implies --windows
  -l, --list				list links to SRC
  -m, --merge				merge contents of LINK to SRC before creating the link
  -s, --symbolic			create a symbolic link, the default if SRC is a file
  -u, --suppress			suppress error message if SRC does not exist
  -w, --windows				create a link that is visable in Windows"
	exit $1
}

args()
{
	unset src link absolute hideLink hideTarget type list merge windows symbolic suppress
	while (( $# != 0 )); do
		case "$1" in
			-a|--absolute) absolute="--absolute";;
			-hl|--hide|--hide-link) hideLink="true";;
			-ht|--hide-target) hideTarget="true";;
			-h|--hard) type="hard";;
			-j|--junction) type="junction";;
			-l|--list) list="true";;
			-m|--merge) merge="true";;
			-s|--symbolic) type="symbolic";;
			-u|--suppress) suppress="true";;
			-w|--windows) windows="true";;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				! IsOption "$1" && [[ ! $src ]] && { src="$1"; shift; continue; }
				! IsOption "$1" && [[ ! $link ]] && { link="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $src ]] && MissingOperand "SRC"
	[[ ! "$list" && ! $link ]] && MissingOperand "LINK"
	args=("$@")
}

init() { :; }

run() 
{	
	args "$@"; init; 
	
	if [[ "$list" ]]; then
		[[ "$PLATFORM" != "win" || -d "$src" || (-f "$src" && -L "$src") ]] && { ls -al "$src"; return; }
		lnWin --list "$src"; return;
	fi

	# set absolute link path (needed for POSIX link)
	[[ ! $windows && $absolute ]] && link="$(GetFullPath "$link")"

	# set default link filename (needed for Windows link)
	[[ $windows && -f "$src" && -d "$link" ]] && link="$link/$(GetFileName "$src")"

	# merge link directory
	[[ $merge && -d "$link" && ! -h "$link" ]] && { MergeDir --parents --rename "$link" "$src" || return; }
	
	# SRC does not exist
	if [[ ! -e "$src" ]]; then
		[[ $suppress ]] && return 0
		EchoErr "MakeLink: cannot access \`$src\`: No such file or directory"
		return 1
	fi

	# set default type
	[[ ! $type ]] && { [[ -f "$src" ]] && type="symbolic" || type="junction"; }
	[[ "$type" == "symbolic" ]] && symbolic="--symbolic"

	# LINK exists
	[[ -h "$link" ]] && { HideLink || return; HideTarget || return; return; }
	[[ -d "$link" ]] && { echo "MakeLink: \"$link\" already exists"; DelDir --ask "$link" || return; }
	[[ -f "$link" ]] && { echo "MakeLink: \"$link\" already exists"; DelFile --ask "$link" || return; }

	# create a Windows specific link
	if [[ "$PLATFORM" == "win" ]] && [[ $windows || "$type" == "junction" ]]; then
		local start="start"; [[ "$type" == "symbolic" ]] && start="sudo"
		local ln=( $start --direct lnWin.exe $absolute )
		case "$type" in
			junction) "${ln[@]}" --junction "$(utw "$link")" "$(utw "$src")";;
			hard|symbolic) "${ln[@]}" $symbolic "$(utw "$src")" "$(utw "$link")";;
		esac

	# create a regular link
	else
		${G}ln $symbolic "$src" "$link" || return
	fi

	HideLink || return
	HideTarget || return
}

HideTarget()
{
		[[ ! $hideTarget || "$PLATFORM" != "win" ]] && return 0

	# POSIX links must have the system attribute
	local system="+s"
	[[ $windows || "$type" == "junction" ]] && system=''	

	local targetPath; GetFilePath "$(GetFullPath "$link")" path; path="$(utw "$path/")\\"

	pushd "$(GetFilePath "$targetPath")" > /dev/null 
	attrib /L +s +h +r "$(GetFileName "$link")" || return
	popd > /dev/null
}

HideLink()
{
	[[ ! $hideLink || "$PLATFORM" != "win" ]] && return 0

	# POSIX links must have the system attribute
	local system="+s"
	[[ $windows || "$type" == "junction" ]] && system=''	

	# attrib does not work properly if a path is specified
	# don't use GetFullPath so we operate on the link not the target
	pushd "$(GetFilePath "$link")" > /dev/null 
	attrib /L +h $system "$(GetFileName "$link")" || return 
	popd > /dev/null

	return 0
}

run "$@"
