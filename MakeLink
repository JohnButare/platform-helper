#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... create|list
Manipulate links to files and directories."
}

init() { defaultCommand="create"; }

#
# Create Command
#

createArgStart() { unset -v src link absolute hideLink hideTarget type merge windows symbolic suppress; }

createOpt()
{
	case "$1" in
		-a|--absolute) absolute="--absolute";;
		-hl|--hide|--hide-link) hideLink="true";;
		-ht|--hide-target) hideTarget="true";;
		-H|--hard) type="hard";;
		-j|--junction) type="junction";;
		-m|--merge) merge="true";;
		-s|--symbolic) type="symbolic";;
		-u|--suppress) suppress="true";;
		-w|--windows) windows="true";;
		*) return 1;
	esac
}

createArgs()
{
	ScriptArgGet "src" -- "$@"; shift
	ScriptArgGet "link" -- "$@"; shift
}

createUsage()
{
	echot "Usage: $(ScriptName) create SRC LINK
Create a link to a file or directory.

	-a,  --absolute			symbolic link is created as an absolute path
  -hl, --hide, --hide-link	hide the LINK after creating it
  -ht, --hide-target	hide the TARGET after creating it
  -h,  --hard					create a hard link to a file
  -j,  --junction			create a junction, the default if SRC is a directory, implies --windows
  -m,  --merge				merge contents of LINK to SRC before creating the link
  -s,  --symbolic			create a symbolic link, the default if SRC is a file
  -u,  --suppress			suppress error message if SRC does not exist or if SRC and LINK are the same
  -w,  --windows			create a link that is visable in Windows"
}

createCommand() 
{	
	local ask="--ask"; [[ $noPrompt ]] && ask=""

	# ensure src and link are not the same
	if [[ "$src" == "$link" ]]; then
		[[ $suppress ]] && return 0
		ScriptErr "the source and link are the same"; return 1
	fi

	# set absolute link path (needed for POSIX link)
	[[ ! $windows && $absolute ]] && link="$(GetFullPath "$link")"

	# set default link filename (needed for Windows link)
	[[ $windows && -f "$src" && -d "$link" ]] && link="$link/$(GetFileName "$src")"

	# merge link directory
	[[ $merge && -d "$link" && ! -h "$link" ]] && { MergeDir --parents --rename "$link" "$src" || return; }
	[[ $merge && ! -d "$src" ]] && { mkdir "$src" || return; }

	# SRC does not exist
	if [[ ! -e "$src" ]]; then
		[[ $suppress ]] && return 0
		ScriptErr "cannot access '$src': No such file or directory"; return 1
	fi

	# set default type
	[[ ! $type ]] && { [[ -f "$src" ]] && type="symbolic" || type="junction"; }
	[[ "$type" == "symbolic" ]] && symbolic="--symbolic"

	# LINK is not valid
	[[ -f "$src" && -L "$link" && ! -f "$link" ]] && { rm "$link" || return; }
	[[ -d "$src" && -L "$link" && ! -d "$link" ]] && { rm "$link" || return; }

	# LINK target exists
	[[ -h "$link" ]] && { hideLink && hideTarget; return; }
	[[ -d "$link" ]] && { [[ ! $quiet ]] && echo "MakeLink: \"$link\" already exists"; DelDir $ask "$link" || return; }
	[[ -f "$link" ]] && { [[ ! $quiet ]] && echo "MakeLink: \"$link\" already exists"; DelFile $ask "$link" || return; }

	# determine if the windows path is a remote UNC
	if IsPlatform win; then
		local winLink="$(utw "$(GetFullPath "$link")")"
		local winSrc="$(utw "$src")"
		local unc=""; [[ $winLink =~ .*\\\\.* || $winSrc =~ .*\\\\.* ]] && unc="true"
	fi

	# create a Windows specific link
	if IsPlatform win && [[ ! $unc && $windows || "$type" == "junction" ]]; then	
		local ln=( lnWin.exe $absolute )

		[[ "$type" == "symbolic" ]] && ! IsElevated && { EchoErr "Elevation is required for Windows symbolic links"; return 1; }

		case "$type" in
			junction) start "${ln[@]}" --junction "$winLink" "$winSrc";; # link is the first argument for junctions
			hard|symbolic) start "${ln[@]}" $symbolic "$winSrc" "$winLink";;
		esac

	# create a regular link
	else
		[[ -d "$src" ]] && symbolic="--symbolic"
		${G}ln $symbolic "$src" "$link" || return
	fi

	hideLink && hideTarget
}

hideTarget()
{
	{ [[ ! $hideTarget ]] || IsPlatform win; } && return 0
	attrib "$link" /L +s +h +r || return
}

hideLink()
{
	{ [[ ! $hideLink ]] || IsPlatform win; } && return 0

	# POSIX links must have the system attribute
	local system="+s";	[[ $windows || "$type" == "junction" ]] && system=""

	attrib "$link" /L +h $system || return 
}

#
# List Command
#

listUsage() { echot "Usage: $(ScriptName) list LINK"; }
listArgs() { ScriptArgGet "link" -- "$@"; }
listCommand() { ls -al "$link"; }

ScriptRun "$@"
