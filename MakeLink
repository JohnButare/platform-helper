#!/usr/bin/env bash
. function.sh || exit

usage()
{
	echot "\
MakeLink SRC LINK
	Create links to files and directories
	-a,  --absolute			symbolic link is created as an absolute path
  -hl, --hide, --hide-link	hide the LINK after creating it
  -ht, --hide-target	hide the TARGET after creating it
  -h,  --hard					create a hard link to a file
  -j,  --junction			create a junction, the default if SRC is a directory, implies --windows
  -l,  --list 					list links to SRC
  -m,  --merge					merge contents of LINK to SRC before creating the link
  -np, --no-prompt		suppress prompts
	-q,  --quiet				minimize informational messages
  -s,  --symbolic			create a symbolic link, the default if SRC is a file
  -u,  --suppress			suppress error message if SRC does not exist
  -w,  --windows				create a link that is visable in Windows"
	exit $1
}

args()
{
	unset ask src link absolute hideLink hideTarget type list merge noPrompt windows symbolic suppress

	while (( $# != 0 )); do
		case "$1" in
			-a|--absolute) absolute="--absolute";;
			-hl|--hide|--hide-link) hideLink="true";;
			-ht|--hide-target) hideTarget="true";;
			-h|--hard) type="hard";;
			-j|--junction) type="junction";;
			-l|--list) list="true";;
			-m|--merge) merge="true";;
			-np|--no-prompt) noPrompt="true";;
			-q|--quiet) quiet="true";;
			-s|--symbolic) type="symbolic";;
			-u|--suppress) suppress="true";;
			-w|--windows) windows="true";;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				! IsOption "$1" && [[ ! $src ]] && { src="$1"; shift; continue; }
				! IsOption "$1" && [[ ! $link ]] && { link="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	ask="--ask"; [[ $noPrompt ]] && ask=""
	[[ ! $src ]] && MissingOperand "SRC"
	[[ ! "$list" && ! $link ]] && MissingOperand "LINK"
	args=("$@")
}

init() { :; }

run() 
{	
	args "$@"; init; 
	
	if [[ "$list" ]]; then
		[[ "$PLATFORM" != "win" || -d "$src" || (-f "$src" && -L "$src") ]] && { ls -al "$src"; return; }
		lnWin --list "$src"; return;
	fi

	# set absolute link path (needed for POSIX link)
	[[ ! $windows && $absolute ]] && link="$(GetFullPath "$link")"

	# set default link filename (needed for Windows link)
	[[ $windows && -f "$src" && -d "$link" ]] && link="$link/$(GetFileName "$src")"

	# merge link directory
	[[ $merge && -d "$link" && ! -h "$link" ]] && { MergeDir --parents --rename "$link" "$src" || return; }
	[[ $merge && ! -d "$src" ]] && { mkdir "$src" || return; }

	# SRC does not exist
	if [[ ! -e "$src" ]]; then
		[[ $suppress ]] && return 0
		EchoErr "MakeLink: cannot access \`$src\`: No such file or directory"
		return 1
	fi

	# set default type
	[[ ! $type ]] && { [[ -f "$src" ]] && type="symbolic" || type="junction"; }
	[[ "$type" == "symbolic" ]] && symbolic="--symbolic"

	# LINK exists
	[[ -h "$link" ]] && { HideLink || return; HideTarget || return; return; }
	[[ -d "$link" ]] && { [[ ! $quiet ]] && echo "MakeLink: \"$link\" already exists"; DelDir $ask "$link" || return; }
	[[ -f "$link" ]] && { [[ ! $quiet ]] && echo "MakeLink: \"$link\" already exists"; DelFile $ask "$link" || return; }

	# determine if the windows path is a remote UNC
	if [[ "$PLATFORM" == "win" ]]; then
		local winLink="$(utw "$link")"
		local winSrc="$(utw "$src")"
		local unc=""; [[ $winLink =~ .*\\\\.* || $winSrc =~ .*\\\\.* ]] && unc="true"
	fi

	# create a Windows specific link
	if [[ "$PLATFORM" == "win" && ! $unc ]] && [[ $windows || "$type" == "junction" ]]; then	
		local ln=( lnWin.exe $absolute )

		[[ "$type" == "symbolic" ]] && ! IsElevated && { EchoErr "Elevation is required for Windows symbolic links"; return 1; }

		case "$type" in
			junction) start "${ln[@]}" --junction "$winLink" "$winSrc";; # link is the first argument for junctions
			hard|symbolic) start "${ln[@]}" $symbolic "$winSrc" "$winLink";;
		esac

	# create a regular link
	else
		[[ -d "$src" ]] && symbolic="--symbolic"
		${G}ln $symbolic "$src" "$link" || return
	fi

	HideLink || return
	HideTarget || return
}

HideTarget()
{
	[[ ! $hideTarget || "$PLATFORM" != "win" ]] && return 0
	attrib "$link" /L +s +h +r || return
}

HideLink()
{
	[[ ! $hideLink || "$PLATFORM" != "win" ]] && return 0

	# POSIX links must have the system attribute
	local system="+s";	[[ $windows || "$type" == "junction" ]] && system=""

	attrib "$link" /L +h $system || return 
}

run "$@"
