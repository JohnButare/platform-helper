#!/usr/bin/env bash
. script.sh || exit
. color.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... SRC DEST
Synchronize the source and destination directories.

	-di, --dest-id  	destination unique identifier
	-do, --dest-older	assume the destination files are older
	-e, --exist				source and destination directories must exist, otherwise exit silently
	-nb, --no-bak			do not back up replaced files
	-nm, --no-mode		do not preserve file mode
	-p, --protocol	 	$(ScriptOptNetworkProtocolUsage)
	-r, --recursive		synchronize subdirectories
	-si, --src-id  		source unique identifier
	-so, --src-older	assume the source files are older
	-v, --verbose			show additional status
	-x, --exclude			one or more files or directories to skip"
	exit $1
}

init()
{
	defaultCommand="sync"
	lastSyncSuffix="sync.txt"
}

argStart() { unset -v dest destId dir exist method noBak noMode protocol recursive src srcId uncArgs x; }

opt()
{
	case "$1" in
		--destid|--destid=*|-di|-di=*) ScriptOptGet "destId" "$@";;
		--dest-older|-do) method="--dest-older";;
		--exist|-e) exist="--exist";;
		--no-bak|-nb) noBak="--no-bak";;
		--no-mode|-nm) noMode="--no-mode";;
		--protocol|--protocol=*|-p|-p*) ScriptOptNetworkProtocol "$@"; [[ $protocol ]] && uncArgs+=(--protocol "$protocol");;
		--recursive|-r) recursive="--recursive";;
		--srcid|--srcid=*|-si|-si=*)  ScriptOptGet "srcId" "$@";;
		--src-older|--src-older=*|-so|-so=*) method="--src-older";;
		--exclude|-x) while [[ $2 ]] && ! IsOption "$2"; do x+=("$2"); shift; (( shift++ )); done;;
		*) return 1;;
	esac
}

syncArgStart() { unset -v src dest; }

syncArgs()
{
	ScriptArgGet "src" -- "$@"; shift
	ScriptArgGet "dest" -- "$@"; shift
}

syncCommand()
{
	x+=( ".*$lastSyncSuffix" )
	sync "$(RemoveTrailingSlash "$src")" "$(RemoveTrailingSlash "$dest")"
}

#
# helper
#

desc() { FileToDesc "$1"; }
showFileDetail() { local message="$1" file="$2"; hilight "$message: $(GetFileName "$file")" && stat "$file"; }

sync()
{
	local src="$1" dest="$2"

	# src or dest directory is excluded
	{ IsInArray --array-wild -- "${src##*/}" x || IsInArray --array-wild -- "${dest##*/}" x; } && return

	# logging - check verboseLevel to avoid expensive calls to desc if not logging
	if (( verboseLevel > 1 )); then
		header "SyncDir: $(GetFileName "$src")"
		EchoErr "src=$src ($srcId)"
		EchoErr "dest=$dest ($destId)"
	fi

	# mount and validate src and dest directories
	IsUncPath "$src" && { src="$(unc mount "$src" "${uncArgs[@]}")" || { EchoErr "Unable to mount $(desc "$src")"; return 1; }; }
	IsUncPath "$dest" && { dest="$(unc mount "$dest" "${uncArgs[@]}")" || { EchoErr "Unable to mount $(desc "$dest")"; return 1; }; }

	[[ $exist && (! -d "$src" && ! -d "$dest") ]] && return 0

	if [[ ! -d "$src" && ! -d "$dest" ]]; then
		echo; ScriptErr "source directory '$(desc "$src")' and destination directory '$(desc "$dest")' do not exist"; return 1
	fi

	# determine last sync times
	local lastSyncSrcFile="$src/.${destId}_${lastSyncSuffix}"
	local lastSyncDestFile="$dest/.${srcId}_${lastSyncSuffix}"

	getLastSync || return

	# sync
	if [[ ! -d "$src" ]]; then
			case "${method##--}" in
				dest-older) deleteMissingDir --quiet "$dest";;
				src-older) copyMissingDir "$dest" "$src";;
				*) syncMissingDir "$dest" "$src";;
			esac || return		
	elif [[ ! -d "$dest" ]]; then
			case "${method##--}" in
				dest-older) copyMissingDir "$src" "$dest";;
				src-older) deleteMissingDir --quiet "$src";;
				*) syncMissingDir "$src" "$dest";;
			esac || return		
	else
		syncDo "$src" "$dest" || return
	fi

	setLastSync || return
}

# syncDo SRC DEST - syncronize directories
syncDo()
{
	local src="$1" dest="$2"
	local srcFiles destFiles srcIndex=0 destIndex=0 lastSrcIndex lastDestIndex
	local ignoreMs convertTime srcLine destLine srcFile destFile srcOnlyFiles destOnlyFiles

	# get file list
	getFileList srcFiles "$src"; getFileList destFiles "$dest"
	{ [[ ! $verbose ]] || (( verboseLevel == 1 )); } && printf "."

	# evaluate file lists
	lastSrcIndex="${#srcFiles[@]}"; lastDestIndex="${#destFiles[@]}"

	while (( srcIndex<lastSrcIndex || destIndex<lastDestIndex )); do
		srcLine="${srcFiles[$srcIndex]}" destLine="${destFiles[destIndex]}"

		# lines same - quick check
		if [[ "$srcLine" == "$destLine" ]]; then
			(( ++srcIndex, ++destIndex ))
			continue;
		fi

		# lines different
		srcFile="${srcLine%	*	*}"; destFile="${destLine%	*	*}"

		# same file in source and destination
		if [[ "$srcFile" == "$destFile" ]]; then
			! IsInArray --array-wild -- "$srcFile" x && { syncFile "$src/$srcFile" "$dest/$destFile" || return; }
			(( ++srcIndex, ++destIndex ))

		# file only in source
		elif [[ $srcFile && ( "$destFile" == "" || "$srcFile" < "$destFile" ) ]]; then
			! IsInArray --array-wild -- "$srcFile" x && srcOnlyFiles+=("$srcFile")
			(( ++srcIndex ))

		# file only in destination
		elif [[ "$srcFile" == "" || "$destFile" < "$srcFile" ]]; then
			! IsInArray --array-wild -- "$destFile" x && destOnlyFiles+=("$destFile")
			(( ++destIndex ))
		
		fi
	done

	# handle files only in source or destination
	case "${method##--}" in
		dest-older)
			deleteFilesDir "$dest" "" "${destOnlyFiles[@]}" || return
			copyFilesDir "$src" "$dest" "" "${srcOnlyFiles[@]}" || return;;
		src-older)
			deleteFilesDir "$src" "" "${srcOnlyFiles[@]}" || return
			copyFilesDir "$dest" "$src" "" "${destOnlyFiles[@]}" || return;;
		*) 
			syncMissingFiles "$src" "$dest" ">" "${srcOnlyFiles[@]}" || return
			syncMissingFiles "$dest" "$src" "<" "${destOnlyFiles[@]}" || return
	esac

	[[ ! $recursive ]] && return

	# recurse into subdirectories
	local srcDirs destDirs dir

	getDirList srcDirs "$src"
	for dir in "${srcDirs[@]}"; do
		sync "$src/$dir" "$dest/$dir" || return
	done

	getDirList destDirs "$dest"
	for dir in "${destDirs[@]}"; do
		IsInArray -- "$dir" srcDirs && continue
		sync "$src/$dir" "$dest/$dir" || return
	done
}

syncFile()
{
	local src="$1" dest="$2" file; file="$(GetFileName "$src")"

	# get file information
	local srcSize srcAge destSize destAge
	IFS="	" read srcSize srcAge <<< "${srcLine#$srcFile	}"
	IFS="	" read destSize destAge <<< "${destLine#$destFile	}"
	[[ $convertTime ]] && { srcAge="$(GetSeconds "$srcAge")"; destAge="$(GetSeconds "$destAge")"; }
	(( verboseLevel > 1 )) && EchoErr "$(cat <<-EOF
		syncFile: file='$(GetFileName "$src")'
		  src: age='$srcAge' modified='$(ShowSimpleTime @$srcAge)'
		  dest: age='$destAge' modified='$(ShowSimpleTime @$destAge)'
		EOF
		)"

	# sync file times
	if (( srcSize == destSize )) && cmp --quiet "$src" "$dest"; then

		case "$method" in
			--dest-older) setFileTime "$dest" "$src";;
			--src-older) setFileTime "$src" "$dest";;
			*) syncFileTimes "$src" "$srcAge" "$dest" "$destAge";;
		esac
				
		return
	fi

	# replace file as instructed without a direction
	case "$method" in
		--dest-older) copyFileBak "$src" "$dest"; return;;
		--src-older) copyFileBak "$dest" "$src"; return;;
	esac

	# get older and newer file information
	local older="$dest" olderAge="$destAge" newer="$src" direction=">" otherDirection="<" srcStatus="newer" destStatus="older"
	CompareSeconds $destAge '>' $srcAge && older="$src" olderAge="$srcAge" newer="$dest" direction="<" otherDirection=">" srcStatus="older" destStatus="newer"

	# one file was changed after last sync - replace older file
	if [[ $lastSync ]] && CompareSeconds $olderAge '<=' $lastSync; then
		copyFileBak "$newer" "$older" "$direction"; return
	fi

	# both files changed after last sync - prompt
	local diff="diff"; InPath delta && { diff="delta --paging never"; (( $COLUMNS > 150 )) && diff+=" --side-by-side"; }
	$diff "$older" "$newer"
	echo

	echo "src $srcStatus: $(ShowSimpleTime "@$srcAge") ($srcSize bytes)"
	echo "dest $destStatus: $(ShowSimpleTime "@$destAge") ($destSize bytes)"

	local defaultChoice=3
	case "$(GetFileExtension "$src")" in
		dll|exe|com) defaultChoice=3;; 	# ReplaceOlder
		*) defaultChoice=1;; 						# EditBoth
	esac

	while true; do
		ask ' (1) Edit (2) Delete (3) Replace older (4) Replace newer' -vr 1234 -dr $defaultChoice

		case $(( $?+1 )) in

		  1) # edit
				merge --wait "$older" "$newer" #  merge return values vary, Beyond Compare return 1 for "Binary Same" on all platforms except mac
		    if ! cmp --quiet "$older" "$newer"; then
		    	echo "$(GetFileName "$src") is still diferent"
	    		continue
	  		fi
	  		setFileTimesNow "$src" "$dest" || return
	  		;;

		  2) deleteFiles "$src" "$dest"; return;;
			3) copyFileBak "$newer" "$older" "$direction"; return;;
	  	4) copyFileBak "$older" "$newer" "$otherDirection"; return;;
		esac
		return
	done
}

# bakFiles FILE... - move a file to the local backup directory
bakFiles() { [[ $noBak ]] && return; bak "$@" --local --quiet "${globalArgsLessVerbose[@]}"; }

copyMissingDir()
{
	local src="$1" dest="$2"
	local finalSrcDir="$(GetFileName "$(RemoveTrailingSlash "$src")")"

	echo "$finalSrcDir..."
	CopyDir "$src" "$dest" $recursive "${globalArgsLessVerbose[@]}" || return

	# correct file times - for SMB some modification times will not be correct after the directory copy
	local method="--dest-older"; syncDo "$src" "$dest" --dest-older
}

deleteMissingDir() 
{ 
	local ask="--ask"; [[ "$1" == "--quiet" ]] && { unset ask; shift; } 
	local dir="$1"
	
	DelDir $ask "$dir" "${globalArgs[@]}"
}

# copyFileDo SRC DEST [DIRECTION]
copyFileDo()
{
	local src="$1" dest="$2" direction="$3"

	# log
	{ [[ ! $verbose ]] || (( verboseLevel == 1 )); } && printf "${direction}$(GetFileName "$src")..."
	
	# copy
	local args=();

	# preserve argument
	local preserve="timestamps" 
	[[ ! $noMode ]] && preserve+=",mode" 
	IsPlatform win && preserve=""
	[[ $preserve ]] && args+=(--preserve="$preserve")

	# copy
	RunLog2 ${G}cp "${args[@]}" --force "$src" "$dest" || return

	# touch - cp --preserve does not set file time in SMB > 1
	local copyFile="true"; setFileTime "$dest" "$src"
}

# copyFileBak SRC DEST [DIRECTION]
copyFileBak() { bakFiles "$2" && copyFileDo "$@"; }

# copyFilesDir SRC DEST DIRECTION FILE... - copy files from the source to the destination directiroes
copyFilesDir()
{
	local src="$1" dest="$2" direction="$3"; shift 3
	local files=("$@")

	for file in "${files[@]}"; do
		copyFileDo "$src/$file" "$dest/$file" "$direction" || return
	done
}

# deleteFiles FILE...
deleteFiles() {	bakFiles "$@" && rm -f "$@"; }

# deleteFilesDir DIR FILE...
deleteFilesDir()
{
	local dir="$1" direction="$2"; shift 2
	local desc files=("$@")
	
	for file in "${files[@]}"; do
		bakFiles "$dir/$file" || return
		printf "$(GetFileName "${direction}$file") (removed)..."
		rm -f "$dir/$file" || return
	done
}

getDirList() 
{ 
	IFS=$'\n' read -d '' -r -a $1 < <(\
		${G}find "$2" -maxdepth 1 -type d,l -printf "%f\n" | tail -n +2 | RemoveEmptyLines | sort); 
}

# getFileList() - get files, each file attributes requested individually, very slow over WebDAV, timestamp in milliseconds
getFileList() 
{
	local result="$1" 
	local dir="$(EnsureDir "$2")" # add trailing / to get contents of symbolic links
	local lines

 	IFS=$'\n' read -d '' -r -a lines < <(\
 		${G}find "$dir" -maxdepth 1 -type f -not -iname ".*$lastSyncSuffix" -printf "%f\t%s\t%T@\n" | sort); 

 	# always ignore ms - ignore thrash
	ignoreMs="true"

	# check if we should ignore millisconds (not present for nas)
	if [[ ! $ignoreMs ]]; then
		local ms="${lines[0]##*.}${lines[1]##*.}${lines[2]##*.}${lines[3]##*.}"
		[[ "$ms" == *(0) ]] && ignoreMs="true"
	fi

	for (( i = 0; i < ${#lines[@]}; i++ )); do
		[[ $ignoreMs ]] && line="${lines[$i]%.*}" || line="${lines[$i]}"
		printf -v $result[$i] -- "$line"
	done
}

getLastSync()
{
	lastSync=0

	if [[ -f "$lastSyncSrcFile" ]]; then
		# Call GetSeconds to ensure we have a valid timestamp
		lastSync="$(GetSeconds "$(<"$lastSyncSrcFile")" 2> /dev/null)"
		[[ ! $lastSync ]] && lastSync=0
	fi

	# printf 'lastSync="%s" (%s)\n' "$(ShowTime "@$lastSync")" "$lastSync"
	return 0
}

# promptForFiles OPERATION DESCRIPTION FUNCTION [FUNCTIOPN_ARGS...]
promptForFiles()
{
	local operation="$1" desc="$2"; shift 2
	local result items status="on"

	[[ "$operation" == "delete" ]] && status="off"

	for file in "${files[@]}"; do
		items+=( "$file" "" "$status" )
	done

	result=$(dialog --stdout --title "Synchronizing Files" \
		--backtitle "$desc" \
  	--checklist "Choose files to $operation:" $(($LINES-5)) 50 $(($LINES)) -- "${items[@]}")
	clear

	eval results=( $result )
	(( ${#results[@]} == 0 )) && return

	# operate on selected files
	"$@" "${results[@]}" || return

	# remove selected results from the files to process
	ArrayRemove files "${results[@]}"
}

setLastSync() 
{
	[[ ! -d "$src" || ! -d "$dest" ]] && return 0
	
	local hide newSync=$(GetSeconds) hideFile

	IsPlatform win && [[ ! -f "$lastSyncSrcFile" ]] && hide="true"

	{ echo "@$newSync" >& "$lastSyncSrcFile"; } >& /dev/null || { rm -f "$lastSyncSrcFile"; echo "@$newSync" > "$lastSyncSrcFile" || return; }
	{ echo "@$newSync" >& "$lastSyncDestFile"; } >& /dev/null || { rm -f "$lastSyncDestFile"; echo "@$newSync" > "$lastSyncDestFile" || return; }

	if IsPlatform win && [[ $hide ]]; then
		FileHide "$lastSyncSrcFile" || return;
		FileHide "$lastSyncDestFile" || return;
	fi

	# cleanup sync files older than 30 days
	find "$src" -name ".*$lastSyncSuffix" -mtime +30 -type f -delete
	find "$dest" -name ".*$lastSyncSuffix" -mtime +30 -type f -delete

	return 0
}

# syncTime FILE REFERENCE_FILE [DIRECTION] - make the last modification time of file the same as the reference file
setFileTime()
{
	local file="$1" ref="$2" direction="$3"
	IsPlatform wsl1 && return # WSL 1 does not support setting file time

	# reference file modification time
	local refMod; refMod="$(GetFileMod "$ref")" || return
	local refModSeconds; refModSeconds="$(GetFileModSeconds "$ref")" || return
	(( verboseLevel > 4 )) && showFileDetail "setFileTime: reference" "$ref"
	(( verboseLevel > 1 )) && echo -e "refMod='$refMod'\nrefModSeconds='$refModSeconds'"

	# validate reference file modification time 
	# - must not be beyond 60 seconds of current time
	local future checkSeconds="$(( $(${G}date "+%s") + 60 ))" # Bash cannot use fractional seconds
	if (( refModSeconds > checkSeconds)); then
		setFileTimesNow "$file" "$ref" || return
		refMod="$(GetFileMod "$ref")" || return
		refModSeconds="$(GetFileModSeconds "$ref")"
		future=" ${RED}future${RESET}"
		log1 "${RED}Reference file modification time is to far in the future${RESET}"
	fi

	# set modification time	
	local fileMod="$(GetFileMod "$file")" || return
	local fileModSeconds; fileModSeconds="$(GetFileModSeconds "$file")" || return
	while true; do
		
		# log
		if [[ ! $copyFile && ! $verbose ]]; then echo -n "${direction}$(GetFileName "$file") (time$future)..."
		elif (( verboseLevel == 1 )); then echo -n "${direction}$(GetFileName "$file") (file='$(ShowSimpleTime "$fileMod")' reference='$(ShowSimpleTime "$refMod")'$future)..."
		elif (( verboseLevel > 1 )); then
			local color="$RED"; [[ $copyFile ]] && unset color
			(( verboseLevel > 4 )) && showFileDetail "setFileTime: target" "$file"
			EchoErr "fileModSeconds=$fileModSeconds (${color}off by $(( refModSeconds - fileModSeconds ))${RESET})"
		fi
		unset copyFile

		# update and check
		RunLog5 ${G}touch "$file" --time=mtime --date "$refMod" || return
		sleep 1.5 # for SMB first touch does not take, takes time to read correct value
		fileModSeconds="$(GetFileModSeconds "$file")" || return
		[[ "$fileModSeconds" == "$refModSeconds" ]] && break
	done
}

# syncFileTimes SRC SRC_AGE DEST DEST_AGE - synronize file times to the newer file
syncFileTimes()
{
	local src="$1" srcAge="$2" dest="$3" destAge="$4"

	if CompareSeconds "$srcAge" '>' "$destAge"; then
		setFileTime "$dest" "$src" ">"
	else
		setFileTime "$src" "$dest" "<"
	fi
}

# setFileTimesNow FILES - set all file times to the current time
setFileTimesNow()
{
	IsPlatform wsl1 && return # WSL 1 does not support setting file time
	local now="$(GetSeconds)"; ${G}touch "$@" --date "@$now" || return
}

syncMissingDir()
{
	local src="$1" dest="$2"

	echo "Directory $(desc "$dest") does not exist"
	ask "Do you want to (d)elete or (c)opy directory '$(desc "$src")?'" -vr dc -dr c
	if [[ $? == 0 ]]; then
		deleteMissingDir "$src"
	else
		copyMissingDir "$src" "$dest"
	fi

}

otherDirection() { [[ "$1" == ">" ]] && echo "<" || echo ">"; }

syncMissingFiles()
{
	local src="$1" dest="$2" direction="$3"; shift 3
	local files=("$@")

	[[ ! $files ]] && return 0

	while (( ${#files[@]} != 0 )); do
		printf "\n\nSync files only in '$(desc "$src")' directory: "
		ArrayShow files

		ask '  (1) Copy All (2) Delete All (3) Copy Some (4) Delete Some' -vr 1234 -dr 1

		case $(( $? + 1 )) in
			1) copyFilesDir "$src" "$dest" "$direction" "${files[@]}" || return; unset files;;
		 	2) deleteFilesDir "$src" "$(otherDirection "$direction")" "${files[@]}" || return; unset files;;
			3) promptForFiles "copy" "Synchronizing files from $src to $dest" "copyFilesDir" "$src" "$dest" "$direction" || return;;
			4) promptForFiles "delete" "Deleting files from $src" "deleteFiles" "$src" "$direction" || return;;
		esac

	done
}

ScriptRun "$@"
