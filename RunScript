#!/usr/bin/env bash

# run - run a shell script (or executable)
# - find function.sh even if it is not in the PATH (useful for initial startup or non-login shells)
# - simplify pausing the script (useful when running elevated in Windows, i.e. elevate RunScript --pause-error service start WpnUserService_5f5dbe)
#
# --multiple		allow multiple commands, i.e. "sudo run.sh 'ls; pause'", use where can't use bash -c
# --pause				pause after the command is run, useful for transitory windows
# --pause-error	pause after the command is run with an error, useful for transitory windows

# critical functions (in case we cannot source function.sh)
EchoErr() { echo "$@" > /dev/stderr; }
pause() { local response; read -n 1 -s -p "${*-Press any key when ready...}"; echo; }

# source function.sh - find it in the path, the current directory, the script directory, the /usr/local/bin
f="$(type -P "function.sh")"
if [[ "$?" != "0" ]]; then
	f="$PWD/function.shA"
	[[ ! -f "$f" ]] && f="${BASH_SOURCE[0]%/*}/function.sh"
	[[ ! -f "$f" ]] && f="/usr/local/data/bin/function.sh"
	[[ ! -f "$f" ]] && { EchoErr "Unable to find function.sh"; pause; exit 1; }
fi
. "$f" || { EchoErr "Unexpected error sourcing function.sh"; pause; exit 1; }

# arguments
multiple=""; [[ "$1" == "--multiple" ]] && { multiple="true"; shift; } 
pause=""; [[ "$1" == "--pause" ]] && { pause="true"; shift; }
pauseError=""; [[ "$1" == "--pause-error" ]] && { pauseError="true"; shift; }

# run the passed program 
[[ $multiple ]] && eval "$@" || "$@"; result="$?"
[[ "$pause" || ( $pauseError && "$result" != "0" ) ]] && pause

exit $result
