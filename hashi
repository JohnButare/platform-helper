#!/usr/bin/env bash
. function.sh || exit
. bootstrap-config.sh || exit

run() {	init && args "$@" && ${command}Command "${args[@]}"; }

init() { :; }

usage()
{
	echot "\
usage: $(ScriptName)
	install consul|nomad 				if no hosts are specified use hosts from bootstrap-config.sh
		-c, --clients	HOSTS				comma separated list of clients to install
		-dc, --datacenter					name of the data center
		-j, --join HOSTS					comma separated list of hosts to join to, defaults to specified servers
		-s, --server HOSTS				comma separated list of servers to install
	remove consul|nomad"
	exit ${1:-1}
}

args()
{
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-h|--help) usage 0;;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; command="${1,,}"; shift; continue; }
				! IsOption "$1" && [[ "$command" == @(install|remove) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { usage; }

	args=("$@")
}

#
# Install Command
#

installCommand()
{
	local clients=() command datacenter="$workgroup" servers=() join=()

	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-c|--client) [[ ! $2 ]] && usage 0; shift; StringToArray "$1" "," clients;;
			-dc|--datacenter) datacenter="$1";;
			-j|--join) [[ ! $2 ]] && usage 0; shift; StringToArray "$1" "," join;;
			-s|--servers) [[ ! $2 ]] && usage 0; shift; StringToArray "$1" "," servers;;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckSubCommand "install" "$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { usage; }

	# defaults
	[[ ! $clients && ! $servers ]] && { clients=( "${hashiClients[@]}" ) servers=( "${hashiServers[@]}" ); }
	[[ ! $join ]] && join=( "${servers[@]}" )
	[[ ! $join ]] && join=( "${hashiServers[@]}" )

	initInstall || return
	$command || return
}

initInstall()
{
	user="$systemUser" # requires passwordless sudo permission
	common=( --user "$user" ) # --show

	consul=( --datacenter "$datacenter" --client "0.0.0.0" --bind "{{ GetInterfaceIP \"eth0\" }}" )
	consulServer=( --server --bootstrap-expect="${#servers[@]}" --advertise "{{ GetInterfaceIP \"eth0\" }}" )
	for host in "${join[@]}"; do consul+=( --retry-join="$host" ); done

	nomad=( --datacenter "$datacenter" --client "0.0.0.0" )
	nomadServer=( --server --bootstrap-expect="${#servers[@]}" --advertise "{{ GetInterfaceIP \"eth0\" }}" )
}

installConsulCommand()
{ 
	for host in "${servers[@]}"; do
		hilight "Installing consul server on $host..."
		hashi-up consul install --ip "$(GetIpAddress "$host")" "${common[@]}" "${consul[@]}" "${consulServer[@]}" || return
	done

	for host in "${clients[@]}"; do
		hilight "Installing consul client on $host..."
		hashi-up consul install --ip "$(GetIpAddress "$host")" "${common[@]}" "${consul[@]}" || return
	done
}

installNomadCommand()
{
	for host in "${servers[@]}"; do
		hilight "Installing nomad server on $host..."
		hashi-up nomad install --ip "$(GetIpAddress "$host")" "${common[@]}" "${nomad[@]}" "${nomadServer[@]}" || return
	done

	for host in "${clients[@]}"; do
		hilight "Installing nomad client on $host..."
		hashi-up nomad install --ip "$(GetIpAddress "$host")" "${common[@]}" "${nomad[@]} --client" || return
	done
}

installVaultCommand()
{
	local name="vault"
	local user="$name" config="/etc/$name.d" data="/opt/$name"
	local configFile="$config/$name.hcl" serviceFile="/etc/systemd/system/$name.service"

	! InPath "$name" && { inst "$name" || return; }

	# allow memory locking without elevation (so don't need to run as root)
	sudoc setcap cap_ipc_lock=+ep "$(FindInPath "$name")" || return

	# make directories
	[[ ! -d "$config" ]] && { sudo mkdir "$config" || return; }
	[[ ! -d "$data" ]] && { sudo mkdir "$data" || return; }

	# setup vault user	
	if ! getent passwd "$user" >& /dev/null; then
		sudo useradd -r -d "/etc/$user.d" -s "/bin/false" "$user" || return
		sudo install -o "$user" -g "$user" -m 750 -d "$config" || return
		sudo install -o "$user" -g "$user" -m 750 -d "$data" || return
	fi

	# configuration file
	if [[ ! -f "$configFile" ]]; then
		cat << EOF | sudo tee "$configFile" || return
storage "raft" {
  path    = "$data"
}

listener "tcp" {
  address     = "0.0.0.0:8200"
  tls_disable = 0
}

api_addr = "http://0.0.0.0:8200"
cluster_addr = "https://$HOSTNAME:8201"
ui = true
EOF

		sudo chown "$user" "$configFile" || return
		sudo chmod 640 "$configFile" || return
	fi

	# service
	if [[ ! -f "$serviceFile" ]]; then
		cat << EOF | sudo tee "$serviceFile" || return
[Unit]
Description="HashiCorp Vault"
Documentation=https://www.vaultproject.io/
Wants=network-online.target
After=network-online.target
ConditionFileNotEmpty=$configFile

[Service]
User=$user
Group=$user
ExecReload=/bin/kill -HUP 
ExecStart=$(FindInPath "$name") server -config=$config
KillMode=process
KillSignal=SIGINT
LimitNOFILE=infinity
LimitNPROC=infinity
Restart=on-failure
RestartSec=2
StartLimitBurst=3
StartLimitIntervalSec=10
TasksMax=infinity

[Install]
WantedBy=multi-user.target
EOF
		sudo systemctl daemon-reload || return
		service auto "$name" || return
		service start "$name" || return
	fi
}

#
# Remove Command
#

removeCommand()
{
	local command; CheckSubCommand remove "$1"; shift
	[[ $# != 0 ]] && UnknownOption "$1"
	$command "$@"
}

removeConsulCommand()
{
	service exists consul && { service delete consul || return; }
	sudo rm -fr "/etc/consul.d" || return
	sudo rm -fr "/opt/consul" || return
	sudo rm -f "/usr/local/bin/consul" || return
}

removeNomadCommand()
{
	service exists nomad && { service delete nomad || return; }
	sudo rm -fr "/etc/nomad.d" || return
	sudo rm -fr "/opt/nomad" || return
	sudo rm -f "/usr/local/bin/nomad" || return
}


#
# helper
#

run "$@"
