#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [add|check|cleanup|debug|environment|start|status](show)
Control the SSH agent."
	exit $1
}

init()
{
	! InPath "ssh-agent" && { EchoErr "The ssh-agent is not installed"; return 1; }
	defaultCommand="check"
	sshDir="$HOME/.ssh"
	environmentFile="$sshDir/environment"
	passwordUsage="	-p, --password=PASSWORD 	password to unlock SSH keys"
}

#
# commands
#

environmentUsage() { echot "Usage: $(ScriptName) environment [exists]\nReturn the SSH agent environment in a format suitable for sourcing."; }
environmentCommand() { environment; }
environmentExistsCommand() { environmentExists; }

environmentExists() { [[ -f "$environmentFile" ]]; }

environment()
{
	! environmentExists && { ScriptErrQuiet "the ssh-agent environment file '$environmentFile' does not exist"; return 1; }
	cat "$environmentFile"
}

#
# add command
#

addUsage() { echot "Usage: $(ScriptName) add\nAdd keys to the SSH agent.\n\n$passwordUsage"; }
addArgStart() { passwordArgStart; }
addOpt() { passwordOpt; }
addCommand() { checkAgent && addKeys "$password"; }

# addKeys PASSWORD - add all keys to the ssh-agent using the password
addKeys()
{
	local password="$1" 
	local output="/dev/null"; [[ ! $quiet ]] && output="/dev/stdout"

	log1 "add: adding keys to the SSH agent"

	# return if there are already keys loaded
	(( $(keyCount) > 0 )) && [[ ! $force ]] && { log1 "add: the SSH agent already has $(keyCount) keys"; return 0; }

	# get the password from the credential store if possible
	if [[ ! $password ]] && credential --quiet exists ssh default "${globalArgs[@]}"; then
		log1 "add: getting the password from the credential store"
		password="$(RunLog credential get ssh default "${globalArgs[@]}")" || return
	fi

	# use passh to supply the password
	if [[ $password ]] && InPath passh; then
		log1 "add: running ssh-add with passh"
		passh -p "$password" -P "Enter passphrase for" ssh-add >& "$quietOutput"

	# use expect to supply the password
	elif [[ $password ]] && InPath expect; then
		log1 "add: running ssh-add with expect"
		expect <<-EOF >& "$quietOutput"
			spawn ssh-add
 			expect "Enter passphrase"
 			send "$password\r"
  		expect eof
		EOF

	# uses SSH_ASKPASS - fails when called as root using sudor
	elif [[ $password ]]; then
		log1 "add: running ssh-add with SSH_ASKPASS=SshCredential"
		DISPLAY=1 SSH_ASKPASS="SshCredential" ssh-add < /dev/null >& "$quietOutput"

	# password from prompt
	elif IsStdIn; then
		log1 "add: running ssh-add"
		ssh-add >& "$quietOutput"

	# failure - no password and no way to prompt
	else
		ScriptErrQuiet "a terminal is required to read the password"
		return 1
	fi

	local result="$?"
	(( result != 0 )) && { ScriptErrQuiet "unable to add identities for '$USER' to the SSH agent"; return 1; }
	EchoQuiet "$(keyCount) identities were added to the SSH agent"
}

#
# check command
#

checkUsage() { echot "Usage: $(ScriptName) check [keys]\nCheck for proper operation of the SSH agent."; }
checkCommand() { checkAgent && statusCommand; }

checkKeysUsage() { echot "Usage: $(ScriptName) check keys\nCheck for existense of a valid identiy key file."; }
checkKeysCommand() { local d="$sshDir"; FileExistsAny "$d/id_rsa" "$d/id_dsa" "$d/id_ecdsa" "$d/id_ed25519"; }

checkAgent()
{
	log1 "check: checking the SSH agent $(description)"

	# save the existing environment variables
	local oldAuthSock="$SSH_AUTH_SOCK" oldAgentPid="$SSH_AGENT_PID"

	# check if the environment variables were set - not an error
	if [[ ! $SSH_AUTH_SOCK || ! $SSH_AGENT_PID ]]; then
		log1 "check: the environment variables are not set (SSH_AUTH_SOCK='$SSH_AUTH_SOCK' SSH_AGENT_PID='$SSH_AGENT_PID')"
	fi

	# check if the environment file exists
	if ! environmentExists; then
		log1 "check: the environment file '$environmentFile' does not exist"
		return 1
	fi

	# load the environment variables
	if ! . "$environmentFile"; then
		log1 "check: error sourcing the SSH agent environment file '$environmentFile'"
		return 1
	fi

	# check if the environment variables match the file - not an error
	if [[ $oldAuthSock && $oldAgentPid ]] && [[ "$SSH_AUTH_SOCK" != "$oldAuthSock" || "$SSH_AGENT_PID" != "$oldAgentPid" ]]; then
		log1 "check: the environment variables do not match the environment file '$environmentFile'\n" \
			"	environment: SSH_AUTH_SOCK='$oldAuthSock' SSH_AGENT_PID='$oldAgentPid'\n" \
			"	       file: SSH_AUTH_SOCK='$SSH_AUTH_SOCK' SSH_AGENT_PID='$SSH_AGENT_PID'"
	fi

	# check if the socket exists
	if [[ ! -S "$SSH_AUTH_SOCK" ]]; then
		log1 "the SSH agent socket ($SSH_AUTH_SOCK) is not valid"
		return 1
	fi

	# check if the agent is running
	if ! ProcessIdExists "$SSH_AGENT_PID"; then
		log1 "the SSH agent socket process ($SSH_AGENT_PID) is not running"
		return 1
	fi

	# logging
	log1 "check: the SSH agent $(description) has $(keyStatus)"
}

#
# cleanup command
#

cleanupUsage() { echot "Usage: $(ScriptName) cleanup\nCleanup the SSH agent processes and files."; }
cleanupCommand() { cleanupAgent; }

cleanupAgent()
{
	log1 "cleaning up the SSH agent"

	# kill ssh-agent process	
	ProcessKill ssh-agent &> /dev/null

	# clenup SSH socket directory - the socket file must be in a directory that begins with ssh- to prevent accidental deletion
	local dir="$(GetFilePath "$SSH_AUTH_SOCK")"
	[[ "$(GetFileName "$dir")" =~ ^ssh- && -d "$dir" ]] && rm -fr "$dir"

	# cleanup environment file
	[[ -f "$environmentFile" ]] && rm -f "$environmentFile"

	return 0
}

#
# debug command
#

debugCommand()
{
	hilight "status..."
	statusCommand || return

	hilight "\nconfiguration..."
	echo "SSH_AGENT_PID='$SSH_AGENT_PID'"
	echo "SSH_AUTH_SOCK='$SSH_AUTH_SOCK'"
	find "$SSH_AUTH_SOCK" -type s | sudo xargs --no-run-if-empty fuser

	hilight "\nprocesses..."
	ps -aux | grep "ssh-agent" | grep -v "grep"
}

#
# start command
#

startUsage() { echot "Usage: $(ScriptName) start\nStart the SSH agent.\n\n$passwordUsage"; }
startArgStart() { passwordArgStart; }
startOpt() { passwordOpt; }
startCommand() { startAgent "$password"; }

startAgent()
{
	local password="$1"

	# check for SSH agent keys
	! checkKeysCommand && { ScriptErrQuiet "no SSH keys found in '$HOME/.ssh'"; return 1; }

	# check the SSH agent and add keys if it is OK
	[[ ! $force ]] && { checkAgent && addKeys && return; }

	# there is an issue, so cleanup the SSH agent
	cleanupAgent || return

	# start the SSH Agent
	startDo || return

	# add the keys to the SSH Agent
	! addKeys && { ScriptErrQuiet "unable to add identities for '$USER' to the SSH agent"; return 1; }

	return 0
}

startDo()
{
	# start the ssh-agent
	local return; ssh-agent | sgrep -Ev "^(echo|#echo)" > "$environmentFile"; return="$?"
	(( return != 0 )) && { ScriptErr "unable to start the ssh-agent (error $returned)"; return 1; }
	
	# validate the environment file
	[[ ! -f "$environmentFile" ]] && { ScriptErr "unable to create the SSH sgent environment file '$environmentFile'"; return 1; }
	chmod 600 "$environmentFile" || return

	# source the environment file
	! . "$environmentFile" && { ScriptErr "unable to source the SSH sgent environment file '$environmentFile'"; return 1; }

	return 0
}

#
# status command
#

statusUsage() { echot "Usage: $(ScriptName) show\n.Show the status of the the SSH agent"; }

statusCommand()
{
	! checkAgent && { ScriptErrQuiet "the SSH agent $(description) is not working properly"; return 1; }
	[[ $quiet ]] && return
	PrintErr "the SSH agent $(description) is working properly and has $(keyStatus)"
	[[ $verbose ]] && ssh-add -L
	return 0
}

#
# helper
#

description() { echo "for '$USER' on '$HOSTNAME'"; }
keyCount() { local count; count="$(ssh-add -L |& wc -l | RemoveSpace)" && echo "$count" || echo "0"; }

keyStatus()
{
	if (( $(keyCount) == 0 )); then
		echo "no identities loaded"
	else
		echo "$(keyCount) identities loaded"
	fi
}

passwordArgStart() { unset -v password; }

passwordOpt()
{
	case "$1" in
		-p|--password|-p=*|--password=*) ScriptOptGet password "$@";;
		*) return 1;;
	esac
}

ScriptRun "$@"
