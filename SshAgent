#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [check|cleanup|environment|show|start](show)
Control the SSH Agent."
	exit $1
}

init()
{
	defaultCommand="check"
	sshDir="$HOME/.ssh"
	environmentFile="$sshDir/environment"
}

checkUsage() { echot "Usage: $(ScriptName) cleanup\nCheck for proper operation of the SSH Agent."; }

checkCommand()
{
	if [[ ! -f "$environmentFile" ]]; then
		[[ $verbose ]] && EchoErr "SshAgent: the environment file '$environmentFile' does not exist on $HOSTNAME"
		return 1
	fi

	if [[ ! $SSH_AUTH_SOCK || ! $SSH_AGENT_PID ]]; then
		[[ $verbose ]] && EchoErr "SshAgent: the environment was not loaded on $HOSTNAME"
	fi
	
	local oldAuthSock="$SSH_AUTH_SOCK" oldAgentPid="$SSH_AGENT_PID"

	if ! . "$environmentFile"; then
		[[ $verbose ]] && EchoErr "SshAgent: unable to read the SSH Agent configuration file $f on $HOSTNAME"
		return 1
	fi

	if [[ "$SSH_AUTH_SOCK" != "${oldAuthSock:-$SSH_AUTH_SOCK}" || "$SSH_AGENT_PID" != "${sshAgentPid:-$SSH_AGENT_PID}" ]]; then
		[[ $verbose ]] && EchoErr "SshAgent: the environment was not correct on $HOSTNAME"
	fi

	if [[ ! -S "$SSH_AUTH_SOCK" ]]; then
		[[ $verbose ]] && EchoErr "SshAgent: the ssh agent socket ($SSH_AUTH_SOCK) is not valid on $HOSTNAME"
		return 1
	fi

	if ! ProcessIdExists "$SSH_AGENT_PID"; then
		[[ $verbose ]] && EchoErr "SshAgent: the ssh agent socket process ($SSH_AGENT_PID) is not running on $HOSTNAME"
		return 1
	fi

	if ! ssh-add -L >& /dev/null; then
		[[ $verbose ]] && EchoErr "SshAgent: no identities are loaded in the SSH Agent on $HOSTNAME"
		return 1
	fi

	[[ ! $quiet ]] && echo "The SSH Agent is working properly on $HOSTNAME and contains $(ssh-add -L | wc -l) identities"

	return 0
}

checkKeysUsage() { echot "Usage: $(ScriptName) check keys\nCheck for existense of a valid identiy key file."; }
checkKeysCommand() { local d="$sshDir"; FileExistsAny "$d/id_rsa" "$d/id_dsa" "$d/id_ecdsa" "$d/id_ed25519"; }

cleanupUsage() { echot "Usage: $(ScriptName) cleanup\nCleanup the SSH Agent processes and files."; }
cleanupCommand()
{
	# ssh-agent process
	ProcessKill ssh-agent &> /dev/null

	# SSH socket directory - the socket file must be in a directory that begins with ssh- to prevent accidental deletion
	local dir="$(GetFilePath "$SSH_AUTH_SOCK")"
	[[ "$(GetFileName "$dir")" =~ ^ssh- && -d "$dir" ]] && rm -fr "$dir"

	# environment file
	[[ -f "$environmentFile" ]] && rm -f "$environmentFile"

	return 0
}

environmentUsage() { echot "Usage: $(ScriptName) environment\nReturn the SSH Agent environment in a format suitable for sourcing."; }
environmentCommand() { [[ -f "$environmentFile" ]] && cat "$environmentFile"; }

showUsage() { echot "Usage: $(ScriptName) show\n.Show the keys in the SSH Agent."; }
showCommand() 
{	
	verbose="true" checkCommand || return
	ssh-add -L
}

startUsage() { echot "Usage: $(ScriptName) show\n.Start the SSH Agent."; }
startCommand()
{
	local result output="/dev/null"; [[ ! $quiet ]] && output="/dev/stdout"

	if ! checkKeysCommand; then
		[[ ! $quiet ]] && EchoErr "SshAgent: no identities exist on $HOSTNAME"
		return 1
	fi

	[[ ! $force ]] && { checkCommand && return; }
	cleanupCommand || return

	# start the SSH Agent
	ssh-agent | grep -Ev "^(echo|#echo)" > "$environmentFile"
	[[ ! -f "$environmentFile" ]] && { EchoErr "SshAgent: unable to run the SSH Agent"; return 1; }
	chmod 600 "$environmentFile" || return
	. "$environmentFile" || { EchoErr "SshAgent: unable to read the SSH Agent configuration file $f"; return 1; }

	# add the keys to the SSH Agent
	if credential -q exists ssh default; then
		# pass prompts for the GPP key and does not work properly if called from ssh-add, so call it outside of ssh-add first
		[[ "$(credential type)" == "Pass" ]] && { credential get ssh default >& /dev/null || return; }
		DISPLAY=1 SSH_ASKPASS="SshCredential" ssh-add < /dev/null >& "$output"
	else
		ssh-add >& "$output"
	fi
	result="$?"

	if [[ $result == 0 ]]; then
		[[ ! $quiet ]] && echo "$(ssh-add -L | wc -l) identities have been added to the SSH agent"
	else
		EchoErr "SshAgent: unable to add identity for $USER to the SSH agent"
	fi

	return $result
}

ScriptRun "$@"
