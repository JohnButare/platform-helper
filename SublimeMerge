#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage() { ScriptUsage "$1" "Usage: $(ScriptName) [OPTION]... [close|IsInstalled|IsRunning|program|profile|restart|start|startup|version](start)\n$(ScriptName) commands."; }
init() { defaultCommand="start"; }
argStart() { unset -v alternate; }

opt()
{
	case "$1" in
		-a|--alternate) alternate="--alternate";;
		*) return 1;;
	esac
}

argEnd()
{
	profileName="SublimeMerge"
	profileFilters="*"
	title=".* - Sublime Merge"

	# find program
	case "$PLATFORM_OS" in
		linux)
			profileDir="$UADATA/sublime_merge"
			program="$P/sublime_merge/sublime_merge"
			programRunning="$program"
			;;

		mac)
			profileDir="$UADATA/Sublime Merge"
			program="$P/Sublime Merge.app/Contents/SharedSupport/bin/smerge"
			programRunning="sublime_merge"
			;;

		win)
			profileDir="$UADATA/../Roaming/Sublime Merge"
			local prefix="$P"; [[ ! -f "$prefix/Sublime Merge/smerge.exe" ]] && prefix="$UADATA"
			program="$prefix/Sublime Merge/smerge.exe"
			programRunning="$prefix/Sublime Merge/sublime_merge.exe"
			;;
	esac
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -f "$program" ]]; }
isRunningCommand() { IsProcessRunning "$programRunning"; }
programCommand() { AppInstallCheck && echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startupArgs() { files=(); }
startupCommand() { startCommand; }
versionCommand() { AppInstallCheck && "$program" -v | RemoveCarriageReturn | awk '{print $NF}'; } # remove Windows carriage return

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	profile $noPrompt --app "$profileName" --method "$profileDir" --files "*"  --no-control "${profileArgs[@]}" || return

	if [[ "${profileArgs[0]}" == "restore" ]]; then
		# https://packagecontrol.io/docs/syncing
		rm -fr "$profileDir/Installed Packages" || return
		rm -fr "$profileDir/Packages/"!("User") || return
	fi

	return 0
}

#
# Start Command
#

startArgStart() { unset -v newWindow; }
startArgs() { files=( "$@" "${otherArgs[@]}" ); shift="$#"; }
startCommand() { AppInstallCheck && "$program" $newWindow "${args[@]}" "${files[@]}"; }

startOpt() 
{
	case "$1" in
		-n|--new-window) newWindow="--new-window";;
		*) return 1
	esac
}

ScriptRun "$@"
