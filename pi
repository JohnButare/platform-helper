#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script color || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) balena|firmware|image|info|power|version
Raspberry Pi helper commands"
}

init()
{
	piImage="platform/linux/Raspberry Pi/image"
	piOs="platform/linux/Raspberry Pi/Raspberry Pi OS"
	ubuntuImage="platform/linux/Ubuntu/image"
}

#
# commands
#

balenaCommand() { elevate "$PUSER/balena-etcher/balenaEtcher.exe"; }
powerCommand() { ! sudoc dmesg --time-format ctime | grep -i volt; } # check for under voltage in the log
versionCommand() { :; }

#
# firmware commands
#

firmwareUsage()
{
	ScriptUsageEcho "\
usage: pi firmware apply|channel|configure|dir|edit|info|update
	Raspberry Pi firmware commands.  '$firmwareDir' is linked to the firmware repository in '$repoDir/firmware-NNNN', where NNNN is 2711 (Model 4), or 2712 (Model 5).

	channel		firmware channel commands
	dir				return firmware directory
	info			show firmware information
	update		update firmware
	vars			return firmware variables"
}

firmwareVarsCommand() { ScriptReturn "firmwareDir" "repoDir"; }

firmwareArgStart()
{
	unset -v file;
	onlyPi || return
	channelFile="/etc/default/rpi-eeprom-update"
	firmwareDir="/lib/firmware/raspberrypi/bootloader"
	repoDir="/opt/rpi-eeprom"
}

firmwareCommand() { usage; }
firmwareDirCommand() { echo "$firmwareDir"; }

firmwareInfoUsage() { ScriptUsageEcho "usage: pi firmware info\nRaspberry Pi firmware information, use --verbose for more detail."; }

firmwareInfoCommand()
{
	firmwareRepoUpdate || return

	# update status
	[[ $verbose ]] && header "Update Status"
	rpiEepromUpdate || return
	[[ ! $verbose ]] && return

	# channel configuration
	[[ -f "$channelFile" ]] && { header "Update Channel"; cat "$channelFile"; }

	header "Bootloader Version"
	sudoc vcgencmd bootloader_version | RemoveEmptyLines || return
	
	header "Bootloader Configurationn"
	sudo vcgencmd bootloader_config | RemoveEmptyLines || return
}

rpiEepromUpdate() { sudoc CM4_ENABLE_RPI_EEPROM_UPDATE=1 rpi-eeprom-update; }

#
# firmware channel commands
#

firmwareChannelUsage() { ScriptUsageEcho "usage: pi firmware channel [get|set](get)\nRaspberry Pi firmware channel commands."; }
firmwareChannelCommand() { firmwareChannelGetCommand; }
firmwareChannelGetCommand() { firmwareChannelGet; }

firmwareChannelSetUsage() { ScriptUsageEcho "usage: pi firmware channel set beta|stable|critical\nRaspberry Pi firmware channel commands."; }

firmwareChannelSetCommand() { usage; }
firmwareChannelSetBetaCommand() { firmwareChannelSet "beta"; }
firmwareChannelSetStableCommand() { firmwareChannelSet "stable"; }
firmwareChannelSetCriticalCommand() { firmwareChannelSet "critical"; }

firmwareChannelCheck() { [[ "$(firmwareChannelGet)" == "$1" ]]; }
firmwareChannelGet() { ${G}grep "FIRMWARE_RELEASE_STATUS" "$channelFile" | cut -d"=" -f2 | RemoveQuotes; }

firmwareChannelSet()
{
	local channel="$1"
	firmwareChannelCheck "$channel" && return
	sudoc sed -i "s/^FIRMWARE_RELEASE_STATUS=.*/FIRMWARE_RELEASE_STATUS=\"$channel\"/" "$channelFile" || return
	firmwareChannelCheck "$channel" && return
	ScriptErr "unable to set firmware channel to '$channel'"
}

#
# firmware repo commands
#

firmwareRepoUsage() { ScriptUsageEcho "usage: pi firmware repo check|clean|create|update|validate\nRaspberry Pi firmware repository commands."; }
firmwareRepoCommand() { usage; }
firmwareRepoCheckCommand() { firmwareRepoCheck; }
firmwareRepoCleanCommand() { firmwareRepoClean; }
firmwareRepoCreateCommand() { firmwareRepoCreate; }
firmwareRepoUpdateCommand() { firmwareRepoUpdate; }
firmwareRepoValidateCommand() { firmwareRepoValidate; }

firmwareRepoCheck() { [[ -d "$repoDir" ]]; }
firmwareRepoValidate() { firmwareRepoCheck || ScriptErr "the Raspberry Pi firmware repository does not exist at '$repoDir', use 'pi firmware repo create' to create it"; }
ResolveCtlValidate() { ResolveCtlCheck || ScriptErr "resolvectl status failed" "$1"; }

firmwareRepoCleanUsage() { ScriptUsageEcho "usage: pi firmware repo clean\nClean the firmware repository removing all custom changes, requires --force."; }

firmwareRepoClean()
{
	[[ ! $force ]] && { ScriptErr "to remove all custom firmware at '$repoDir', --force is required."; return 1; }
	firmwareRepoUpdate && sudo git reset --hard origin/master && sudo git clean -f
}

firmwareRepoUpdate()
{
	local update="pi-firmware-repo"

	# return if up to date
	[[ -d "$repoDir" ]] && [[ ! $force ]] && ! UpdateNeeded "$update" && return

	# update
	command cd "$repoDir" && sudoc git fetch && UpdateSet "$update"
}

firmwareRepoCreate()
{
	# return if the repository exists
	[[ ! $force ]] && firmwareRepoCheck && return

	# clone firmware repository
	[[ ! -d "$repoDir" ]] && { sudoc git clone "https://github.com/raspberrypi/rpi-eeprom" "$repoDir" || return; }

	# set repoDir as a safe directory
	! qgrep "directory = $repoDir" "$HOME/.gitconfig" && { git config --global --add safe.directory "$repoDir" || return; }

	# create bootloader-NNNN links
	# from firware bootloader directory: /lib/firmware/raspberrypi/bootloader-2711|2712
	# to firmware repository: /opt/rpi-eeprom/firmware-2711|2712
	local firmware
	for firmware in 2711 2712; do
		local link="$firmwareDir-$firmware"
		local dest="$repoDir/firmware-$firmware"
		[[ $force && -L "$link" ]] && { sudoc rm "$link" || return; }
		[[ -L "$link" ]] && continue
		[[ -d "$link" ]] && { sudoc rm -fr "$link.hold"; sudoc mv "$link" "$link.hold" || return; }
		[[ ! -d "$dest" ]] && { ScriptErr "the firmware directory '$firmware' does not exist"; return 1; }
		sudoc BashRun MakeLink --suppress "$dest" "$link" || return
	done

	# create /usr/bin links
	for file in config digest update; do
		local link="/usr/bin/rpi-eeprom-$file"
		local dest="$repoDir/rpi-eeprom-$file"
		[[ $force && -L "$link" ]] && { sudoc rm "$link" || return; }
		[[ -L "$link" ]] && continue
		[[ -f "$link" ]] && { sudoc rm -f "$link.hold"; sudoc mv "$link" "$link.hold" || return; }
		[[ ! -f "$dest" ]] && { ScriptErr "the firmware program '$dest' does not exist"; return 1; }
		sudoc BashRun MakeLink "$dest" "$link" || return
	done

	# create bootloader link - /lib/firmware/raspberrypi/bootloader to /opt/rpi-eeprom/firmware-NNNN (2711 2712)
	local link="$firmwareDir"
	[[ ! $force && -L "$link" ]] && return
	[[ -L "$link" ]] && { sudoc rm "$link" || return; }
		
	# backup the existing firmware directory
	[[ -d "$link" ]] && { sudoc rm -fr "$link.hold"; sudo mv "$link" "$link.hold" || return; }

	# get the firmware version for the model
	local version
	if IsPlatform pi4; then version=2711
	elif IsPlatform pi5; then version=2712
	else ScriptErr "no firmware for '$(pi info model)'"; return 1
	fi

	# validate the firmware directory
	local dest="$repoDir/firmware-$version"

	[[ ! -d "$dest" ]] && { ScriptErr "the firmware directory for '$model' does not exist"; return 1; }

	# create a link to the firmware directory
	sudoc BashRun MakeLink "$dest" "$link" || return
}

#
# firmware update commands
#

firmwareUpdateUsage()
{
	ScriptUsageEcho "\
usage: pi firmware update check|configure|edit|file|latest
	Raspberry Pi firmware update commands.

	check			check if the firmware is at the latest version
	configure	configure a firmware file
	edit			configure and apply the firmware
	file			apply firmware changes from a file
	latest		update the Raspberry Pi with the latests firmware"
}

firmwareUpdateCommand() { usage; }
firmwareUpdateEditCommand() { firmwareUpdateConfigureCommand "$@" && firmwareUpdateFileCommand; }
firmwareUpdateFileCommand() { firmwareGetFile "$@" && sudo rpi-eeprom-update -i -d -f "$file"; }

firmwareUpdateCheckCommand() { firmwareUpdateCheck; }

firmwareUpdateCheck()
{
	local status; status="$(rpiEepromUpdate)" || return
	local current; current="$(echo "$status" | ${G}grep "CURRENT:" | ${G}cut -d "(" -f 2 | ${G}cut -d ")" -f 1)"
	local latest; latest="$(echo "$status" | ${G}grep "LATEST:" | ${G}cut -d "(" -f 2 | ${G}cut -d ")" -f 1)"
	log1 "current=$current latest=$latest"
	[[ "$current" == "$latest" ]]
}

firmwareUpdateConfigureCommand()
{
	firmwareGetFile "$@" || return	
	local fileDesc="$(GetFileName "$file")"
	local newFile="$firmwareDir/new-config.bin"

	hilight "Backup existing configuration changes..."
	[[ -f "$config" ]] && { sudo bak --move "$config" || return; }

	hilight "Extracting configuration from the firmware file '$fileDesc'..."
	sudoc cp "$file" "$firmwareDir/current.bin" || return
	rpi-eeprom-config "$firmwareDir/current.bin" | sudo tee "$config" || return
	[[ ! -f "$config" || "$(cat "$config")" == "" ]] && { EchoErr "Unable to extract the firmware configuration from '$fileDesc'"; return 1; }
	sudo cp "$config" "$config.orig" || return

	hilight "Editing the configuration..."
	sudoedit "$config" || return
	diff "$config" "$config.orig" >& /dev/null && { ScriptErr "the configuration was not changed"; return 1; }

	hilightp "Creating the new firmware file '$(GetFileName "$newFile")'..."
	sudo rpi-eeprom-config --out "$newFile" --config "$config" "$firmwareDir/current.bin" || return
	hilight "done"

	return 0
}

firmwareUpdateLatestCommand()
{
	# return for CM4
	if IsPlatform cm4; then
		ScriptErr "CM4 requires alternate update method"; return 1
	fi

	# return if firmware is up to date
	[[ ! $force ]] && firmwareUpdateCheck && { [[ ! $quiet ]] && echo "Firmware is up to date"; return 0; }

	# update firmware
	sudoc rpi-eeprom-update -a -i && { ask "Reboot" && power reboot || return 0; }; 
}

# firmwareGetFile - return if file already set, sets file, dir, and config
firmwareGetFile()
{
	local FIRMWARE_RELEASE_STATUS; . "$channel" || return
	
	dir="$firmwareDir/$FIRMWARE_RELEASE_STATUS"
	config="$firmwareDir/bootconf.txt"

	[[ ! $file ]] && { file="$1"; shift; }
	[[ ! $file ]] && { file="$(dialog --title "Select Firmware" --stdout --fselect ""$dir/"" $(($LINES-12)) 100)"; clear; }
	[[ ! $file ]] && { MissingOperand "file"; return; }
	[[ ! -f "$file" ]] && { ScriptErr "firmware file '$file' does not exist.\nDid you press space to select it?"; return 1; }

	return 0
}

#
# info command
#

infoUsage()
{
	ScriptUsageEcho "\
usage: pi info firmware|mhz|model|temp
	Raspberry Pi information commands.

	mhz		current CPU clock speed in MHz"
}

infoCommand() { usage; }

infoFirmwareCommand()
{
	sudoc CM4_ENABLE_RPI_EEPROM_UPDATE=1 rpi-eeprom-update | grep "^[ ]*CURRENT" | head -1 | cut -d: -f2- | RemoveSpaceTrim
}

infoMhzCommand()
{
	local mhz; mhz="$(sudoc vcgencmd measure_clock arm | cut -d= -f 2)" || return
	echo "$((mhz / 1000000))"
}

infoTempCommand()
{
	onlyPi
	local temp=$(</sys/class/thermal/thermal_zone0/temp)
	echo "$((temp/1000))'C"
}

infoModelCommand()
{
	cat "/proc/cpuinfo" | grep "^Model" | cut -d":" -f 2 | RemoveTrim
}


#
# image commands
#

imageUsage()
{
	ScriptUsageEcho "\
usage: pi image backup|clone|configure|restore
	Raspberry Pi image commands.

	backup					create an image from this host
	clone  					create an image on a Rapsberry Pi using the Pi Clone GUI tool.
									This has a faster file copy.
	configure				configure a newly created operating system image
	restore	[IMAGE]	restore an image to a connected drive"
}

imageArgStart() { unset -v host; }

hostOpt() 
{
	case "$1" in
		--host|--host=*|-H|-H=*) ScriptOptGet host "$@" || return;;
		*) return 1
	esac
}

imageCommand() { usage; }

imageCloneCommand() 
{ 
	onlyPi || return;
	! InPath piclone && { package piclone || return; }
	coproc sudox dbus-launch piclone
}

#
# image backup command
#

imageBackupUsage()
{
	ScriptUsageEcho "\
Usage: $(ScriptName) image backup HOST
Create an OS image on the specified host.
- faster than using a local Micro-SD card
- faster compression (utilizes hosts processors)"
}

imageBackupArgs() { ScriptArgGet "host" -- "$@" && shift; }

imageBackupCommand()
{
	onlyPi || return

	# install required utilities
	! InPath pv && { package pv || return; }

	# check if host is available	
	HostAvailable "$host" || return

	# calculate backup drive size
	local device="mmcblk0" fileName="$HOSTNAME.$(GetDateStamp).img" 
	local size; size="$(drive size $device)" || return; [[ $size ]] && size="--size ${size,,}"

	# mount host directory
	hilight "Mounting $host directory..."
	ScriptEval HostGetInfo "$host" || return
	local dir; dir="$(unc mount "$_root/tmp" --protocol "$_protocol")" || return
	local file="$dir/$fileName"

	# backup
	hilight "Backing up $HOSTNAME..."
	sudo pv $size -tpreb "/dev/$device" | dd bs=4M > "$file" || return

	# compress
	hilight "Compressing backup file..."
	file="/tmp/$fileName"
 	ssh "$host" -t -- pv $size -tpreb "$file" \| xz -1 -z -T 0 - \> "$file.xz" || return

 	# copy compressed file to image directory
	local image="$(ssh oversoul -t -- FindInstallFile --quiet "$(QuoteSpaces "$piImage")")"
 	hilight "Copying $fileName to the install server..."
	ssh "$host" -t -- CopyDir "$file.xz" "$(QuoteSpaces "$image")/$fileName.xz" || return

 	# cleanup
 	ssh "$host" -t -- rm -f "/tmp/$fileName" "/tmp/$fileName.xz" "/mnt/c/temp/$fileName" || return
}

#
# image configure command
#

imageConfigureUsage()
{
	ScriptUsageEcho "\
Usage: $(ScriptName) image configure
Configure a newly created operating system image.
Currently, Raspberry Pi OS and Ubuntu are supported.

	-H, --host HOST		the name of the host, i.e. ubuntu-24.04-image"
}

imageConfigureOpt() { hostOpt "$@"; }

imageConfigureCommand()
{
	printf "configuring..."
	drive mount all || return
	local drive drives found; IFS=$'\n' ArrayMake drives "$(drive mounts)"
	for drive in "${drives[@]}"; do
		[[ ! -f "$drive/start.elf" ]] && continue
		printf "$(GetFileName "$drive")..."

		# cloud-init image - deploy user-data
		if [[ -f "$drive/user-data" ]]; then
			[[ ! $host ]] && { MissingOperand "host"; return; }

			printf "${RB_BLUE}cloud-init${RESET}..."
			cp "$DATA/setup/user-data" "$drive" || return
			${G}sed -i "s/^#hostname: HOST$/hostname: $host/" "$drive/user-data" || return

		# Raspberry Pi OS image - enable SSH			
		else
			printf "${RB_BLUE}Raspberry Pi OS${RESET}..."
			touch "$drive/ssh" || return
		fi
		
		found="true"
		break
	done

	echo "done" 

	drive unmount all || return

	[[ ! $found ]] && { ScriptErr "no boot images found"; return 1; }

	return 0
}

imageRestoreArgStart() { unset -v image; }
imageRestoreArgs() { ScriptArgGet "image" -- "$@" && shift; }

imageRestoreCommand()
{
	! IsElevated && { elevate RunScript --pause pi image restore "${originalArgs[@]}"; return; }

	# image aliases
	local selectDir="$piOs"
	case "$image" in
		image) unset image; selectDir="$piImage";;
		server|ubuntu-server) image="$(installFile "$ubuntuImage/ubuntu-20.04.1-preinstalled-server-arm64+raspi.img.xz")"
	esac

	# select the image from the selectDir
	if [[ ! $image ]]; then
		local imageDir="$(installFile "$selectDir")" || return
		image="$(dialog --title "Select image" --stdout --fselect "$imageDir/" $(($LINES-12)) 100)"
		clear
	fi
	
	# validate the image selected
	[[ ! $image ]] && { MissingOperand "image"; return; }
	[[ ! -f "$image" ]] && { ScriptErr "image '$image' does not exist"; return; }
	(( $# )) && usage 1

	if [[ -f "$P/balena-cli/balena.exe" ]]; then		
		#RunScript --pause --elevate -- "$P/balena-cli/balena.exe" local flash "$(utw "$image" | QuoteBackslashes)" --yes || return
		"$P/balena-cli/balena.exe" local flash "$(utw "$image")" --yes || return
	elif InPath flash; then
		flash "$image" || return
	else
		ScriptErr "no flash program found"; return 1
	fi

	# does not mount properly just after flash so try several times
	hilight 'configuring...'
	for (( i=1; i<=10; ++i )); do
		ImageConfigureCommand && return
		sleep 1
	done

	return 0
}

#
# helper
#

installFile() { FindInstallFile --quiet "$1"; }
onlyPi() { IsPlatform PiKernel && return; ScriptErr "command can only run on a Raspbery Pi"; return 1; }

ScriptRun "$@"
