#!/usr/bin/env bash
. function.sh || exit

TemplateInstall()
{
	! IsPlatform win && return
	printf "**************************************************\n* name\n**************************************************\n"
	run "Paragon/ExtFS/Paragon-608-PEU_WinInstallSN-4.3.852.msi" || return # http://www.paragon-drivers.com/extfs-windows/

	echo "Updating icons..."
	mergeDir "$pp/(dir)" "$ao" || return
	mergeDir "$pp/(dir)" "$pp/Development/Other" || return
	$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
	$rm "$pd/(prog).lnk" || return
}

TemplateAlias() { TemplateFullInstall; };
TemplateFullInstall()
{
	printf "**************************************************\n* name\n**************************************************\n"
	echot "- application information"

	# installs:
	local v="SnagIt V12.2.1." # http://www.techsmith.com/download/licenses/snagitupgrade.asp
	run "TechSmith/SnagIt/setup/$v" -p "win" "mac" "linux" || return

	local v="4.0.7.19761" # http://www.scootersoftware.com/beta.php
	run "Scooter Software/Beyond Compare/setup/" -p "BCompare-$v.exe" "BCompareOSX-$v.zip" "bcompare-$v_i386.deb" || return

	FindFile "Intel/Profile Manager/ProfileManager.xml" || return
	$cp	"$file" "$WINDIR/system32" || return
	$rc --mirror --quiet "$src" "$dest" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/(dir)" "$pp/Development/Other" || return
		mergeDir "$pp/(dir)" "$ao" || return
		$rm "$pd/(prog).lnk" || return
		mergeDir --rename "$pp/(dir)" "$ao/(new name)" || return
		makeDir "$pp/Operating System/bash" || return
		$makeShortcut "$installDir/bin/bash.exe" "$pp/Operating System/bash" "-" || return
	
	elif [[ "$PLATFORM" == "mac" ]]; then	
		$rm "$la\com.adobe.AAM.Updater-1.0.plist" || return
		$rm "$la\com.adobe.AdobeCreativeCloud.plist" || return
		$rm "$ula\com.adobe.AAM.Updater-1.0.plist" || return

	fi

	echo "Moving data folders..."
	makeLink --merge --hide "$udoc/code/web/sites" "$udoc/My Web Sites" || return

	echo "Updating registry..."	
	$registry delete "run/ErmTray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe 
	$registry import "$install/AutoHotKey/setup/other/AutoHotkey-64.reg" || return
	$registry set "HKCU/SOFTWARE/Foo/File" REG_EXPAND_SZ "$(utw "$file")" || return

	echo "Updating services..."
	service manual "Stereo Service"
	service manual "nvUpdatusService"

	echo "Updating firewall..."
	$firewall rule add "SSH" dir=in action=allow protocol=TCP localport=22 profile=private program="$(utw "$P/Cygwin/usr/sbin/sshd.exe")" || return

	echo "Creating directories..."
	makeDir "$_userDocuments/code/test"

	sublime profile restore default || return

	echot "\
- configure"
	app start
}

usage()
{
	echot "\
usage: install cd|install APP*
	Install programs
	-h,  --hint DIR				first directory to search for installation files
	-ie, --ignore-errors 	ignore errors for multiple installs
  -nf, --no-run					do not find or run the installation program
  -nrp,--no-run-prompt	do not ask to run the executable
  -s,  --select				  select the install location"
	exit $1
}

args()
{
	unset command apps host ignoreErrors noElevate noRun noRunPrompt select
	originalArgs=( "$@" ) 
	while [ "$1" != "" ]; do
		case "$1" in
			--no-elevate|-ne) noElevate="true";;
			--no-run|-nr) noRun="true";;
			--no-run-prompt|-nrp) noRunPrompt="true";;
			--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			--hint|-h) hint=( --hint "$2" ); export INSTALL_DIR="$2"; shift;;
			--ignore-errors|-ie) ignoreErrors="true";;
			--select|-s) select="--select";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; } # command
				! IsOption "$1" && { apps+=( "$1" ); shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='install'
	[[ "$command" == "cd" && ${#apps[@]} != 0 ]] && UnknownOption "${apps[0]}"
	[[ "$command" == "apps" && ${#apps[@]} == 0 ]] && MissingOperand "APPS"
	args=("$@")
}

cdCommand()
{
	FindFile || return
	echo "$file"
}

installCommand()
{
	InstallInit || return
	InstallApps "${apps[@]}" || return
}

i() {	InstallApps "$@"; }
InstallApps()
{
	local prompt; { (( $# > 1 )) || [[ $noRunPrompt ]]; } && prompt="true"
	while (($# != 0 )); do
		app="$1"; shift
		if [[ ! $prompt ]] || ask "\nInstall $app"; then
			installFunction="$(GetInstallFunction)" || { EchoErr "inst: $app installation does not exist"; return 1; }
			$installFunction || { [[ $ignoreErrors ]] && pause || return; }
		fi
	done
	return 0
}

GetInstallFunction()
{
	declare -f | egrep -i "^${app} \(\) $|^${app}Install \(\) $" | sed "s/ () //" # Similar to GetFunction
	return ${PIPESTATUS[1]}
}

InstallInit() 
{
	ScriptEval HostFindInfo -d || return
	ScriptEval intel SetProxy || return

	serverPrograms="$pp/Development"; [[ $server ]] && serverPrograms="$pp/Server";
	oo="$pp/Operating System/Other"

	local test #="echo "
	cp="${test}FileCommand cp"
	firewall="${test}firewall --suppress"
	hide="${test}FileCommand hide"
	hideAndSystem="${test}FileCommand HideAndSystem"
	makeDir() { ${test}${G}mkdir --parents "$@"; }
	makeDirOwner() { sudo mkdir --parents "$@" || return; sudo chown $USER "$@" || return; }
	makeLink() { ${test}MakeLink --suppress "$@"; }
	makeShortcut="${test}MakeShortcut"
	mergeDir() { ${test}MergeDir --parents --suppress "$@"; }
	mv="${test}FileCommand mv"
	rc="${test}CopyDir"
	registry="${test}registry"
	ren="${test}FileCommand ren"
	rm="${test}${G}rm -f"
	rmd="${test}${G}rm -fr"
	sudo="sudo"; IsPlatform cygwin && sudo=""
	
	[[ "$PLATFORM" == "win" ]] && alias apt-get="apt-cyg"
	[[ "$PLATFORM" == "mac" ]] && alias apt-get="brew"
	
	netShareOptions=/grant:Everyone,full
	setupFiles="$_data/setup"
}

run() # run EXE [OPTIONS...]
{
	local p="$1" i; shift

	[[ ! $p ]] && { EchoErr "inst: executable was not specified"; return 1; }

	if [[ "$1" == @(-p|--platform) ]]; then
		shift
		case "$PLATFORM" in win) i=1;; mac) i=2;; linux) i=3;; esac
		[[ ! ${!i} ]] && { EchoErr "inst: $p not available on $PLATFORM"; return 1; }
		p="$p${!i}"
		shift; shift; shift;
	fi
	
	[[ $noRun ]] && return;
	FindFile "$p" || { ask "Continue the installation"; return; }
	RunProgram "$file" "$@" || return
}

RunProgram()
{
	local p="$1"; shift
	local standard; [[ "$1" == @(--standard) ]] && { standard="--standard"; shift; }
	local pause; [[ "$1" == @(--pause) ]] && { pause="--pause"; shift; }
	
	local pDesc="$1"
	local pParts; StringToArray "$p" "/" pParts
	[[ ! $pDesc ]] && { pDesc="$(IFS=/; echo "${pParts[*]: -3}")"; }
	[[ ! $pDesc ]] && pDesc="$p"

	[[ $noRunPrompt ]] && echo "Runing $pDesc..." || { ask "Do you want to run $pDesc" || return 0; }	

	local pExt; GetFileExtension "$p" pExt

	[[ "$(GetWord "$p" 0 :)" == @(ism) ]] && pExt="ism"

 	[[ "$pExt" == @(air|iso|ism|msu|vsix|xpi) ]] && pause="--pause"

 	[[ "$PLATFORM" == "win" ]] && export SEE_MASK_NOZONECHECKS=1 # disable Open File Secirity Warning

	case "$pExt" in
		bat|cmd) cmd /c "$p" "$@" || return;;
		deb) sudo gdebi "$p" "$@";;
		dmg) RunDmg "$p" "$@" || return;;
	  ism) start --minimize cmd /c start "$p";;
		iso|img) iso mount "$p"; echo "If needed run the setup program manually..."; pause="--pause";;
		msi) start --elevate --wait msiexec.exe /i "$p" "$@";;
		pkg) sudo installer -pkg "$p" -target /;;
		zip|7z|gz|tar|xpi|ear|jar|war) RunZip "$p" "$@" || return;;
		*) "$p" "$@" || return;;
	esac
	
	[[ $pause || $standard ]] && pause "When the installation has finished press any key..."
	
	case "$pExt" in
		iso) iso dismount "$p" || return
	esac	
}

RunDeb()
{
	EchoErr "Not Implemented"
	return 1
}

RunDmg()
{
	local result

	DoRunDmg "$@"
	result=$?
	DmgCleanup

	return $result
}

DoRunDmg()
{
	local p="$1"; shift
	hdiutil mount "$p" -mountpoint /Volumes/install -quiet || { EchoErr "inst: unable to mount \"$p\""; return 1; }

	echo "Installing...."
	if [[ -f "/Volumes/install/Install.mpkg" ]]; then
		sudo installer -pkg "/Volumes/install/Install.mpkg" -target /
	else
		shopt -s  nullglob; local app=(/Volumes/install/*.app);  
		[[ ! "$app" ]] && { EchoErr "inst: \"$p\" does not contain an application"; return 1; }
		local dir; GetFileName "$app" dir || return
		[[ -d "/Applications/$dir" ]] && return 0
		sudo acp --recursive --progress-bar "$app" /Applications
	fi

	echo "Updating Spotlight..."
	mdimport "/Applications/$dir" || return
}

DmgCleanup() { hdiutil detach /Volumes/install -quiet || return; }

RunZip()
{
	local p="$1"; shift

	if [[ "$PLATFORM" == "mac" ]]; then
		local dir="$(zipinfo -1 "$p" | head -1)"
		if [[ "$dir" =~ ^.*app/$ ]]; then
			[[ -d "/Applications/$dir" ]] && return 0
			unzip "$p" -d "/Applications"; return
		fi
	fi

	local installDir; PrepareInstallDir "$@" || return	

	7z.exe x -o"$(utw "$installDir")" "$(utw "$p")" || return

	# If the archive contains a single directory move the contents of that directory up
	if [[ "$(DirCount "$installDir")" == 1 ]]; then
		for dir in "$installDir"/*; do
			if [[ -d "$dir" ]]; then
				MoveAll "$dir" "$installDir" || return
				break
			fi
		done
	fi
}

PrepareInstallDir()
{
	installDir="$1"; shift;
	[[ ! $installDir ]] && { EchoErr "inst: installation directory was not specified"; return 1; }

	if [[ -d "$installDir" ]]; then
		ask "Do you want to delete the existing installation in \"$(GetFileNameWithoutExtension "$installDir")\"" -dr n || return
		$rmd "$installDir" || return
	fi

	makeDir "$installDir" || return
}

FindEditorProgram()
{
	args="" program=""
	sublime IsInstalled && { program="sublime" args="-w -n"; return; }
	program="$(GetTextEditor)"
}

FindCompareProgram()
{
	args="" name="" program=""	
	BeyondCompare IsInstalled && { name="bc" program="BeyondCompare"; return; }
	InPath kompare && { name="kompare" program="kompare"; return; }
	[[ -f "$P32/KDiff3/kdiff3.exe" ]] && { name="kdiff3" program="$P32/KDiff3/kdiff3.exe"; return; }
	return 1
}

FindFile()
{
	local pattern; file="$1"

	( IsUrl "$file" || [[ "$(GetWord "$file" 0 :)" == @(ism) ]] ) && return 0

	if IsWild "$file"; then
		GetFileName "$file" pattern || return
		GetFilePath "$file" file || return
	fi

	if ! ScriptEval FindInstallFile $select --suppress --eval "${hint[@]}" "$file"; then
		EchoErr "inst: could not locate ${1:-the installation directory}"
		return 1
	fi

	hint=( --hint "$InstallDir" ); export INSTALL_DIR="$InstallDir"
	[[ $pattern ]] && { SelectFile "$file" "$pattern" || return; }
	return 0
}

SelectFile() # DIR PATTERN
{
	local dir="$1" pattern="$2" result items

	pushd "$dir" > /dev/null || return
	
	for f in $pattern; do items+=( "$f" "" ); done

	result=$(dialog --stdout --backtitle "Select File" \
  	--menu "Choose file to install:" $(($LINES-5)) 50 $(($LINES)) "${items[@]}")
	clear

	[[ ! $result ]] && { EchoErr "inst: a file was not selected"; return 1; }

	file="$dir/$result"
	popd > /dev/null
}

#
# bootstrap - initial setup on a fresh operating system
#

bootstrap()
{
	printf "**************************************************\n* Bootstrap\n**************************************************\n"

	i bash || return
	RunPlatform bootstrap || return
	appCore || return
}

bootstrapUbuntu()
{
	[[ -f gsettings ]] && { gsettings set org.gnome.desktop.session idle-delay 0 || return; } # do not blank screen
	return 0
}

bootstrapDebian() 
{
	local server="nas1"

	echo "Installing programs..."
	if ! InPath lolcat > /dev/null; then
		package unzip zip || return										# compression
		package nautilus || return										# file
		package fonts-inconsolata || return						# fonts
		package gnome-system-monitor || return				# monitoring
		package dnsutils etherwake || return					# network	
		package terminator tmux || return							# terminal
		package cowsay lolcat || return 							# text
		package lynx || return 												# web
		package ssh-askpass x11-apps xterm || return 	# other
	fi

	# package management
	if ! InPath synaptic && ask 'Install package management systems (synaptic is large)'; then
		package gdebi-core synaptic || return
	fi

	# text editors
	if ! InPath geany && ask 'Install text editors (gedit, geany)'; then
		package geany gedit || return
	fi

	# file sharing
	if ! IsPlatform win && ask 'Setup file sharing'; then
		sudo apt-get -y upgrade samba || return
		sudo smbpasswd -a $USER || return
		
		echo "[root]
path = /
valid users = $USER
read only = no" | sudo tee -a /etc/samba/smb.conf || return

		sudo service smbd restart || return
	fi

	echo "Configuring..."
	DbusSetup || return

	echo "Creating directories..."
	makeDirOwner "$PUB" || return
	
	return 0
}

bootstrapDsm()
{
	sudo ipkg install adduser coreutils file man-pages nano openssh file xterm xft || return
 	sudo chmod u+s /bin/ping || return # fix ping: socket: Operation not permitted
 	sudo chmod u+s /bin/mount.cifs || return
}

bootstrapMac()
{
	if ask "Install brew"; then
		ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)" || return
		brew doctor || return
		brew update || return
	fi

	ask "Install brew packages" && 
		{ brew install bash cask coreutils findutils git fping nmap dialog exiftool wget wakeonlan || return; }

	ask "Update path" && { sudo bash -c 'echo "/usr/local/data/bin
/usr/local/data/platform/mac
/usr/local/sbin" > /etc/paths.d/wiggin' || return; }

	if ask "Disable dock"; then
		defaults write com.apple.dashboard mcx-disabled -boolean true || return
		killall Dock || return
	fi	
}

bootstrapCygwin() { i cygwin || return; }

bootstrapWsl()
{
	sudo chmod u+s /usr/bin/touch || return # network touch requires sudo permission in wsl
	#$makeShortcut "wsl.exe" "$psm/Programs/Startup/startup" "$(utw "$BIN/startup")" "" "$(utw "$PUB/Documents/data/icons/Command Prompt.ico")" || return
	$registry set "run/startup" REG_EXPAND_SZ "%windir%\system32\wsl.exe $BIN/run.sh startup" || return
	return 0
}

bootstrapWin()
{
	echo "Home directory..."
	makeLink --symbolic "$WIN_HOME/Desktop" "$HOME/Desktop" || return
	makeLink --symbolic "$WIN_HOME/Downloads" "$HOME/Downloads" || return

	echo "Core Windows programs..."
	i console HiddenStart || return

	echo "Start menu..."
	ElevatePause GrantFullPermission "$psm" || return

	echo "Other Windows programs..."
	i WindowsSetup SysInternals || return
}

#
# core programs
#

AppCore()
{
	local browser="chrome firefox BrowserHomePage"

	printf "**************************************************\n* Core Applications\n**************************************************\n"

	echo "Installing platform applications..."
	RunPlatform App || return

	echo "Installing $HOSTNAME hardware..."
	case "$HOSTNAME" in
		oversoul|ultron) i nVidia GigabyteMotherboard IntelUtilities || return;;
	esac

	echo "Installing $USER applications ..."
	case "${USER#ad_}" in
		jjbutare) i AltTabTerminator AutoHotKey AquaSnap BeyondCompare CloseAllWindows notepadpp StandardNotes sublime || return;;
	esac

	echo 'Installing applications...'
	i SshCore python ruby xServer || return
	IsPlatform ubuntu,mac,win && { i $browser DropBox GreenShot SevenZip || return; }

	echo "Installing $HOSTNAME applications..."
	case "$HOSTNAME" in
		bean) i office duet ParallelsDesktop || return;;
		pi*) i nodejs homebridge NodeRed || return;;
		oversoul) i discord iCloud office Quicken todoist thunderbird VmwareWorkstation || return;;
		ultron) i office || return;;
	esac
}

AppRaspbian() 
{ 
	! InPath gpio && { package wiringpi || return; }
	sudo adduser $USER gpio || return
}

DevCore()
{
	printf "**************************************************\n* Development Core\n**************************************************\n"
	
	echo "Creating directories..."
	makeDir "$udoc/code/test" || return
	makeDirOwner "$CODE" || return
	makeDir "$CODE/test" || return
	
	if IsPlatform win; then
		makeDir "$pp/Development/Other" || return
		makeDir "$up/Development/Other" || return
		$makeShortcut "$CODE" "$pp/Development/Code" || return
		makeLink --merge --hide "$udoc/code/web/sites" "$udoc/My Web Sites" || return

		ask "\nInstall SQL Development core" && { i iis SqlServerManagementStudio SqlPrompt SqlServer || return; }
		ask "\nInstall .NET Development core" && { DevDotNetCore || return; }
		ask "\nInstall JAVA Development core" && { DevJavaCore || return; }
		ask "\nInstall Web Development core" && { DevWebCore || return; }
	fi

	return 0
}

DevDotNetCore() 
{
	printf "**************************************************\n* .NET Development Core\n**************************************************\n"

	echo "Creating directories..."
	makeDir "$pp/Development/DotNet/Other"

	echo "Installing Applications..."	
	i VisualStudio ReSharper || return

	if ask "Install optional applications"; then
	 	i NUnitConsole LinqPad || return
	 fi
}

DevJavaCore()
{
	printf "**************************************************\n* JAVA Development Core\n**************************************************\n"

	local java="$pp/Development/Java/Other"
	makeDir "$java" || return
}

DevWebCore()
{
	printf "**************************************************\n* Web Development Core\n**************************************************\n"

	i chrome nodejs || return

	ScriptEval intel SetProxy || return
	gem install compass || return	
	npm install -g yo bower grunt grunt-cli || return
}

GameCore()
{
	printf "**************************************************\n* Game Core\n**************************************************\n"

	echo "Creating directories..."
	makeDir "$pp/Game/Other" || return

	i CorsairUtilityEngine EpicGames oculus Steam Uplay GameIcons
}

GitCore()
{		
	RunPlatform git
	IsPlatform win && { git config --system core.filemode false || return; } # posix permissions do not work well on windows file systems
	ask 'Clone bin' && { GitHelper bin || return; }
	return 0
}

MediaCore()
{
	printf "**************************************************\n* Media Core\n**************************************************\n"

	echo "Creating directories..."
	makeDir "$pp/Media/Other" || return
	
	echo "Updating icons..."
	$makeShortcut "$DATA/platform/win/gspot.exe" "$pp/Media/GSpot" || return
	$makeShortcut "$DATA/platform/win/InstalledCodec.exe" "$pp/Media/Installed Codecs"  || return
	$makeShortcut "$DATA/platform/win/DSFMgr.exe" "$pp/Media/DirectShow Filter Manager" || return

	ask 'Install book programs' && { i calibre calibre2opds kindle || return; }
	ask 'Install image programs' && { i picasa FastStoneImageViewer IrfanView || return; }
	ask 'Install music programs' && { i sonos iTunes plex tidal MusicBee || return; }
	ask 'Install video programs' && { i vlc || return; }
}

PiCore()
{
	printf "**************************************************\n* Raspberry Pi Core\n**************************************************\n"

 	i etcher firefox || return;
}

SshCore()
{
	printf "**************************************************\n* SSH - Secure Shell\n**************************************************\n"

	i WinScp SshServer || return;	
}

SurveillanceCore()
{
	echo "Creating directories..."
	makeDir "$pp/Surveillance/Other" || return

	i AmcrestCamera SurveillanceStation || return	

	return 0
}

TravelCore()
{
	printf "**************************************************\n* Travel Core\n**************************************************\n"
	i garmin sena GoPro dji
}

UtilityCore()
{
	printf "**************************************************\n* Utility Core\n**************************************************\n"
 
 	Utility${PLATFORM^} || return
	ask 'Install disk programs' && { i CleanMyPc DiskImager diskInventortyX LinkShellExtension ParagonExtFs PartitionAssistant TeraCopy ToDoBackup TrueImage || return; }
	ask 'Install encryption programs' && { i AxCrypt || return; }
	ask 'Install hardware programs' &&  { i BrotherPrinter DasKeyboard DoxieGo EpsonScan LabelMaker LgMonitor LogitechOptions EpsonScan PowerPanel || return; }
	ask 'Install network programs' && { i GlassWire NordVpn TigerVnc tribler || return; }
}

UtilityWin() { i RightClickEnhancer || return; }
UtilityMac() { :; }
UtilityLinux() { :; }

#
# SSH Programs
# 

SshPermission()
{
	[[ ! -d ~/.ssh ]] && return

	# if issues: chgrp root ~/.ssh/*
	$hide ~/.ssh || return
	[[ -f ~/.ssh/id_rsa ]] && { chmod 700 ~/.ssh/authorized_keys || return; }
	[[ -f ~/.ssh/id_rsa ]] && { chmod 700 ~/.ssh/id_rsa || return; }
	[[ -f ~/.ssh/config ]] && { chmod 700 ~/.ssh/config || return; }

	return 0
}

SshServer()
{
	local sshd

	printf "**************************************************\n* SSH Server\n**************************************************\n"
	makeDir ~/.ssh && $hide +h ~/.ssh || return

	echo "Permissions..."
	SshPermission || return

	echo "Configuring..."
	RunPlatform SshServer || return

	if IsPlatform win && IsElevated; then
		echo "Updating firewall..."
		$firewall rule add "SSH" dir=in action=allow protocol=TCP localport=22 profile=private program="$(utw "$sshd")" || return

		echo "Starting the sshd service..."
		if IsPlatform cygwin; then
			service start sshd || return;
		elif IsPlatform win; then
			/usr/sbin/service ssh status | grep "not running" >& /dev/null && { sudo service ssh start || return; }
		fi
	fi
}

SshServerCygwin()
{
	sshd="$P/Cygwin/usr/sbin/sshd.exe"

	if ! IsPath sshd && ask 'Install SSH daemon'; then
		echo "- StrictModes=no, local account=yes, service=yes, value of CYGWIN for the daemon=ntsec, use a diferent account name=no, create privileged account=yes, password=<administrator>"
		ssh-host-config || return
	fi
}

SshServerWsl()
{
	sshd="$LOCALAPPDATA/packages/canonicalgrouplimited.ubuntu18.04onwindows_79rhkp1fndgsc/localstate/rootfs/usr/sbin/sshd"

	if ask "Update sudoers"; then
		echo "$USER ALL = (root) NOPASSWD: /usr/sbin/sshd -D"
		sudo visudo || return
	fi

	# stop Cygwin sshd service
	service exist sshd && service running sshd && { service stop sshd || return; service demand sshd || return; } 
}

WinScp()
{
	[[ "$PLATFORM" != "win" ]] && return 0

	printf "**************************************************\n* WiNSCP \n**************************************************\n"
	run "Shareware/WinSCP/WinSCP-5.15.1-Setup.exe" || return # https://winscp.net/eng/index.php

	echo "Updating icons..."
	$mv "$pp/WinSCP.lnk" "$pp/Operating System" || return
	sudo $rm "$pd/WinSCP.lnk" || return	

		echot "\
- Options, Preferences, Storage=Custom INI file=C:\Users\jjbutare\Documents\data\replicate\WinSCP.ini"
}

#
# Other Programs
#

Bash()
{
	printf "**************************************************\n* Bash - Bourne Again Shell\n**************************************************\n"
	printf "Configuring bash..."

	printf "links..."

	local files=(.bashrc .bash_logout .bash_profile .dialogrc .gitconfig .gitignore .kdiff3rc .lessfilter .magic .inputrc .minttyrc .Xresources)
	for file in "${files[@]}"; do
		makeLink --symbolic --hide "$UBIN/$file" "$HOME/$file" || return
	done

	makeDir ~/.config || return
	for dir in $(ls $UBIN/.config); do
		[[ -d "$UBIN/.config/$dir" ]] && 
			{ makeLink --symbolic "$UBIN/.config/$dir" "$HOME/.config/$dir" || return; }
	done

	# Windows program that require Windows links, not a POSIX .lnk link
	if IsPlatform win; then
		files=( .ExifTool_config  .gitconfig )
		for file in "${files[@]}"; do
			makeLink --symbolic --hide --windows --absolute "$WIN_HOME/Documents/data/bin/$file" "$WIN_HOME/$file" || return
		done

		$hide "$HOME/.gitconfig.tmp" || return
	fi

	printf "create..."
	files=( .bash_history .lesshst )
	for file in "${files[@]}"; do
		touch "$HOME/$file" || return
		$hide "$HOME/$file" || return
	done

	printf "ssh..."
	SshPermission || return

	echo "done"

	local file="/etc/bash.bashrc"
	local line='[[ -f /usr/local/data/bin/bash.bashrc ]] && . "/usr/local/data/bin/bash.bashrc"'
	local before='# If not running interactively, don'\''t do anything' 

	IsPlatform mac && file="/etc/bashrc"
	IsPlatform dsm && { file="/etc.defaults/.bashrc_profile"; before="if [ -f ~/.bashrc ]; then"; }

	[[ ! -f "$file" ]] && { EchoErr "$file does not exist"; return 1; }

	if ask "Update $file"; then
		
		echo "$line"; clipw "$line"
		echo "- copy or paste this before \"$before\""
		pause
		sudo nano "$file" || return
	fi
}

Cygwin()
{
	printf "**************************************************\n* Cygwin - POSIX environment for Windows\n**************************************************\n"

	echo "Update environment variables..."
	ScriptEval SetVar --system --path PATH "$P/Cygwin/bin" || return
	ScriptEval SetVar --system --path PATH "$BIN" || return
	ScriptEval SetVar --system --path PATH "$DATA/platform/$PLATFORM" || return
	ScriptEval SetVar --path PATH "$UBIN" || return

	echo "Adding user..." # first user added when Cygwin installed, other users are not
	touch /etc/passwd || return
	local user="$(mkpasswd -c)"
	! grep "^$(id -un)" /etc/passwd > /dev/null && { echo "$user" >> /etc/passwd || return; }
	
	if grep ":/home" /etc/passwd > /dev/null; then
		echo "Updating home directory locations..."
		local escapedUsers="${_users//\//\\/}"
		cp /etc/passwd /etc/passwd.bak || return
		sed 's/:\/home/:'"$escapedUsers"'/g' < /etc/passwd.bak > /etc/passwd || return
		HOME="$_users/$USER"; . bash.bashrc || return
	fi

	# icons and registry
	if FindFile "Cygwin/setup"; then

		echo "Copying files..."
		cp "$file/Command Prompt.ico" "$P/Cygwin/etc" || return

		echo "Updating registry..."
		$registry import "$file/setup.reg" || return

	fi

	cygwin FixCompletion || return
	ask "Install Cygwin Server service" && {  cygserver-config || return; }
	ask "Install other Cygwin packages" && { cygwin package other || return; }

	echo "Cleaning up..."
	cygwin cleanup || return
	$rmd "/home" || return
	$makeShortcut "$P/Cygwin/bin/mintty.exe" "$pp/Operating System/bash" "-" || return
	$makeShortcut "$BIN/run.sh" "$psm/Programs/Startup/startup" "startup" "" "" min || return

	return 0	
}

NodeJsInstall()
{	
	printf "**************************************************\n* Node.js\n**************************************************\n"

	if [[ "$PLATFORM" == "linux" ]] && ! InPath node ; then
		curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash || return # get node version 10.x
		package nodejs || return

	elif IsPlatform cygwin; then	
		run "Shareware/Node.js/setup/" -p "node-v11.8.0-x64.msi" || return # https://nodejs.org/en/

		echo "Updating icons..."
		mergeDir "$pp/Node.js" "$pp/Development/Other" || return
		mergeDir "$up/Node.js" "$pp/Development/Other" || return

		echo "Updating path..."
		ScriptEval SetVar --path PATH "$P/nodejs" || return
		ScriptEval SetVar --path PATH "$APPDATA/npm" || return	
	fi

	if [[ ! -f ~/.npmrc ]]; then
		touch ~/.npmrc
		intel IsIntelHost && echo "http http_proxy=http://proxy-chain.intel.com:911" >> ~/.npmrc
		intel IsIntelHost && echo "https https_proxy=http://proxy-chain.intel.com:911" >> ~/.npmrc
	fi

	InPath nodemon || { $sudo npm install -g nodemon || return; }
	$sudo npm install -g npm@latest || return
	$sudo npm update -g || return
}

WinampInstall()
{
	printf "**************************************************\n* Winamp\n**************************************************\n"
	
	run "Nullsoft/WinAmp/setup/winamp565_pro_all.exe" || return

	echo "Updating icons..."
	mergeDir "$pp/Winamp" "$ao" || return
	mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" || return
	$rm "$pd/Winamp.lnk" || return

	echot "Note
- WiFi Sync - disable addition network interfaces (i.e. VMware networks), run WinAmp as Administrator"
}

wmp() { WindowsMediaPlayerInstall; }
WindowsMediaPlayerInstall()
{
	printf "**************************************************\n* Windows Media Player\n**************************************************\n"
	
 	start "$P32\Windows Media Player\wmplayer.exe" || return

	echot "\
- Recommended settings
- Organize, Manage Libraries, Music, Add..., This PC, portable4"
}

ahk() { AutoHotKeyInstall; }
AutoHotKeyInstall()
{
	! IsPlatform win && return

	printf "**************************************************\n* AutoHotKey\n**************************************************\n"
	AutoHotKey close || return
	run "Shareware/AutoHotKey/image/AutoHotkey_2.0-a100-52515e2.zip" "$P/AutoHotKey" || return # https://autohotkey.com/download/2.0/
	sudo --standard AutoHotKey startup
}

WinSplitInstall()
{
	printf "**************************************************\n* WinSplit\n**************************************************\n"
	run "Shareware/WinSplit Revolution/image.zip" "$P32/WinSplit Revolution" || return
	WinSplit startup
}

SublimeInstall()
{
	! IsPlatform ubuntu,mac,win && return 0
	printf "**************************************************\n* Sublime Text Editor\n**************************************************\n"

	local v=3207 # http://www.sublimetext.com/3 PackageControl (https://sublime.wbond.net/installation)
	run "Sublime/setup/" -p "Sublime Text Build $v x64 Setup.exe" "Sublime Text Build $v.dmg" "sublime_text_3_build_${v}_x64.tar.bz2" || return 
	IsPlatform win && { run "Sublime/setup/sublime_merge_build_" -p "1092_x64_setup.exe" "" "" || return; }
	
	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating registry..."	
		registry delete "HKEY_CLASSES_ROOT/Applications/sublime_text.exe/" # Fix Windows Open With

		echo "Updating icons..."
		$mv "$pp/Sublime Text 3.lnk" "$pp/Applications/Sublime Text.lnk" || return
		$mv "$pp/Sublime Merge.lnk" "$pp/Applications" || return
	fi

	makeDir "$udata/Sublime Text" || return
	IsPlatform win && { makeDir "$adata/Sublime Text 3" || return; }
	sublime profile restore default || return

	if ask 'Add license'; then
		echo '- Enter license'
		sublime start || return
	fi
}

dotCoverInstall()
{
	printf "**************************************************\n* dotCover\n**************************************************\n"
	run "JetBrains/dotCover/dotCoverSetup.2.6.608.466.msi" || return # http://www.jetbrains.com/dotcover/
}

ReSharperInstall()
{
	printf "**************************************************\n* ReSharper\n**************************************************\n"
	
	echo "- select Install: ReSharper, dotPeek"
	run "JetBrains/ReSharper/setup/JetBrains.ReSharperUltimate.2019.1.1.exe" || return # http://www.jetbrains.com/resharper/download/index.html
	
	echo "Updating icons..."
	mergeDir "$pp/JetBrains" "$pp/Development/DotNet/Other" || return
	mergeDir "$up/JetBrains" "$pp/Development/DotNet/Other" || return

	if ask "Restore profile"; then
		ReSharper profile restore default || return
	elif ask 'Configure ReSharper manually'; then
		echot "\
- ReSharper, Options
	- Keyboards & Menus, ReSharper keyboard scheme=ReSharper 2.x or IntelliJ IDEA, Apply Scheme
	- Environment, Editor, Editor Behavior, uncheck Use CamelHumps
	- Environment, IntelliSense
		- Autopopup, C#, Where value is expected, Do not display
		- Completion Appearance, check Show Member Signatures and Show Summary
	- Code Editing
			- Code Cleanup, Add, default
			- Check all except Embrace 'using' directives in region and Apply code body style
	- C#, Formattign Style
		- Blank Lines, Keep max blank lines=1 (2 places)
		- Line Breaks and Wrapping, Other, check Place simple method on single line
	- Tools
		- Unit Testing
			- Run up to 4 assemblies in parallel
			- Uncheck Save and restore Unit Test Sessions
			- Uncheck Wrap long lines in Unit Test Session output
		- External Sources=Navigation to Sources, check all
- Customize Keyboard (ctrl-shift-alt-k)
	- ReSharper.ReShartper_DuplicateText, Remove, Remove (free ctrl-d)
- notes: ctrl-n, <class>, click object, ctrl-b, Navigate to Decompiled Sources"
		sudo --standard VisualStudio start
	fi
}

dotPeekInstall()
{
	printf "**************************************************\n* dotPeek \n**************************************************\n"
	run "JetBrains/dotPeek/JetBrains.dotPeek.2017.3.3.web.exe" || return # https://www.jetbrains.com/decompiler/download/

	echo "Updating icons..."
	mergeDir "$up/JetBrains" "$pp/Development/DotNet/Other" || return
}

WindowsConsoleInstall()
{
	! IsPlatform win && return

	printf "**************************************************\n* Console \n**************************************************\n"

	key="HKCU/Console"

	echo "Setting console defaults..."

	registry set "$key/QuickEditMode" REG_DWORD 1 || return
	registry set "$key/QuickEdit" REG_DWORD 1 || return

	# foreground text: bright white=31 (255, 255, 255), white=23 (192,192,192)
	registry set "$key/ScreenColors" REG_DWORD 7 || return

	# Screen Background: black=0 (0,0,0), blue=8388608 (or 0, 0, 128)
	# Black does not flicker when large amounts of text are displayed (for example when do dir bin:)
	registry set "$key/ColorTable01" REG_DWORD 0 || return

	registry set "$key/ColorTable11" REG_DWORD 16776960 || return
	registry set "$key/ColorTable15" REG_DWORD 16777215 || return

	# Font
	registry set "$key/FaceName" REG_SZ "Lucida Console" || return
	registry set "$key/FontFamily" REG_DWORD 54 || return
	registry set "$key/FontSize" REG_DWORD 1048586 || return
	registry set "$key/FontWeight" REG_DWORD 400 || return

	# Screen 165x29 (1680x1050)
	registry set "$key/ScreenBufferSize" REG_DWORD 19660964 || return
	registry set "$key/WindowSize" REG_DWORD 3276964 || return # 3276964=164x50
}

WindowsSetup()
{
	printf "**************************************************\n* Windows Setup\n**************************************************\n"
	! IsElevated && { start --elevate inst WindowsSetup; pause; return; }

	WindowsDirs || return
	WindowsIcons || return
	OneDrive || return

	echo "Cleaning file system..."
	$hide hide "$_root/PerfLogs" || return
	$rm "$WIN_HOME\Documents\My Music" || return
	$rm "$WIN_HOME\Documents\My Pictures" || return
	$rm "$WIN_HOME\Documents\My Videos" || return
	$rm "$WIN_HOME\My Music" || return
	$rm "$WIN_HOME\My Pictures" || return
	$rm "$WIN_HOME\My Videos" || return

	echo "Cleaning startup programs..."
	$registry 32 delete "run/NetFxUpdate_v1.1.4322" # "C:\Windows\Microsoft.NET\Framework\v1.1.4322\netfxupdate.exe" 1 v1.1.4322 GAC + NI NID, https://superuser.com/questions/137508/ngen-exe-is-constantly-using-cpu
	$registry delete "run/SecurityHealth" # %windir%\system32\SecurityHealthSystray.exe

	echo "Moving data folders..."
	[[ -d "$udoc/Fax" ]] && makeLink --merge --hide "$udata/fax" "$udoc/Fax"
	[[ -d "$udoc/My Data Sources" ]] && makeLink --windows --merge --hide "$udata/Data Sources" "$udoc/My Data Sources"
	[[ -d "$udoc/Scanned Documents" ]] && makeLink --merge --hide "$udata/scans" "$udoc/Scanned Documents"

	echo "Configuring..."
	powershell.exe Set-ExecutionPolicy RemoteSigned || return
	registry import "$setupFiles/Windows Setup.reg" || return
	numlock boot on || return
	powercfg.exe -hibernate off
	netsh.exe advfirewall firewall set rule group="Network Discovery" new enable=Yes || return

	# does not work, must owner and permission first
	# echo "Disabling programs narrator and magnifier (win-+)..."
	# [[ -f "$WINDIR/System32/Magnify.exe" ]] && { sudo mv "$WINDIR/System32/Magnify.exe" "$WINDIR/System32/Magnify.disable.exe" || return; }
	# [[ -f "$WINDIR/system32/Narrator.exe" ]]&& { sudo mv "$WINDIR/system32/Narrator.exe" "$WINDIR/system32/NarratorDisable.exe" || return; }

	if ! net.exe user wsystem >& /dev/null && ask "Create wsystem account"; then
		local password
		read -s -p "Enter wsystem password: " password; echo
		net.exe user wsystem "$password" /ADD || return
		net.exe LocalGroup Administrators wsystem /ADD || return
	fi

	echo "Enabling remote desktop connections..." 
 	registry set "HKLM/SYSTEM/CurrentControlSet/Control/Terminal Server/fDenyTSConnections" REG_DWORD 0 || return

	echo "Hiding the recycle bin from the desktop..." 
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/HideDesktopIcons/NewStartPanel/{645FF040-5081-101B-9F08-00AA002F954E}" REG_DWORD 1 || return

	echo "Showing taskbar on main display only..."
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/MMTaskbarEnabled" REG_DWORD 0 || return

	echo "Disable snap assist..."
 	registry set "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Advanced/SnapAssist" REG_DWORD 0 || return

	ask "Rename computer" && { os RenameComputer || return; }

	if ask "Change $USER full name"; then
		local fullName
		read -p "Enter $USER fullName: " fullName; echo
		net.exe user $USER /fullname:"$fullName"  
	fi

	return 0
}

WindowsDirs()
{
	makeDir "$WIN_HOME/temp" || return
	makeDir "$pp/Applications/Other" || return
	makeDir "$oo" || return
	makeDir "$up/Applications/Other" || return
}

WindowsIcons()
{
	echo "Updating icons..."

	mergeDir "$up/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$pp/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$up/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$up/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$pp/IIS" "$pp/Development/Other/IIS" || return
	mergeDir "$up/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/System Tools" "$pp/Operating System" || return
	mergeDir "$up/Windows PowerShell" "$pp/Operating System" || return

	mergeDir "$pp/Applications/Accessories/System Tools" "$pp/Operating System" || return
	mergeDir --rename "$pp/Microsoft Silverlight" "$oo/Silverlight" || return
	mergeDir --rename "$up/Windows PowerShell" "$oo/PowerShell" || return

	$mv "$pp/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$up/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$pd/Parallels Shared Folders.lnk" "$pp/Operating System" || return
	$mv "$pp/Windows Media Player.lnk" "$pp/Applications/Accessories" || return
	$mv "$ud/Microsoft Edge.lnk" "$ao" || return

	$rmd "$pp/Bluetooth Devices" || return
	$rmd "$up/Maintenance" || return

	$hideAndSystem "$pp/Applications/Accessories/Desktop.ini" || return
	$hideAndSystem "$pp/Applications/Accessories/Accessibility/Desktop.ini" || return
}

pGinaInstall()
{
	printf "**************************************************\n* pGina\n**************************************************\n"
	
	IsInDomain && return 0
	
	# http://pgina.org/download.html
	run "Microsoft/Visual Studio/redistributable/vcredist_x86.exe" || return 
	run "Microsoft/Visual Studio/redistributable/vcredist_x64.exe" || return 
	run "Shareware/pGina/setup/pGinaSetup-3.1.8.0.exe" /silent || return # 

	echo "Updating icons..."
	mergeDir "$pp/pGina" "$oo" || return

	pGina profile restore default || return
}

DropBoxInstall()
{
	printf "**************************************************\n* DropBox\n**************************************************\n"
	echo "- Choose folders to sync, uncheck large"

	local v=57.4.89 # https://www.dropbox.com/download?full=1&plat=win https://www.dropbox.com/download?full=1&plat=mac https://www.dropbox.com/install-linux
	run "Dropbox/setup/" -p "Dropbox $v Offline Installer.exe" "Dropbox $v.dmg" "dropbox_2015.10.28_amd64.deb" || return

	DropBoxFinal || return

	if ask "Do you want to configure DropBox"; then
		echot "\
- Preferences...,
  - General
		- uncheck Start Dropbox on system startup
		- check Show Dropbox as a save location in Microsoft Office
	- Bandwidth, Upload rate, Don't limit
  - Notifications, uncheck Edits to files
- Print Screen, No, Thanks"
		sudo --standard DropBox startup
		pause
	fi

	if ask "Do you want to update index locations"; then
		DropBox close

		dir="$CLOUD/.dropbox.cache"
		makeDir  "$dir" || return
		attrib -h -s "$(utw "$dir")" || return

		echo "- Modify, $(utw "$CLOUD"), check Dropbox, uncheck .dropbox.cache"
		os index options || return
		pause

		$hideAndSystem "$dir" || return
		sudo --standard DropBox startup
	fi

	if ask "Do you want to update explorer"; then
		echot "\
	- Dropbox, Include in Library, Documents
	-  (not Intel) Libraries, Documents, Library Tools, Manage, Manage library
  	- Move Up (to top), Set as default save location
  - View, List"
  	start explorer "$udoc" || return
  	pause
  fi
}

DropBoxFinal()
{
	echo "Updating icons..."
	mergeDir "$pp/Dropbox" "$oo" || return
	$rm "$up/Startup/Dropbox.lnk" || return
	$rm "$ud/Dropbox.lnk" || return

	echo "Updating registry..."	
	$registry set "HKCU/SOFTWARE/Classes/CLSID/{E31EA727-12ED-4702-820C-4B6445F28E1A}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return
	$registry 32 delete "run/Dropbox" # "C:\Program Files (x86)\Dropbox\Client\Dropbox.exe" /systemstartup

	makeLink "$WIN_HOME/Dropbox" ~/Dropbox || return
}

vs() { intel IsIntelHost && vs15 || vs17; }; VisualStudioInstall() { vs; }; 

vs19()
{
	vsInit || return
	printf "**************************************************\n* Visual Studio 2019\n**************************************************\n"
	echot "\
- Workloads, check .NET desktop development"

	local setup="vs_community__2082780718.1523343320.exe" # https://www.visualstudio.com/downloads/
	run "$vs/setup/$setup" || return
	 
	ask 'Install VisualStudio extensions' && { VsExtensions || return; }
	VsFinal || return
}

vs17()
{
	vsInit || return
	printf "**************************************************\n* Visual Studio 2017\n**************************************************\n"
	echot "\
- Workloads, check .NET desktop development"

	local setup="vs_community__2082780718.1523343320.exe" # https://www.visualstudio.com/downloads/
	run "$vs/setup/$setup" || return
	 
	ask 'Install VisualStudio extensions' && { VsExtensions || return; }
	VsFinal || return
}	

vs15() 
{ 
	vsInit || return
	printf "**************************************************\n* Visual Studio 2015\n**************************************************\n"
	echot "\
- Custom, check
	- Windows and Web Development: ClickOnce Publishing Tools, Microsoft Web Developer Tools, Silverlight Development Kit
	- Common Tools: GitHub Extension, Visual Studio Extensibility Tools"

	run "$vs/setup/en_visual_studio_enterprise_2015_with_update_3_x86_x64_dvd_8923288.iso" || return
	ask 'Install VisualStudio extensions' && { VsExtensions || return; }
	VsFinal || return
}

VsExtensions()
{
	vsInit || return
	local vse="$vs/extension"

	run "$vse/VSColorOutput.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496
	run "$vse/SolutionLoadManager.vsix" # https://marketplace.visualstudio.com/items?itemName=kolomiets.SolutionLoadManager

	ask 'Install optional extensions' || return 0;
	run "$vse/Entrian-Attach-1.4.3-Setup.exe" || return # http://entrian.com/attach/download.html
	run "$vse/NuGetTools.vsix" # https://marketplace.visualstudio.com/items?itemName=Ahlman.Base16NuGetTools
	run "$vse/ProPowerTools.vsix" || return # https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProductivityPowerTools2015
}

vsInit()
{
	vs="Microsoft/Visual Studio"
}

VsFinal()
{
	ScriptEval VisualStudio init || return

	echo "Creating directories..."
	makeDir "$CODE/test/vs"

	ask "Install IIS Express Final" && { IisExpressFinal || return; }
	
	if ask "Initialize Visual Studio"; then
		echo "- Sign In, <Microsoft Live account>"
		echo "- Close Visual Studio"
		VisualStudio start; pause
	fi

	echo "Updating data folders..."
	echo makeLink --merge --hide "$vsData" "$udoc/Visual Studio $vsName" || return
	$hide ~/.dnx ~/.nuget || return

	ask "Update registry" && { VsRegistry || return; }

	ask "Update icons" && { VsIcons || return; }
	
	if ask "Restore profile"; then
		VisualStudio profile restore default || return
	else
		echot "\
Tools, Options...
- Environment
	- Documents, check Always reload modified files unless there are unsaved changes
	- Keyboard - see Visual Studio Shortcuts, search for custom
  - Tabs and Windows
  	- check Insert new tabs to the right of existing tabs
  	- check Show pinned tabs in a separate row
- Text Editor
	- C#
	  - General, check Line numbers
	  - Tabs, Tab size=3, Indent size=3, Keep tabs
	- XAML, General, check Word wrap, Line Numbers, and Navigation Bar
- Debugging, General
	- uncheck Break all processes when one process breaks
	- uncheck Require source files to exactly match the original version
- XAML Designer, Split Orientation=Vertical, 
View, Team Explorer...
- Home, Settings, Git Settings
  - Default Respository Location=$(utw "c:\Projects")
  - Check Enable download of author images from 3rd party source." 
		VisualStudio start
	fi
}

VsRegistry()
{
	echo "Updating Visual Studio registry..."
	ScriptEval VisualStudio init || return
	local r="$vsRegistryKey" c="$(utw "$CODE")"
	
	$registry 32 set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/VisualStudioProjectsLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/UserProjectTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ProjectTemplates")" || return
	$registry 32 set "$r/UserItemTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ItemTemplates")" || return
	$registry 32 set "$r/VisualStudioLocation" REG_EXPAND_SZ "$(utw "$vsData")" || return
}

VsIcons()
{
	echo "Updating Visual Studio icons..."
	ScriptEval VisualStudio init || return

	local base="$pp/Development/DotNet"
	local other="$base/Other"
	local vs="$other/Visual Studio $vsName"
	
	makeDir "$other" || return

	$makeShortcut "$WIN_ROOT/Windows/assembly" "$base/GAC.lnk" || return

	mergeDir --rename "$pp/Visual Studio $vsName" "$other/Visual Studio $vsName" || return
	mergeDir "$pp/Windows Kits" "$pp/Development/Other" || return
	$ren "$pp/Visual Studio $vsName.lnk" "$base/Visual Studio.lnk" || return
	$mv "$pp/Visual Studio Installer.lnk" "$vs" || return
	$ren "$pp/Microsoft Test Manager $vsVersion.lnk" "$vs/Test Manager.lnk" || return

	$ren "$pp/Blend for Visual Studio $vsName.lnk" "$vs/Blend.lnk" || return
	$ren "$pp/Microsoft Expression/Microsoft Expression Blend SDK/Expression Blend SDK Documentation.lnk" "$vs/Expression Blend SDK Documentation.lnk"  || return
	$rmd "$pp/Microsoft Expression" || return

	$mv "$up/Microsoft Corporation/Microsoft Teams.lnk" "$up/Development" || return
	[[ -d "$up/Microsoft Corporation" ]] && { rmdir "$up/Microsoft Corporation" || return; }

	SilverlightIcons || return	
}

IisExpressFinal()
{
	echo "Moving data folders..."
	makeLink --merge --hide "$udata/IISExpress" "$udoc/IISExpress"
	mergeDir "$udoc/My Web Sites" "$udoc/code/web"

	echo "Setting permissions..."
	icacls "$(utw "$P32/IIS Express")" /grant "$USER:(OI)(CI)F" /T
}

BcInstall() { BeyondCompareInstall; }
BeyondCompareInstall()
{
	! IsPlatform ubuntu,mac,win && return 0
	printf "**************************************************\n* BeyondCompare\n**************************************************\n"

	local v=4.2.10.23938 # http://www.scootersoftware.com/download.php
	run "Scooter Software/Beyond Compare/setup/" -p "BCompare-$v.exe" "BCompareOSX-$v.zip" "bcompare-${v}_amd64.deb" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/Beyond Compare 4.lnk" "$pp/Applications/Beyond Compare.lnk" || return
		$rm "$ud/Beyond Compare 4.lnk" || return
		$rm "$pd/Beyond Compare 4.lnk" || return
	fi

	if ask 'Configure BeyondCompare'; then
		echo "- Help, Enter Key..., check Register for all users"
		[[ "$PLATFORM" == "mac" ]] && echo "- Beyond Compare, Install Command Line Tools…"
		BeyondCompare --wait start
	fi
	
	BeyondCompare profile restore default || return
}

sonos()
{
	printf "**************************************************\n* Sonos Music System\n**************************************************\n"
	run "Sonos/setup/SonosDesktopController91." -p "exe" "dmg" "" || return # http://sonos.com/support/

	echo "Updating icons..."
	sudo $rm "$pd/Sonos.lnk" || return
	mergeDir "$pp/Sonos" "$pp/Media/Other" || return

	if intel IsIntelHost; then
		echo "- McAfee Host Intrusion Prevention, Add, Name=Sonos, Application=C:\Program Files (x86)\Sonos\Sonos.exe"
		pause
	fi
}

nUnitConsoleInstall()
{
	printf "**************************************************\n* NUnit\n**************************************************\n"
	echo "Choose Setup Type=Complete"
	
	local version="3.9.0" # http://nunit.org/download/
	run "Shareware/DOT.NET/NUnit/setup/NUnit.Console-$version.msi" || return 

	echo "Updating icons..."
	#mergeDir "$up/NUnit $version" "$pp/Development/DotNet/Other"
}

SilverlightSdk()
{
	printf "**************************************************\n* Silverlight SDK\n**************************************************\n"

	# downloads  http://www.silverlight.net/downloads
	# - Developer Runtime (required, debugging): http://go.microsoft.com/fwlink/?linkid=229324
	# - toolkit (required, additonal controls): http://silverlight.codeplex.com/ http://silverlight.codeplex.com/releases/view/78435
	# - SDK (required if Visual Studio is not installed): http://www.microsoft.com/en-us/download/details.aspx?id=28359 
	# - tools (developer runtime, SDK, Visual Studio 2010 support): http://www.microsoft.com/en-us/download/details.aspx?id=28358
	# version: http://www.microsoft.com/getsilverlight/Get-Started/Install/Default.aspx
	run "Microsoft/DOT.NET/Silverlight/development/Silverlight_Developer_64.exe"

	run "Microsoft/DOT.NET/Silverlight/development/Silverlight_5_Toolkit_December_2011.msi"

	SilverlightIcons || return
}

SilverlightIcons()
{
	local base="$pp/Development/DotNet/Other/Silverlight"
	makeDir "$base" || return

	$ren "$pp/Microsoft Silverlight/Microsoft Silverlight.lnk" "$pp/Applications/Accessories/Silverlight.lnk"  || return
	$ren "$pp/Microsoft Silverlight 5 SDK/Welcome.lnk" "$base/Silverlight 5 SDK Welcome.lnk" || return

	mergeDir --rename "$pp/Microsoft Silverlight 5 Toolkit December 2011" "$base/Silverlight 5 Toolkit" || return

	$rmd "$pp/Microsoft Silverlight 5 SDK" || return
	$rmd "$pp/Microsoft Silverlight" || return
}

cctray() { CruiseControlTrayInstall; }
CruiseControlTrayInstall()
{
	local version="1.8.5.0"
	printf "**************************************************\n* CruiseControl Tray\n**************************************************\n"
	echo '- Uncheck Run CruiseControl.NET CCTray 1.8.5.0'	

	# download: http://vmspwbld001/ccnetpreprod/ViewFarmReport.aspx http://www.cruisecontrolnet.org/projects/cctray http://cruisecontrol.sourceforge.net http://ccnet.sourceforge.net/CCNET/CCTray.html https://github.com/ccnet/CruiseControl.NET
	run "Shareware/CruiseControl/tray/CruiseControl.NET-CCTray-$version-Setup.exe" || return

	echo "Installing plugins..."	
	FindFile "Shareware/CruiseControl/plugins/CCTray" || return
	$cp	"$file"/* "$P32/CCTray" || return

	echo "Updating icons..."
	mergeDir "$pp/CCTray" "$pp/Development/Other" || return
	mergeDir "$up/CCTray" "$pp/Development/Other" || return
	$rm "$ud/CCTray.lnk" || return
	$rm "$up/Startup/CCTray.lnk" || return

	CruiseControlTray profile restore default || return
	CruiseControlTray startup || return

 	wincred get CCTray:$USER >& /dev/null || echot "\
- File, Settings, Build Projects, Add..., select a secure Build Server,
  check Server is secure, Authorisation Mode=Secure user name/password authentication,
  Configure, Username=%USERNAME%"
}

thunderbird()
{
	printf "**************************************************\n* Thunderbird\n**************************************************\n"

	local v="60.3.0" # https://www.thunderbird.net/en-US/
	run "Mozilla/Thunderbird/" -p "Thunderbird Setup $v.exe" "Thunderbird $v.dmg" "thunderbird-$v.tar.tar" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$ren "$pp/Mozilla Thunderbird.lnk" "$pp/Applications/Thunderbird.lnk" || return
		$rm "$pd/Mozilla Thunderbird.lnk" || return
	fi

}

firefox()
{
	printf "**************************************************\n* Firefox\n**************************************************\n"

	local v="68.0.1" # https://www.mozilla.org/en-US/firefox/all/
	if IsPlatform raspbian; then
		package firefox-esr || return
	else
		run "Mozilla/Firefox/setup/" -p "Firefox Setup $v.exe" "Firefox $v.dmg" "firefox-$v.tar.bz2" || return
	fi
	
	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/Firefox.lnk" "$pp/Applications" || return
		$rm "$pd/Firefox.lnk" || return
	fi

	echot "\
- https://duckduckgo.com/, settings, Other Settings, Load Settings, DuckDuckButare"

	return 0
}

chrome()
{
	printf "**************************************************\n* Google Chrome Browser\n**************************************************\n"
	echo '- Sign in, Email=NNN, Password=NNN'
	
	run "Google/Chrome/setup/" -p "ChromeStandaloneSetup64.exe" "googlechrome.dmg" "" || return # http://www.google.com/chrome/eula.html?system=true&standalone=1

	if [[ "$PLATFORM" == "win" ]]; then
		ChromeIcons || return

	elif [[ "$PLATFORM" == "mac" ]]; then	
		$rm "$la\com.google.keystone.agent.plist" || return

	fi

	echot "- Settings, uncheck Continue running background apps when Google Chrome is closed"
	chrome start || return
}

ChromeIcons()
{
		$mv "$pp/Google Chrome.lnk" "$pp/Applications" || return
		$rm "$up/Google Chrome.lnk" || return
		$rm "$ud/Google Chrome.lnk" || return
		$rm "$pd/Google Chrome.lnk" || return
		$rm "$ud/Chrome App Launcher.lnk" || return
		$rm "$ud/Google Chrome Canary Build.lnk" || return
		mergeDir --rename "$pp/Google Chrome" "$ao/Chrome" || return
		mergeDir --rename "$up/Google Chrome" "$ao/Chrome" || return
		mergeDir "$up/Chrome Apps" "$up/Applications" || return
		mergeDir --rename "$up/Google Chrome Canary Build" "$ao/Chrome Beta" || return
}

iisInstall()
{
	# - Add/Remove Windows Components requires inf files
	# - Remote Desktop Web Connection reference http://www.microsoft.com/windowsxp/using/networking/expert/northrup_03may16.mspx
	printf "**************************************************\n* IIS\n**************************************************\n"
  echo "- Internet Information Services, check all"
  echo "- (optional) Internet Information Services Hostable Web Core"
	
	product optional --wait || return

	if [[ $client ]] && ! intel IsIntelHost; then
	  echo "Updating firewall..."
	  $firewall rule enable "World Wide Web Services HTTP Traffic In"
	fi

	echo "Updating services..."
	service exist FTPSVC && { service manual FTPSVC || return; }

	if [[ $client ]] && ask "Set IIS services to run manually"; then
	  service exist IISADMIN && { service manual IISADMIN || return; }
	  service exist w3svc && { service manual w3svc || return; }
	  service exist AppHostSvc && { service manual AppHostSvc || return; }
	fi

	echo "Updating icons..."
	makeDir "$pp/Development/Other/IIS" || return
	mergeDir "$pp/IIS" "$pp/Development/Other" || return
	$makeShortcut "$WINDIR/system32/inetsrv/iis.msc" "$pp/Development/Other/IIS/IIS Client Manager" || return

	# [[ $client ]] && ask "Install remote manager" && { IisRemoteManager || return; }
	# ask "Configure WebDAV" --default n && { IisWebDav || return; }
	# ask "Configure FTP" --default n && { IisFtp || return; }
	# ask "Configure debugging" --default n && { IisDebugging || return; }
	# ask "Configure compression" --default n && { IisCompression || return; }
	# ask "Configure SSL" --default n && { IisSsl || return; }

	echo "Restarting IIS..."
	iisreset
}

IisCheck()
{ 
	if ! IsInstalled iis && ask "Do you want to install IIS"; then
		iisInstall; return
	fi
	return 0
}

ssms() { SqlServerManagementStudioInstall; }
SqlServerManagementStudioInstall()
{
	local base="Microsoft/SQL Server"

	run "$base/studio/SSMS-Setup-ENU.exe" || return # https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms
	run "$base/studio/plugins/SSMSBoostInstaller_3.4.6796.msi" || return # http://www.ssmsboost.com

	echo "Moving data folders..."
	local dir="$udata/SQL Server Management Studio"; makeDir "$dir" || return
	makeLink --merge --hide "$udata/SQL Server Management Studio" "$udoc/SQL Server Management Studio" || return

	echo "Linking script directory..."
	[[ -d "$CLOUD/data/sql" ]] && { $makeShortcut "$CLOUD/data/sql" "$dir/Personal.lnk" || return; }

	ask "Update registry" && { SsRegistry || return; }

	SsFinal || return

	SqlServerManagementStudio start || return

	if ask 'Restore profile'; then
		SqlServerManagementStudio profile restore default || return;
	else
		echot "\
	- View, Registered Servers
	- Tools, Options
	  - Environment
	    - General, 20 items shown
	    - Startup, At startup Open empty environment
	  - Text Editor
	    - All Languages, check Line numbers
	    - Editor Tab and Status Bar, Tab Text, all but Include File Name to False
	   - Query Execution, SQL Server, ANSI, uncheck SET QUOTED IDENTIFIER
	- Tools, Customize, Keyboard...
		- View.ZoomIn=Ctrl+Num +
		- View.ZoomOut=Ctrl+Num -"
		pause
	fi
}

ss() { SqlServerInstall; }
SqlServerInstall()
{
	local base="Microsoft/SQL Server"
	local setup="en_sql_server_2017_enterprise_x64_dvd_11293666"; [[ $client ]] && setup="en_sql_server_2017_developer_x64_dvd_11296168"
	printf "**************************************************\n* SQL Server \n**************************************************\n"

	echot "\
Setup logs are in \"$P/Microsoft SQL Server/130/Setup Bootstrap/Log\"
- run <drive>\setup.exe
- Installation, New SQL installation
- Feature Selection, Select Database Engine Services, SQL Server Replication
- Server Configuration, check Grant Perform Volume Maintenance Task provilege
- Database Engine Configuration
  - Authentication Mode=Mixed Mode, Enter password=XXX, Confirm password=XXX
  - Add Current User"
 	run "$base/setup/$setup.iso" || return

	ask "Update server configuration" && { SsServerConfig || return; }
	ask "Cleanup log" && { SsLogCleanup || return; }
	ask "Update services" && { SsUpdateServices || return; }
		
	SsFinal || return
}

SsLogCleanup()
{
	ScriptEval SqlServer init || return

	echo "Removing log files..."
	$rmd "$P/Microsoft SQL Server/${versionNun}0/Setup Bootstrap/Log" || return
}

SsServerConfig()
{
	ScriptEval SqlServer init || return

	echot "\

- SQL Server Network Configuration, Protocols for MSSQLSERVER
- Named Pipes and TCP/IP=Enabled
- TCP/IP, IP Addresses
	- (IP for primary NIC) IPn, Enabled=Yes
	-IPAll, TCP Port=$port"
	SqlServer config
	pause
	SqlServer service restart

	echot "
- Object Explorer, Server, Properties, Memory, Maximum server memory=256"
	SqlServerManagementStudio || return
	pause

	echo "Updating firewall..."
	local port=1433; intel IsIntelHost && port=3180
	$firewall rule add "SQL Server" dir=in action=allow protocol=TCP localport=$port profile=private \
		program="$(utw "$P/Microsoft SQL Server/MSSQL${versionNum}.MSSQLSERVER/MSSQL/Binn/sqlservr.exe")" || return
}

SsUpdateServices()
{
	[[ ! $client ]] && return 0

 	echo "Updating services..."
	SqlServer service demand --all || return
	SqlServer service stop --all || return

	if ask 'Automatically start SQL Server' -dr n; then
		SqlServer service auto || return
		SqlServer service start || return
	fi
}

SsFinal()
{
	SsIcons || return;

	os path editor || return
	echo "- Remove SQL entries from the system path"
	pause
}

SsRegistry()
{
	ScriptEval SqlServerManagementStudio init || return	

	local dir="$(utw "$udata/sql")" r="HKCU/Software/Microsoft/SQL Server Management Studio/${versionNum}.0"

	echo "Updating SQL Server registry..."
	$registry set "$r/DefaultBrowseComponentLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$dir" || return
}

SsIcons()
{
	echo "Updating icons..."	
	mergeDir --rename "$pp/Microsoft SQL Server Tools 17" "$serverPrograms/Other/SQL Server Tools 2017"
	mergeDir --rename "$pp/Microsoft SQL Server vNext CTP2.0" "$serverPrograms/Other/SQL Server 2017"		
	mergeDir --rename "$pp/Microsoft SQL Server 2017" "$serverPrograms/Other/SQL Server 2017"
	mergeDir --rename "$pp/Microsoft SQL Server 2016" "$serverPrograms/Other/SQL Server 2016"
	mergeDir --rename "$pp/Microsoft SQL Server 2014" "$serverPrograms/Other/SQL Server 2014"
	mergeDir --rename "$pp/Microsoft SQL Server 2012" "$serverPrograms/Other/SQL Server 2012"
	mergeDir --rename "$pp/Microsoft SQL Server 2008" "$serverPrograms/Other/SQL Server 2008"
}

SqlPromptInstall()
{
	printf "**************************************************\n* SQL Prompt\n**************************************************\n"
	run "RedGate/SQLPromptDownload.exe" || return # downloads to $tmp/Red Gate http://www.red-gate.com/products/sql-development/sql-prompt

	echo "Updating icons..."
	mergeDir "$pp/Red Gate" "$pp/Development/Other"

	echot "\
- SQL Prompt
	- Help, Enter Serial Number...
	- Tabs, History, uncheck Restore open tabs"
	 SqlServerManagementStudio || return
	 pause
}

VisionAppInstall()
{
	printf "**************************************************\n* VisioApp Remote Desktop\n**************************************************\n"

	# home: http://www.visionapp.com/germany/software/visionapp-remote-desktop
	# download: \\vmsdaklx001\software$\Visionapp_remotedesktop http://www.visionapp.com/germany/solutions/asg-remote-desktop/asg-remote-desktop-2012-download.html
	run "VisionApp/Remote Desktop/setup/ASGRD_Setup.exe" || return

	echo "Updating icons..."
	$rmd "$pp/ASG-Remote Desktop 2012" || return
	$ren "$pd/ASG-Remote Desktop 2012.lnk" "$pp/Operating System/ASG Remote Desktop.lnk" || return

	echo "Configure..."

	local cloudDir="$CLOUD/data/VisionApp" localDir="$udata/VisionApp"
	makeDir "$cloudDir" "$localDir" "$APPDATA/visionapp/vRD 2012" || return

	FindFile "VisionApp/Remote Desktop/license/Intel Corporation_Global.xml" || return
	clipw "$(utw "$file")" || return

	VisionApp profile restore default || return

	echot "\
- Add…, Database…, Connect to an Existing Database
	- Name of the environment=Intel
  - Database server=azssql940-vsql.amr.corp.intel.com,3180
  - Database name=VisionApp
- ?, Info..., Import new license file, <paste>
- View, Icon Size, 16x16
- Tools, Options
	- Application, check only Save tree view settings, Save last selected notepad, Pass-through authentication
	- Connections, check only Automatically disconnect active sessions, Deactivate 'docking' of connections
	- Layout
		- check only Hide status bar
		- Color Style=Office 2010 Black
		- Position of additional toolbar for=None
	- Logs , Delete=30 days (120 days for connection), Maximum nuumber of entries=100
- Administration
	- Default Conneciton Parameters, Name=, RDP, Programs, Program path and filename=mstsc /f /v:
	- Navigation, Auto Hide on left"
	VisionApp start || return
}

OfficeInstall()
{
	printf "**************************************************\n* Office 365\n**************************************************\n"
	echo '- run D:\Office\Setup64.exe'
	run "Microsoft/Office/setup/" -p "O365HomePremRetail.img" "Microsoft_Office_2016_Installer.pkg" "" || return # https://stores.office.com/myaccount/advancedinstalls.aspx
	OfficeFinal || return
}

OfficeFinal()
{
	. office.sh || { EchoErr "inst: Office is not installed"; return 1; }

	echo "Updating directories..."
	makeDir "$udata/Templates" "$_data/Templates" || return

	echo "Moving data folders..."
	makeLink --merge --hide "$udata/OneNote" "$udoc/OneNote Notebooks" || return
	makeLink --merge --hide "$udata/app/office/template" "$udoc/Custom Office Templates" || return
	
	ask "Restore normal templates" && { word RestoreNormal || return; }
	ask "Update registry" && { registry import "$setupFiles/ShellNew.reg" || return; }
	ask "Update icons" && { OfficeIcons || return; }
	ask "Configure" && { for o in "$setupFiles/Set Options".*; do start "$o" || return; pause; done; }
}

OfficeIcons()
{
	echo "Updating icons..."

	p="$ao/Office"
	makeDir "$p" || return

	mergeDir --rename "$pp/Microsoft Office Tools" "$p/tools" || return
	$mv "$pp/"Access.lnk "$p" || return
	$mv "$pp/"Excel.lnk "$p" || return
	$mv "$up/"OneDrive.lnk "$up/Applications" || return
	$mv "$pp/"Outlook.lnk "$p" || return
	$mv "$pp/"PowerPoint.lnk "$p" || return
	$mv "$pp/"Publisher.lnk "$p" || return
	$mv "$pp/"Skype*.lnk "$p" || return
	$mv "$pp/"Word.lnk "$p" || return
	$rm "$up/Startup/Send to OneNote.lnk" || return

	# Office 2013 icons
	mergeDir --rename "$pp/Microsoft Office 2013" "$p" || return
	mergeDir --rename "$p/Office 2013 Tools" "$p/tools" || return
	for f in "$p/"*2013.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	for f in "$p/tools/"*2013*.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	
	# Office 2016 icons
	mergeDir --rename "$pp/Microsoft Office 2016 Tools" "$p/tools" || return
	$mv "$pp/"*2016.lnk "$p" || return
	for f in "$p/"*2016.lnk; do $ren "$f" "${f/ 2016/}" || return; done
	for f in "$p/tools/"*2016*.lnk; do $ren "$f" "${f/ 2016/}" || return; done

	echo "Updating registry..."	
	$registry delete "urun/Lync" # "c:\Program Files\Microsoft Office\root\office16\lync.exe" /fromrunkey
}

nVidiaInstall()
{
	printf "**************************************************\n* nVidia Video Driver\n**************************************************\n"
	run "hardware/nVidia/driver/398.11/Win10_64/International/setup.exe" || return # http://www.nvidia.com/Download/Find.aspx?lang=en-us

	# NVidia: https://www.ghacks.net/2016/11/07/nvidia-telemetry-tracking/

	echo "Updating icons..."
	nVidiaIcons || return
}

nVidiaIcons()
{
	mergeDir --rename "$pp/NVIDIA Corporation" "$oo/NVIDIA" || return
	$rm "$pd/GeForce Experience.lnk" || return
	$rm "$pd/3D Vision Photo Viewer.lnk" || return
}

gitDebian()
{
	ask "Install git" && { package git tig || return; }
	return 0
}

gitMac()
{
	i GitX || return
	ask 'Install git-extras and hub' && { brew install git-extras hub || return; }
}

gitRaspbian()
{
	ask "Install kompare" && { package kompare || return; }
	return 0
}

gitWin()
{
	ask 'Install Git for Windows' && { i gitForWindows || return; }
	ask 'Install Git Extensions' && { i gitExtensions || return; }

	ScriptEval intel SetProxy || return
	ask 'Install git-extras' && { (cd /tmp && git clone --depth 1 https://github.com/tj/git-extras.git && cd git-extras && make install) || return; }
	cp "$setupFiles/hub.bash_completion.sh" "$COMPLETION/hub" || return
}

cygwinGit()
{
	local gw="$P/Git/cmd/git" gc="/usr/bin/git"

	if [[ ! $noRun ]]; then
		cygwin package git || return
		cygwin FixCompletion || return
	fi

	echo "Configuring git..."
	"$gc" config --system core.autocrlf false || return
	"$gc" config --system credential.helper wincred || return
}

gfwInstall() { gitForWindows; }
gitForWindows()
{
	local gw="$P/Git/cmd/git.exe"
	printf "**************************************************\n* Git for Windows\n**************************************************\n"
	
	echot "\
- Select Components
	- uncheck Windows Explorer Integration
	- uncheck Associate .sh files to be run with Bash
- Use Git from Git Bash only
- Checkout as-is, commit as-is
- uncheck View ReleaseNotes.rtf"
	run "Shareware/Git for Windows/setup/Git-2.22.0.rc0.windows.1-64-bit.exe" || return # https://github.com/git-for-windows/git/releases/

	if [[ -f "$P/Git/usr/bin/ssh.exe" ]]; then
		echo "Disable ssh..."
		mv "$P/Git/usr/bin/ssh.exe" "$P/Git/usr/bin/ssh_hold.exe" || return
	fi
	
	echo "Updating icons..."
	mergeDir "$pp/Git" "$pp/Development/Other"
	mergeDir "$up/Git" "$pp/Development/Other"
	
	if IsElevated; then
		echo "Configuring git..."
		"$gw" config --system http.sslcainfo "$(utw "$P/Git/usr/ssl/certs/ca-bundle.crt")" || return
		"$gw" config --system core.fscache true || return
		"$gw" config --system core.filemode false || return
		"$gw" config --system core.autocrlf false || return
		"$gw" config --system credential.helper wincred || return
	else
		EchoErr "NOTE: Git for Windows configuration requires elevation"
	fi	
}

ge() { gitExtensions; }
gitExtensions()
{
	printf "**************************************************\n* Git Extensions\n**************************************************\n"
	
	echot "\
- uncheck Windows Explorer Integration, Add installation directory to PATH, and Visual Studio extension
- (if using ssh-agent) Select OpenSSH"
	run "Shareware/GitExtensions/setup/GitExtensions-3.1.1.6049.msi" || return # https://github.com/gitextensions/gitextensions/releases/latest

	GitHelper gui || return
	echot "- English, Quit"
	pause

	echo "Creating files..."
	if [[ ! -f ~/.gitconfig.tmp ]]; then
		touch ~/.gitconfig.tmp || return
		$hide ~/.gitconfig.tmp || return
	fi

	echo "Updating icons..."
	makeDir "$pp/Development/Other/Git" || return
	$mv "$pp/Git Extensions.lnk" "$pp/Development/Other/Git" || return
	sudo rm -f "$pd/Git Extensions.lnk" || return

	GitHelper profile restore default || return
}

gitUp()
{
	pip install git-up || return;
	git config --global git-up.rebase.auto false || return
}

gitX()
{
	printf "**************************************************\n* GitX\n**************************************************\n"
	run "Shareware/GitX/GitX-dev.dmg" || return # http://rowanj.github.io/gitx/
}

gitKraken()
{
	printf "**************************************************\n* Git Kraken\n**************************************************\n"
	run "Shareware/Git Kraken/setup/" -p "GitKrakenSetup.exe" "installGitKraken.dmg" "" || return # https://www.gitkraken.com/download

	echo "Updating icons..."
	$mv "$pp/GitKraken.lnk" "$pp/Development/Other/Git" || return
}

gitHub()
{
	printf "**************************************************\n* GitHub\n**************************************************\n"
	run "GitHub/setup/GitHubSetup.exe" || return # https://github-windows.s3.amazonaws.com/GitHubSetup.exe
	pause
	
	echo "Updating icons..."
	mergeDir --rename "$up/GitHub, Inc" "$up/Development/Other/GitHub" || return
	$rm "$ud/GitHub.appref-ms" || return
	$rm "$ud/Git Shell.lnk" || return

	echot "\
- GITHUB ENTERPRISE, GitHub Username or Email=IDSID
- Password=NNN
- GitHub Enterprise URL=https://GitHub.intel.com/
- Full Name=NNNN
- tools, options...
	- default storage directory=c:\Projects
	- SCAN FOR REPOSITORIES
- note: 
	- GitHib is useful for quickly cloning a repository from GitHub
	- clone a repository - click an account on the left channel, right click on the repository, and select Clone To..."
}

tortoiseGit()
{
	printf "**************************************************\n* TortoiseGit\n**************************************************\n"
	
	echot "- (optional) Check Registrer link handlers"
	run "Shareware/TortoiseGit/setup/TortoiseGit-1.8.7.0-64bit.msi" || return # https://code.google.com/p/tortoisegit/wiki/Download?tm=2

	echo "Updating icons..."
	mergeDir "$pp/TortoiseGit" "$pp/Development/Other"

	FindCompareProgram || return; clipw "$(utw "$program")" || return
	echot "\
- General
	- Contect Menu, uncheck all but Clone and Show log
	-Dialogs 1, check Enable Gravatar
- (optional) Diff Viewer (1 place) and Merge Tool (1 place), External=<paste>
- Icon Overlays
	- check Unversioned files mark parent folder as modified
	- Icon Set, Icon Set=Straight"
	GitHelper tgui /command:settings || return
}

BrowserHomePage()
{
	local file="$udata/replicate/default.htm"
	local url="file:///$(utw "$file")"

	[[ ! -f "$file" ]] && { EchoErr "inst: cannot access browser home page file \`$file\`: No such file"; return 1; }

 	# Chrome
	makeLink "$udata/replicate" "$adata/replicate" || return

	# Internet Explorer
	echo "- Tools, Internet Options, Use Current"
	InternetExplorer start "$url" || return
	pause
}

sysInternalsInstall()
{
	printf "**************************************************\n* SysInternals Tools\n**************************************************\n"
	registry import "$setupFiles/SysInternalsEula.reg"
}

appleCore()
{
	echo "Updating Apple icons..."
	makeDir "$ao/Apple" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return

}

iCloudInstall()
{
	printf "**************************************************\n* iCloud\n**************************************************\n"
	
	run "Apple/iCloud/iCloudSetup.exe" || return # http://support.apple.com/kb/DL1455

	echo "Updating icons..."
	mergeDir "$pp/iCloud" "$oo" || return
	mergeDir "$up/iCloud" "$oo" || return

	echo "Updating registry..."		
	registry delete "urun/AppleIEDAV" || return # C:\Program Files (x86)\Common Files\Apple\Internet Services\AppleIEDAV.exe
	registry delete "urun/ApplePhotoStreams" || return # C:\Program Files (x86)\Common Files\Apple\Internet Services\ApplePhotoStreams.exe
	registry delete "urun/iCloudDrive" || return # C:\Program Files (x86)\Common Files\Apple\Internet Services\iCloudDrive.exe
	registry delete "urun/iCloudServices" || return #  C:\Program Files (x86)\Common Files\Apple\Internet Services\iCloudServices.exe

	appleCore || return

	echot "\
iCloud Control Panel
- uncheck Mail, Contacts, Calendars, & Tasks and Bookmarks
- check Photo Stream"
}

iTunesInstall()
{
	printf "**************************************************\n* iTunes\n**************************************************\n"
	
	run "Apple/iTunes/setup/iTunes64Setup.exe" || return # http://itunes.com

	echo "Updating icons..."
	$rm "$pd/iTunes.lnk" || return
	mergeDir "$pp/iTunes" "$ao" || return

	QuickTimePost || return
	appleCore || return

	echot "\
- iTunes Store, Sign In
- Store, Authorize Computer...
- Notes: Ctrl-t visualizer, ctrl-f full screen"
}

QuickTimePost()
{
	$registry 32 delete "run/QuickTime Task" # "C:/Program Files/QuickTime/qttask.exe" -atboottime

	echo "Updating icons..."
	makeDir "$ao/Apple" || return
	mergeDir "$pp/QuickTime" "$ao" || return
	$rm "$pd/QuickTime Player.lnk" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return
}

TeamViewerInstall()
{
	printf "**************************************************\n* TeamViewer\n**************************************************\n"
	echo "- How do you want to use TeamViewer=personal / non-commercial use"

	run "TeamViewer/setup/TeamViewer_Setup_en.exe" || return # http://www.teamviewer.com/en/download/windows.aspx

	echo "Updating icons..."
	$mv "$pp/TeamViewer "?".lnk" "$pp/Operating System" || return
	$rm "$pd/TeamViewer "?".lnk" || rturn

	echot "\
- Computers & Contacts, Sign In, ...
- Add this computer, Comptuer name=<camel case>, Password/Confirm Password=<secure numeric>"
}

npp() { NotepadPpInstall; }
NotepadPpInstall()
{
	! IsPlatform win && return

	printf "**************************************************\n* Notepad++\n**************************************************\n"
	echo "- Uncheck Run Notepad++"

	run "Shareware/Notepad++/setup/npp.7.7.1.Installer.x64.exe" || return # http://notepad-plus-plus.org/download/

	FindFile "Shareware/Notepad++" || return

	if ask "Deleting existing plugins and install the defaults"; then
		$rc --mirror --quiet "$file/plugins/default" "$P/Notepad++/plugins" || return
	fi

	echo "Updating registry..."
	registry import "$file/setup/NotepadPP.reg" || return

	echo "Updating icons..."
	$mv "$pp/Notepad++.lnk" "$pp/Applications" || return
	$rmd "$pp/Notepad++" || return

	notepadpp profile restore default || return

	echot "\
- Settings, Shortcut Mapper...,  Reload from Disk=Ctrl+R
- Explorer, Search=*.txt, Open with, Choose another app, check Always use this app to open .txt files, 
  More apps, Look for another app on this PC, c:\Program Files\Notepad++\notepad++.exe
- keyboard shortcuts 
  ctrl-n/w=new/close,  ctrl+/-=zoom ctrl-r=refresh
  [shift]ctrl-tab=switch, ctrl-shift-o=file switcher
  [alt]click drag=[block] select, ctrl-space=auto complete"
	notepadpp || return
}

jreInstall()
{
	printf "**************************************************\n* Java Runtime Environment \n**************************************************\n"
	
	# Download 7: http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html#javasejdk
	# Download: http://www.java.com/en/download/manual.jsp
	# Download: http://www.oracle.com/technetwork/java/javase/downloads/index.html
	# Eary access: http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html
	# Test: http://www.java.com/en/download/installed.jsp http://java.com/en/download/help/testvm.xml
	# Services: JavaQuickStarterService
	run "Sun/Java/jre/*-x86.exe" || return
	run "Sun/Java/jre/*-x64.exe" || return

	JavaFinal
}

JavaFinal()
{
	echo "Updating registry..."
	$registry 32 delete "run/SunJavaUpdateSched"
	$registry 64 delete "run/SunJavaUpdateSched"

	echo "Updating icons..."
	JavaIcons || return

	ask "Test the Java browser plugin?" && JavaUtil test
	return 0
}

JavaIcons()
{
		mergeDir "$pp/Java" "$oo" || return
}

vmw() { VmwareWorkstationInstall; };

VmwareWorkstationInstall()
{
	printf "**************************************************\n* VMware Workstation\n**************************************************\n"
	run "VMware/workstation/setup/VMware-workstation-full-15.0.0-10134415.exe" || return # https://my.vmware.com/group/vmware/downloads#tab1

	echo "Creating VMware directory..."
	makeDir "$udata/VMware"
	makeDir "$udata/data/VMware"

	echo "Updating icons..."
	mergeDir "$pp/VMware" "$oo" || return
	sudo $rm "$pd/VMware Workstation Pro.lnk" || return

	echo "Updating firewall..." # When the guest uses NAT echo replies (ICMP type and code 0) must be allowed for ping to function on the guest
	$firewall rule add "VMware NAT Echo Reply" dir=in action=allow enable=yes profile=private,domain localip=any remoteip=any protocol=icmpv4:0,0 interfacetype=any edge=yes || return

	echot "\
- Edit, Preferences...
  - Workspace
    - Default location for virtual machines=Documents\data\VMware or d:\data\VMware
    - check Keep VMs running after workstation closes
    - check Enable all shared folders by default
  - Hotkeys, select Ctrl and Win only
  - Display
    - uncheck Autofit Window
    - check Autofit guest
    - uncheck Show toolbar edge when unpinned in full screen
  - Updates, check Automatically update VMware Tools on a virtual machine"
	# Start manually as default location folder is not yet configured
	start --wait "$P32/VMware/VMware Workstation/vmware.exe"
}

DashLane()
{
	printf "**************************************************\n* Dashlane\n**************************************************\n"
	run "Dashlane/Dashlane" -p "Inst.exe" ".dmg" "linux" || return # https://www.dashlane.com/download#downloaded

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/DashLane" "$oo" || return
		$rm "$ud/Dashlane.lnk" || return
	fi
}

LastPass()
{
	printf "**************************************************\n* LastPass\n**************************************************\n"
	run "LastPass/setup/lastappinstall_x64.exe" || return # https://lastpass.com/misc_download2.php

	echo "Updating icons..."
	mergeDir "$up/LastPass" "$oo" || return

	echo "Updating registry..."	
	#$registry 32 delete "run/LastApp" # C:\Program Files (x86)\LastPass\lastapp.exe
}

FoxitReaderInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	echot "**************************************************\n* Foxit Reader - PDF Reader\n**************************************************\n
- Uncheck Foxit Reader Creator
- Uncheck Enable Safe Reading Mode"
	
	if intel IsIntelHost; then
		run "Intel/erm/ErmClientInstall_1.5.0.18.exe" || return # https://adrms.intel.com/erm/ac/download/pdf/
	else
		run "Foxit/reader/setup/FoxitReader715.0425_enu_Setup.exe" || return # http://www.foxitsoftware.com/downloads/index.php 
	fi

	run "Foxit/reader/setup/FoxitPdfPreviewHandlerSetup_1_1.msi" || return # http://timheuer.com/blog/archive/2008/05/09/foxit-pdf-preview-handler.aspx

	echo "Updating icons..."
	FoxitReaderIcons || return

	echot "\
- Edit, Preferences
  - General, uncheck Show Start Page
  - History, Maximum number of documents in recently used list=10
  - Updater, Do not download"
	start "$P32/Foxit Software/Foxit Reader/FoxitReader.exe" || return
}

FoxitReaderIcons()
{
	mergeDir "$pp/Foxit Reader" "$ao" || return
	$rm "$pd/Foxit Reader.lnk" || return
	$rm "$ud/Foxit Reader.lnk" || return
}

iExplorerInstall()
{
	printf "**************************************************\n* iExplorer\n**************************************************\n"
	
	run "Macroplant/iExplorer/setup/" -p "iExplorer_Setup_3401.exe" "iExplorer-3.5.0.6.dmg" ""|| return # http://www.macroplant.com/iexplorer/download-ie3-pc.php

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating registry..."	
		$registry delete "urun/iExplorer" # "C:\Program Files (x86)\iExplorer\iExplorer.exe" /background

		echo "Updating icons..."
		mergeDir "$pp/iExplorer" "$oo" || return
		$rm "$oo/iExplorer/Uninstall iExplorer.lnk" || return
			$rm "$oo/iExplorer/iExplorer on the Web.url" || return
		QuickTimePost || return
  elif [[ "$PLATFORM" == "mac" ]]; then
		run "Shareware/Fuse/setup/osxfuse-2.7.1.dmg" || return # http://osxfuse.github.io
	fi
}

PicasaInstall()
{
	printf "**************************************************\n* Picasa\n**************************************************\n"
	
	echot "\
- Completing the Picasa 3 Setup
  - Uncheck Google as my default search engine in Internet Explorer
  - Uncheck Send anonymous usage stats to Google
- Only search My Documents, My Pictures, and Desktop
- Select Don't use Picasa Photo Viewer"

	run "Google/Picasa/setup/Picasa Setup v3.9.139.161.exe" || return
	run "Google/Picasa/starter/image v2.0.zip" "$P32/PicasaStarter" || return

	echo "Updating icons..."
	mergeDir --rename "$pp/Picasa 3" "$pp/Media/Other/Picasa" || return
	mergeDir "$up/Google+ Auto Backup" "$up/Operating System/Other" || return
	$rm "$pp/Media/Other/Picasa/Uninstall.lnk" || return
	$rm "$pd/Picasa 3.lnk" || return
	$makeShortcut "$P32/PicasaStarter/PicasaStarter.exe" "$pp/Media/Other/Picasa/Picasa Starter" || return

	echot "Tools, Options
- General
	- Check Single-click to exit Edit View
	- Delete from disk without confirmation
	- Check Remove from album without confirmation
- E-Mail, E-mail program=Use my Google account
- File Types, select .PNG
- Name Tags, check Store name tags in photo"	
	picasa || return
	pause
}

fsviewInstall() { FastStoneImageViewerInstall; }
FastStoneImageViewerInstall()
{
	printf "**************************************************\n* FastStone Image Viewer\n**************************************************\n"

	run "Shareware/FastStoneImageViewer/setup/FSViewerSetup53.exe" || return

	echo "Updating icons..."
	$rmd "$pp/FastStone Image Viewer" || return
	$mv "$pd/FastStone Image Viewer.lnk" "$pp/Media" || return

		echot "Settings, Settings (F12)
	- Viewer
		- uncheck Confirm on ESC exit
		- uncheck Confirm on overwriting files
		- uncheck Auto-Load next image in Crop Board
		- Single File Deleted to=Recyle-Bin, No Confirmation
	- Dual Monitor, check "Preview" on the secodary monitor
	- Associations, Select All
	- Favorites, Add, P:(\\NAS\Photo), Display Name=NAS"
	fsview start || return
}

irfanInstall() { IrfanViewInstall; }
IrfanViewInstall()
{
	printf "**************************************************\n* IrfanView\n**************************************************\n"
	
	run "Shareware/IrfanView/setup/iview451_x64_setup.exe" || return
	run "Shareware/IrfanView/setup/irfanview_plugins_436_setup.exe" || return
	
	echo "Updating icons..."
	mergeDir "$up/IrfanView" "$pp/Media/Other" || return
	$rm "$ud/IrfanView 64.lnk" || return
	$rm "$ud/IrfanView 64 Thumbnails.lnk" || return
}

CalibreInstall()
{
	printf "**************************************************\n* Calibre\n**************************************************\n"
	[[ "$PLATFORM" == "win" ]] && echo "- Advanced, uncheck Add install directory to path"

	local v=2.57.1 # http://calibre-ebook.com/download
	run "Shareware/Calibre/setup/" -p "calibre-64bit-$v.msi" "calibre-$v.dmg" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir --rename "$pp/calibre 64bit - E-book Management" "$ao/calibre" || return
		$rm "$pd/calibre 64bit - E-book management.lnk" || return
	fi

	echot "\
	- choose a location for your books=\\nas\home\documents\data\books
	- Manufacturers=Amazon, Devices=Kindle PaperWhite
	- E-Book Viewer, Configure, General, Page Flip options, Page flip duration=disabled
	- Notes: 
	  - Organizes library folders by <author>/<book> on import or metadata change
	  - Search uses regular expressions: not mobi and not pdf and not azw
	  - Import content from the download directory using the Add books button (content
	    is copied to the ebook location)"
}

Calibre2opdsInstall()
{
	printf "**************************************************\n* calibre2opds\n**************************************************\n"
	run "Shareware/Calibre/calibre2opds/setup/calibre2opds-3.3-253.zip" "$P/calibre2opds" || return # http://calibre2opds.com/downloads/

	echo "Updating icons..."
	$makeShortcut "$P/calibre2opds/rungui.cmd" "$pp/Media/calibre2opds - OPDS Catalog Generator" "-" "" "" min || return
	# cmd "/c /"$P/calibre2opds/rungui.cmd/""  "" 
	# --workingdir="$(utw "$P/calibre2opds")"
}

KindleInstall()
{
	printf "**************************************************\n* Kindle\n**************************************************\n"
	run "Amazon/Kindle/setup/KindleForPC-installer-1.16.44025.exe" || return # http://www.amazon.com/gp/kindle/mac/download http://www.amazon.com/gp/kindle/pc/download
	run "Amazon/Kindle/converter/Kindle DRM Removal v4.16.525.exe" || return # http://www.ebook-converter.com/kindle-drm-removal.htm

	echo Creating data folders...
	makeDir "$udata/Kindle" || return
	makeDir "$udata/eBook Converter" || return
	makeDir "$udoc/eBook Converter" || return
	$hide "$udoc/eBook Converter" || return

	echo "Updating icons..."
	mergeDir "$pp/Amazon" "$ao" || return
	mergeDir "$up/Amazon" "$ao" || return
	mergeDir --rename "$ao/Amazon/Amazon Kindle" "$ao/Amazon/Kindle" || return
	$rm "$pd/Kindle.lnk" || return
	$rm "$ud/Kindle.lnk" || return
	$rm "$ao/Amazon/Kindle/Uninstall Kindle.lnk" || return
	
	mergeDir "$pp/eBook Converter" "$ao" || return

	echot "\
Kindle for PC
- Tools, Options
  - General, uncheck Automatically install updates
  - Content, Change Folder, data/Kindle

- Kindle DRM Reoval
  - Output Option, Set Output Folder, Documents/data/Kindle DRM
  - Kindle, Kindle Serial Number=NNN"
	cygstart "https://www.amazon.com/gp/digital/fiona/manage?ie=UTF8&ref_=sv_kinc_7&signInRedirect=1&#manageDevices"
	kindle start || return
	kindle decrypt || return
}

QuickenInstall()
{
	printf "**************************************************\n* Quicken\n**************************************************\n"
	run "Quicken/Quicken/Quicken2018.exe" || return # http://quicken.intuit.com/support/help/quicken-2014-for-windows-release-notes--updates--and-mondo-patch-/GEN85883.html

	echo "Updating icons..."
	mergeDir --rename "$pp/Quicken" "$ao/Quicken"
	$rm "$pd/Quicken.lnk"

	echot "\
- Run Quicken, select I am already a Quicken user, Next, Next, Documents/Finances/Current/Finances
- Edit, Preferences
  - Quicken Preferences,  Setup/Backup, uncheck Manual Backup Reminder
  - Register/Data entry and QuickFill
    - Check Use enter key to move between fields
  - Reports and Graphs, select Customizing modifies current report or graph
- Click One Step Update, Register 
  - Check Don't show this summary again unless there is an error"
}

HarmonyRemoteInstall()
{
	printf "**************************************************\n* Harmony Remote\n**************************************************\n"
	run "Logitech/Harmony Remote/LogitechHarmonyRemote7.7.0-WIN-x86.exe" || return # http://www.logitech.com/en-us/440/6441?section=downloads&bit=&osid=14

	echo "Updating icons..."
	mergeDir "$pp/Logitech" "$ao" || return
	$rm "$pd/Logitech Harmony Remote Software 7.lnk" || return
}

VeraCryptInstall()
{
	printf "**************************************************\n* VeraCrypt\n**************************************************\n"
	local v="1.16" # https://veracrypt.codeplex.com/wikipage?title=Downloads

	run "Shareware/VeraCrypt/setup/" -p "VeraCrypt Setup $v.exe" "VeraCrypt_${v}.dmg" "veracrypt-$v-setup" || return 

	makeDir "$UserHome/Documents/data/VeraCrypt" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		mergeDir "$pp/VeraCrypt" "$ao" || return
		$rm "$pd/VeraCrypt.lnk" || return
	fi

	echot "\
- Settings, Hot Keys...
	- Mount Favorite Volumes - Control+Shift+Alt+F2
	- Dismount All - Control+Shift+Alt+F3
	- Force Dismount All, Wipe Cache & Exit - Control+Shift+Alt+F4
- Settings, Preferences
	- Uncheck Preserve modification timestamp of file containers
	- Check Cache passwords in driver memory
	- Uncheck Wipe cached passwords on auto-dismount and exit
- Select File..., data/VeraCrypt, personal.tc, Mount
- Favorites, Add Mounted Volumes to Favorites...
	- Label of selected favorite volume=Personal"
	#start --standard VeraCrypt start
}

FLuxInstall()
{
	printf "**************************************************\n* f.lux\n**************************************************\n"
	run "Shareware/f.lux/" -p "flux-setup.exe" "Flux.zip" "" || return # http://justgetflux.com/	

	echo "Updating icons..."
	mergeDir "$up/Flux" "$up/Operating System/Other" || return

	echo "Updating registry..."	
	$registry delete "urun/f.lux" # "C:\Users\jjbutare\AppData\Local\FluxSoftware\Flux\flux.exe" /noshow

	echot "\
- Location: Search
- Transition: Slow
- check Start F.lux at Login"
	[[ "$PLATFORM" == "mac" ]] && { start "/Applications/Flux.app" || return; }
}

SnagItInstall()
{
	printf "**************************************************\n* snagIt\n**************************************************\n"
	echo "- Options, uncheck Windows Explorer Menu Extension"

	local major="13"
	local v="SnagIt V$major.1.2.7933." # http://www.techsmith.com/download/licenses/snagitupgrade.asp
	run "TechSmith/SnagIt/setup/$v" -p "exe" "dmg" "" || return

	echo "Updating icons..."
	mergeDir --rename "$pp/TechSmith" "$ao/TechSmith" || return
	$ren "$ao/TechSmith/Snagit $major Editor.lnk" "$ao/TechSmith/Snagit Editor.lnk" || return
	$ren "$ao/TechSmith/Snagit $major.lnk" "$ao/TechSmith/Snagit.lnk" || return
	$rm "$pp/Startup/Snagit $major.lnk" || return
 
 	if [[ "$PLATFORM" == "win" ]]; then
		echo "Creating registry entries..."
		SnagIt start || return
		SnagIt close || return

		echo "Updating registry..."
		local r="HKCU/Software/TechSmith/SnagIt/$major" folder="$udoc/data/SnagIt"
		registry 32 set "$r/CatalogFolder" REG_SZ "$folder/" || return
		registry 32 set "$r/ExternalOutputDir" REG_SZ "$folder/Program/" || return

		echo "Updating directories..."
		mergeDir "$udoc/Snagit" "$udata" || return
	fi

	case "$PLATFORM" in
		mac) echot "\
Snagit, Preferences...
- General, select Menu Bar Icon
- Capture, check Always copy capture to clipboard
- Advanced, Autosave Location=~/data";;
		win) echot "\
- Unlock with your Software Key
- Preferences...
	- General, uncheck Run Snagit when Windows starts
	- Hotkeys, Repeat last capture=Print Screen
- +, New Preset...
  - uncheck Preview in Editor, check Copy to Clipboard
  - uncheck Preview in Editor, Share=Word, Hotkey=Shift Print Scrern";;
	esac
	SnagIt start || return
}

ParallelsDesktopInstall()
{
	printf "**************************************************\n* Parallels Desktop\n**************************************************\n"
	run "Parallels Desktop/setup/ParallelsDesktop-10.0.0-27675.dmg" || return # http://www.parallels.com/downloads/desktop/

	echo "Updating icons..."
	$rm "$la\com.parallels.mobile.prl_deskctl_agent.launchagent.plist" || return
	$rm "$ula\com.parallels.mobile.startgui.launchagent.plist" || return

	echot "\
- Preferences
	- Shortcuts
		- System Shortcuts, Send system shortcuts=Always
		- Profile=Windows Custom - based on Windows, uncheck all
		add cmd-down=Ctrl+End cmd-up=Ctrl+Home ctrl-option-right=Win+Right 
		ctrl-option-left=Win+Left
- Virtual Machine, Configure...
	- Options
		- Startup and Shutdown, On VM Shutdown=Close Window
		- Applications
			- check Show Dock icons in Coherence only
			- uncheck Dock icons bounce to alert
		- Full Screen, check Use all displays in full screen
	- Hardware
		- Mouse & Keyboard, uncheck Mouse pointer sticks at window edges
		- Network 1, Type=Bridge, Default adapter
	- Security, check Do not back up virtual machine"
}

ChocolateyInstall()
{
	printf "**************************************************\n* choclatey\n**************************************************\n"
	# installs: user environment path=c:\Chocolatey\bin, ChocolateyInstall=c:\Chocolatey
	cygstart --wait cmd /c powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" "&&" pause
}

SyncplicityInstall()
{
	printf "**************************************************\n* Syncplicity\n**************************************************\n"

	[[ ! -f "$P/Syncplicity/Syncplicity.exe" ]] && ask "Install Syncplicity" &&
		{ run ism:appid=24064 "Syncplicity" || return; }

	echo "Updating icons..."
	mergeDir "$pp/Syncplicity" "$ao" || return

	echo "Updating registry..."	
	$registry delete "run/Syncplicity" # C:\Program Files\Syncplicity\Syncplicity.exe

	pfpc "$HOME/Syncplicity"
	echot "\
- Settings, Account, check Hide file download notifications
- Manage folders, Desktop/Documents/Favorites, Syncplicity, Delete folder
- Explorer
  - Libraries, Documents, Properties
    - Add..., <paste>
    - Move Up (to top), Set as default save location
  - View, List"
	start explorer "$udoc" || return

}

WindowsAdministrationToolsInstall()
{
	printf "**************************************************\n* Windows Administration Tools\n**************************************************\n"
	run "Microsoft/Server/tools/WindowsTH-RSAT_WS_1803-x64.msu" || return # http://www.microsoft.com/en-us/search/result.aspx?q=Remote%20Server%20Administration%20Tools&form=DLC

	echo "Updating icons..."
	mergeDir "$pp/Administrative Tools" "$oo" || return
	$rm "$pp/Server Manager.lnk" || return
	$rm "$pp/Administrative Tools.lnk" || return
}

MosaicoInstall()
{
	printf "**************************************************\n* Mosaico\n**************************************************\n"
	echo "- uncheck Launch Mosaico"

	run "Soulid Studio/Mosaico/setup/Mosaico Setup v1.9.0.0.exe" || return # http://www.soulidstudio.com/download/

	echo "Updating icons..."
	mergeDir "$pp/Mosaico" "$oo" || return

	echo "Updating registry..."	
	$registry delete "urun/Mosaico" # C:\Program Files (x86)\Mosaico\mosaico.exe

	echot "\
- Try Mosaico for Free!
- unselect Auto Place
- Settings
	- uncheck Always on top of other windows
	- uncheck Display info message when reduced to system tray
	- check Start minimized to system tray
	- uncheck Start with "auto place" turned on
	- uncheck Tabify when not active
	- Show quick guide at startup"
	sudo --standard mosaico start
}

ccInstall() { CreativeCloudInstall; }
CreativeCloudInstall()
{
	printf "**************************************************\n* Adobe Creative Cloud\n**************************************************\n"
	run "Adobe/Creative Cloud/setup/" -p "CreativeCloudSet-Up.exe" "CreativeCloudInstaller.dmg" "" || return # https://creative.adobe.com/products/creative-cloud

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		makeDir "$pp/Media/Other/Adobe" || return
		$mv "$pp/Adobe"*".lnk" "$pp/Media/Other/Adobe" || return
		$mv "$pd/Adobe"*".lnk" "$pp/Media/Other/Adobe" || return

		echo "Updating registry..."	
		registry delete "run/AdobeGCInvoker-1.0" # "C:\Program Files (x86)\Common Files\Adobe\AdobeGCClient\AGCInvokerUtility.exe"
		$registry 32 delete "run/Adobe Creative Cloud" # "C:\Program Files (x86)\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe" --showwindow=false --onOSstartup=true
		$registry set "HKCU/Software/Classes/CLSID/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return

		echo "Updating registry..."	
		$registry delete "urun/Adobe Acrobat Synchronizer" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\AdobeCollabSync.exe"
		$registry delete "run/AdobeAAMUpdater-1.0" # "C:\Program Files (x86)\Common Files\Adobe\OOBE\PDApp\UWA\UpdaterStartupUtility.exe"
		$registry 32 delete "run/Acrobat Assistant 8.0" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\Acrotray.exe"

		echo "Moving data folders..."
		makeLink --merge "$udata/app/Creative Cloud Files" "$WIN_HOME/Creative Cloud Files" || return
		makeLink --merge --hide "$udata/app/Adobe" "$udoc/Adobe" || return
	fi
}

ProxifierInstall()
{
	printf "**************************************************\n* Proxifier\n**************************************************\n"
	run "Proxifier/setup/" -p "ProxifierSetup.exe" "Proxifier.app.zip" "" || return # http://www.proxifier.com/download.htm https://intelpedia.intel.com/Proxifier


	FindFile "Proxifier/profiles/Intel Custom.ppx" || return
	clipw "$file" || return	
	echot "\
- File, Import, <paste>"
}

IntuosProInstall()
{
	printf "**************************************************\n* Intuos Pro\n**************************************************\n"
	run "Intuos/Pro/setup/WacomTablet_6.3." -p "16-2.exe" "15-3.dmg" "" || return # http://us.wacom.com/en/support/drivers/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/Wacom Tablet" "$pp/Media/Other" || return
	fi
}

DiskInventortyXInstall()
{
	printf "**************************************************\n* Disk Inventory X\n**************************************************\n"
	run "Shareware/Disk Inventory X" -p "" "DIX1.0Universal.dmg" "" || return # http://www.derlien.com/downloads/index.html
}

RubyInstall()
{
	local devPackage="ruby$(ruby -e 'puts RUBY_VERSION[/\d+\.\d+/]')-dev"

	if ! InPath ruby; then
		if IsPlatform cygwin; then { cygwin package ruby || return; }
		elif IsPlatform debian; then { package ruby $devPackage || return; }; fi
	fi

	makeDir ~/.gem && $hide ~/.gem || return
	IsPlatform mac && { echo "gem: -n/usr/local/bin" >> ~/.gemrc; }
}

PythonInstall()
{	
	printf "**************************************************\n* Python\n**************************************************\n"

	if ! InPath python3; then
		if IsPlatform cygwin; then cygwin package python || return
		elif IsPlatform debian; then package python3 || return; fi
	fi

	# pip: https://packaging.python.org/tutorials/installing-packages/ https://pip.pypa.io/en/stable/installing/
	if ! InPath pip; then
		IsPlatform mac && { easy_install pip	|| return; }
		! InPath pip && { python -m ensurepip --default-pip || return; }
		! InPath pip && { get-pip.py || return; }
	fi

	IsPlatform win && { makeDir ~/.cache ~/.pip && $hide ~/.cache ~/.pip || return; }
	
	! InPath pip-review && { pip install pip-tools || return; }
}

SevenZip()
{
	! IsPlatform win && return

	printf "**************************************************\n* 7-Zip\n**************************************************\n"
	run "Shareware/7-Zip/setup/7z1805-64.exe" || return # http://www.7-zip.org/download.html

	# Update bin files
	$cp "$P/7-zip/7-zip.chm" "$DATA/platform/win" || return
	$cp "$P/7-zip/7z.exe" "$P/7-zip/7z.dll" "$DATA/platform/win" || return

	echo "Updating icons..."
	mergeDir "$pp/7-Zip" "$ao" || return

	clipw "$(utw "$P\Sublime Text 4\sublime_text.exe")" || return
	echot "\
- Tools, Options
  - System,  above All Users click + twice
  - View=Editor=<paste>
  - Diff=C:\Program Files\Beyond Compare 4\BComp.exe
  - Settings, check Show system menu"
  "$P/7-Zip/7zFM.exe" || return
}

PaintNetInstall()
{
	printf "**************************************************\n* paint.net\n**************************************************\n"
	run "Shareware/paint.net/setup/paint.net.4.0.6.install.exe" || return # http://www.getpaint.net/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/paint.net.lnk" "$pp/Media" || return
		$rm "$pd/paint.net.lnk" || return
	fi
}

FiddlerInstall()
{
	printf "**************************************************\n* Fiddler\n**************************************************\n"
	run "Telerik/Fiddler/FiddlerSetup.exe" || return # http://www.telerik.com/fiddler

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/Fiddler4.lnk" "$pp/Development" || return
	fi
}

LinqPadInstall()
{
	printf "**************************************************\n* LINQPad\n**************************************************\n"
	run "Shareware/DOT.NET/LinqPad/LINQPad5Setup.exe" || return # https://www.linqpad.net/Download.aspx

	echo "Moving data folders..."
	makeDir "$udata/LINQPad" || return
	makeLink --merge --hide "$udata/LINQPad" "$udoc/LINQPad Queries" || return

	echo "Updating icons..."
	$mv "$ud/LINQPad 5.lnk" "$pp/Development/DotNet" || return
	$rmd "$pp/LINQPad" || return
}

MusicBeeInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* MusicBee\n**************************************************\n"
	run "Shareware/MusicBee/setup/MusicBeeSetup_3_0_Update1.exe" || return # http://getmusicbee.com/download.html

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/MusicBee" "$pp/Media/Other" || return
		$rm "$ud/MusicBee.lnk" || return
	fi

	echot "\
- Cancel"
}

DymoLabelInstall()
{
	printf "**************************************************\n* Dymo Label\n**************************************************\n"
	run "DYMO/Label/setup/" -p "DLS8Setup.8.5.3.exe" "DLS8Setup.8.5.3.dmg" "" || return # http://www.dymo.com/en-US/dymo-user-guides

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/DYMO" "$ao" || return
		$rm "$pd/DYMO Label v.8.lnk" || return

		echo "Moving data folders..."
		makeLink --merge --hide "$udata/DYMO Label" "$udoc/DYMO Label" || return
	fi
}

DuetInstall()
{
	printf "**************************************************\n* Duet Display\n**************************************************\n"
	run "hardware/duet/" -p "DuetSetup-1-5-3-3.exe" "duet-2-0-3-4.zip" "" || return # 

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/Duet Display" "$oo" || return
		$rm "$pd/duet.lnk" || return
	fi

		echot "\
- ​60 FPS, High Power, 11024"
}

TidalInstall()
{
	printf "**************************************************\n* TIDAL\n**************************************************\n"
	run "TIDAL/TIDALSetup." -p "exe" "dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/TIDAL" "$up/Media/Other" || return
		$rm "$ud/TIDAL.lnk" || return
	fi
}

OpcScoutInstall()
{
	printf "**************************************************\n* OPC Scout\n**************************************************\n"
	run "Siemens/setup/OPCScoutV10.zip" "$P32/OPCScoutV10" || return

	echo "Updating icons..."
	MakeShortcut "/cygdrive/c/Program Files (x86)/OPCScoutV10/OPCScoutV10.exe" "$pp/Development/OPC Scout.lnk" || return
	
}

MatrikonOpcSimulatorInstall()
{
	printf "**************************************************\n* Matrikon OPC Simulator\n**************************************************\n"
	run "Matrikon/setup/MatrikonOPCSimulation.EXE" || return

	echo "Updating icons..."
	mergeDir "$pp/MatrikonOPC" "$up/Development/Other" || return
}
	
GrayboxOpcInstall()
{
	printf "**************************************************\n* Graybox OPC \n**************************************************\n"
	run "Graybox/setup/gbopcsim18.msi" || return # http://gray-box.net/opc_simulator.php

	echo "Updating icons..."
	mergeDir "$pp/Graybox" "$up/Development/Other" || return
}

IntelUtilities()
{
	local dest="$oo/Intel"

	IsVm && return 0

	printf "**************************************************\n* Intel Driver Update Utility \n**************************************************\n"
	run "Intel/driver/Intel-Driver-and-Support-Assistant-Installer.exe" || return # https://www-ssl.intel.com/content/www/us/en/support/detect.html
	run "Intel/driver/SetupRST.exe" || return # https://downloadcenter.intel.com/download/27984/Intel-Rapid-Storage-Technology-Intel-RST-User-Interface-and-Driver?product=55005
	run "Intel/driver/BT_21.20.0_64_Win10.exe" || return # https://www.intel.com/content/www/us/en/support/articles/000005489/network-and-i-o/wireless-networking.html
	run "Intel/driver/WiFi_21.20.0_Driver64_Win10.exe" || return # https://downloadcenter.intel.com/download/28876/Windows-10-Wi-Fi-Drivers-for-Intel-Wireless-Adapters
	run "Intel/driver/mb_driver_thunderbolt_x299/Winx64/setup.msi" || return

	echo "Updating icons..."

	$rmd "$pp/Intel Driver and Support Assistant"  || return
	$mv "$pp/Intel Driver and Support Assistant/Intel(R) Driver & Support Assistant Tray.lnk" "$dest/Intel Driver Update.lnk" || return
	$rm "$pd/Intel(R) Driver Update Utility 2.7.2.lnk" || return

	mv "$pp/Intel/Intel"*" Rapid Storage Technology.lnk" "$dest/Rapid Storage Technology.lnk" >& /dev/null
	sudo rm -f "$pd/"*"Rapid Storage Technology.lnk" >& /dev/null
	$rmd "$pp/Intel" || return

	mv "$pp/Thunderbolt"*" Software/Thunderbolt"*" Software.lnk" "$dest/Thunderbolt.lnk"  >& /dev/null
	rm -fr "$pp/Thunderbolt"*" Software" >& /dev/null

	echo "Updating registry..."	
	$registry delete "run/IAStorIcon" # "C:\Program Files\Intel\Intel(R) Rapid Storage Technology\IAStorIconLaunch.exe" "C:\Program Files\Intel\Intel(R) Rapid Storage Technology\IAStorIcon.exe" 60
	$registry 32 delete "run/DSATray" # C:\Program Files (x86)\Intel Driver and Support Assistant\DsaTray.exe
}

GameIcons()
{
	echo "Moving data folders..."
	makeLink --merge --hide "$udata/app/Shadow of the Tomb Raider" "$udoc/Shadow of the Tomb Raider" || return

	echo "Updating icons..."
	$mv "$ud/The Elder Scrolls V Skyrim VR.url" "$pp/Game" || return
	$mv "$ud/Far Cry 5.url" "$pp/Game" || return	
	$mv "$ud/Fortnite.url" "$pp/Game" || return	
	$mv "$ud/Half-Life 2 Lost Coast.url" "$pp/Game" || return
	$mv "$ud/Jurassic World Evolution.url" "$pp/Game" || return
	$mv "$ud/Middle-earth Shadow of Mordor.url" "$pp/Game" || return
	$mv "$ud/NBA 2K17.url" "$pp/Game" || return
	$mv "$ud/Shadow of the Tomb Raider.url" "$pp/Game" || return
	$mv "$ud/The Witness.url" "$pp/Game" || return	
}

SteamInstall()
{
	printf "**************************************************\n* Steam\n**************************************************\n"
	run "game/Steam/" -p "SteamSetup.exe" "steam.dmg" "steam_latest.deb" || return # http://store.steampowered.com/about/
	
	echo "Updating icons..."
	mergeDir "$up/Steam" "$pp/Game/Other" || return
	mergeDir "$pp/Steam" "$pp/Game/Other" || return
	$rm "$pd/Steam.lnk" || return
	GameIcons || return

	echo "Updating registry..."	
	$registry delete "urun/Steam" # Steam	Steam Client Bootstrapper	Valve Corporation, c:\program files (x86)\steam\steam.exe
}

EpicGames()
{
	printf "**************************************************\n* Epic Games\n**************************************************\n"
	run "game/Epic Games/EpicInstaller-7.9.0.msi" || return # https://www.epicgames.com/account/personal#

	echo "Updating icons..."
	$mv "$pp/Epic Games Launcher.lnk" "$pp/Game/Other" || return
	$rm "$pd/Epic Games Launcher.lnk" || return
	GameIcons || return
}

UplayGames()
{
	printf "**************************************************\n* UPlay (UbiSoft)\n**************************************************\n"
	run "game/Ubisoft/UplayInstaller.exe" || return #

	echo "Updating icons..."
	mergeDir "$up/Ubisoft" "$pp/Game/Other" || return
	$rm "$ud/Uplay.lnk" || return

	echo "Moving data folders..."
	makeLink --merge --hide "$udata/app/Uplay" "$udoc/My Games" || return
}

GreenShot()
{
	printf "**************************************************\n* GreenShot\n**************************************************\n"
	run "Shareware/Greenshot/setup/Greenshot-INSTALLER-1.2.10.6-RELEASE." -p "exe" "mac" "linux" || return # http://getgreenshot.org/downloads/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/GreenShot" "$oo" || return
	fi
}

PartitionAssistant()
{
	local v="8.0"
	printf "**************************************************\n* Partition Assistant\n**************************************************\n"
	run "AOMEI/Partition Assistant/setup/PAssist_ProDemo.exe" || return # http://www.aomeisoftware.com/download/pa/full/DM_Pro.zip

	echo "Updating icons..."
	mergeDir --rename "$pp/AOMEI Partition Assistant" "$oo/Partition Assistant" || return
	$ren "$oo/Partition Assistant/AOMEI Partition Assistant Demo Edition $v.lnk" "$oo/Partition Assistant/Partition Assistant.lnk" || return
	$rm "$pd/AOMEI Partition Assistant Professional Edition $v.lnk"

}

cue() { CorsairUtilityEngine; };
CorsairUtilityEngine()
{
	printf "**************************************************\n* Corsair Utility Engine (CUE)\n**************************************************\n"
	run "hardware/Corsair/Utility Engine/iCUESetup_3.18.77_release.msi" || return # https://www.corsair.com/us/en/downloads

	echo "Updating icons..."
	$mv "$pd/iCUE.lnk" "$pp/Game"
	$rmd "$psm/Corsair Utility Engine" || return

	echo "Updating registry..."	
	$registry 32 delete "run/CORSAIR iCUE Software" # "C:\Program Files (x86)\Corsair\CORSAIR iCUE Software\iCUE Launcher.exe" --autorun
}

LogitechOptions()
{
	printf "**************************************************\n* Logitech Options\n**************************************************\n"
	run "hardware/Logitech/options/" -p "Options_6.80.372.exe" "Options_6.80.384.zip" "" || return # http://support.logitech.com/en_us/software/options

	echo "Updating icons..."
	$mv "$pp/Logitech/Logitech Options.lnk" "$pp/Operating System" || return
	$rmd "$pp/Logitech" || return

	echo "Updating registry..."	
	$registry delete "run/LogiOptions" # C:\Program Files\Logitech\LogiOptions\LogiOptions.exe /noui
	$registry delete "run/Logitech Download Assistant" # C:\Windows\system32\rundll32.exe C:\Windows\System32\LogiLDA.dll,LogiFetch

	echot "\
- Point & Scroll, Smooth Scrolling=Enabled, Scroll wheel direction=Inverted
- Flow, Setup"
}

GlassWire()
{
	printf "**************************************************\n* GlassWire\n**************************************************\n"
	run "GlassWire/GlassWireSetup.exe" || return # https://www.glasswire.com/download/

	echo "Updating icons..."
	mergeDir "$pp/GlassWire" "$oo" || return
	sudo $rm "$pd/GlassWire.lnk"

	echo "Updating registry..."	
	$registry delete "urun/GlassWire" # "C:\Program Files (x86)\GlassWire\glasswire.exe" -hide

	echot "\
- Show Mini Viewer
- Activate GlassWire"
}

GigabyteMotherboard()
{
	printf "**************************************************\n* GFigabyte Motherboard\n**************************************************\n"
	run "hardware/Gigabyte/setup/mb_utility_appcenter_B17.1226.1/setup.exe" || return # https://www.gigabyte.com/us/Motherboard/X299-DESIGNARE-EX-rev-10#support-dl

	echot "\
Do not update APP Center
- Preferences
	- Update Schedule=Turn off
	- Uncheck Always run on next reboot
- @BIOS - GUI for BIOS backup, update (from server or file)
- BIOS Setup - configure some BIOS settings
- EasyTune - tune hardware (profile, auto, or advanced), Advanced DDR OC
	- XMP Setup Profile=1 (may need to set from BIOS)
- Fast Boot - enable or disable fast boot, enter BIOS from Windows
	- Ultra Fast
- RGB Fusion - LED control
- SIV - System Informationm Viewer, fan status, control, alers, and history
	 - Smart Fan 5 Advanced
		- System 1, click case, Rear Fan
		- System 2, click case, CPU Fan
		- System 3, click case, Front Fan
		- System 4, click case, Front Fan
- VTuner - video card tuning"
	pause

	echo "Updating registry..."	
	$registry delete "HKLM/SOFTWARE/WOW6432Node/Microsoft/Windows/CurrentVersion/RunOnce/PreRun" # C:\Program Files (x86)\GIGABYTE\AppCenter\PreRun.exe
	$registry delete "run/RTHDVCPL" # "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s

	echo "Moving data folders..."

	if [[ ! -d $udata/SIV ]]; then
		makeDir "$udoc/SIV" || return
		makeLink --merge --hide "$udata/SIV" "$udoc/SIV" || return
	fi

	if [[ ! -d $udata/EasyTune ]]; then
		makeDir "$udoc/EasyTune" || return
		makeLink --merge --hide "$udata/app/EasyTune" "$udoc/EasyTune" || return
	fi

	echo "Updating icons..."
	local installDir="$P32/GIGABYTE" dest="$oo/GIGABYTE"
	mergeDir "$pp/GIGABYTE" "$oo" || return

	$ren "$oo/GIGABYTE/APP Center/Launch APP Center.lnk" "$oo/GIGABYTE/APP Center/GIGABYTE APP Center.lnk" || return
	$mv "$pd/RGBFusion.lnk" "$dest" || return
	$rmd "pp/GIGABYTE" || return
	$makeShortcut "$installDir/@BIOS/FlashBIOS.exe" "$dest/@BIOS" || return
	$makeShortcut "$installDir/BIOS Setup/BiosSetupConsole.exe" "$dest/BIOS Setup.lnk" || return
	$makeShortcut "$installDir/EasyTune/EasyTune.exe" "$dest/Easy Tune.lnk" || return
	$makeShortcut "$installDir/FastBoot/FastBoot.exe" "$dest/Fast Boot.lnk" || return
	$makeShortcut "$installDir/SIV/ThermalConsole.exe" "$dest/System Information Viewer (SIV).lnk" || return
	$makeShortcut "$installDir/VTuner/vTuner.exe" "$dest/vTuner.lnk" || return
}

EpsonScan()
{
	printf "**************************************************\n* Epson Scan\n**************************************************\n"
	run "hardware/Epson/Perfection V100 Photo/epson13833.exe" || return # https://epson.com/Support/Scanners/Perfection-Series/Epson-Perfection-V100-Photo/s/SPT_B11B184051

	echo "Updating icons..."
	mergeDir "$pp/EPSON Scan" "$oo" || return
	$rm "$pd/EPSON Scan.lnk"
}

DoxieGo()
{
	printf "**************************************************\n* Doxie Go\n**************************************************\n"
	run "hardware/Doxie/Go/" -p "DoxieSetup_2.11.3.exe" "Doxie_2.11.3.dmg" "" || return # http://help.getdoxie.com/doxiego/

	echo "Updating icons..."
	$mv "$pd/Doxie.lnk" "$pp/Operating System" || return
	$rmd "$pp/Doxie" || return
}

PdfElement()
{
	printf "**************************************************\n* PDFelement\n**************************************************\n"
	run "Wondershare/PDFelement/" -p "pdfelement6-pro_setup_full2990.exe" "mac-pdfelement6-pro_full2992.dmg" "" || return # ​https://pdf.wondershare.com/

	echo "Updating icons..."
	mergeDir "$pp/Wondershare/" "$pp/Applications/Other" || return
	$rm "$pd/PDFelement 6 Pro.lnk"
}

TigerVnc()
{
	printf "**************************************************\n* TigerVNC\n**************************************************\n"
	echot "- uncheck all Server configuration options"
	run "Shareware/TigerVNC/" -p "tigervnc64-1.8.0.exe" "" "" || return # ​https://github.com/TigerVNC/tigervnc/releases

	echo "Updating icons..."
	mergeDir --rename "$pp/TigerVNC 64-bit" "$oo/TigerVNC" || return
	$rm "$pd/PDFelement 6 Pro.lnk"
}

TidyTabs() { AquaSnap; };
AquaSnap()
{
	! IsPlatform win && return

	printf "**************************************************\n* AquaSnap\n**************************************************\n"
	run "NURGO/AquaSnap.msi" || return # https://www.nurgo-software.com/pricing/aquasnap
	run "NURGO/TidyTabs.msi" || return # https://www.nurgo-software.com/pricing/tidytabs

	echo "Updating icons..."
	mergeDir "$pp/AquaSnap" "$oo" || return
	mergeDir "$pp/TidyTabs" "$oo" || return

	echo "Updating registry..."	
	$registry delete "urun/AquaSnap" # C:\Program Files (x86)\AquaSnap\AquaSnap.Daemon.exe
	$registry delete "urun/TidyTabs" # C:\Program Files (x86)\TidyTabs\TidyTabs.Daemon.exe

	echot "\
- TidyTabs, Settings..., Grouping, add mintty.exe notepad.exe ubuntu1804.exe winword.exe"
}

Garmin()
{
	printf "**************************************************\n* Garmin\n**************************************************\n"
	run "hardware/Garmin/setup/" -p "GarminExpress.exe" "GarminExpress.dmg" "" || return # GPS - https://www.garmin.com/en-US/software/express/
	run "hardware/Garmin/setup/" -p "BaseCamp_462.exe" "BaseCampforMac_463.dmg" "" || return # GPS - https://www.garmin.com/en-US/shop/downloads/basecamp
	run "hardware/Garmin/setup/" -p "inReach Sync en-US 166572.exe" "" "" || return # satellite - https://inreach.garmin.com/Sync

	echo "Updating icons..."
	mergeDir "$pp/Garmin" "$pp/Travel/Other" || return
	$rm "$pd/Garmin Express.lnk"	
	$rm "$pd/inReach Sync.lnk"	

	echo "Moving data folders..."
	makeLink --merge --hide "$udata/app/Garmin" "$udoc/My Garmin" || return

	echo "Updating registry..."	
	$registry delete "urun/GarminExpressTrayApp" # "C:\Program Files (x86)\Garmin\Express Tray\ExpressTray.exe"
}

Sena()
{
	printf "**************************************************\n* Sena\n**************************************************\n"
	run "hardware/Sena/setup/" -p "SenaBluetoothDeviceManagerForWindows-v3.8.2-setup_x64.exe" "SENABluetoothDeviceManagerForMAC-v3.7.pkg" "" || return # ​https://www.sena.com/software/#device-manager

	echo "Updating icons..."
	mergeDir "$up/Sena Technologies" "$pp/Travel/Other" || return
	$rm "$ud/SenaBluetoothDeviceManager.lnk"	
}

GoPro()
{
	printf "**************************************************\n* GoPro\n**************************************************\n"
	run "hardware/GoPro/setup/" -p "GoPro_Quik-WinInstaller-2.5.2.633.exe" "" "" || return # https://shop.gopro.com/softwareandapp/quik-%7C-desktop/Quik-Desktop.html#
	run "hardware/GoPro/setup/" -p "FusionStudio_x64_111_2018-02-07.exe" "FusionStudio_Mac_Sierra_111_2018-02-07.dmg" "" || return # https://shop.gopro.com/softwareandapp/gopro-fusion-studio-app/fusion-studio.html

	echo "Updating icons..."
	mergeDir "$pp/GoPro" "$pp/Travel/Other" || return
	mergeDir "$up/GoPro Fusion Studio 1.1" "$pp/Travel/Other/GoPro" || return
	mergeDir "$up/GoPro VR Player 3.0" "$pp/Travel/Other/GoPro" || return
	$rm "$pd/GoPro Quik.lnk"	 || return
	$rm "$ud/GoPro Fusion Studio 1.1.lnk"	 || return
	$rm "$ud/GoPro VR Player 3.0.lnk"	 || return
}

Geekbench()
{
	printf "**************************************************\n* Geekbench\n**************************************************\n"
	run "shareware/Geekbench/Geekbench-4.3.0-WindowsSetup.exe"|| return # https://www.geekbench.com/

	echo "Updating icons..."
	$mv "$up/Geekbench 4/Geekbench 4.lnk" "$pp/Applications/Geekbench.lnk" || return
	$rmd "$up/Geekbench 4" || return
}

dji()
{
	printf "**************************************************\n* DJI\n**************************************************\n"
	run "hardware/dji/Assitant/setup/" -p "DJI Assistant 2 1.2.3.exe" "DJI+Assistant+2+1.2.3.pkg" "" || return # https://www.dji.com/mavic/info#downloads

	echo "Updating icons..."
	mergeDir --rename "$up/DJI Product" "$pp/Travel/Other/DJI" || return
	mergeDir --rename "$pp/DJI Product" "$pp/Travel/Other/DJI" || return
	$rm "$pd/DJI Assistant 2.lnk" || return
}

OneDrive()
{
	echo "Configuring OneDrive..."
	SetVar --delete OneDrive
	$registry delete "urun/OneDrive" # "C:\Users\jjbutare\AppData\Local\Microsoft\OneDrive\OneDrive.exe" /background
	$registry delete "urun/OneDrive" # "C:\Users\jjbutare\AppData\Local\Microsoft\OneDrive\OneDrive.exe" /background
	registry set "HKCR/CLSID/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return
	$mv "$pp/OneDrive"*".lnk" "$pp/Applications/Accessories" || return
	$mv "$up/OneDrive"*".lnk" "$pp/Applications/Accessories" || return
}

tribler()
{
	printf "**************************************************\n* Tribler\n**************************************************\n"
	run "shareware/tribler/Tribler_7.2.2_x64.exe" || return # https://www.tribler.org/


	echo "Updating icons..."
	mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
	$rm "$pd/VLC media player.lnk" || return

	mergeDir "$up/Tribler" "$oo" || return
	$rm "$ud/Tribler.lnk" || return

		echot "\
- settings
	- Save files to=C:\Users\jjbutare\Downloads
	- uncheck Family filter / Download anonymously / Encrypted anonymous seeding"
}

TrueImage()
{
	printf "**************************************************\n* True Image\n**************************************************\n"
	run "acronis/True Image/setup/AcronisTrueImage2019." -p "exe" "dmg" "" || return # https://www.acronis.com/en-us/support/updates/index.html

	echo "Updating icons..."
	mergeDir "$pp/Acronis" "$oo" || return
	$rm "$pp/Acronis True Image.lnk" || return
	$rm "$pd/Acronis True Image.lnk" || return

	echo "Updating registry..."	
	$registry delete "run/Acronis Scheduler2 Service" # C:\Program Files (x86)\Common Files\Acronis\Schedule2\schedhlp.exe
	$registry 32 delete "run/AcronisTibMounterMonitor" # C:\Program Files (x86)\Common Files\Acronis\TibMounter\TibMounterMonitor.exe
	$registry 32 delete "run/TrueImageMonitor.exe" # C:\Program Files (x86)\Acronis\TrueImageHome\TrueImageMonitor.exe

	echot "\
- Active Protection, off
- settings, Mobile backup location=d:\backup"
}

ToDoBackup()
{
	printf "**************************************************\n* ToDo Backup\n**************************************************\n"
	run "EaseUS/ToDo Backup Home/tbh_trial.exe" || return # https://www.easeus.com/backup-software/personal.html
	
	echo "Updating icons..."
	mergeDir --rename "$pp/EaseUS Todo Backup 11.5" "$oo/ToDo Backup" || return
	sudo $rm "$pd/EaseUS Todo Backup Home 11.5.lnk" || return
}

TeraCopy()
{
	printf "**************************************************\n* TeraCopy\n**************************************************\n"
	run "Shareware/TeraCopy/teracopy.exe" || return # https://codesector.com/teracopy
}

ParagonExtFs()
{
	printf "**************************************************\n* Paragon ExtFS \n**************************************************\n"
	run "Paragon/ExtFS/Paragon-608-PEU_WinInstallSN-4.3.852.msi" || return # http://www.paragon-drivers.com/extfs-windows/
	
	echo "Updating icons..."
	mergeDir --rename "$pp/Paragon ExtFS for Windows" "$oo/Paragon ExtFS" || return
	$rm "$pd/Paragon ExtFS for Windows.lnk" || return

	echo "Updating services..."
	service manual "ParagonMounter" || return # does not allow computer to sleep
}

BrotherPrinter()
{
	printf "**************************************************\n* Brother Printer \n**************************************************\n"
	echot "- Connection Type=Wired"
	run "hardware/Brother/MFC-L2740DW/setup/" -p "MFC-L2740DW-inst-C1-US.EXE" "MonoLaserFB14_ULW_TP_110.dmg" "" || return # http://support.brother.com/g/b/downloadhowto.aspx?c=us&lang=en&prod=mfcl2740dw_us_eu_as&os=108&dlid=dlf101844_000&flang=4&type3=583
	pause
	
	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/Brother" "$ao" || return
		$mv "$pd/Brother Creative Center.lnk" "$ao/Brother" || return
		$rm "$pd/Brother Utilities.lnk" || return

		echo "Updating registry..."	
		$registry 32 delete "run/BrStsMon00" # C:\Program Files (x86)\Browny02\Brother\BrStMonW.exe /AUTORUN
		$registry 32 delete "run/ControlCenter4" # C:\Program Files (x86)\ControlCenter4\BrCcBoot.exe /autorun
	fi
}

PowerPanel()
{
	printf "**************************************************\n* PowerPanel \n**************************************************\n"
	run "hardware/CyberPower/PowerPanel/setup/" -p "PPP_windows_v2.1.2.exe" "" "" || return # https://www.cyberpower.com/hk/en/software

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/CyberPower PowerPanel Personal" "$oo" || return
	fi
}

LgMonitor()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* LG Monitor\n**************************************************\n"
	run "hardware/LG/Gaming Monitor 34UC89G/" -p "OSC2_Setup_2-86.exe" "" "" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/OnScreen Control" "$oo" || return
		$rm "$pd/OnScreen Control.lnk" || return
	fi
}

DasKeyboard()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* Das Keyboard\n**************************************************\n"
	run "hardware/Das Keyboard/setup/" -p "Das-Keyboard-Q_3.2.4.exe" "q-Desktop.img" "linux" || return # https://www.daskeyboard.io/get-started/

	if [[ "$PLATFORM" == "win" ]]; then	
		mergeDir "$pp/Das-Keyboard-Q" "$oo" || return
		$rm "$ud/das-keyboard-q.lnk" || return
		$rmd "$up/GitHub, Inc" || return
		$registry 32 delete "run/Das Keyboard Q" || return # C:\Users\jjbutare\AppData\Local\das-keyboard-q\das-keyboard-q.exe
	fi
}

UniFi()
{
	jreInstall || return

	printf "**************************************************\n* Ubiquti UniFi Controller\n**************************************************\n"
	run "Hardware/Ubiquiti Networks/UniFi/setup/" -p "UniFi-installer.exe" "UniFi.pkg" "BZ.ar934x.v3.9.27.8537.180317.1223.bin" || return # https://www.ubnt.com/download/unifi/
	
	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/Ubiquiti UniFi" "$oo" || return
		$rm "$ud/UniFi.lnk" || return		
	fi
}

NordVpn()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* NordVPN\n**************************************************\n"
	run "NordVPN/" -p "NordVPNSetup.exe" "mac" "linux" || return # https://nordvpn.com/download/

	if [[ "$PLATFORM" == "win" ]]; then	
		$rmd "$pp/NordVPN" || return
		$mv "$pd/NordVPN.lnk" "$pp/Applications" || return
		$registry 32 delete "urun/NordVPN" || return # C:\Program Files (x86)\NordVPN\NordVPN.exe
	fi
}

CleanMyPc()
{
	printf "**************************************************\n* Clean My PC\n**************************************************\n"
	run "MacPaw/Clean My PC/" -p "CleanMyPC.exe" "CleanMyMacX.dmg" "" || return # https://macpaw.com

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/CleanMyPC" "$oo" || return
		$rm "$pd/CleanMyPC.lnk" || return
	fi
}

CloseAllWindows()
{
	! IsPlatform win && return

	printf "**************************************************\n* Close All Windows\n**************************************************\n"
	run "NTwind/CloseAll_4.0-setup.exe" || return # https://www.ntwind.com/software/closeall.html

	echo "Updating icons..."
	mergeDir "$pp/CloseAll" "$oo" || return
	$rm "$pd/CloseAll.lnk" || return
}

AltTabTerminator()
{
	! IsPlatform win && return

	printf "**************************************************\n* Alt-Tab Terminator\n**************************************************\n"
	run "NTwind/AltTabTer_3.8-setup.exe" || return # https://www.ntwind.com/software/alttabter.html

	echo "Updating icons..."
	mergeDir "$pp/Alt-Tab Terminator" "$oo" || return
	sudo $rm "$pd/Alt-Tab Terminator.lnk" || return

	echo "Updating registry..."	
	$registry delete "urun/Alt-Tab Terminator" # "C:\Program Files\Alt-Tab Terminator\AltTabTer64.exe" /startup
}

HiddenStart()
{
	printf "**************************************************\n* Hidden Start\n**************************************************\n"
	run "NTwind/Hstart_4.6-setup.exe" || return # https://www.ntwind.com/software/hstart.html

	echo "Updating icons..."
	mergeDir "$pp/Hidden Start" "$oo" || return
	$rm "$pd/Hidden Start.lnk" || return
}

QuickBooks()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* Quick Books\n**************************************************\n"
	run "Intuit/QuickBooks-Setup.exe" || return # 

	echo "Updating icons..."
	$mv "$ud/QuickBooks.lnk" "$pp/Applications" || return
	$mv "$up/QuickBooks.lnk" "$pp/Applications" || return
}

AxCrypt()
{
	printf "**************************************************\n* AxCrypt\n**************************************************\n"
	run "AxCrypt/setup/" -p "AxCrypt-2.1.1573.0-Setup.exe" "AxCrypt-Mac-2.2.578.0.pkg" "linux" || return # https://www.axcrypt.net/download/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/AxCrypt" "$oo" || return

		echo "Moving data folders..."
		makeLink --merge --hide "$udata/AxCrypt" "$udoc/My AxCrypt" || return
		makeLink --merge --hide "$uhome/DropBox/data/AxCrypt" "$uhome/DropBox/My AxCrypt" || return
		makeLink --merge --hide "$uhome/OneDrive/documents/data/AxCrypt" "$uhome/OneDrive/My AxCrypt" || return
	fi
}

TaskLayout()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* TaskLayout\n**************************************************\n"
	run "SystemGoods/TaskLayout-v0.7.0.5-Installer.exe" || return # http://www.systemgoods.com/
}

vlc()
{
	printf "**************************************************\n* VLC Media Player\n**************************************************\n"
	run "VideoLAN/" -p "vlc-3.0.4-win64.exe" "mac" "linux" || return # https://www.videolan.org/vlc/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
		$rm "$pd/VLC media player.lnk" || return
	fi
}

StandardNotes()
{
	! IsPlatform ubuntu,mac,win && return 0
	printf "**************************************************\n* Standard Notes\n**************************************************\n"

	local v="3.0.4" # https://standardnotes.org/ https://standardnotes.org/extensions?downloaded=linux
	run "Shareware/Standard Notes/" -p "standard-notes-setup-$v.exe" "Standard Notes.app" "standard-notes-$v-x86_64.AppImage" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$ud/Standard Notes.lnk" "$up/Applications" || return
		$rm "$up/Standard Notes.lnk" || return
	fi

}

AmcrestCamera()
{
	printf "**************************************************\n* Amcrest Camera\n**************************************************\n"
	run "hardware/Amcrest/utility/" -p "Amcrest_ConfigTool_Eng_V3.20.10.T.180715.exe" "Amcrest IP Config.zip" "linux" || return # https://support.amcrest.com/hc/en-us/categories/201939038-All-Downloads
	run "hardware/Amcrest/setup/" -p "Amcrest+Surveillance+Pro+Setup+V1.14.1.R.20161018.exe" "Amcrest_Surveillance_Pro_Mac.bz2" "linux" || return # https://support.amcrest.com/hc/en-us/categories/201939038-All-Downloads

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pd/Amcrest IP Config.lnk" "$pp/Surveillance" || return
		$rmd "$pp/Amcrest IP Config" || return

		$mv "$pd/Amcrest Surveillance Pro.lnk" "$pp/Surveillance" || return
		$rmd "$pp/Amcrest Surveillance Pro" || return
	fi
}

SurveillanceStation()
{
	printf "**************************************************\n* Surveillance Station\n**************************************************\n"
	run "Synology/Surveillance Station/" -p "Synology Surveillance Station Client-1.2.2-0589_x64.exe" "Synology Surveillance Station Client-1.2.2-0589.dmg" "linux" || return # https://www.synology.com/en-us/support/download/DS216+II?item_filter=surveillance#utilities


	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/Synology" "$pp/Surveillance/Other" || return
		$rm "$pd/Live View.lnk" || return
		$rm "$pd/Surveillance Station Client.lnk" || return
		$rm "$pd/Timeline.lnk" || return
	fi
}

plex()
{
	printf "**************************************************\n* PLEX\n**************************************************\n"
	run "PLEX/" -p "PlexMediaPlayer-2.23.0.920-5bc1a2e5-windows-x64.exe" "mac" "linux" || return # https://www.plex.tv/media-server-downloads/
	run "PLEX/" -p "Plex-Media-Server-1.14.0.5470-9d51fdfaa.exe" "mac" "linux" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/Plex Media Player" "$pp/Media/Other" || return
		mergeDir "$pp/Plex Media Server" "$pp/Media/Other" || return
		$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
		$rm "$pd/(prog).lnk" || return
	fi
}

oculus()
{
	printf "**************************************************\n* Oculus\n**************************************************\n"
	run "oculus/" -p "OculusSetup.exe" "mac" "linux" || return # https://www.oculus.com/setup/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pd/Oculus.lnk" "$pp/Game" || return
	fi
}

LinkShellExtension()
{
	printf "**************************************************\n* Link Shell Extension\n**************************************************\n"
	run "Shareware/Link Shell Extension/" -p "HardLinkShellExt_X64.exe" "mac" "linux" || return # http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.htm

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/Link Shell Extension" "$oo" || return
	fi
}

RightClickEnhancer()
{
	printf "**************************************************\n* Right Click Enhancer\n**************************************************\n"
	run "RBSoft/Right Click Enhancer/Right.Click.Enhancer.Professional.Setup.exe" || return # https://rbsoft.org/downloads/right-click-enhancer/

	echo "Updating icons..."
	mergeDir "$up/Right Click Enhancer Professional" "$oo" || return
	$rm "$ud/Right Click Enhancer Professional.lnk" || return	
}

Etcher() # disc image burner
{
	printf "**************************************************\n* Etcher\n**************************************************\n"
	run "Balena/Etcher/" -p "balenaEtcher-Setup-1.5.39-x64.exe" "mac" "linux" || return # https://www.balena.io/etcher/

	echo "Updating icons..."
	$mv "$up/balenaEtcher.lnk" "$up/Applications" || return
	$rm "$ud/balenaEtcher.lnk" || return	
}

DockerInstall()
{
	printf "**************************************************\n* Docker\n**************************************************\n"
	run "Shareware/Docker/" -p "Docker for Windows Installer.exe" "mac" "linux" || return # https://hub.docker.com/editions/community/docker-ce-desktop-windows

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$ud/Docker Desktop.lnk" "$pp/Operating Systemc" || return
	fi
}

xServer()
{
	printf "**************************************************\n* X Server\n**************************************************\n"
	RunPlatform xServer || return
}

xServerMac() { run "UNIX/XQuartz/XQuartz-2.7.11.dmg" || return; } # https://www.xquartz.org/
xServerRaspbian() { sudo bash -c '[[ ! -f $HOME/.Xauthority ]] && ln -s '$HOME'/.Xauthority $HOME/.Xauthority'; }		

xServerCygwin()
{
	cygwin package x || return
	mergeDir "$pp/Cygwin-X" "$oo" || return
}

xServerWin()
{
	if ask "Install Xming"; then # http://www.straightrunning.com/candidate/
		run "LINUX/Xming/rel_x64_Xming-7-7-0-42-setup.exe" || return
		run "LINUX/Xming/Xming-fonts-7-7-0-10-setup.exe" || return
	fi

	if ask "Install VcXsrv"; then # https://sourceforge.net/projects/vcxsrv/
			run "LINUX/VcXsrv/vcxsrv-64.1.20.1.4.installer.exe" --pause || return
	fi

	mergeDir "$pp/VcXsrv" "$pp/Operating System/Other" || return
	mergeDir "$pp/Xming" "$pp/Operating System/Other" || return
	$rm "$pd/XLaunch.lnk"
	$makeShortcut "wscript.exe" "$pp/Operating System/terminator" -a="c:\Users\Public\Documents\data\platform\win\terminator.vbs" -i "$(utw "$PUB/Documents/data/icons/Command Prompt.ico")" || return
}

homebridge()
{
	printf "**************************************************\n* Homebridge\n**************************************************\n"
	! nodeInstalled && { i nodejs || return; }
	
	if ! InPath homebridge; then
		echo "Installing homebridge..."
		sudo npm install -g --unsafe-perm homebridge homebridge-config-ui-x || return
		ask "Install other packages" && { sudo npm install -g homebridge-node-alarm-dot-com homebridge-dyson-link homebridge-neato homebridge-vera homebridge-webos-tv homebridge-wol homebridge-zp || return; }
		# TODO: homebridge-platform-ring-video-doorbell causes errors
	fi

	if [[ ! -f /etc/init.d/homebridge ]]; then
		echo "Configuring service..."
		scp oversoul:~/Dropbox/systems/homebridge/$HOSTNAME/homebridge /tmp
		sudo mv /tmp/homebridge /etc/init.d || return
		sudo chmod 755 /etc/init.d/homebridge || return
		sudo update-rc.d homebridge defaults || return
	fi

	if [[ ! -f ~/config.json ]]; then
		echo "Configuring homebridge..."
		makeDir ~/.homebridge || return
		scp oversoul:~/Dropbox/systems/homebridge/$HOSTNAME/config.json ~/.homebridge || return
	fi

	if ask "Configuring Wake On Lan plugin"; then
		InPath setcap && { sudo setcap cap_net_raw=pe /usr/bin/node || return; }
		[[ -f /sbin/shutdown ]] && { sudo chmod +s /sbin/shutdown || return; }
	fi
	
	return 0
}


nodeInstalled() { InPath node; }

NodeRed()
{
	printf "**************************************************\n* node-red\n**************************************************\n"
	! nodeInstalled && { i nodejs || return; }
	
	if ! InPath node-red; then
		echo "Installing node-red..."
		bash <(curl -sL https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/update-nodejs-and-nodered) || return
	fi

	sudo systemctl enable nodered.service || return

	return 0
}

DiskImager()
{
	! IsPlatform win && return
	printf "**************************************************\n* Disk Imager \n**************************************************\n"
	run "Shareware/other/win32diskimager-1.0.0-install.exe" || return # http://www.paragon-drivers.com/extfs-windows/

	echo "Updating icons..."
	mergeDir "$pp/Image Writer" "$oo" || return
}

Discord()
{
	printf "**************************************************\n* Discord\n**************************************************\n"
	run "Discord/" -p "DiscordSetup.exe" "Discord.dmg" "discord-0.0.9.deb" || return # https://discordapp.com/download
	
	echo "Updating icons..."
	mergeDir "$up/Discord Inc" "$up/Applications/Other" || return
	$rm "$ud/Discord.lnk" || return

	echo "Updating registry..."	
	$registry delete "urun/Discord" # C:\Users\jjbutare\AppData\Local\Discord\app-0.0.305\Discord.exe --start-minimized
}

Todoist()
{
	printf "**************************************************\n* Todoist\n**************************************************\n"
	run "Todoist/" -p "Todoist_for_Windows_Desktop_2_7_6.exe" "" "" || return # https://todoist.com/downloads/
	
	echo "Updating icons..."
	mergeDir "$up/Todoist" "$up/Applications/Other" || return
	$rm "$ud/Todoist.lnk" || return
}

args "$@"; ${command}Command "${args[@]}";
