#!/bin/bash
. function.sh || exit

templateInstall()
{
	printf "**************************************************\n* name\n**************************************************\n"
	
	run "" || return

	echo "Updating icons..."
	$mergeDir "$pp/(dir)" "$ao" || return
	$mergeDir "$pp/(dir)" "$pp/Development/Other" || return
	$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
	$rm "$pd/(prog).lnk" || return
}

TemplateFullInstall()
{
	printf "**************************************************\n* name\n**************************************************\n"
	echot "- application infromation"

	# download: 
	# installs:
	run "" || return

	local file; file="$(FindPublicDoc "data/install/Intel/Profile Manager/ProfileManager.xml")" || return
	$cp	"$file" "$WINDIR/system32" || return

	echo "Updating icons..."
	$mergeDir "$pp/(dir)" "$pp/Development/Other" || return
	$mergeDir "$pp/(dir)" "$ao" || return
	$rm "$pd/(prog).lnk" || return
	$mergeDir --rename "$pp/(dir)" "$ao/(new name)" || return
	$makeDir "$pp/Operating System/bash" || return
	$makeShortcut "$installDir/bin/mintty.exe" "$pp/Operating System/bash" -a="-" || return

	echo "Moving data folders..."
	$makeLink --merge --hide "$udoc/code/web/sites" "$udoc/My Web Sites" || return

	echo "Updating registry..."	
	$registry import "$install/AutoHotKey/setup/other/AutoHotkey-${architecture}.reg" || return
	$registry set "HKCU/SOFTWARE/Foo/File" REG_EXPAND_SZ "$(utw "$file")" || return
	$registry delete "run/ErmTray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe

	echo "Updating services..."
	service manual "Stereo Service"
	service manual "nvUpdatusService"

	echo "Creating directories..."
	$makeDir "$_userDocuments/code/test"

	echo "Restoring the default profile..."
	sublime profile restore default || return

	echot "\
	- configure
	"
	app start
	pause
}

usage()
{
	echot "\
usage: install cd|install APP*
	Install programs
	-s,--select					select the host with the installation files
	-h|--host	HOST 			specify the host with the installation files"
	exit $1
}

args()
{
	unset command apps host select
	originalArgs=( "$@" ) 
	while [ "$1" != "" ]; do
		case "$1" in
			-h|--host) host="$2"; shift;;
			-s|--select) select="--select";;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; } # command
				! IsOption "$1" && { apps+=( "$1" ); shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='install'
	[[ "$command" == "cd" && ${#apps[@]} != 0 ]] && UnknownOption "${apps[0]}"
	[[ "$command" == "apps" && ${#apps[@]} == 0 ]] && MissingOperand "APPS"
	args=("$@")
}

cdCommand()
{
	local dir; dir="$(FindPublicDoc "data/install")" || return
	echo "$dir"
}

installCommand()
{
	! IsElevated && { sudo mintty -h always "$0" "${originalArgs[@]}"; return; }
	InstallInit || return
	InstallApps "${apps[@]}" || return
}

InstallApps()
{
	while (($# != 0 )); do
		app="$1"; shift
		installFunction="$(GetInstallFunction)" || { EchoErr "inst: $app installation does not exist"; return 1; }
		$installFunction || return
		(( $# != 0 )) && pause
	done
	return 0
}

GetInstallFunction()
{
	declare -f | egrep -i "^${app} \(\) $|^${app}Install \(\) $" | sed "s/ () //" # Similar to GetFunction
	return ${PIPESTATUS[1]}
}

InstallInit() 
{
	ScriptEval os FindInfo || return
	serverPrograms="$pp/Development"; [[ $server ]] && serverPrograms="$pp/Server";

	local test #="echo "
	cp="${test}FileCommand cp"
	hide="${test}FileCommand hide"
	makeDir="${test}mkdir --parents"
	makeLink="${test}MakeLink --suppress"
	makeShortcut="${test}MakeShortcut"
	mergeDir="${test}MergeDir --suppress --parents"
	mv="${test}FileCommand mv"
	registry="${test}registry"
	ren="${test}FileCommand ren"
	rm="${test}rm -f"
	rmd="${test}rm -fr"
	
	rc="robocopy"
	rcOptsRegular=( /E /V /R:100 /W:2 )
	rcOptsMir=( "${rcOptsRegular[@]}" /mir)
	rcOpts=( "${rcOptsRegular[@]}" )

	netShareOptions=/grant:Everyone,full
	setupFiles="$(ScriptDir)/../setup"
}

run() # run EXE [OPTIONS...]
{
	local exe="$1"

	[[ ! $exe ]] && { EchoErr "inst: executable was not specified"; return 1; }
	FindExe "$exe" || { ask "Continue the installation?"; return; }
	RunExe "$exe" "${@:2}" || return
}

FindExe()
{
	if ! exe="$(FindPublicDoc "/data/install/$1" 2> /dev/null)"; then
		EchoErr "inst: could not locate $1"
		return 1
	fi
}

RunExe()
{
	local exe="$1"; shift
	local exeParts; StringToArray "$exe" "/" exeParts
	local exeDesc="$(IFS=/; echo "${exeParts[*]: -3}")"
	local standard; [[ "$1" == @(-s|--standard) ]] && { standard="--standard"; shift; }
	local pause; [[ "$1" == @(-p|--pause) ]] && { pause="--pause"; shift; }

	ask "Do you want to run $exeDesc" || return 0

	local exeExt; GetExtension "$exe" exeExt

 	[[ "$exeExt" == @(air|iso|msu|vsix|xpi) ]] && pause="--pause"

	case "$exeExt" in
		bat|cmd) cmd /c "$exe" "$@";;
		msi) start --wait msiexec /i "$exe" "$@";;
		iso) iso mount 1 "$exe";;
		zip|7z|gz|tar|xpi|ear|jar|war) RunZip "$exe" "$@" || return;;
		*) [[ $standard ]] && sudo --standard "$exe" "$@" || start --wait "$exe" "$@";;
	esac

	[[ $pause || $standard ]] && pause "When the installation has finished press any key..."
	
	case "$exeExt" in
		iso) iso UnmountAll || return
	esac	
}

RunZip()
{
	local exe="$1"; shift
	local installDir; PrepareInstallDir "$@" || return	

	7z.exe x -o"$(utw "$installDir")" "$(utw "$exe")" || return

	# If the archive contains a single directory move the contents of that directory up
	if [[ "$(DirCount "$installDir")" == 1 ]]; then
		for dir in "$installDir"/*; do
			if [[ -d "$dir" ]]; then
				MoveAll "$dir" "$installDir" || return
				break
			fi
		done
	fi
}

PrepareInstallDir()
{
	installDir="$1"; shift;
	[[ ! $installDir ]] && { EchoErr "inst: installation directory was not specified"; return 1; }

	if [[ -d "$installDir" ]]; then
		ask "Do you want to delete the existing installation in \"$(GetName "$installDir")\"?" -dr n || return
		$rmd "$installDir" || return
	fi

	$makeDir "$installDir" || return
}

bootstrap()
{
	printf "**************************************************\n* Bootstrap\n**************************************************\n"
	echot "- Bootstrap Operating System critical setup and applications"

	echo "Configuring..."

	# disable Open File Secirity Warning
	ScriptEval SetVar SEE_MASK_NOZONECHECKS 1 || return

	echo "Installing..."
	inst dirs cygwin bash AutoHotKey WinSplit sublime BeyondCompare pGina SysInternals ssh || return
}

core()
{
	printf "**************************************************\n* Core\n**************************************************\n"
	echot "- get registration informatiom from lastpass.com web site"

	echo "Installing common applications..."
	inst WindowsSetup WindowsIcons VirtualCloneDrive || return

	local common="DropBox EverNote Sonos Chrome BrowserHomePage"
	case "$COMPUTERNAME" in
		oversoul) inst $common office365 nVidia || return;;
		minime) inst $common office365 || return;;
		jjbutare-mobl|jjbutare-mobl7) inst $common OfficeFinal IntelCore || return;;
	esac
}

CygwinInstall()
{
	printf "**************************************************\n* Cygwin - POSIX environment for Windows\n**************************************************\n"
	local installDir="$P/Cygwin"

	# cleanup
	cygwin cleanup || return

	# icons and registry
	if file=$(FindPublicDoc "data/install/Cygwin/setup"); then

		echo "Copying files..."
		cp "$file/Command Prompt.ico" "$installDir/etc" || return

		echo "Updating registry..."
		$registry import "$file/setup $architecture.reg" || return

	fi

	# Variables
	if ask "Do you want to update variables?"; then
		ScriptEval SetVar --system --path PATH "$installDir/bin" || return
		ScriptEval SetVar --system --path PATH "$_PublicBin" || return
		ScriptEval SetVar --system --path PATH "$_PublicBin/win" || return
		ScriptEval SetVar --path PATH "$_UserBin" || return
		ScriptEval SetVar --system CYGWIN "" || return # nodosfilewarning
	fi

	echo "Updating icons..."
	$makeShortcut "$installDir/bin/mintty.exe" "$pp/Operating System/bash" -a="-" || return
	$makeShortcut "$_PublicBin/run.sh" "$psm/Programs/Startup/startup" -a "startup" -d "Start applications" || return

	# Configuration files
	if ask "Edit configuration files?"; then

		echo "- paste text before interactive login"
		! IsInstalled sublime && { VimHelp; pause; }
		clipw $'\n# Wiggin
[[ -d "/cygdrive/d/users" ]] && export USERS="/cygdrive/d/users" || export USERS="/cygdrive/c/users"
[[ -f "$USERS/Public/Documents/data/bin/bash.bashrc" ]] && . "$USERS/Public/Documents/data/bin/bash.bashrc"\n\n'
		TextEdit --wait "/etc/bash.bashrc" 

	fi

	# set home directory in /etc/passwd
	if grep ":/home" /etc/passwd > /dev/null; then
		echo "Updateing home directory locations..."
		local escapedUsers="${_data//\//\/}\/users"
		cp /etc/passwd /etc/passwd.bak
		sed 's/:\/home/:'"$escapedUsers"'/g' < /etc/passwd.bak > /etc/passwd
		HOME="$_data/users/$USERNAME"
	fi

	# Add group - domain user's group not in /etc/group by default
	echo "Adding user's group to /etc/group..."
	local group="$(mkgroup -c)"
	! grep "$group" /etc/group > /dev/null && echo "$group" >> /etc/group

	# ssh
	$hide ~/.ssh || return
	chmod 700 ~/.ssh/id_dsa || return

	# cleanup
	$rmd "/home"
}

BashInstall()
{
	printf "**************************************************\n* Bash - Bourne Again Shell\n**************************************************\n"

	printf "Configuring bash..."

	# home directory links
	local files=( .bashrc .bash_profile .bash_logout .dialogrc .gitconfig .lessfilter .inputrc .minttyrc )
	for file in "${files[@]}"; do
		$makeLink --symbolic --hide "$_UserBin/$file" "$_UserHome/$file" || return
	done

	# windows sytem home directory links (for Windows program that require Windows links, not a POSIX .lnk link)
	files=( .gitconfig )
	for file in "${files[@]}"; do
		$makeLink --symbolic --hide --windows --absolute "$_UserBin/$file" "$_UserSysHome/$file" || return
	done
	
	files=( .bash_history .lesshst )
	for file in "${files[@]}"; do
		touch "$_UserHome/$file" || return
		attrib +h "$(utw "$_UserHome/$file")" || return
	done

	echo done
}

SshInstall()
{
	printf "**************************************************\n* SSH - Secure Shell\n**************************************************\n"
	
	sshHome="$uhome/.ssh"
	sshCloudHome="$_CloudDocuments/data/.ssh"

	echo Creating data directory...
	$makeDir "$sshHome" && $hide +h "$sshHome" || return

	echo "Updating firewall..."
	firewall rule add "SSH" dir=in action=allow protocol=TCP localport=22 profile=private program="$(utw "$P/Cygwin/usr/sbin/sshd.exe")" || return

	echot "\
Configuring SSH...
- privilege separation=yes, new local account=yes, install sshd as a service=yes, 
  value of CYGWIN for the daemon=ntsec, use a diferent account name=no, 
  create privileged account=yes, password=<administrator>
- issues: service delete sshd; chmod -R 777 /var"
	ssh-host-config && service start sshd || return
	pause
}

IntelCore()
{
	printf "**************************************************\n* Intel Core\n**************************************************\n"
 
	echo "Installing Applications..."	
	inst IntelCleanup VisionApp || return
}

IntelCleanup()
{
	ask 'Cleanup icons?' && { IntelIcons || return; }

	if ask 'Cleanup programs (close Outlook if hangs)?'; then
		printf "Uninstalling..."
	 	printf "WinZip 15.5..."; product uninstall {CD95F661-A5C4-44F5-A6AA-ECDD91C240C3} > /dev/null
	 	printf "WinZip 17.5..."; product uninstall {CD95F661-A5C4-44F5-A6AA-ECDD91C240DB} > /dev/null
	 	printf "Adobe Reader 9.5.4..."; product uninstall {AC76BA86-7AD7-1033-7B44-A95000000001} > /dev/null
	 	echo done
	fi

	if ask 'Cleanup file system?'; then
		$rmd "$_sys/APPS" "$_sys/Drivers" "$_sys/Intel/Logs" "$_sys/Intel/Logs" \
			"$_sys/PreDelivery_Automation" "$uhome/Roaming" "$udoc/Add-in Express" || return
		$rm "/cygdrive/c/build.ini" "/cygdrive/c/Regionalization.xml"
		$hide "/cygdrive/c/Quarantine" "/cygdrive/c/Intel" "/cygdrive/c/OpalStatus.efi"				
	fi

	if ask 'Cleanup startup programs?'; then
		$registry 32 delete "run/AgentUiRunKey" # "C:\Program Files (x86)\Autonomy\Connected BackupPC\Agent.exe" -ni -sss -e http://localhost:16386/
		$registry 32 delete "run/McAfeeUpdaterUI"
		$registry 32 delete "run/ShStatEXE"
		$registry 32 delete "run/SunJavaUpdateSched"
		$registry 32 delete "run/Cisco AnyConnect Secure Mobility Agent for Windows" # "C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpnui.exe" -autolaunched
		$registry delete "run/ErmTray" # "C:/Program Files/Intel/Security/ERM/Win64/ErmTray.exe"
		$registry delete "run/McAfee Host Intrusion Prevention Tray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe
		$registry delete "urun/test"
		$rm "$up/Startup/Send to OneNote.lnk" || return
	fi
}

IntelIcons()
{
	printf "Updating Intel icons..."
	! intel IsIntelHost && return 0

	local d="$pp/Operating System/Other/Intel"; $makeDir "$d/Other" || return
	$mergeDir --rename "$pp/Intel" "$d" || return
	$mergeDir --rename "$up/Intel" "$d" || return

	$rm "$pd/AddaPrinter.lnk" || return
	$rm "$pp/Adobe Reader 9.lnk" || return
	$rm "$pd/Adobe Reader 9.lnk" || return
	$rm "$pd/AnyConnect"*.lnk || return
	$rm "$pd/Connected BackupPC.lnk" || return
	$rm "$pd/Intel Security Checker.lnk" || return
	$rm "$pd/Intel Software Market.lnk" || return
	$rm "$pp/Intel Software Market.lnk" || return
	$rm "$ud/WiFi Health Advisor.lnk" || return

	$mergeDir "$pp/Autonomy" "$pp/Operating System/Other" || return
	$mergeDir "$up/Cisco" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Cisco" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Intel PROSet Wireless" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Intel Software Market" "$pp/Operating System/Other" || return
	$mergeDir "$pp/McAfee" "$pp/Operating System/Other" || return
	$mergeDir "$pp/ThinkVantage" "$pp/Operating System/Other" || return

	$mv "$pd/Intel SSD Encryption.lnk" "$pp/Operating System/Other/Intel"
	$mv "$up/McAfee HIP Messages.lnk" "$pp/Operating System/Other/McAfee" || return
	$mv "$up/McAfee VirusScan Scan Messages.lnk" "$pp/Operating System/Other/McAfee" || return
	$mv "$pp/SRS Premium Sound.lnk" "$pp/Operating System" || return
	$mv "$pd/Windows 8 Training.lnk" "$pp/Operating System/Other/Intel" || return

	$mv "$psm/Intel Security Checker.lnk" "$pp/Operating System/Other/Intel" || return

	echo "done"
	return
}

DevCore()
{
	printf "**************************************************\n* Development Core\n**************************************************\n"
	
	echo "Creating directories..."
	$makeDir "$_userDocuments/code/test"
	$makeDir "$_Code/test"

	echo "Updating icons..."
	$makeShortcut "$_Code" "$pp/Development/Code" || return

	echo "Moving data folders..."
	$makeLink --merge --hide "$udoc/code/web/sites" "$udoc/My Web Sites" || return
	$makeLink --merge --hide "$udata/LINQPad" "$udoc/LINQPad Queries" || return

	echo "Installing Applications..."	
	inst CygwinGit GitExtensions TortoiseGit || return
	inst BlueGriffon iis SqlServer SqlPrompt || return 
	ask "Install .NET Development core?" && { DotNetDevCore || return; }
	ask "Install JAVA Development core?" && { JavaDevCore || return; }
	[[ "$USERDOMAIN" == "AMR" ]] && { IntelDevCore || return; }
}

DotNetDevCore() 
{
	printf "**************************************************\n* .NET Development Core\n**************************************************\n"

	echo "Creating directories..."
	$makeDir "$pp/Development/.NET/Other"

	echo "Installing Applications..."	
	inst VisualStudio NUnit ReSharper WebPlatformInstaller || return
}

IntelDevCore()
{
	printf "**************************************************\n* Intel Development Core\n**************************************************\n"

	if ask "Install Intel Profile Manager?"; then
		run "Intel/Profile Manager/ITBAS.zip" "$P/ITBAS" || return

		local file; file="$(FindPublicDoc "data/install/Intel/Profile Manager/ProfileManager.xml")" || return
		$cp	"$file" "$WINDIR/system32" || return
		$makeDir "/cygdrive/c/winnt/system32" || return 
		attrib +h "$(utw "/cygdrive/c/winnt")" || return
		$cp "$file" "/cygdrive/c/winnt/system32" || return		

		$cp "$code/Antidote/SolutionItems/Libraries/microsoft.sqlserver.batchparser.dll" "$code/Antidote/Antidote/bin/Debug" || return
	fi

	if ask "Update machine.config?"; then
		clipw '<appSettings><add key="Environment" value="Development" /></appSettings>'
		echo "- After </configSections> paste"
		DotNet 4 MachineConfig || return
		pause
	fi

	echo "Installing Applications..."	
	inst TortoiseSVN CruiseControlTray SilverlightSdk || return # Telerik
}

JavaDevCore()
{
	printf "**************************************************\n* JAVA Development Core\n**************************************************\n"
}

dirs()
{
	printf "**************************************************\n* Directories\n**************************************************\n"

	$makeDir "$pp/Applications/Other" || return
	$makeDir "$pp/Development/Other" || return
	$makeDir "$pp/Media/Other" || return
	$makeDir "$pp/Operating System/Other" || return
	[[ $client ]] && $makeDir "$pp/Games/Other" || return

	$makeDir "$_sys/temp"

	$makeDir "$_PublicDocuments/data/log"
	$makeDir "$_PublicDocuments/data/doc"
	$makeDir "$_PublicDocuments/drop"
}

WinampInstall()
{
	printf "**************************************************\n* Winamp\n**************************************************\n"
	run "WinAmp/setup/winamp565_pro_all.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/Winamp" "$ao" || return
	$mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" || return
	$rm "$pd/Winamp.lnk" || return
}

ahk() { AutoHotKeyInstall; }
AutoHotKeyInstall()
{
	printf "**************************************************\n* AutoHotKey\n**************************************************\n"
	echo "- Express installation"

	AutoHotKey close

	# http://l.autohotkey.net/ http://www.autohotkey.com/download/ http://l.autohotkey.net/docs/AHKL_ChangeLog.htm
	run "AutoHotKey/setup/AutoHotkey v1.1.13.00.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/AutoHotKey" "$pp/Operating System/Other" || return
	
	echo "Updating registry..."
	local install="$(FindPublicDoc "data/install/AutoHotKey")" || return
	$registry import "$install/setup/other/AutoHotkey-$architecture.reg" || return
	
	[[ ! -f "$_UserData/bin/keys.ahk" ]] && { $cp "$_PublicData/setup/keys.ahk" "$_UserData/bin" || return; }

	sudo --standard AutoHotKey startup
}

WinSplitInstall()
{
	printf "**************************************************\n* WinSplit\n**************************************************\n"
	run "Shareware/WinSplit Revolution/image.zip" "$P32/WinSplit Revolution" || return
	WinSplit startup
}

SublimeInstall()
{
	printf "**************************************************\n* Sublime Text Editor\n**************************************************\n"
	echo "- Check add to explorer context menu"

	if ask 'Install current version?'; then
		run "Sublime/setup/Sublime Text 2.0.2 $architecture Setup.exe" || return
	else
		run "Sublime/setup/Sublime Text Build 3047 $architecture Setup.exe" || return
	fi

	echo "Restoring the default profile..."
	$makeDir "$_ApplicationData/Sublime Text 2" || return
	sublime profile restore default || return

	echo "Updating icons..."
	$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
}

ReSharperInstall()
{
	printf "**************************************************\n* ReSharper\n**************************************************\n"
	
	# download: http://www.jetbrains.com/resharper/download/index.html http://www.jetbrains.com/resharper/download/index.html, http://confluence.jetbrains.net/display/ReSharper/ReSharper+8.0+Nightly+Builds
	# what's new: http://www.jetbrains.com/resharper/whatsnew/
	# cleanup: $LocalAppData$/JetBrains/ReSharper/v7.1/SolutionCaches
	run "JetBrains/ReSharper/setup/ReSharperSetup.8.0.1000.2286.msi" || return

	#resharper profile restore default

	echot "\
	- ReSharper, Options
		- Keyboards & Menus, ReSharper keyboard scheme=ReSharper 2.x or IntelliJ IDEA, Apply Scheme
		- Environment, Editor, Editor Behavior, uncheck Use CamelHumps
		- Environment, IntelliSense
			- Autopopup, C#, Where value is expected, Do not display
			- Completion Appearance, check Show Member Signatures and Show Summary
		- Code Editing, Code Cleanup, Add, default
			- Check all except C#, Reorder type members
			- C#, Use 'var' in declaration, Can Change/Always use/Always use
		- Tools, Unit Testing
			- Uncheck Save and restore Unit Test Sessions
			- Uncheck Wrap long lines in Unit Test Session output
			- Run up to 4 assemblies in parallel"
	sudo --standard VisualStudio start
	pause

}

WindowsSetup()
{
	printf "**************************************************\n* Windows Setup\n**************************************************\n"

	$makeLink --merge "$udata/download" "$uhome/Downloads" || return
	attrib +r "$(utw "$uhome/Downloads")"
}

WindowsIcons()
{
	printf "**************************************************\n* Windows Icons\n**************************************************\n"

	echo "Cleaning up unneeded icons..."
	#$rm "$up/TBD.lnk" || return
	
	echo "Updating user documents..."
	[[ -d"$udoc/Scanned Documents" ]] && $makeLink --merge --hide "$udata/scans" "$udoc/Scanned Documents"
	[[ -d"$udoc/Fax" ]] && $makeLink --merge --hide "$udata/fax" "$udoc/Fax"

	echo "Updating application icons..."
	$mv "$pp/Desktop.lnk" "$pp/Applications" || return
	$mv "$up/Internet Explorer.lnk" "$pp/Applications" || return
	$mergeDir "$up/Accessories" "$pp/Applications" || return
	$mergeDir "$pp/Accessories" "$pp/Applications" || return
	$mergeDir "$up/Accessibility" "$pp/Applications/Accessories" || return
	$mergeDir "$pp/Accessibility" "$pp/Applications/Accessories" || return
	$mv "$pp/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Bing Desktop/Bing Desktop.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Windows Store.lnk" "$pp/Applications/Accessories" || return
	$rmd "$pp/Bind Desktop"

	echo "Updating operating system icons..."
	$mergeDir --rename "$pp/Microsoft Mouse and Keyboard Center" "$pp/Operating System/Mouse and Keyboard Center"|| return
	$mergeDir "$up/Maintenance" "$pp/Operating System"|| return
	$mergeDir "$pp/Maintenance" "$pp/Operating System"|| return
	$mergeDir "$up/System Tools" "$pp/Operating System" || return
	$mergeDir "$pp/System Tools" "$pp/Operating System" || return
	$mergeDir "$pp/Microsoft Silverlight" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Applications/Accessories/System Tools" "$pp/Operating System" || return
	$mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return
	
	echo "Updating development icons..."
	$mergeDir "$pp/IIS" "$pp/Development/Other/IIS" || return

	echo "Updating game icons..."
	local dest="$pp/Games/Other/Microsoft"; $makeDir "$dest" || return
	$mv "$pp/Games/Chess.lnk" "$dest" || return
	$mv "$pp/Games/FreeCell.lnk" "$dest" || return
	$mv "$pp/Games/Hearts.lnk" "$dest" || return
	$mv "$pp/Games/InkBall.lnk" "$dest" || return
	$mv "$pp/Games/Minesweeper.lnk" "$dest" || return
	$mv "$pp/Games/PurblePlace.lnk" "$dest" || return
	$mv "$pp/Games/Spider Solitaire.lnk" "$dest" || return
	$mv "$pp/Games/Hold 'Em.lnk" "$dest" || return
	$mv "$pp/Games/Mahjong.lnk" "$dest" || return
	$mv "$pp/Games/Solitaire.lnk" "$dest" || return
}

VisualSvnInstall() { TortoiseSVNInstall "$@"; }
TortoiseSvnInstall()
{
	printf "**************************************************\n* TortoiseSVN Source Control\n**************************************************\n"
	echo "- Select all features"

	# download: http://tortoisesvn.net/downloads.html
	# download: http://www.visualsvn.com/visualsvn/download/
	# installs: path C:/Program Files/TortoiseSVN/bin
	run "Shareware/TortoiseSVN/TortoiseSVN-1.8.2.24708-${architecture}-svn-1.8.3.msi" || return
	run "VisualSVN/VisualSVN-3.5.3.msi" || return

	echo "Updating icons..."
	$mergeDir "$pp/TortoiseSVN" "$pp/Development/Other" || return
	$mergeDir "$up/VisualSVN" "$pp/Development/Other" || return
	$mergeDir "$pp/VisualSVN" "$pp/Development/Other" || return

	echot "- Settings, Diff Viewer (2 places) and Merge Tool (1 place), External, paste"
  utw "$P32\Beyond Compare 3\BComp.exe" > /dev/clipboard
  start explorer "$_Code"
	pause

	if intel IsIntelHost && ask "Intel Software Solutions setup?"; then

		echot "\
Software Solutions setup...
- Install Certificate..., Store Location=Local Machine, Place all certificates in the following store=
	Trusted Root Certificate Authorities"
		start "$udata/certificate/public/azscsistfs001.amr.corp.intel.com.cer"
		pause

		echo "Creating first project interactively to store credentials...."
		TortoiseSVN code checkout Antidote
		
		echo "Checking out remaining projects...."
		local projects=( Antidote Enablon Errgo IntelNuGet Magellan RPIAD ScadaPortal SharedServices )
		for project in "${projects[@]}"; do 
			TortoiseSVN code update "$project" || return
		done

	fi

}	

pGinaInstall()
{
	printf "**************************************************\n* pGina\n**************************************************\n"
	
	IsInDomain && return 0
	
	# http://pgina.org/download.html
	run "Microsoft/Visual Studio/redistributable/vcredist_x86.exe" /silent || return
	run "Microsoft/Visual Studio/redistributable/vcredist_x64.exe" /silent || return
	run "Shareware/pGina/setup/pGinaSetup-3.1.8.0.exe" /silent || return

	echo "Updating icons..."
	$mergeDir "$pp/pGina" "$pp/Operating System/Other" || return

	echo "Restoring the default profile..."
	pGina profile restore default || return
}

DropBoxInstall()
# https://www.dropbox.com/install
{
	printf "**************************************************\n* DropBox\n**************************************************\n"
	echo "- (new install) Ensure $(utw "$_CloudDocuments") directory is empty"
	echo "- I already have a Dropbox account"
	echo "- Advanced, I want to choose where to put my Dropbox=$(utw "$_UserHome")"
	
	run "Dropbox/setup/Dropbox 2.3.30.exe" --standard || return

	echo "Updating icons..."
	# Keep icons in user programs or else may run incorrect version that another user has installed
	$makeDir "$up/Operating System/Other" || return
	$mergeDir "$up/Dropbox" "$up/Operating System/Other" || return
	$rm "$up/Startup/Dropbox.lnk" || return
	$rm "$ud/Dropbox.lnk" || return

	if [[ "$_data" != "/cygdrive/c" ]]; then
		$makeShortcut "$_UserHome/Dropbox" "$_UserSysHome/Dropbox.lnk" || return
	fi;

	if ask "Do you want to update index locations?"; then
		DropBox close

		dir="$_CloudDocuments/.dropbox.cache"
		$makeDir  "$dir" || return
		attrib -s -h "$(utw "$dir")" || return

		echo "- Modify, $(utw "$_CloudDocuments"), check Dropbox, uncheck .dropbox.cache"
		os index options || return
		pause

		attrib +s +h "$(utw "$dir")"

		sudo --standard DropBox startup
	fi

	echot "\
- Preferences...
  - General
    - Uncheck Show desktop notifications
    - Uncheck Start Dropbox on system startup
  - (Intel) Proxies
    - Select Manual
    - Server=proxy.fm.intel.com
    - Port=911
- Explorer
  - Libraries, Documents, locations, 
    - Add..., paste
    - (not Intel) Move Up (to top), Set as default save location
  - View, List"
	utw "$_CloudDocuments" > /dev/clipboard
	start explorer "$udoc"
	pause

}

vs() { VisualStudioInstall "$@"; }; vs12() { VisualStudioInstall "$@"; }; 
VisualStudioInstall()
# Path: $P32/Microsoft Pex/bin/;$TFSPowerToolDir$;$BPADir$
{
	printf "**************************************************\n* Visual Studio 2012\n**************************************************\n"
	echo "- (optional) Uncheck Microsoft Foundation Classes for C++ (1.4 GB)"
	echo "- Choose your default environment settings=Visual C# Development Settings"

	vs="Microsoft/Visual Studio"

	run "$vs/setup/vs/en_visual_studio_ultimate_2012_x86_dvd_920947.iso" || return
	run "$vs/update/VS2012.3.exe" || return
	run "$vs/setup/other/en_visual_studio_2012_sdk_x86_920808.exe" || return
	run "$vs/setup/ssdt/image/SSDTSetup.exe" || return # http://www.microsoft.com/en-us/download/details.aspx?id=29062
	run "$vs/setup/other/Microsoft.TeamFoundation.Git.Provider.msi" || return

	run "$vs/extension/ProPowerTools.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/3a96a4dc-ba9c-4589-92c5-640e07332afd
	run "$vs/extension/NuGet.Tools.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c
	run "$vs/extension/WebEssentials.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6
	run "$vs/extension/WinLibJS_VSE.exe" || return

	VsFinal || return
}

VsFinal()
{
	IisExpressFinal || return
	ScriptEval VisualStudio init || return

	echo "Creating directories..."
	$makeDir "$_Code/test/vs$vsName"

	if ask "Choose default environment and create default directories?"; then
		echo "- Choose your default environment settings=Visual C# Development Settings"
		echo "- Close Visual Studio"
		VisualStudio start; pause
	fi

	echo "Moving data folders..."
	$makeLink --merge --hide "$vsData" "$udoc/Visual Studio $vsName" || return
	#$makeLink --merge --hide "$udata/Work Item Templates" "$udoc/Work Item Templates" || return
	#$makeLink --merge --hide "$udata/WCF Test Client Projects" "$udoc/Test Client Projects" || return
	$makeLink --merge --hide "$udata/Web Essentials" "$uhome/Web Essentials" || return

	ask "Update registry?" && { VsRegistry || return; }
	ask "Update icons?" && { VsIcons || return; }
	ask "Restore profile?" && { VisualStudio profile restore default; return; }

	echot "\
Tools, Options...
- Environment, Documents
  - check Auto-load changes, if saved
  - uncheck Check for consistent line endings on load
- Environment, Keyboard 
  - ctrl-shift-c = View.SynchronizeClassView
  - ctrl-alt-; = Project.SyncItem
- Text Editor, C#
  - General: check Line numbers
  - Tabs: Tab size=3, Indent size=3, Keep tabs
- Productivity Power Tools
  - All Extensions, enable only 
    Color Printing, Middle-click srolling, Power Commands, Quick Launch Tasks
Menu bar, Customize...
- Commands, Context menu, Editor Context Menus | Code Window, Add Command..., View.SynchronizeClassView"
	VisualStudio start; pause

}

VsRegistry()
{
	echo "Updating Visual Studio registry..."
	ScriptEval VisualStudio init || return
	local r="$vsRegistryKey" c="$(utw "$code")"
	
	$registry 32 set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/VisualStudioProjectsLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/UserProjectTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ProjectTemplates")" || return
	$registry 32 set "$r/UserItemTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ItemTemplates")" || return
	$registry 32 set "$r/VisualStudioLocation" REG_EXPAND_SZ "$(utw "$vsData")" || return
}

VsIcons()
{
	echo "Updating Visual Studio icons..."
	ScriptEval VisualStudio init || return
	local base="$pp/Development/.NET"; local other="$base/Other"; local vs="$other/Visual Studio $vsName"

	$makeDir "$other" || return
	$makeShortcut "$_windows/assembly" "$base/GAC.lnk" || return

	$mergeDir --rename "$pp/Microsoft Visual Studio $vsName" "$other/Visual Studio $vsName" || return
	$mergeDir --rename "$pp/Microsoft Windows SDK Tools" "$vs/Windows SDK Tools" || return
	for f in "$vs/Microsoft"*.lnk; do $ren "$f" "${f/\/Microsoft //}" || return; done
	$cp "$vs/Visual Studio $vsName.lnk" "$base" || return
	$mergeDir --rename "$pp/Microsoft Visual Studio $vsName SDK" "$vs/sdk" || return
	$mergeDir "$pp/Windows Kits" "$vs" || return
	$ren "$pp/Microsoft Web Platform Installer.lnk" "$pp/Development/.NET/Web Platform Installer.lnk" || return
	$ren "$pp/SQL Server Data Tools 2012.lnk" "$base/SQL Server Data Tools.lnk" || return

	SilverlightIcons || return
	ExpressionIcons || return
}

ExpressionIcons()
{
	local base="$pp/Development/Other/Expression"; $makeDir "$base"
	$mergeDir --rename "$pp/Microsoft Expression" "$base"
	$mergeDir --rename "$ud/Expression" "$ud/code/web"
	$mergeDir --rename "$base/Microsoft Expression Blend SDK" "$base/Expression Blend SDK"
	$ren "$ud/Expression/Expression Design/Samples 2.lnk" "$base/Design Samples.lnk"
	$ren "$base/Microsoft Expression Encoder 4 Screen Capture.lnk" "$base/Expression Encoder Screen Capture.lnk"
	$ren "$base/Microsoft Expression Encoder 4 SDK.lnk" "$base/Expression Encoder SDK.lnk"
	$ren "$base/Microsoft Expression Web 4 SuperPreview.lnk" "$base/Expression Web SuperPreview.lnk"
	for file in "$base/Microsoft Expression"*4.lnk; do echo $ren "$f" "${f/\/Microsoft //}"; done
}

IisExpressFinal()
{
	echo "Moving IIS Express data folders..."
	$makeLink --merge --hide "$udata/IISExpress" "$udoc/IISExpress"
	$mergeDir "$udoc/My Web Sites" "$udoc/code/web"
}

VirtualCloneDriveInstall()
{
	printf "**************************************************\n* Virtual Clone Drive\n**************************************************\n"
	echo "- check Associate .iso/.udf files"

	# download: http://www.slysoft.com/en/download.html
	# installs:
	# - ElbyDelay drive LowerFilter
	# - VirtualCloneDrive vcddaemon in Startup
	# - VirtualCloneDrive CloseTray shell extension (elbyvcdshell.dll)
	# - Drivers: ElbyCDIO, ElbyDelay, VClone
	run "SlySoft/CloneDrive/SetupVirtualCloneDrive5460.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/Elaborate Bytes" "$pp/Operating System/Other" || return
	$rm "$pd/Virtual CloneDrive.lnk" || return

	echot "\
- Settings
  - Number of Drives=2
  - Check Virtual Sheep
  - Uncheck Show Tray Icon"
	iso gui || return
	pause 
}

BcInstall() { BeyondCompareInstall; }
BeyondCompareInstall()
{
	printf "**************************************************\n* BeyondCompare\n**************************************************\n"
	echo "- Uncheck Launch Beyond Compare 3"

	# download: http://www.scootersoftware.com/download.php
	# plugins: http://www.scootersoftware.com/download.php?zz=kb_moreformats&cartid=482293831
	# license: http://www.scootersoftware.com/support.php?zz=kb_netsetup
	run "Scooter Software/Beyond Compare/setup/BCompare-3.3.8.16340.exe" || return
	run "Scooter Software/Beyond Compare/plugins/AllPlugins.exe" || return

	echo "Updating icons..."
	$ren "$pp/Beyond Compare 3/Beyond Compare 3.lnk" "$pp/Applications/Beyond Compare.lnk" || return
	$rm "$pd/Beyond Compare 3.lnk" || return
	$rmd "$pp/Beyond Compare 3" || return

	echo "- Enter Key..., check Register for all users"
	BeyondCompare start
	pause

	echo "Restoring the default profile..."
	BeyondCompare profile restore default || return
	pause
}

EverNoteInstall()
{
	printf "**************************************************\n* EverNote\n**************************************************\n"
	
	# http://www.evernote.com/about/download/windows.php?file=Win&btn=grey
	run "EverNote/setup/Evernote_5.0.2.1392.exe" || return

	echot "\
- View, Left Panel, uncheck Show Left Panel
- Tools, Options
  - General 
    - Uncheck Autoamticheck for updates
    - Uncheck Show advertisements
  - Sync
    - Uncheck Enable sync notifications
    - Check Synronize automatically Every 15 minutes
  - Note, Note editor font=Arial 10"
  intel IsIntelHost && echo "- McAfee Host Intrusion Prevention, Add, Name=Sonos, Application=C:\Program Files(x86)\Sonos\Sonos.exe"
  pause

	EverNote close
	sudo --standard EverNote startup

	echo "Updating icons..."
	$mergeDir "$pp/Evernote" "$ao" || return
	$rm "$pd/Evernote.lnk" || return
	$rm "$ud/Evernote.lnk" || return
	$rm "$pp/Startup/EvernoteClipper.lnk" || return
	$rm "$up/Startup/EvernoteClipper.lnk" || return
}

SonosInstall()
{
	printf "**************************************************\n* Sonos Music System\n**************************************************\n"
	
	# http://sonos.com/support/
	run "Sonos/setup/SonosDesktopController41.exe" || return

	echo "Updating icons..."
	$rm "$pd/Sonos.lnk" || return
	$mergeDir "$pp/Sonos" "$pp/Media/Other" || return
}

nUnitInstall()
{
	local version="2.6.2"
	printf "**************************************************\n* NUnit\n**************************************************\n"
	
	# download: http://www.nunit.org/?p=download
	run "Shareware/.NET/NUnit/setup/NUnit-$version.msi" || return

	echo "Updating icons..."
	$mergeDir "$up/NUnit $version" "$pp/Development/.NET/Other"
}

SilverlightSdk()
{
	printf "**************************************************\n* Silverlight SDK\n**************************************************\n"

	# downloads  http://www.silverlight.net/downloads
	#   SDK: http://www.microsoft.com/en-us/download/details.aspx?id=28359
	# 	Developer Runtime (debugging): http://go.microsoft.com/fwlink/?LinkID=229323
	#   toolkit (additonal controls): http://silverlight.codeplex.com/ http://silverlight.codeplex.com/releases/view/78435
	#   tools (developer runtime, SDK, Visual Studio 2010 support): http://www.microsoft.com/en-us/download/details.aspx?id=28358
	# version: http://www.microsoft.com/getsilverlight/Get-Started/Install/Default.aspx
	run "Microsoft/.NET/Silverlight/development/silverlight_sdk.exe"
	run "Microsoft/.NET/Silverlight/development/Silverlight_Developer_${architecture}.exe"
	run "Microsoft/.NET/Silverlight/development/Silverlight_5_Toolkit_December_2011.msi"

	SilverlightIcons || return
}

SilverlightIcons()
{
	local base="$pp/Development/.NET/Silverlight"; $makeDir "$base"
	$ren "$pp/Microsoft Silverlight/Microsoft Silverlight.lnk" "$pp/Applications/Accessories/Silverlight.lnk"
	$ren "$pp/Microsoft Silverlight 4 SDK/Welcome.lnk" "$base/Silverlight 4 SDK Welcome.lnk"
	$ren "$pp/Microsoft Silverlight 5 SDK/Welcome.lnk" "$base/Silverlight 5 SDK Welcome.lnk"
	$mergeDir --rename "$pp/Microsoft Silverlight 5 Toolkit December 2011" "$base/Silverlight 5 Toolkit"
	$rmd "$pp/Microsoft Silverlight 4 SDK"
	$rmd "$pp/Microsoft Silverlight 5 SDK"
	$rmd "$pp/Microsoft Silverlight"
}

cctray() { CruiseControlTrayInstall; }
CruiseControlTrayInstall()
{
	local version="1.8.3.0"
	printf "**************************************************\n* CruiseControl Tray\n**************************************************\n"
	
	# download: http://vmspwbld001/ccnetpreprod/ViewFarmReport.aspx http://www.cruisecontrolnet.org/projects/cctray http://cruisecontrol.sourceforge.net http://ccnet.sourceforge.net/CCNET/CCTray.html
	run "Shareware/CruiseControl/tray/CruiseControl.NET-CCTray-$version-Setup.exe" || return

	echo "Updating icons..."
	$mergeDir "$up/CCTray" "$pp/Development/Other" || return
	$rm "$ud/CCTray.lnk" || return
	$rm "$up/Startup/CCTray.lnk" || return

	echo "Restoring the default profile..."
	CruiseControlTray profile restore default || return
}

ChromeInstall()
{
	printf "**************************************************\n* Google Chrome Browser\n**************************************************\n"
	echo '- Keep using Internet Explorer (to use Chrome on the desktop)'
	echo '- Sign in Email=NNN, Password=NNN'
	echo '- New Tab, Apps, Learn more, Get the launcher'

	# download: http://www.google.com/chrome/eula.html?system=true&standalone=1
	run "Google/Chrome/setup/ChromeStandaloneSetup.exe" || return

	echo "Updating icons..."
	$rm "$ud/Google Chrome.lnk"
	$rm "$pd/Google Chrome.lnk"
	$rm "$ud/Chrome App Launcher.lnk"
	$rm "$ud/Google Chrome Canary Build.lnk"
	$mergeDir --rename "$pp/Google Chrome" "$ao/Chrome"
	$mergeDir --rename "$up/Google Chrome" "$ao/Chrome"
	$mergeDir --rename "$up/Google Chrome Canary Build" "$ao/Chrome Beta"

	echot "\
- (for texting) Apps, Gmail Offline, select Allow offline mail
- Defer, Options, Default Service=Instapaper, Usrname=NNN, Password=NNN
- Login: LastPass, MightText
- (optional) chrome://flags, enable features"
	chrome start || return
	pause
}

iisInstall()
{
	# - Add/Remove Windows Components requires inf files
	# - Remote Desktop Web Connection reference http://www.microsoft.com/windowsxp/using/networking/expert/northrup_03may16.mspx
	printf "**************************************************\n* IIS\n**************************************************\n"
  echo "- Internet Information Services, check all"
  echo "- (optional) Internet Information Services Hostable Web Core"
	
	product optional --wait || return

	if [[ $client ]] && ! intel IsIntelHost; then
	  echo "Updating firewall..."
	  firewall rule enable "World Wide Web Services HTTP Traffic In"
	fi

	echo "Updating services..."
	service manual FTPSVC || return

	if [[ $client ]] && ask "Set IIS services to run manually?"; then
	  service manual IISADMIN || return
	  service manual w3svc || return
	  service manual AppHostSvc || return
	fi

	echo "Updating icons..."
	$makeDir "$pp/Development/Other/IIS" || return
	$mergeDir "$pp/IIS" "$pp/Development/Other" || return
	$makeShortcut "$WINDIR/system32/inetsrv/iis.msc" "$pp/Development/Other/IIS/IIS Client Manager" || return
	$makeShortcut "$WINDIR/system32/inetsrv6/iis6.msc" "$pp/Development/Internet Information Services 6" || return

	[[ $client ]] && ask "Install remote manager?" && { IisRemoteManager || return; }
	ask "Configure WebDAV?" --default n && { IisWebDav || return; }
	ask "Configure FTP?" --default n && { IisFtp || return; }
	ask "Configure debugging?" --default n && { IisDebugging || return; }
	ask "Configure compression?" --default n && { IisCompression || return; }
	ask "Configure SSL?" --default n && { IisSsl || return; }

	echo "Restarting IIS..."
	iisreset
}

IisCheck()
{ 
	if ! IsInstalled iis && ask "Do you want to install IIS?"; then
		iisInstall; return
	fi
	return 0
}

ss() { SqlServerInstall; }; ss12() { SqlServerInstall; }
SqlServerInstall()
{
	local base="Microsoft/SQL Server"
	printf "**************************************************\n* SQL Server 2012\n**************************************************\n"
	
	echo; echo "Checking IIS (required for reporting services)..."; IisCheck || return

	echot "\
Note: Logs are in \"$P/Microsoft SQL Server/110/Setup Bootstrap/Log\"
- Installation, New SQL installation or add features to an existing installation
- (optional) Uncheck SQL Server product updates (installed below)
- Setup Roles, All Features with Defaults
- Feature Selection
  - (full development, 8gb) No changes
  - (light development+SQL Server Express, 6gb) Uncheck all Instance Features
  - (server, 2gb) Uncheck all Shared Features
 - Instance Configuration
  - (optional) Named instance=MSSQLSERVER<version>
	- (optional) Instance root directory=d:/Program Files/Microsoft SQL Server/
- Database Engine Configuration
  - Authentication Mode=Mixed Mode, Enter password=XXX, Confirm password=XXX
  - Add..., Add Current User, (optional) Add..., Administrators
- Analysis Services Configuration
  - Add..., Add Current User, (optional) Add..., Administrators
- Distributed Replay Controller
  - Add..., Add Current User"

  # download: http://www.microsoft.com/en-us/sqlserver/editions/2012-editions/express.aspx
	# updates: http://support.microsoft.com/kb/2755533
	# installs:
	# - Path:
	#   c:/Program Files (x86)/Microsoft SQL Server/110/Tools/Binn/
	#   c:/Program Files/Microsoft SQL Server/110/Tools/Binn
	#   c:/Program Files/Microsoft SQL Server/110/DTS/Binn
	#   c:/Program Files (x86)/Microsoft SQL Server/110/Tools/Binn/VSShell/Common7/IDE
	#   c:/Program Files (x86)/Microsoft Visual Studio 9.0/Common7/IDE/PrivateAssemblies
	#   c:/Program Files (x86)/Microsoft SQL Server/110/DTS/Binn/
  if [[ $client ]]; then
  	run "$base/setup/en_sql_server_2012_developer_edition_x86_x64_dvd_813280.iso" || return
	else
		run "$base/setup/en_sql_server_2012_enterprise_edition_x86_x64_dvd_813294.iso" || return
	fi

	# updates
	run "$base/update/SQLServer2012SP1-KB2674319-${architecture}-ENU.exe"

	# determine components were installed
	local clientTools; [[ -f "$P32/Microsoft SQL Server/110/Tools/Binn/ManagementStudio/Ssms.exe" ]] && clientTools="true"
	local database; [[ -f "$P/Microsoft SQL Server/MSSQL11.MSSQLSERVER/MSSQL/Binn/sqlservr.exe" ||
		-f "d:/Program Files/Microsoft SQL Server/MSSQL11.MSSQLSERVER/MSSQL/Binn/sqlservr.exe" ]] && database="true"

	if [[ $clientTools ]]; then
		run "$base/plugins/SSMSBoostInstaller2012_2.10.4957.30631.msi" || return # http://www.ssmsboost.com
	fi

	ask "Cleanup log?" && { SsLogCleanup || return; }
	ask "Update services?" && { SsUpdateServices || return; }

	if [[ $database ]]; then 
		ask "Update server configuration?" && { SsServerConfig || return; }
		ask "Update firewall?" && { SsFirewall || return; }
		ask "Update mail configuration?" && { SsMailConfig || return; }
		ask "Update reporting server configuration?" && { SsReportServerConfig || return; }
	fi

	if [[ $clientTools ]]; then
		ask "Configure SQL Server Management Studio?" && { SsManagementStudioConfig || return; }
	fi

	SsFinal || return
}

SsLogCleanup()
{
	echo "Removing log files..."
	rmd --ask "$P/Microsoft SQL Server/110/Setup Bootstrap/Log" || return
}

SsServerConfig()
{
	echo "- Object Explorer, Server, Properties, Memory, Maximum server memory=128 or 256"
	SqlServer studio || return
	pause
}

SsUpdateServices()
{
	[[ ! $client ]] && return 0

 	echo "Updating services..."
	SqlServer service demand --all || return
	SqlServer service stop --all || return

	if ask 'Automatically start SQL Server?'; then
		SqlServer service auto || return
		SqlServer service start || return
	fi
}

SsManagementStudioConfig()
{
	ask 'Restore profile?' && { SqlServer profile restore default || return; }

	echot "\
	- View: Registered Servers at top left, Solution Explorer at bottom right
	- Tools, Options
	  - Environment
	    - 20 items shown
	    - Startup, At startup Open empty environment
	  - Text Editor
	    - All Languages, check Line numbers
	    - (if using SQL Prompt) Transact-SQL, uncheck Auto list members
	    - Editor Tab and Status Bar, Tab Text, all but Include File Name to False
	  - (optional) Source Control, Current source control plug-in=Team Foundation Server MSCCI Provider
	- Help, Yes"
	SqlServer studio || return; pause
}

SsFinal()
{
	echo "Creating sql directory..."
	local dir="$udata/sql"; $makeDir "$dir"
	$makeShortcut "$_CloudData/sql" "$dir/cloud.lnk" || return

	echo "Moving data folders..."
	local dir="$udata/SQL Server Management Studio"
	$makeLink --merge --hide "$udata/SQL Server Management Studio" "$udoc/SQL Server Management Studio" || return
	$makeLink --merge --hide "$udata/Visual Studio 2010" "$udoc/Visual Studio 2010" || return

	$makeDir "$dir/Projects" || return
	$makeShortcut "$udata/sql" "$dir/Projects/sql.lnk" || return

	ask "Update registry?" && { SsRegistry || return; }
	SsIcons || return;

	if ask "Cleanup path?"; then
		os path editor || return
		echo "- Remove SQL entries from the system path"
		pause
	fi
}

SsRegistry()
{
	local dir="$(utw "$udata/sql")" r="HKCU/Software/Microsoft/SQL Server Management Studio/11.0"

	echo "Updating SQL Server registry..."
	$registry set "$r/DefaultBrowseComponentLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$dir" || return
}

SsIcons()
{
	echo "Updating icons..."
	$mergeDir --rename "$pp/Microsoft SQL Server 2012" "$serverPrograms/Other/SQL Server 2012"
	$mergeDir --rename "$pp/Microsoft Visual Studio 2010" "$pp/Development/.NET/Other/Visual Studio 2010"
	$mergeDir --rename "$pp/Microsoft SQL Server 2008" "$serverPrograms/Other/SQL Server 2008"
}

SqlPromptInstall()
{
	printf "**************************************************\n* SQL Prompt\n**************************************************\n"
	
	# download: http://www.red-gate.com/products/sql-development/sql-prompt
	run "RedGate/SQLPromptDownload.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/Red Gate" "$pp/Development/Other"

	echot "\
	- SQL Prompt 5
		- Serial Number, Enter Serial Number...
		- Options...
		  - Format, Tabs & wraping, Characters per line=120
		  - Experimental Features, check Enable Tabs Instead of Spaces"
	 SqlServer studio || return
	 pause
}

VisionAppInstall()
{
	printf "**************************************************\n* VisioApp Remote Desktop\n**************************************************\n"

	# home: http://www.visionapp.com/germany/software/visionapp-remote-desktop
	# download: //vmsdaklx001/software$/Visionapp_remotedesktop
	run "VisionApp/Remote Desktop/setup/vRD2011inclPatch2.exe" || return

	echo "Updating icons..."
	$rm "$pd/visionapp remote Desktop 2011.lnk" || return
	$mergeDir "$pp/visionapp remote Desktop 2011" "$pp/Operating System/Other" || return
	$mergeDir "$pp/ASG-Remote Desktop 2012" "$pp/Operating System/Other" || return
	$rm "ASG-Remote Desktop 2012.lnk" || return

	echo "Configure..."

	local cloudDir="$_CloudData/VisionApp" localDir="$udata/VisionApp"
	$makeDir "$cloudDir" "$localDir"

	local licenseFile; licenseFile="$(FindPublicDoc "data/install/VisionApp/Remote Desktop/license/Intel Corporation_Global.xml")" || return
	utw "$licenseFile" > /dev/clipboard

	echot "\
- ?, Info..., Import new license file, paste
- (Wiggin) Add..., File..., Name=Wiggin, path=$(utw $cloudDir/settings.xml), Yes
- (Intel) File, Environment Wizard, Add…, Database…, Connect to an Existing Database
	- Name of the environment=Intel
  - Database server=azscsissql950,3180
  - Database name=VisionApp
  - User name=vRDDbUser
  - Password=VisionUser!1
- View, Icon Size, 24x24
- Tools, Options, Application, check Pass-through authentication
- Pin this program to the taskbar"
	VisionApp start || return
	pause
}

Office365Install()
{
	printf "**************************************************\n* Office 365\n**************************************************\n"
	echo "- How would you like your office to look=Clouds"
	run "Microsoft/Office/setup/office/en_office_365_${architecture}.exe"
	OfficeFinal || return
}

OfficeFinal()
{
	. office.sh || { EchoErr "inst: Office is not installed"; return 1; }

	echo "Updating directories..."
	$makeDir "$udoc/data/Templates" "$pdoc/data/Templates" || return

	echo "Moving data folders..."
	$makeLink --merge --hide "$udata/OneNote" "$udoc/OneNote Notebooks" || return

	ask "Restore normal templates?" && { word RestoreNormal || return; }
	ask "Update registry?" && { registry import "$setupFiles/ShellNew.reg" || return; }
	ask "Update icons?" && { OfficeIcons || return; }
	ask "Configure?" && { for o in "$setupFiles/Set Options".*; do start "$o" || return; pause; done; }
}

OfficeIcons()
{
	p="$ao/Office"

	$mergeDir --rename "$pp/Microsoft Office 2013" "$p" || return
	$mergeDir --rename "$p/Office 2013 Tools" "$p/tools" || return
	$rm "$up/Startup/Send to OneNote.lnk" || return
	for f in "$p/"*2013.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	for f in "$p/tools/"*2013*.lnk; do $ren "$f" "${f/ 2013/}" || return; done
}

nVidiaInstall()
{
	printf "**************************************************\n* nVidia Video Drivers\n**************************************************\n"

	# Driver: http://www.nvidia.com/Download/Find.aspx?lang=en-us
	# Scan: http://www.nvidia.com/Download/Scan.aspx?lang=en-us
	# System tools: http://www.nvidia.com/object/nvidia_system_tools_6.03.html
	# NTune: http://www.nvidia.com/object/sysutility.html
	# Installs:
	# Path: c:/Program Files (x86)/NVIDIA Corporation/Physx/Common
	# Service: 
	# - nvUpdatusService - NVIDIA Settings Update Manager, check for new updates
	# - Stereo Service - NVIDIA Stereoscopic 3D Driver Service (3D glasses)
	# - nvsvc - Provides system and desktop level support to the NVIDIA display driver
	#     Note: In 2010 on Oversoul the nVidia service changed the display settings to undesired settings, 2011 trying again
	# - nTuneService - display the Performance and System Stability sections of the NVIDIA control panel (clock and fan adjustment, etc).
	run "nVidia/driver/327.23-desktop-win8-win7-winvista-${bits}bit-english-whql/setup.exe" || return

	echo "Updating services..."
	service manual "Stereo Service" || return
	service manual "nvUpdatusService" || return

	echo "Updating icons..."
	$mergeDir --rename "$pp/NVIDIA Corporation" "$pp/Operating System/Other/NVIDIA" || return
	$rm "$pd/GeForce Experience.lnk" || return
	$rm "$pd/3D Vision Photo Viewer.lnk" || return
}

TortoiseGitInstall()
{
	printf "**************************************************\n* TortoiseGit\n**************************************************\n"
	
	# https://code.google.com/p/tortoisegit/ https://code.google.com/p/tortoisegit/wiki/Download?tm=2
	run "Shareware/TortoiseGit/setup/TortoiseGit-1.8.5.0-${bits}bit.msi" || return

	echo "Updating icons..."
	$mergeDir "$pp/TortoiseGit" "$pp/Development/Other"

	echot "\
- Settings, Dif Viewer and Merge Tool, External
  c:/Program Files (x86)/Beyond Compare 3/BComp.exe
- Settings, Git, Credential, Credential helper=wincred - all Windows uses
  - do a clone with HTTPS and ensure second time no credential prompt"
}

BrowserHomePage()
{
	local file="$udata/replicate/default.htm"
	local url="file:///$(utw "$file")"

	[[ ! -f "$file" ]] && { EchoErr "inst: cannot access browser home page file \`$file\`: No such file"; return 1; }

 	# Chrome
	$makeLink "$udata/replicate" "$APPDATA/replicate" || return

	# Internet Explorer
	echo "- Tools, Internet Options, Use Current"
	InternetExplorer start "$url"
	pause

	# Firefox
	if IsInstalled firefox; then
		echo "Setting Firefox home page..."
		echo "- Close other tabs"
		echo "- Tools, Options, Main, Use Current Page"
		firefox "$url"
		pause
	fi
}

sysInternalsInstall()
{
	printf "**************************************************\n* SysInternals Tools\n**************************************************\n"
	registry import "$pdata/setup/SysInternalsEula.reg"
}

iTunesInstall()
{
	printf "**************************************************\n* iTunes\n**************************************************\n"
	echo "- Uncheck Use iTunes as the default player for audio files"
	echo "- Uncheck Automatically update iTunes and other Apple software"
	
	# Download: http://itunes.com
	# Setup: VBScript is not installed error: http://coderjournal.com/2007/03/apple-wants-vista-to-run-un-secured-to-install-itunes/
	# AirPrint: http://discussions.apple.com/thread.jspa?threadID=2659544 or http://ipadhelp.com/ipad-help/how-to-enable-airprint-for-windows-and-use-any-printer/
	# Installs:
	#   - iTunesHelper - optional, for quick launch
	#   - Shell Extension: iTunes
	#   - Task Scheduler: AppleSoftwareUpdateApple
	# -   Services: Apple Mobile Device (required), iPod Service (recognize iPods), Bonjour Service (sharing), AirPrint
	run "Apple/iTunes/setup/iTunes v11.1.1.0 ${architecture}.exe" || return

	echo "Updating icons..."
	$rm "$pd/iTunes.lnk" || return
	$mergeDir "$pp/iTunes" "$ao" || return

	echo "Updating registry..."	
	$registry 32 delete "run/iTunesHelper" || return 	# "C:/Program Files/iTunes/iTunesHelper.exe"
	$registry 32 delete "run/APSDaemon" || return 		# "C:/Program Files (x86)/Common Files/Apple/Apple Application Support/APSDaemon.exe"

	echo "Updating services..."
	service auto "iPod Service"

	echo "Restoring the default profile..."
	iTunes profile restore default || return

	QuickTimePost || return
	AppleCore || return

	echot "\
	Use alt to open menu items
	- iTunes Store, Sign In
	- Store, Authorize Computer...
	- Edit, Preferences
		- General
	    - Library Name=<first name>'s Library
	    - Sources, check all
	    - Import Settings
	      - Import Using=MP3 Encoder
	      - Setting=Higer Quality
		- Store, uncheck Automatic Downloads, Music, Apps, Books
		- Advanced
	    - iTunes Music folder location=Music/My Music or (Music ROO) Music/Public Music
	    - uncheck Keep iTunes Music folder organized
	    - uncheck Copy files to iTunes Music folder when adding to library
	    - check Enable full keyboard navigation
	- File, Add folder to library..., Music/My Music or (Music ROO) Music/Public Music
	- Connect iOS device
	  - (optional) Music, check Selected playlists, artists, and genres, check Best or 5 Star
	  - (optional) Info
	    - Check Sync Contacts with Outlook
	    - (one time) check Sync Mail Accounts from Outlook
	    - Check Sync notes with Outlook
	- Notes: Ctrl-t visualizer, ctrl-f full screen"
	sudo --standard iTunes start || return
	pause
}

QuickTimePost()
{
	registry 32 delete "run/QuickTime Task" || return # "C:/Program Files/QuickTime/qttask.exe" -atboottime

	echo "Updating icons..."
	$rm "$pd/QuickTime Player.lnk"
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple

}


args "$@"; ${command}Command "${args[@]}";