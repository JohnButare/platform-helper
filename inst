#!/usr/bin/env bash
. script.sh || exit
. color.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Programs installation.

	install	[APP]...		install programs"
}

init()
{
	ScriptEval HostGetInfo --detail || return

	# isInstallable
	all=( AppDir bash BashProfile bootstrap CredentialStore final gitClient gitServer zsh ZshProfile )
	debian=( apt chroot cups dbus dnsServer dhcpServer geany kea mDns OpenJdk pass SaltMinion SecretTool terminator tomcat )
	mac=( apptivate bartender CarrotWeather DayOne gitx iTerm karabiner LiveDesktop MacPorts Magnet MakrdownView pcalc rectagle spark speedtest WallpaperWizard xcode XQuartz yoink )
	win=( ahk AutoHotKey AltTabTerminator AquaSnap bonjourSdk CloseAllWindows CoreTemp ddd DellDisplayManager DiskImager EdgeDeflector FileLocatorPro GitExtensions HiddenStart HiddenStartConfigure IntelDrivers IntelDriverUpdate Ninite npp Notepadpp RightClickEnhancer TidyTabs UltraMon vcxsrv WinScp xMing AjaSystemTest BlueStacks CPUZ DiskImager IntelExtremeTuning LgMonitor MarkdownView MozillaVpn MsiMotherboard NitroPdf nVidiaGeForceExperience oculus PartitionAssistant pGina PowerPanel PowerrToys QuickBooks stamps TaskLayout TemperatureLogger Todoist Wallpaper4k WindowsAssessmentAndDeploymentKit x410 xMing wsl WslFinal )
	macDebian=( BalenaEtcher BeyondCompare chrony colorls consul CredentialStore Dropbox docker etcher mysql python firefox fuse fzf ghq GitKraken hashi glances gnupg JumpCloud node NodeJs nomad PackageManagement PiDiskImager ruby SevenZip skype StandardNotes steam tmux sublime SublimeBeta SublimeMerge TeamViewer thunderbird UnifiController UnifiControllerPackage vagrant vault VisualStudioCode vscode xClient xServer xpra )
	macWin=( BlueSherpa CanonCamera CleanMy cc CreativeCloud Cricut deezer Domotz DuetDisplay dymo fork GreenShot JumpDesktop keybase LastPass LogitechGhub LogitechOptions notion nVidia office origin PdfElement QnapExternalRaidManager qvr sonos SurveillanceStation VisualStudio VisualStudioCode xpra xServer zoom )

	notArm=( BeyondCompare )
	notMacArm=( chrony )

	# commands
	defaultCommand="install"	
	cp="FileCommand cp"
	cpDir="CopyDir --recursive"
	firewall="firewall --suppress"
	hide="FileHide"
	hideAndSystem="FileHideAndSystem"
	makeShortcut="MakeShortcut"
	mv="FileCommand mv"
	ren="FileCommand ren"
	rm="${G}rm -f"
	rmd="${G}rm -fr"
	sudo="sudo"

	# variables
	oo="$pp/Operating System/Other"
	setupFiles="$_data/setup"
	winDoc="$WIN_HOME/Documents"
	winAppData="$WIN_HOME/data/app"
	pdata="$HOME/data"; IsPlatform win && pdata="$WIN_HOME/data"
	IsPlatform win && [[ ! -d "$winAppData" ]] && { mkdir --parents "$winAppData" || return; }

	# export variables
	export PLATFORM_PATH="$(GetFullPath "$DATA/platform/$PLATFORM")" # GetFullPath resolves links
}

#################################################
# Commands
#################################################

installUsage()
{
	echot "\
Usage: $(ScriptName) [OPTION]... [APP]...
Install programs.

	-h,  --hint DIR				first directory to search for installation files
	-nr, --no-run					do not find or run the installation program
	-np, --no-prompt	   	suppress interactive prompts
	-s,  --select					select the install location"
}

installArgStart() { unset -v apps hint noPrompt noRun select; }

installOpt() 
{
	case "$1" in
		-H|--hint) ScriptOptGet "hint" "$@"; export INSTALL_DIR="$hint"; hint=( --hint "$hint" );;
		-np|--no-prompt) noPrompt="--no-prompt";;
		-nr|--no-run) noRun="--no-run";;
		-s|--select) select="--select";;
		*) return 1
	esac
}

installArgs() { apps=( "$@" ); shift="$#"; }

installArgEnd()
{
	unset verboseInstaller
	[[ $verbose ]] && verboseInstaller="-verbose"
	options=( $force $noPrompt $noRun $quiet $verbose "${hint[@]}" )
}

installCommand() { i "${apps[@]}"; }

#################################################
# Aliases
#################################################

AdkInstall() { i WindowsAssessmentAndDeploymentKit; }
AhkInstall() { i AutoHotKey; }
ccInstall() { i CreativeCloud; }
cctrayInstall() { CruiseControlTrayInstall; }
dddInstall() { i DellDisplayManager; }
DnsServerInstall() { i bind; }
DhcpServerInstall() { i kea; }
gfwInstall() { gitForWindows; }
icue() { i CorsairUtilityEngine; };
nodeInstall() { i NodeJs; }
etcherInstall() { BalenaEtcher; }
ffInstall() { i firefox; }
ghub() { i LogitechGhub; }
paInstall() { i PartitionAssistant; }
SsInstall() { i SqlServer; }
SsmsInstall() { i SqlServerManagementStudio; }
unifi() { i UnifiControllerInstall; }
vmw() { i VmwareWorkstationInstall; }
VsInstall() { i VisualStudio; }
VscodeInstall() { i VisualStudioCode; }
WslInstall() { i WindowsSubsystemForLinux; }
wtInstall() { i WindowsTerminal; }

#################################################
# Helper Functions
#################################################

askp() { [[ $noPrompt ]] && { echo "$1..."; return; }; ask "$1"; }
isMacStoreId() { IsPlatform mac && IsInteger "$1"; }
macAppConfigure() { askp "Configure $1" && { macAppOpen "$1" || return; }; return 0; }
macAppOpen() { open -a "$1" || return; pause; }
makeDir() { ${G}mkdir --parents "$@"; }
makeDirSudo() { [[ -d "$1" ]] && return; sudo ${G}mkdir --parents "$1"; }
makeFileSudo() { local file="$1" dir="$(GetFilePath "$1")"; makeDirSudo "$dir" || return; [[ ! -f "$dir" ]] && { sudo touch "$file" || return; }; }
makeLink() { MakeLink --suppress $quiet $noPrompt "$@"; }
makeLinkSudo() { sudoc MakeLink --suppress $quiet $noPrompt "$@"; }
mergeDir() { MergeDir --parents --suppress "$@"; }
minimalInstall() { [[ $_minimalInstall ]]; }
mvSudo() { [[ ! -e "$1" ]] && return; sudoc mv "$1" "$2"; }
pkg() { package -q "$@"; }
rmSudo() { [[ ! -f "$1" ]] && return; sudoc ${G}rm -f "$1"; }
verifyStaticIpAddress() { [[ -f /etc/dhcpcd.conf ]] && grep "^static ip_address=" /etc/dhcpcd.conf >& /dev/null; }

findCompareProgram()
{
	args="" name="" program=""
	BeyondCompare IsInstalled && { name="bc" program="BeyondCompare"; return; }
	InPath meld && { name="meld" program="meld"; return; }
	InPath kompare && { name="kompare" program="kompare"; return; }
	return 1
}

findEditorProgram()
{
	args="" program=""
	sublime IsInstalled && { program="sublime" args="-w"; return; }
	program="$(GetTextEditor)"
}

findFile()
{
	local pattern; file="$1"

	(isMacStoreId "$file" || IsUrl "$file" ) && return 0

	if IsWild "$file"; then
		GetFileName "$file" pattern || return
		GetFilePath "$file" file || return
	fi

	if ! ScriptEval FindInstallFile $select --suppress --eval --quiet "${hint[@]}" "$file"; then
		EchoErr "inst: could not locate ${1:-the installation directory}"
		return 1
	fi

	hint=( --hint "$installDir" ); export INSTALL_DIR="$installDir"
	[[ $pattern ]] && { SelectFile "$file" "$pattern" || return; }
	return 0
}

getInstallFunction()
{
	declare -f | grep -iE "^${app} \(\) $|^${app}Install \(\) $" | sed "s/ () //"
	return ${PIPESTATUS[1]}
}

header()
{
	installDesc="$1"
	[[ $noHeader ]] && return
	printf "${RB_BLUE}**************************************************\n* ${RB_INDIGO}$installDesc${RB_BLUE}\n**************************************************${RESET}\n"
}

i()
{
	local prompt

	[[ "$1" == "--no-header" ]] && { noHeader="true"; shift; }
	[[ ! $noPrompt ]] && (( $# > 1 )) && prompt="true"

	while (($# != 0 )); do
		app="$1"; shift

		local f; f="$(getInstallFunction)" || { EchoErr "inst: '$app' installation does not exist"; return 1; }

		if ! isInstallable "$app"; then
			[[ ! $quiet ]] && echo "$(ScriptName): '$app' is not installable on $(PlatformSummary)"
			continue
		fi

		if [[ ! $prompt ]] || ask "\nInstall $app"; then
			$f || return
		fi

	done

	unset noHeader
	return 0
}

# installExecutable DIR NAME- find an executable for the current platform in the passed directory
# If found, the executable is copied to /usr/local/bin as NAME
installExecutable()
{
	local dir="$1" name="$2" file; [[ ! $name ]] && name="$(GetFileName "$dir")"

	# find the executable location
	findFile "$dir" || return
	dir="$file"

	# extract the executable from compressed files so we can analyze them
	pushd "$dir" >& /dev/null || return

	GetFiles '*.zip' | while ReadFile; do
		echo "Extracting $file..."
		unzip -p "$file" \* > "$(GetFileNameWithoutExtension "$file")" || return
		rm "$file" || return
	done

	popd >& /dev/null

	# find the correct file for this machine
	file="$(os executable find "$dir")"
	[[ ! $file ]] && { ScriptErr "could not find an executable for $name"; return 1; }

	# copy the file to /usr/local/bin
	local dest="/usr/local/bin/$name"
	sudoc cp "$file" "$dest" || return
	sudo chmod +x "$dest" || return
}

isInstallable()
{	
	local check="$1"; [[ "${check,,}" != "final" ]] && check="$(RemoveEnd "${check,,}" "final")"

	# process exclusions first
	IsInArray -ci "$check" notArm && IsPlatform arm && ! IsPlatform mac && return 1
	IsInArray -ci "$check" notMacArm && IsPlatformAll mac,arm && return 1

	# app name checks
	[[ "$check" =~ ^(bootstrap.*|.*core|ssh.*)$ ]] && return
	[[ "$check" =~ ^(debianMac.*|linux.*)$ ]] && IsPlatform debian,mac && return
	[[ "$check" =~ ^(debian.*)$ ]] && IsPlatform debian && return
	[[ "$check" =~ ^(windows.*)$ ]] && IsPlatform win && return

	# platform list checks
	IsInArray -ci "$check" all && return
	IsInArray -ci "$check" debian && return
	IsInArray -ci "$check" win && IsPlatform win && return
	IsInArray -ci "$check" mac && IsPlatform mac && return
	IsInArray -ci "$check" macDebian && IsPlatform mac,debian && return
	IsInArray -ci "$check" macWin && IsPlatform mac,win && return

	return 1
}

run() # run PROGRAM [OPTIONS...]
{
	# program argument
	local p="$1"; shift; [[ ! $p ]] && return

	if [[ "$1" == @(-p|--platform) ]]; then
		local prefix="$p"

		shift

		case "$PLATFORM" in win) p="$1";; mac) p="$2";; linux) p="$3";; esac
		[[ ! $p ]] && return 0 # return if a program was not specified for the platform

		p="$prefix$p"
		shift; shift; shift;
	fi

	# arguments
	local dest="$P"
	while (( $# != 0 )); do
		local shift=1
		case "$1" in "") : ;;
			-d|--dest|-d=*|--dest=*) ScriptOptGet "dest" "$@";;
			*) break;;
		esac
		shift $shift
	done

	# return if not running
	[[ $noRun ]] && return;

	# non-file based installs
	isMacStoreId "$p" && { storeInstall "$p"; return; }

	# find the file and perform the install
	findFile "$p" || { ask "Continue the installation"; return; }
	runProgram "$file" "$@" || return
}

runDone()
{
	[[ $noPrompt ]] && IsPlatform win && echo "${GREEN}done${RESET}"
	[[ $pause ]] && pause "When the installation has finished press any key..."
	return 0
}

runPrompt()
{
	if [[ $noPrompt ]]; then
		printf "${GREEN}Running $1...${RESET}"
		{ ! IsPlatform win || [[ $verbose ]]; } && echo
		return 0
	else
		ask "Do you want to run $1"
	fi
}

runProgram()
{
	local args=() copyLocal elevate p pause rename
	runArgs "$@" || return; set -- "${args[@]}"

	local pExt; GetFileExtension "$p" pExt
	local pDesc pParts; StringToArray "$p" "/" pParts
	[[ ! $pDesc ]] && { pDesc="$(IFS=/; echo "${pParts[*]: -3}")"; }
	[[ ! $pDesc ]] && pDesc="$p"

	# pause for installations which return without waiting
	[[ "$pExt" == @(air|iso|msu|vsix|xpi) ]] && pause="--pause"

	# elevate for installations which always require it
	[[ "$pExt" == @(msi) ]] && elevate="--elevate"

	[[ $copyLocal ]] && { runCopyLocal || return; }

	runPrompt "$pDesc" || return 0

	# use new mounted install share while elevated - in WSL 2 mounted network shares are not present when elevating
	if IsPlatform win && ! IsElevated && [[ $elevate ]] && IsPlatform wsl2; then
		local installUnc="$(unc get share "$INSTALL_DIR")"
		local newInstallDir="$(RunScript --elevate -- unc mount "$installUnc")/documents/data/install" || return
		p="${p/$INSTALL_DIR/$newInstallDir}"
	fi

	# disable Open File Secirity Warning
 	[[ "$PLATFORM" == "win" ]] && export SEE_MASK_NOZONECHECKS=1

 	# run the installation
	case "$pExt" in
		app) start "$p" "$@";;
		AppImage) runAppImage "$p" "$@" || return;;
		appx|bat|cmd) cmd.exe /c "$(utw "$p")" "$@" || return;;
		bundle) sudo sh "$p" || return;;
		deb) runDeb "$p" "$@";;
		dmg) runDmg "$p" "$@" || return;;
		inf) elevate --wait pnputil.exe -i -a "$p" "$@";;
		iso|img) iso mount "$p"; echo "If needed run the setup program manually..."; pause="--pause";;
		msi) RunMsi $elevate $verbose "$p" -- "$@" || return;;
		pkg) sudo installer $verboseInstaller -pkg "$p" -target /Applications;;
		7z|bz2|gz|tar|xpi|zip|ear|jar|war|xz) echo; InstallAppFromZip $elevate $noPrompt $verbose "$p" "$dest" "$@" || return;;
		xip) runXip "$p" "$dest" || return;;
		*) RunExecutable $elevate $verbose "$p" -- "$@" || return;;
	esac

	[[ $copyLocal ]] && rm "$p" >& /dev/null

	runDone || return

	case "$pExt" in
		iso) iso dismount "$p" || return
	esac
}

runArgs()
{
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-cl|--copy-local) copyLocal="true";;
			-e|--elevate) IsPlatform win && elevate="--elevate";;
			-r|--rename) copyLocal="true" rename="true";; # must copy for rename so we do not impact the original file
			-p|--pause) pause="--pause";;
			-np|--no-pause) pause="";;
			*) [[ "$1" == "--" ]] && { shift; args+=( "$@" ); break; }
				! IsOption "$1" && [[ ! $p ]] && { p="$1"; shift; continue; }
				! IsOption "$1" && UnknownOption "$1" "run"
		esac
		shift
	done

	[[ ! "$p" ]] && { MissingOperang "program" "run"; }
	return 0
}

runCopyLocal()
{
	local t="$(PlatformTmp)"

	[[ $verbose ]] && hilight "Copying \"$(GetFileName "$p")\" to \"$t\"..."

	if [[ -d "$p" ]]; then
		CopyDir --recursive "$p" "$t" || return
	else
		CopyFileProgress "$p" "$t" || return
	fi

	p="$t/$(GetFileName "$p")"

	if [[ $rename ]]; then
		local newP="$(mktemp --tmpdir="$(PlatformTmp)" --suffix ".$(GetFileExtension "$p")")"
		mv "$p" "$newP" || return
		p="$newP"
	fi

	return 0
}

runAppImage()
{
	local p="$1"; shift
	local appName="$(GetFileNameWithoutExtension "$p")"
	local app="$P/$(GetFileName "$p")"

	if [[ -f "$app" ]] && ask "Do you want to delete the existing installation in \"$appName\"" -dr n; then
		rmSudo "$app" || return
	fi

	if [[ ! -f "$app" ]]; then
		echo "Installing....$app"
		sudo pcp "$p" "$P" || { cat ~/.gcp/journal; return; }
	fi

	sudo chmod ugo+x "$app" || return

	echo "Configuring $appName..."
	start "$app" || return

	pause="--pause"
	return 0
}

runDeb()
{
	local p="$1"; shift

	hilight "Installing $(GetFileName "$p") version $(PackageFileVersion "$p")..."
	pkg gdebi || return
	sudo gdebi -n "$p" "$@" # install with gdebi for dependencies
}

runDmg()
{
	local result

	runDmgWorker "$@"; result=$?
	hdiutil detach /Volumes/install -quiet || return

	return $result
}

runDmgWorker()
{
	local p="$1"; shift

	if ! hdiutil mount "$p" -mountpoint /Volumes/install -quiet; then
		EchoErr "inst: unable to mount \"$p\""
		hdiutil mount "$p" -mountpoint /Volumes/install
		return 1
	fi

	if [[ -f "/Volumes/install/Install.mpkg" ]]; then
		sudoc installer $verboseInstaller -pkg "/Volumes/install/Install.mpkg" -target /Applications
	elif [[ -f "/Volumes/install/Install.app" ]]; then
		start "/Volumes/install/Install.app"
	elif ls /Volumes/install/*.pkg >& /dev/null; then
		if [[ $useGui ]]; then
			open /Volumes/install/*.pkg || return
		else
			sudoc installer $verboseInstaller -pkg /Volumes/install/*.pkg -target /Applications
		fi
	else
		shopt -s nullglob; local app=(/Volumes/install/*.app);

		[[ ! "$app" ]] && { EchoErr "inst: \"$p\" does not contain an application"; return 1; }
		local dir; GetFileName "$app" dir || return
		[[ -d "$P/$dir" ]] && { echo "$dir is already installed"; return 0; }
		sudo acp --recursive --progress-bar "$app" "$P"
	fi

	echo "Updating Spotlight..."
	mdimport "/Applications/$dir" || return
}

runXip()
{
	local p="$1" dest="$2"
	! InPath unxip && { package "thii/unxip/unxi" || return; }
	sudo unxip "$p" "$dest" || return
}

storeInstall()
{
	local name id

	! IsPlatform mac,win && return

	(( $# == 2 )) && { name="$1" id="$2"; }
	(( $# == 1 )) && { id="$1"; }

	if [[ $name ]]; then
		header "$name"
		runPrompt "$name" || return 0
	fi

	case "$PLATFORM" in
		mac) InPath mas && mas install $id; macAppOpen "$name";;
		win) start RunProcess.exe ms-windows-store://pdp/?ProductId=$id;;
	esac

	runDone || return
}

#################################################
# applications
#################################################

appCore() { RunPlatform app && appHost; }
appMac() { i CompareCore iTerm karabiner rectangle LinuxUtilities SevenZip xServer || return; }
appWin() { i WindowsStore WindowsTerminal AutoHotKey AquaSnap EdgeDeflector winget xServer || return; }
appPhysical() { i chrony JumpCloud LogitechOptions ninite nVidiaGeForceExperience zoom || return; }

appDebian()
{
	i CredentialStore CloudInit xClient SevenZip || return

	{ [[ ! $force ]] && minimalInstall; } && return

	i PackageManagement CompareCore LinuxUtilities TextEditorCore || return
	i firefox || return

	# alternative system monitor and file manager
	! IsPlatform mac,win && { pkg gnome-system-monitor nautilus terminator || return; }

	# software store
	! IsPlatform mac,pi,win && { pkg gnome-software || return; }

	return 0
}

appPi()
{
	pkg piclone thonny || return; }
	! InPath gpio && { pkg wiringpi || return; }
	! InPath pinout && { pkg python3-gpiozero || return; }
	! groups $USER | grep -q "gpio" && { sudo adduser $USER gpio || return; }
	return 0
}

appHost()
{
	local common="CleanMy dropbox notion office"
	local commonMac="$common bartender pcalc rectangle spark"
	local commonPc="$common"
	local homeServer="ChronyServer cron DnsServer DhcpServer homebridge HomebridgeWiggin UnifiController"

	case "$HOSTNAME" in

		# Mac
		ender) i $commonMac dymo gitCore || return;;
		jane) i $commonMac BetterTouchTool dymo gitCore || return;;
		pants) i $commonMac BetterTouchTool dymo || return;;

		# PC
		micro|ultron) i $commonPc || return;;
		oversoul) i $commonPc BrotherPrinter DellDisplayManager gitCore hp9020 iCloud Quicken thunderbird UltraMon VeraCrypt || return;;
		rosie) i $commonPc MsiMotherboard BrotherPrinter DellDisplayManager thunderbird VeraCrypt DevCore || return;;

		# server
		pi1) i $homeServer || return;;
		pi2) i $homeServer DomotzAgent || return;;
		pi3) i cups || return;;

	esac

}

# Windows Store applications
MakrdownViewInstall() { storeInstall "Markdown View" "9PJ021LR0M3G"; }

# Mac Store applications
CarrotWeatherInstall() { storeInstall "CARROTweather" 993487541; }
DayOneInstall() { storeInstall "Day One" 1055511498; }
LiveDesktopInstall() { storeInstall "LiveDesktop" 846060286; }
MagnetInstall() { storeInstall "Magnet" 441258766; }
PcalcInstall() { storeInstall "PCalc" 403504866; }
SpeedTestInstall() { storeInstall Speedtest 1153157709; }
YoinkInstall() { storeInstall Yoink 457622435; }

# Wallpaper
wallpaper() { RunPlatform wallpaper; }
wallpaperWin() { i Wallpaper4k; }
wallpaperMac() { i WallpaperWizard; }
Wallpaper4kInstall() { storeInstall "Wallpaper 4K" "9PMS2CJBHCKJ"; }
WallpaperWizardInstall() { storeInstall "Wallpaper Wizard" 1266674560; }

#
# Application Directories (appdata appconfig)
#

# appconfig - application configuration
# appdata - application data, locate on a large drive
#
# Windows:
# - $DATA/app* - located on the Linux disk, for high performance access by Linux programs.
# - $DATA/app*w - located on the Windows disk, for high performance access by Windows programs.

AppDir()
{
	# defaults
	declare {appConfigDir,appDataDir}="$DATA" 

	# set platform specific location
	RunPlatform AppDir || return 

	# create the application directories and link to them if they are in a non-standard location
	makeDir "$appConfigDir/appconfig" "$appDataDir/appdata" || return
	[[ ! -d "$DATA/appconfig" ]] && { MakeLink --symbolic "$appConfigDir/appconfig" "$DATA/appconfig" || return; }
	[[ ! -d "$DATA/appdata" ]] && { MakeLink --symbolic "$appDataDir/appdata" "$DATA/appdata" || return; }

	# link to the application directories on the Windows drive
	if IsPlatform win; then
		local src="$PUB/data"; makeDir "$src" "$src/appconfig" "$src/appdata" || return
		MakeLink --symbolic "$src/appconfig" "$DATA/appconfigw" || return
		MakeLink --symbolic "$src/appdata" "$DATA/appdataw" || return
	fi

	return 0
}

AppDirQnap() { appDataDir="/share/data"; } # locate data on large physical drive

#################################################
# Installs
#################################################

FinalInstall()
{
	inst --no-prompt WindowsPermissions WindowsIcons || return

	local app final=( BeyondCompare CreativeCloud CleanMy Dropbox Firefox Fork Intel JetBrains Logitech MsiMotherboard NotepadPp nVidia Office Plex Sonos Sublime Thunderbird VisualStudio Zoom )
	printf "final..."
	for app in "${final[@]}"; do
		printf "$app..."
		${app}Final || return
	done
	echo "done"
}

#################################################
# Adobe
#################################################

CreativeCloud()
{
	header "Adobe Creative Cloud" # https://creative.adobe.com/products/creative-cloud
	local copyLocal; IsPlatform win && copyLocal="--copy-local"
	run "other/Adobe/Creative Cloud/" -p "Creative_Cloud_Set-Up.exe" "Creative_Cloud_Installer.dmg" $copyLocal || return

	CreativeCloud start || return
	echot "Install: Acrobat"
	pause

	IsPlatform mac && { duti -s com.adobe.Acrobat.Pro .pdf all || return; }
	IsPlatform win && { makeLink --merge "$winAppData/Creative Cloud Files" "$WIN_HOME/Creative Cloud Files" || return; }

	CreativeCloudFinal || return
}

CreativeCloudFinal()
{
	! IsPlatform win && return

	makeDir "$pp/Media/Other/Adobe" || return
	$mv "$pp/Adobe"*".lnk" "$pp/Media/Other/Adobe" >& /dev/null
	$mv "$pd/Adobe"*".lnk" "$pp/Media/Other/Adobe" >& /dev/null

	registry 32 delete "run/Adobe Creative Cloud" # "C:\Program Files (x86)\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe" --showwindow=false --onOSstartup=true
	registry 32 delete "run/Acrobat Assistant 8.0" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\Acrotray.exe"
	registry delete "run/AdobeGCInvoker-1.0" # "C:\Program Files (x86)\Common Files\Adobe\AdobeGCClient\AGCInvokerUtility.exe"
	registry delete "urun/Adobe Acrobat Synchronizer" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\AdobeCollabSync.exe"

	registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/" # Desktop Creative Cloud icon
	registry set "HKCU/Software/Classes/CLSID/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 > /dev/null || return # Desktop Creative Cloud icon
}

#
# Apple
#

appleAll() { i bonjourSdk quickTimeFinal xcode; }

bonjourSdk()
{
	header "Bonkour SDK" # https://developer.apple.com/bonjour/
	run "other/Apple/Bonjour SDK/bonjoursdksetup.exe"
	IsPlatform win && { mergeDir "$pp/Bonjour SDK" "$pp/Development/Other" || return; }
	return 0
}

quickTimeFinal()
{
	registry 32 delete "run/QuickTime Task" # "C:/Program Files/QuickTime/qttask.exe" -atboottime
	makeDir "$ao/Apple" || return
	mergeDir "$pp/QuickTime" "$ao" || return
	$rm "$pd/QuickTime Player.lnk" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return
}

xcodeInstall()
{
	header "Xcode" # https://developer.apple.com/xcode/
	run "platform/mac/Xcode/Xcode_12.4.xip" || return
}

#################################################
# audio
#################################################

audioAll() { i Audacity; }

AudacityInstall()
{
	header "Audacity"

	# https://www.audacityteam.org/download
	run "other/Audacity/setup/" -p "audacity-win-2.4.2.exe" "" "audacity-minsrc-2.4.2.tar.xz" || return

	if IsPlatform win; then
		makeLink --merge --hide "$winAppData/Audacity" "$winDoc/Audacity" || return
		rmSudo "$pd/Audacity.lnk" || return
		$mv "$pp/Audacity.lnk" "$pp/Media" || return
	fi

	return 0
}


#
# books
#

BookAll() { i calibre calibre2opds kindle; }

CalibreInstall()
{
	header "Calibre"
	[[ "$PLATFORM" == "win" ]] && echo "- Advanced, uncheck Add install directory to path"

	local v=2.57.1 # http://calibre-ebook.com/download
	run "shareware/Calibre/setup/" -p "calibre-64bit-$v.msi" "calibre-$v.dmg" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		mergeDir --rename "$pp/calibre 64bit - E-book Management" "$ao/calibre" || return
		$rm "$pd/calibre 64bit - E-book management.lnk" || return
	fi

	echot "\
	- choose a location for your books=\\nas\home\documents\data\books
	- Manufacturers=Amazon, Devices=Kindle PaperWhite
	- E-Book Viewer, Configure, General, Page Flip options, Page flip duration=disabled
	- Notes:
	  - Organizes library folders by <author>/<book> on import or metadata change
	  - Search uses regular expressions: not mobi and not pdf and not azw
	  - Import content from the download directory using the Add books button (content
	    is copied to the ebook location)"
}

Calibre2opdsInstall()
{
	header "calibre2opds"
	run "shareware/Calibre/calibre2opds/setup/calibre2opds-3.3-253.zip" --dest "$P/calibre2opds" --elevate || return # http://calibre2opds.com/downloads/

	echo "Updating icons..."
	$makeShortcut "$P/calibre2opds/rungui.cmd" "$pp/Media/calibre2opds - OPDS Catalog Generator" "-" "" "" min || return
	# cmd "/c /"$P/calibre2opds/rungui.cmd/""  ""
	# --workingdir="$(utw "$P/calibre2opds")"
}

KindleInstall()
{
	header "Kindle"

	# https://www.amazon.com/kindle-dbs/fd/kcp
	run "other/Amazon/Kindle/setup/KindleForPC-installer-1.29.58059.exe" || return
	makeLink --merge --hide "$winAppData/Kindle" "$winDoc/My Kindle Content" || return
	mergeDir "$up/Amazon" "$up/Applications/Other" || return
	$rm "$ud/Kindle.lnk" || return

	# http://www.ebook-converter.com/kindle-drm-removal.htm
	run "other/Amazon/Kindle/converter/kindledrmsetup.exe" || return
	mergeDir "$pp/eBook Converter" "$ao" || return
	# makeDir "$udata/eBook Converter" || return
	# makeDir "$udoc/eBook Converter" || return
	# $hide "$udoc/eBook Converter" || return

	echot "\
- Kindle DRM Reoval
  - Output Option, Set Output Folder, $WIN_HOME/data/Kindle DRM
  - Kindle, Kindle Serial Number=NNN"
	start "https://www.amazon.com/gp/digital/fiona/manage?ie=UTF8&ref_=sv_kinc_7&signInRedirect=1&#manageDevices"
	# kindle start || return
	# kindle decrypt || return
}

#################################################
# bootstrap - initial setup on a fresh operating system
#################################################

bootstrap()
{
	header "Bootstrap"
	bootstrapStart || return
	RunPlatform bootstrap || return
	bootstrapEnd || return
}

bootstrapStart()
{
	# permissions
	[[ -f "$HOME/.bash_history" ]] && { sudoc chown "$USER" "$HOME/.bash_history" || return; }

	# files
	printf "files..."

	files=( .bash_history .hushlogin .lesshst .z )
	for file in "${files[@]}"; do
		printf "."
		touch "$HOME/$file" || return
	done

	printf "directories..."
	files=( $HOME/.config  $CODE/test )
	for dir in "${files[@]}"; do
		printf "."; makeDir "$dir" || return
	done

	files=( "/usr/local/bin" "$PUB" )
	for dir in "${files[@]}"; do
		printf "."; makeDirSudo "$dir" || return
	done

	printf "links..."
	local files=(.bashrc .bash_logout .bash_profile .dialogrc .gitconfig .gitignore .inputrc .kdiff3rc .lessfilter .magic .minttyrc .p10k.zsh .profile .Xresources .zlogin .zshrc)
	for file in "${files[@]}"; do
		printf "."; makeLink --symbolic --hide "$UBIN/$file" "$HOME/$file" || return
	done

	if [[ -d "$HOME/.config" ]]; then
		local dirs=(); IFS=$'\n' dirs=( $(find "$HOME/.config" -maxdepth 1 -mindepth 1 -type d -print) )
		for dir in "$dirs[@]"; do
			printf "."; makeLink --symbolic "$UBIN/.config/$dir" "$HOME/.config/$dir" || return
		done
	fi
	
	if [[ ! -L "/etc/ethers" ]]; then
		[[ -f "/etc/ethers" ]] && { sudo rm "/etc/ethers" || return; }
		printf "."; sudo ${G}ln --symbolic "$DATA/setup/ethers" "/etc/ethers" || return
	fi

	echo "done"

	# add passwords to the credential store now to minimize prompting
	! password CheckStore && { password store || return; }

	# set the default WSL distribution user now to aid troubleshooting issues.
	IsPlatform wsl && { wsl dist user set --user="$(ConfigGet user)" || return; }

	return 0
}

bootstrapEnd()
{
	i AppDir bash fzf sshCore zsh zplug || return
	SetLoginShell zsh || return
	i hostname WindowsSetup || return
}

bootstrapDebianMac() # debian|mac
{
	header "Bootstrap Mac OS and Debian "
	pkg dialog git moreutils unzip zip curl htop less || return
}

bootstrapDebian()
{
	header "Bootstrap Debian"

	if ! IsPlatform win; then
		IsHypervVm && { i HypervLinuxTools || return; }
		IsVmwareVm && { i VmwareLinuxTools || return; }
	fi

	pkg file libdbus-glib-1-dev man-db sharutils xz-utils || return				# other
	pkg avahi-daemon dnsutils net-tools wakeonlan || return							# network
	pkg --no-prompt keyboard-configuration smbclient || return

	i DebianSetup || return
}

bootstrapEntware()
{
	header "Bootstrap Entware"

	local c="coreutils"
	if ! InPath lynx > /dev/null; then
		printf "\nInstalling core packages..."
		! IsPlatform qnap && { pkg man-pages || return; } # QNAP error: "mandb: the setuid man user "root" does not exist"
		pkg dialog moreutils tmux || return																		# other
		pkg unzip xz-utils zip																									# compression
		pkg $c-chroot $c-expand $c-head $c-sort $c-stat || return 							# coreutils
		pkg git git-http libcurl || return 																			# git - libcurl required for https origins
		pkg file hdparm lsblk mount-utils ncdu || return												# file
		pkg atop htop iperf3 lscpu nethogs pv || return													# monitoring
		pkg etherwake ncat nmap openssh-client-utils || return									# network - fping is not functional
		pkg daemonize || return																									# process
		pkg screen || return																										# terminal
		pkg chrony ntpdate || return																						# time
		pkg elinks lynx || return																								# web
	fi

	[[ -f "/opt/etc/man_db.conf" ]] && { sudo chmod ugo+r "/opt/etc/man_db.conf" || return; }
	[[ -f "/bin/ping" ]] && { sudo chmod u+s "/bin/ping" || return; }
 	[[ -f "/bin/mount.cifs" ]] && { sudo chmod u+s "/bin/mount.cifs" || return; }
	[[ -f "/sbin/shutdown" ]] && { sudo chmod +s "/sbin/shutdown" || return; }

	# mute mount.cifs "sh: /bin/systemd-ask-password: No such file or directory" error
	local file="/bin/systemd-ask-password"
	makeFileSudo "$file" || return
	sudo chmod +x "$file" || return
}

bootstrapMac()
{
	header "Bootstrap Mac"

	# packages
	pkg dockutil duti findutils fontconfig pidof wakeonlan wget xz || return

	# Rosetta - x86_64 emulation
	sudoc softwareupdate --install-rosetta || return	

	if [[ ! -f "/etc/paths.d/wiggin" ]]; then
		echo "/usr/local/data/bin
$PLATFORM_PATH
/usr/local/sbin" | sudo tee "/etc/paths.d/wiggin" || return;
	fi

	# directories
	makeDir "$HOME/Applications" || return
	makeDir "$HOME/Library/LaunchAgents" || return

	# startup
	local file="$HOME/Library/LaunchAgents/startup.plist"
	[[ ! -f "$file" ]] && { cp "$setupFiles/startup.plist" "$file" || return; }

	i MacSetup || return
}

bootstrapQnap()
{
	header "Bootstrap QNAP"

	# autorun
	if $force || UpdateNeeded "QnapAutorun"; then

		local clip="$(cat <<-EOF
			mkdir /usr/etc/sudoers.d
			echo "$USER ALL=(ALL) ALL" > "/usr/etc/sudoers.d/$USER"
			echo "wsystem ALL=(ALL) ALL" > "/usr/etc/sudoers.d/wsystem"
			echo "wsystem-local ALL=(ALL) ALL" > "/usr/etc/sudoers.d/wsystem-local"

			sudo ln -s "/share/Public/documents/data" "/usr/local/data"
			sudo ln -s "/share/homes/$USER" "$USERS/$USER" || return

			grep -q "wiggin.conf" "/etc/config/apache/apache.conf" &&
				echo "Include /etc/config/apache/extra/wiggin.conf" >> "/etc/config/apache/apache.conf"

			grep -q "apache-http-compress.conf" "/etc/config/apache/apache.conf" &&
				echo "Include /etc/config/apache/extra/apache-http-compress.conf" >> "/etc/config/apache/apache.conf"

			true

			EOF
		)"

		echo -e "- paste at the end of the file:\n$clip"; clipw "$clip" || pause
		qnap autorun || return

		UpdateDone "QnapAutorun"
	fi

	# share root directory from admin uses to allow access $DATA from root share, this should be shared out as root
	sudo MakeLink --symbolic "/" "/share/homes/admin/root" || return

	# Apache
	local dir="/etc/config/apache/extra"
	[[ ! -f "$dir/wiggin.conf" ]] && { cp "$setupFiles/wiggin.conf" "$dir" || return; }

	return 0
}

bootstrapRock() # https://wiki.radxa.com/Rockpi4/Ubuntu#
{
	header "Bootstrap Rock Pi"

	password linux -u rock || return

	local f="/etc/apt/sources.list.d/apt-radxa-com.list"

	if [[ ! -f "$f" ]]; then
		echo "Adding radxa pkg source..."
		export DISTRO=bionic-stable
		echo "deb http://apt.radxa.com/$DISTRO/ ${DISTRO%-*} main" | sudo tee -a "/etc/apt/sources.list.d/apt-radxa-com.list" || return
		wget -O - apt.radxa.com/$DISTRO/public.key | sudo apt-key add - || return
		sudo apt-get update && sudo apt-get upgrade || return
	fi

	sudo apt-get install rockchip-overlay rockchip-fstab || return
	sudo apt-get install -y rockpi4b-rk-u-boot-latest || return
	sudo apt-get install linux-base || return
	sudo apt-get install linux-4.4-latest || return
}

bootstrapPi()
{
	header "Bootstrap Raspberry Pi OS"

	sudo raspi-config nonint do_net_names 0 || return # enable predictable network names
	sudo raspi-config nonint do_wifi_country US # fails in chroot

	local timezone="$(ConfigGet "timezone")"
	! cat /etc/timezone | grep -q "$timezone" && { sudo raspi-config nonint do_change_timezone "$timezone" || return; }

	local locale="$(ConfigGet "locale")"
	! cat /etc/default/locale | grep -q "$locale" && { sudo raspi-config nonint do_change_locale $locale || return; export LOCALE="$locale"; }

	[[ -f /run/sshwarn ]] && { password linux -u pi || return; }

	i RaspberryPiSetup || return
}

bootstrapUbuntu()
{
	header "Bootstrap Ubuntu"

	# remaining setup is not applicable for Windows
	IsPlatform win && return

	[[ -f gsettings ]] && { gsettings set org.gnome.desktop.session idle-delay 0 || return; } # do not blank screen

	echo "Updating file permissions..."
	chmod ugo+x "$BIN/"* || return

	if [[ ! -L "/etc/localtime" ]]; then
		echo "Updating timezone..."
		sudo mv "/etc/localtime" "/etc/localtime.old" || return
		sudo ln -s "/usr/share/zoneinfo/$timezone" "/etc/localtime" || return
	fi

	return 0
}

bootstrapWin()
{
	header "Bootstrap Windows"

	# directories
	makeDir "$winDoc/data" || return
	makeLink --symbolic "$WIN_HOME/Desktop" "$HOME/Desktop" || return
	makeLink --symbolic "$WIN_HOME/Documents" "$HOME/Documents" || return
  makeLink --symbolic "$WIN_HOME/Downloads" "$HOME/Downloads" || return
}

#################################################
# Browser
#################################################

chromeInstall()
{
	header "Google Chrome Browser"
	echo '- Sign in, Email=NNN, Password=NNN'

	# https://www.gtricks.com/chrome/how-to-download-chrome-offline-installer-for-windows-mac-and-linux/
	# https://www.google.com/chrome/?system=true&standalone=1&platform=win64
	# https://www.google.com/chrome/?platform=mac
	# https://www.google.com/chrome/?platform=linux
	run "other/Google/Chrome/setup/" -p "ChromeStandaloneSetup64.exe" "googlechrome.dmg" "google-chrome-stable_current_amd64.deb" --elevate || return

	if [[ "$PLATFORM" == "win" ]]; then
		ChromeIcons || return

	elif [[ "$PLATFORM" == "mac" ]]; then
		$rm "$la\com.google.keystone.agent.plist" || return
	fi

	echot "- Settings, uncheck Continue running background apps when Google Chrome is closed"
}

chromeIcons()
{
		$mv "$pp/Google Chrome.lnk" "$pp/Applications" || return
		$rm "$up/Google Chrome.lnk" || return
		$rm "$ud/Google Chrome.lnk" || return
		$rm "$pd/Google Chrome.lnk" || return
		$rm "$ud/Chrome App Launcher.lnk" || return
		$rm "$ud/Google Chrome Canary Build.lnk" || return
		mergeDir --rename "$pp/Google Chrome" "$ao/Chrome" || return
		mergeDir --rename "$up/Google Chrome" "$ao/Chrome" || return
		mergeDir "$up/Chrome Apps" "$up/Applications" || return
		mergeDir --rename "$up/Google Chrome Canary Build" "$ao/Chrome Beta" || return
		mergeDir "$up/Chrome Apps" "$up/Applications/Other" || return
}

firefoxInstall()
{
	header "Firefox"

	# check if installed
	local isInstalled; 
	IsPlatform debian && firefox IsInstalled && ! firefox program | grep -q "$P" && isInstalled="true"
	
	# install
	local v="87.0" # https://www.mozilla.org/en-US/firefox/all/
	if IsPlatform pixel,pi; then
		pkg firefox-esr || return
	elif IsPlatform arm && ! IsPlatform mac; then
		pkg firefox || return
	elif [[ ! $isInstalled ]]; then
		run "other/Mozilla/Firefox/" -p "Firefox Setup $v.msi" "Firefox $v.dmg" "firefox-$v.tar.bz2" --dest="firefox" || return
	fi

	echo; firefox $noPrompt profile restore default || return

	echot "\
- Options
	- Sign in to Firefox, Sign In...
	- Customize Toolbar..., 
		- (left) Home, Sidebars
		- (right) Last Pass, Download Manager, Privacy, Zoom, Simple Tab Groups
		- (overflow) Firefox Account, Mult-Account Containers, Adblock Plus, Bookmark search plus, iCloud Bookmarks
		- Toolbars, Bookmarks Toolbar, Never Show
		- Density, Compact
- LastPass
	- LastPass, Accept, Login, check Remember Password
	- right click LastPass, Manage Extensions, ..., Options, Icons, select grey
- https://duckduckgo.com/, settings, Other Settings, Load Settings, DuckDuckButare"

	FirefoxFinal || return
}

FirefoxFinal()
{
	if IsPlatform mac && ! dockutil --find "Firefox" >& /dev/null; then
		dockutil --add "/Applications/Firefox.app" || return
	elif [[ "$PLATFORM" == "win" ]]; then
		$mv "$pp/Firefox.lnk" "$pp/Applications" || return
		$rm "$pd/Firefox.lnk" || return
	fi

	return 0
}

#################################################
# File Comparison
#################################################

CompareAll()
{
	pkg meld || return
	i BeyondCompare || return
}

CompareCore()
{ 
	i BeyondCompare || return
	! IsInstalled BeyondCompare && { pkg meld || return; }
	return 0
}

BeyondCompareInstall()
{
	header "BeyondCompare"; local v=4.3.7.25118 # http://www.scootersoftware.com/download.php
	run "other/Scooter Software/Beyond Compare/setup/" -p "BCompare-${v}_x64.msi" "BCompareOSX-${v}.zip" "bcompare-${v}_amd64.deb" || return
	BeyondCompareFinal || return

	echo "- Help|Preferences, Enter Key..."
	[[ "$PLATFORM" == "mac" ]] && echo "- Beyond Compare, Install Command Line Tools…"
	BeyondCompare $noPrompt profile restore default || return
}

BeyondCompareFinal()
{
	if IsPlatform win; then
		mergeDir --rename "$pp/Beyond Compare 4" "$ao/Beyond Compare" || return
		$rm "$pd/Beyond Compare 4.lnk" || return
		$rm "$ud/Beyond Compare 4.lnk" || return
		registry delete "urun/BCClipboard" # C:\Program Files\Beyond Compare 4\BCClipboard.exe
	fi
}

#################################################
# Debian Setup
#################################################

DebianSetup()
{
	header "Debian Setup"
	i apt DebianDns DebianFileSharing DebianFonts DebianLocale DebianPolicies DebianProxyServer DebianSudoSecurePath || return
	DbusSetup || return
}

DebianDns()
{
	# Windows does not uses systemd for DNS, chroot gets /etc/resolv.conf from host
	{ IsPlatform chroot,win || ! InPath systemd-resolve; } && return 0

	# return if the FQDN and the short non-qualified name resolves
	local domain="$(ConfigGet "domain")"
	IsAvailable "router.$domain" && IsAvailable "router" && return

	sudo systemd-resolve -i eth0 --set-domain="$domain"
}

DebianFileSharing()
{
	IsPlatform win && return

	local restart

	! InPath smbd && { pkg samba || return; } # service
	! InPath smbclient && { pkg smbclient || return; }

	local workgroup="$(ConfigGet "workgroup")"
	if [[ "$(network workgroup name)" != "$workgroup" ]]; then
		network workgroup set "$workgroup" || return
		restart="true"
	fi

	if ! grep -q -i "$USER" "/etc/samba/smb.conf"; then
		echo "[root]
path = /
valid users = $USER
read only = no" | sudo tee -a "/etc/samba/smb.conf" || return
		restart="true"
	fi

	[[ $restart ]] && { service restart smbd || return; }

	return 0
}

DebianFonts()
{
	pkg fontconfig || return

	local dir="/usr/local/fonts"
	[[ ! -d "$dir" ]] && dir="/usr/share/fonts"
	[[ ! -d "$dir" ]] && { EchoErr "DebianFonts: could not locate the fonts directory."; return 1; }

	if [[ "$(ls "$dir/Meslo"* |& wc -l)" != "4" ]]; then
		findFile "fonts/MesloLGS NF" || return
		sudoc cp "$file/"*.ttf "$dir" || return
		fc-cache -fv || return
	fi

	return 0
}

DebianLocale()
{
	local locale="$(ConfigGet "locale")"
	[[ "$LANG" == "$locale" ]] && return

	pkg locales || return

	local line="$(grep "^$locale " /usr/share/i18n/SUPPORTED)"
	[[ ! $line ]] && { EchoErr "inst: $locale is not supported"; return 1; }

  local encoding="$(echo $line | cut -f2 -d " ")"
  echo "$locale $encoding" | sudo tee -a "/etc/locale.gen" || return
  sudo sed -i "s/^\s*LANG=\S*/LANG=$locale/" "/etc/default/locale" || return
  sudo dpkg-reconfigure -f noninteractive locales || return
}

DebianPolicies()
{
	local dir="/etc/polkit-1/localauthority/50-local.d" file

	! { InPath systemctl && systemctl >& /dev/null && sudo ls "$dir" >& /dev/null; } && return

	# reboot
	file="$dir/allow_shutdown_suspend.pkla"
	if ! sudo ls "$file" >& /dev/null; then
		echo "[Shutdown or suspend without a password]
Identity=unix-user:$USER
Action=org.freedesktop.login1.halt-multiple-sessions;org.freedesktop.login1.reboot-multiple-sessions;org.freedesktop.login1.set-wall-message;org.freedesktop.login1.halt;org.freedesktop.login1.power-off;org.freedesktop.login1.reboot;org.freedesktop.login1.suspend
ResultAny=yes" | sudo tee "$file"
	fi

	return 0
}

DebianProxyServer()
{
	sudo grep -q "HTTP_PROXY" /etc/sudoers && return
	echo 'Defaults env_keep += "ftp_proxy http_proxy https_proxy no_proxy FTP_PROXY HTTP_PROXY HTTPS_PROXY NO_PROXY"' | sudo tee -a "/etc/sudoers" || return
}

DebianSudoSecurePath() # add /usr/local/data/bin to the sudo secure path
{
	sudo grep -q "/usr/local/data/bin" "/etc/sudoers" && return

	local find="/usr/local/sbin"
	local clip="/usr/local/data/bin:$PLATFORM_PATH:"

	# try automatic change
	sudo sed -i "s/$(echo "$find" | QuotePath)/$(echo "$clip$find:" | QuotePath)/" "/etc/sudoers" || return
	sudo grep -q "/usr/local/data/bin" "/etc/sudoers" && return

	# manual change
	echo "Paste the contents of the clipboard ($clip) at the beginning of the secure_path"
	clipw "$clip" || pause
	sudo visudo || return
}

DebianSudoPasswordless()
{
	local line="$USER ALL=(ALL) NOPASSWD: ALL"
	sudo grep -q "^$line$" /etc/sudoers && return
	echo "$line" | sudo tee -a "/etc/sudoers" || return
}

#################################################
# development
#################################################

devAll()
{
	i DotNetCore JavaCore SqlCore WebCore || return
	i GitCore gcc go JetBrains LinqPad MarkdownView VisualStudioCode || return
	i CruiseControlTray SqlPrompt || return
}

devCore()
{
	header "Development Core"
	i GitCore gcc go MarkdownView VisualStudioCode || return
}

webCore()
{
	header "Web Development Core"
	nodeCheck || return
	npm install -g yo bower grunt grunt-cli || return
}

CruiseControlTrayInstall()
{
	local version="1.8.5.0"
	header "CruiseControl Tray"
	echo '- Uncheck Run CruiseControl.NET CCTray 1.8.5.0'

	# download: http://vmspwbld001/ccnetpreprod/ViewFarmReport.aspx http://www.cruisecontrolnet.org/projects/cctray http://cruisecontrol.sourceforge.net http://ccnet.sourceforge.net/CCNET/CCTray.html https://github.com/ccnet/CruiseControl.NET
	run "shareware/CruiseControl/tray/CruiseControl.NET-CCTray-$version-Setup.exe" || return

	echo "Installing plugins..."
	findFile "shareware/CruiseControl/plugins/CCTray" || return
	$cp	"$file"/* "$P32/CCTray" || return

	echo "Updating icons..."
	mergeDir "$pp/CCTray" "$pp/Development/Other" || return
	mergeDir "$up/CCTray" "$pp/Development/Other" || return
	$rm "$ud/CCTray.lnk" || return
	$rm "$up/Startup/CCTray.lnk" || return

	CruiseControlTray profile restore default || return
	CruiseControlTray startup || return

 	wincred get CCTray:$USER >& /dev/null || echot "\
- File, Settings, Build Projects, Add..., select a secure Build Server,
  check Server is secure, Authorisation Mode=Secure user name/password authentication,
  Configure, Username=%USERNAME%"
}

gccCheck() { InPath gcc make && return 0; i --no-header gcc || return; }

gccInstall()
{
	header "gcc"
	pkg gcc make || return
}

goInstall()
{
	local version="1.15.7"

	IsPlatformAll mac,arm && return; # coming 2/2021, https://www.reddit.com/r/golang/comments/j9tqsf/go_on_apple_silicon/

	header "Go"


	gccCheck || return

	# https://golang.org/dl/
	local platform
	case "$(uname -m)" in "") : ;;
		armv7l) platform="armv6l";;
		aarch64) platform="arm64";;
		x86_64) platform="amd64";;
	esac
	IsPlatform mac && platform="darwin-amd64"
	[[ ! $platform ]] && { ScriptErr "unknown platform"; return 1; }

	findFile "other/Go/image/go$version.linux-$platform.tar.gz" || return

	sudoc tar -C "/usr/local" -xzf "$file" || return
}

JetBrainsInstall()
{
	header "JetBrains"

	local v="1.16.6067" # https://www.jetbrains.com/toolbox-app/
	run "other/JetBrains/toolbox/jetbrains-toolbox-$v." -p "exe" "dmg" "tar.gz" || return

	if ask "Restore ReSharper profile"; then
		ReSharper profile restore default || return
	elif ask 'Configure ReSharper manually'; then
		echot "\
- ReSharper, Options
	- Keyboards & Menus, ReSharper keyboard scheme=ReSharper 2.x or IntelliJ IDEA, Apply Scheme
	- Environment, Editor, Editor Behavior, uncheck Use CamelHumps
	- Environment, IntelliSense
		- Autopopup, C#, Where value is expected, Do not display
		- Completion Appearance, check Show Member Signatures and Show Summary
	- Code Editing
			- Code Cleanup, Add, default
			- Check all except Embrace 'using' directives in region and Apply code body style
	- C#, Formattign Style
		- Blank Lines, Keep max blank lines=1 (2 places)
		- Line Breaks and Wrapping, Other, check Place simple method on single line
	- Tools
		- Unit Testing
			- Run up to 4 assemblies in parallel
			- Uncheck Save and restore Unit Test Sessions
			- Uncheck Wrap long lines in Unit Test Session output
		- External Sources=Navigation to Sources, check all
- Customize Keyboard (ctrl-shift-alt-k)
	- ReSharper.ReShartper_DuplicateText, Remove, Remove (free ctrl-d)
- notes: ctrl-n, <class>, click object, ctrl-b, Navigate to Decompiled Sources"
		VisualStudio start
	fi

	JetBrainsFinal || return
}

JetBrainsFinal()
{
	! IsPlatform win && return
	mergeDir "$up/JetBrains Toolbox" "$up/Development/other" || return
	mergeDir "$up/JetBrains" "$up/Development/other" || return
}

LinqPadInstall()
{
	header "LINQPad"
	run "shareware/DOT.NET/LinqPad/LINQPad5Setup.exe" || return # https://www.linqpad.net/Download.aspx

	echo "Moving data folders..."
	makeDir "$udata/LINQPad" || return
	makeLink --merge --hide "$udata/LINQPad" "$udoc/LINQPad Queries" || return

	echo "Updating icons..."
	$mv "$ud/LINQPad 5.lnk" "$pp/Development/DotNet" || return
	$rmd "$pp/LINQPad" || return
}

#################################################
# communications
#################################################

communicationsAll() { i TeamViewer zoom; }
communicationsCore() { i zoom; }

TeamViewerInstall()
{
	header "TeamViewer" # https://www.teamviewer.com/en/download/
	run "other/TeamViewer/" -p "TeamViewer_Setup.exe" "TeamViewer.dmg" "teamviewer_15.5.3_amd64.deb" || return

	if [[ "$PLATFORM" == "win" ]]; then
		$mv "$pp/TeamViewer.lnk" "$pp/Operating System" || return
		$rm "$pd/TeamViewer.lnk" || return
	fi

	return 0
}

ZoomInstall()
{
	header "Zoom" # https://zoom.us/download
	local suffix; IsPlatformAll arm,mac && suffix="_arm"
	run "other/Zoom/" -p "ZoomusInstallerFull.msi" "zoomusInstallerFull$suffix.pkg" || return
	ZoomFinal || return
}

ZoomFinal()
{
	if IsPlatform mac; then
		mergeDir "$udoc/Zoom" "$udata/app" || return
	elif IsPlatform win; then
		mergeDir "$pp/Zoom" "$pp/Applications/Other" || return
		$rm "$pd/Zoom.lnk" || return
		$rm "$ud/Zoom.lnk" || return
	fi
}

#################################################
# database
#################################################

dbAll() { i MySql MySqlWorkbench; }

dbCore()
{
	header "SQL Database Core"
	i iis SqlServerManagementStudio SqlPrompt SqlServer || return
}

mysql8Install() { local version=8.0.22 MySqlInstall; }

MySqlInstall()
{
	header "MySQL Workbench" # https://dev.mysql.com/downloads/mysql/

	local wasInstalled; PackageInstalled mysql-server && wasInstalled="true"

	# install
	if [[ $version ]]; then
		run "shareware/MySql/setup/mysql-community-server_${version}-1ubuntu20.04_amd64.deb" || return
	elif ! PackageInstalled mysql-server; then
		pkg mysql-server || return
	fi

	# secure installation
	[[ ! $wasInstalled ]] && { sudo mysql_secure_installation || return; }

	# update network insterface configuration
	if ask 'Bind to all network interfaces'; then
		sudo sed -i "s/^bind-address\s*=\s127.0.0.1/bind-address		= 0.0.0.0/" "/etc/mysql/mysql.conf.d/mysqld.cnf" || return
		service restart mysql || return
	fi

	return 0
}

MySqlWorkbenchInstall()
{
	header "MySQL Workbench" # https://dev.mysql.com/downloads/workbench/
	run "shareware/MySql/workbench/" -p "mysql-workbench-community-8.0.23-winx64.msi" "" "mysql-workbench-community_8.0.23-1ubuntu20.04_amd64.deb"
	
	if IsPlatform win; then
		makeLink --merge --hide "$winAppData/MySQL/dumps" "$winDoc/dumps" || return
		mergeDir "$pp/MySQL" "$pp/Development/Other" || return
	fi

	return 0
}

SqlPromptInstall()
{
	header "SQL Prompt"
	run "platform/win/RedGate/SQLPromptDownload.exe" || return # downloads to $tmp/Red Gate http://www.red-gate.com/products/sql-development/sql-prompt

	mergeDir "$pp/Red Gate" "$pp/Development/Other"

	echot "\
- SQL Prompt
	- Help, Enter Serial Number...
	- Tabs, History, uncheck Restore open tabs"
	 SqlServerManagementStudio || return
	 pause
}

#################################################
# disk
#################################################

diskAll()
{ 
	i AjaSystemTest CleanMy DiskImager DiskInventortyX FileLocatorPro iExplorer ParagonExtFs PartitionAssistant \
		TeraCopy ToDoBackup TrueImage
}

partitionManagement()
{
	! IsPlatform entware,mac,win && { pkg partitionmanager || return; } # KDE Partition Manager
	IsPlatform win && { pkg gparted || return; i PartitionAssistant || return; }
}

AjaSystemTest()
{
	header "AJA System Test"

	run "shareware/AJA System Test/" -p "AJA_SystemTest_12.5.0.msi" "" "" || return

	if IsPlatform win; then
		mergeDir "$pp/AJA" "$oo" || return
	fi

	return 0
}

CleanMy()
{
	header "Clean My PC" 

	# https://macpaw.com
	run "other/MacPaw/Clean My/" -p "CleanMyPC.exe" "CleanMyMacX.dmg" # returns error even if the setup is successful

	IsPlatform mac && { sleep 1; macAppConfigure "CleanMyMac X" || return; }
	cleanMyFinal || return
}

CleanMyFinal()
{
	if IsPlatform win; then
		mergeDir "$pp/CleanMyPC" "$oo" || return
		$rm "$pd/CleanMyPC.lnk" || return
	fi

	return 0
}

DiskImager()
{
	header "Disk Imager "
	run "shareware/other/win32diskimager-1.0.0-install.exe" || return # http://www.paragon-drivers.com/extfs-windows/

	echo "Updating icons..."
	mergeDir "$pp/Image Writer" "$oo" || return
}

DiskInventortyXInstall()
{
	header "Disk Inventory X"
	run "shareware/Disk Inventory X" -p "" "DIX1.0Universal.dmg" "" || return # http://www.derlien.com/downloads/index.html
}

FileLocatorProInstall()
{
	header "FileLocator Pro"

	# https://www.mythicsoft.com/filelocatorpro/download/
	local v="2946"
	run "platform/win/Mythicsoft/FileLocator Pro/filelocator_x64_$v.msi" || return

	if [[ "$PLATFORM" == "win" ]]; then
		mergeDir "$pp/FileLocator Pro" "$oo" || return
	fi

	return 0
}

iExplorerInstall()
{
	header "iExplorer"

	run "other/Macroplant/iExplorer/setup/" -p "iExplorer_Setup_3401.exe" "iExplorer-3.5.0.6.dmg" ""|| return # http://www.macroplant.com/iexplorer/download-ie3-pc.php

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating registry..."
		registry delete "urun/iExplorer" # "C:\Program Files (x86)\iExplorer\iExplorer.exe" /background

		echo "Updating icons..."
		mergeDir "$pp/iExplorer" "$oo" || return
		$rm "$oo/iExplorer/Uninstall iExplorer.lnk" || return
			$rm "$oo/iExplorer/iExplorer on the Web.url" || return
		quickTimeFinal || return
  elif [[ "$PLATFORM" == "mac" ]]; then
  	i fuse || return		
	fi
}

ParagonExtFsInstall()
{
	header "Paragon ExtFS "

	# http://www.paragon-drivers.com/extfs-windows/
	run "platform/win/Paragon/ExtFS/Paragon-608-PEU_WinInstallSN-4.3.852.msi" || return

	mergeDir --rename "$pp/Paragon ExtFS for Windows" "$oo/Paragon ExtFS" || return
	$rm "$pd/Paragon ExtFS for Windows.lnk" || return

	service manual "ParagonMounter" || return # does not allow computer to sleep
}

PartitionAssistantInstall()
{
	header "Partition Assistant"

	# https://www.aomeitech.com/pa/professional.html?ref=en.nav.partition-manager
	run "platform/win/AOMEI/Partition Assistant/PAssist_ProDemo.exe" --elevate || return

	mergeDir --rename "$pp/AOMEI Partition Assistant" "$oo/Partition Assistant" || return
	$ren "$oo/Partition Assistant/AOMEI Partition Assistant Demo Edition "*".lnk" "$oo/Partition Assistant/Partition Assistant.lnk" || return
	rmSudo "$pd/AOMEI Partition Assistant"*".lnk" || return
}

TeraCopyInstall()
{
	header "TeraCopy"

	# https://codesector.com/teracopy
	run "platform/win/TeraCopy/teracopy3.5b2.exe" || return
}

ToDoBackup()
{
	header "ToDo Backup"

	# https://www.easeus.com/backup-software/personal.html
	run "platform/win/EaseUS/ToDo Backup Home/tbh_trial.exe" || return

	mergeDir --rename "$pp/EaseUS Todo Backup 11.5" "$oo/ToDo Backup" || return
	$rm "$pd/EaseUS Todo Backup Home 11.5.lnk" || return
}

TrueImage()
{
	header "True Image"

	# https://www.acronis.com/en-us/support/updates/index.html
	run "acronis/True Image/setup/AcronisTrueImage2019." -p "exe" "dmg" "" || return

	mergeDir "$pp/Acronis" "$oo" || return
	$rm "$pp/Acronis True Image.lnk" || return
	$rm "$pd/Acronis True Image.lnk" || return
	registry delete "run/Acronis Scheduler2 Service" # C:\Program Files (x86)\Common Files\Acronis\Schedule2\schedhlp.exe
	registry 32 delete "run/AcronisTibMounterMonitor" # C:\Program Files (x86)\Common Files\Acronis\TibMounter\TibMounterMonitor.exe
	registry 32 delete "run/TrueImageMonitor.exe" # C:\Program Files (x86)\Acronis\TrueImageHome\TrueImageMonitor.exe

	echot "\
- Active Protection, off
- settings, Mobile backup location=d:\backup"
}

#################################################
# File Hosting
#################################################

FileHostingCore() { i Dropbox iCloud OneDrive; }

DropboxInstall()
{
	header "DropBox"

	# https://www.dropbox.com/download?full=1&plat=win
	# https://www.dropbox.com/download?full=1&plat=mac
	# https://www.dropbox.com/install-linux
	local v=119.4.1772
	run "other/Dropbox/" -p "Dropbox $v Offline Installer.exe" "Dropbox $v.dmg" "dropbox_2020.03.04_amd64.deb" --elevate -- /S || return

		echot "\
- Dropbox, Preferences...,
  - Notifications, uncheck New files synced, Edits to files
  - General, Dropbox Badge, Show only if others present"

	if IsPlatform win; then
		echot "\
- Backups, Change AutoPlay Settings, Removable drive=Take no action
- Explorer
	- Dropbox, Include in Library, Documents
	-  Libraries, Documents, Library Tools, Manage, Manage libraryslf
  	- Move Up (to top), Set as default save location
  - View, List"
		start explorer "$udoc"
	elif IsPlatform mac; then
		macAppOpen "Dropbox" || return
	fi

	DropboxFinal || return
}

DropboxFinal()
{
	local company="Juntos Holdings" user="John Butare"

	if IsPlatform win; then

		mergeDir "$up/Dropbox" "$up/Applications/Other" || return
		mergeDir "$pp/Dropbox" "$pp/Applications/Other" || return
		$rm "$up/Startup/Dropbox.lnk" || return
		$rm "$ud/Dropbox.lnk" "$ud/$company Dropbox.lnk" || return

		#registry 32 delete "run/Dropbox" # "C:\Program Files (x86)\Dropbox\Client\Dropbox.exe" /systemstartup
		registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{E31EA727-12ED-4702-820C-4B6445F28E1B}/" # Desktop Dropbox icon
		registry set "HKCU/SOFTWARE/Classes/CLSID/{E31EA727-12ED-4702-820C-4B6445F28E1A}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 > /dev/null || return # Desktop Dropbox icon

		makeLink "$WIN_HOME/$company Dropbox/$user" "$HOME/Dropbox" || return
		$hide "$WIN_HOME/$company Dropbox/.dropbox" || return
	else
		makeLink "$HOME/$company Dropbox/$user" "$HOME/Dropbox" || return
	fi
}

iCloudInstall()
{
	header "iCloud"

	# http://support.apple.com/kb/DL1455
	storeInstall "iCloud" "9PKTQ5699M62" || return

	echot "\
iCloud Control Panel
- uncheck Mail, Contacts, Calendars, & TaskLayoutInstall
- Bookmarks, check only Firefox"
}

OneDriveInstall()
{
	echo "Configuring OneDrive..."

	SetVar --delete OneDrive || return
	SetVar --delete OneDriveConsumer || return

	registry delete "urun/OneDrive" # "C:\Users\jjbutare\AppData\Local\Microsoft\OneDrive\OneDrive.exe" /background
	registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/" # Desktop One Drive icon
	registry set "HKCR/CLSID/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return # Desktop One Drive icon

	$mv "$pp/OneDrive"*".lnk" "$pp/Applications/Accessories" || return
	$mv "$up/OneDrive"*".lnk" "$pp/Applications/Accessories" || return
}

#
# finances
#

financeAll() { i quickbooks quicken; }

QuickBooksInstall()
{
	header "Quick Books"

	run "Intuit/QuickBooks-Setup.exe" || return

	$mv "$ud/QuickBooks.lnk" "$pp/Applications" || return
	$mv "$up/QuickBooks.lnk" "$pp/Applications" || return
}

QuickenInstall()
{
	header "Quicken"

	# https://www.quicken.com/activate
	run "other/Quicken/" -p "Quicken.exe" "Quicken.dmg" "" --elevate || return

	mergeDir --rename "$pp/Quicken" "$ao/Quicken"
	$rm "$pd/Quicken.lnk" || return
}

#################################################
# graphics
#################################################

graphicsCore() { i picasa FastStoneImageViewer IrfanView PaintNet; }

fsviewInstall() { FastStoneImageViewerInstall; }
FastStoneImageViewerInstall()
{
	header "FastStone Image Viewer"

	run "shareware/FastStoneImageViewer/setup/FSViewerSetup53.exe" || return

	echo "Updating icons..."
	$rmd "$pp/FastStone Image Viewer" || return
	$mv "$pd/FastStone Image Viewer.lnk" "$pp/Media" || return

		echot "Settings, Settings (F12)
	- Viewer
		- uncheck Confirm on ESC exit
		- uncheck Confirm on overwriting files
		- uncheck Auto-Load next image in Crop Board
		- Single File Deleted to=Recyle-Bin, No Confirmation
	- Dual Monitor, check "Preview" on the secodary monitor
	- Associations, Select All
	- Favorites, Add, P:(\\NAS\Photo), Display Name=NAS"
	fsview start || return
}

IrfanViewInstall()
{
	header "IrfanView"

	run "shareware/IrfanView/setup/iview451_x64_setup.exe" || return
	run "shareware/IrfanView/setup/irfanview_plugins_436_setup.exe" || return

	echo "Updating icons..."
	mergeDir "$up/IrfanView" "$pp/Media/Other" || return
	$rm "$ud/IrfanView 64.lnk" || return
	$rm "$ud/IrfanView 64 Thumbnails.lnk" || return
}

PaintNetInstall()
{
	header "paint.net"
	run "shareware/paint.net/setup/paint.net.4.0.6.install.exe" || return # http://www.getpaint.net/

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		$mv "$pp/paint.net.lnk" "$pp/Media" || return
		$rm "$pd/paint.net.lnk" || return
	fi
}

PicasaInstall()
{
	header "Picasa"

	echot "\
- Completing the Picasa 3 Setup
  - Uncheck Google as my default search engine in Internet Explorer
  - Uncheck Send anonymous usage stats to Google
- Only search My Documents, My Pictures, and Desktop
- Select Don't use Picasa Photo Viewer"

	run "other/Google/Picasa/setup/Picasa Setup v3.9.139.161.exe" || return
	run "other/Google/Picasa/starter/image v2.0.zip" --dest "$P32/PicasaStarter" --elevate || return

	echo "Updating icons..."
	mergeDir --rename "$pp/Picasa 3" "$pp/Media/Other/Picasa" || return
	mergeDir "$up/Google+ Auto Backup" "$up/Operating System/Other" || return
	$rm "$pp/Media/Other/Picasa/Uninstall.lnk" || return
	$rm "$pd/Picasa 3.lnk" || return
	$makeShortcut "$P32/PicasaStarter/PicasaStarter.exe" "$pp/Media/Other/Picasa/Picasa Starter" || return

	echot "Tools, Options
- General
	- Check Single-click to exit Edit View
	- Delete from disk without confirmation
	- Check Remove from album without confirmation
- E-Mail, E-mail program=Use my Google account
- File Types, select .PNG
- Name Tags, check Store name tags in photo"
	picasa || return
	pause
}

#################################################
# Linux
#################################################

linuxCore() { i LinuxUtilities chroot cups dbus fzf gpg; }
schedulingCore() { i cron; }
timeCore() { i chrony chronyServer && pkg ntpdate; }

LinuxUtilities()
{
	header "Linux Utilities" # 90MB
	pkg bc expect git tty-clock virt-what || return														# other
	pkg di fdfind hdparm inotify-tools lsof ncdu ranger || return							# file
	pkg atop iotop iperf3 nethogs pv || return																# monitoring
	pkg iproute2 fping mosh ncat nmap traceroute whois || return							# network, iproute2=ip
	pkg daemonize || return																										# process
	pkg sox || return																													# sound
	pkg bat colordiff cowsay figlet fortune fortune-mod lolcat jq || return		# text, 44MB

	i dbus glances || return
}

LinuxNetworkUtilities()
{
	header "Linux Network Utilities"
	pkg lynx nmap || return
}

chronyInstall() # time syncronization / NTP replacement
{
	header "Chrony"

	if IsPlatform mac; then
		# https://www.whatroute.net/chronycontrol.html#download
		run "other/Chrony/chronycontrol-1.4.1.zip" || return
		sleep 1; macAppOpen "ChronyControl" || return
	else
		pkg chrony ntpdate || return
	fi
}

chronyServerInstall()
{
	pkg chrony || return
	grep -q "^allow" "/etc/chrony/chrony.conf" && return
	echo "allow" | sudo tee -a "/etc/chrony/chrony.conf" || return
	service restart chrony || return
}

chrootInstall()
{
	header "chroot"
	pkg debootstrap schroot qemu-user-static || return
	makeDirSudo "/var/chroot" || return
	return 0
}

cronInstall()
{
	pkg at anacron incron || return
	cronLogInstall || return
}

cronLogInstall()
{
	local f="/etc/rsyslog.d/50-default.conf"

	if [[ -f "$f" ]] && grep -q "#cron\.\*" "$f"; then
		sudo sed -i "s/^#cron\.\**/cron\.\*/" "$f" || return
		service stop rsyslogd
	fi
}

cupsInstall()
{
	package cups || return
	sudo usermod -a -G lpadmin $USER || return
	sudo cupsctl --remote-any || return
}

dbusInstall()
{
	# fix WSL error message
	local file="/usr/share/dbus-1/system.d/org.freedesktop.NetworkManager.conf"
	IsPlatform wsl && [[ -f "$file" ]] && grep -q "whoopsie" "$file" && { echo "Remove whoopsie"; sudoe "$file"; }
	
	return 0
}

fzfInstall()
{
	header "fzf (Fuzzy Search)"

	# https://github.com/junegunn/fzf
	if [[ ! -d ~/.fzf ]]; then

		# download
		git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf || return

		# install - do not update shell configuration files, assume ~/fzf.SHELL is sourced
		sudo ~/.fzf/install --no-update-rc --completion --key-bindings || return

	fi

	printf "links..."
	local dest="/usr/local/bin" files=(fzf fzf-tmux)
	for file in "${files[@]}"; do
		printf "."
		[[ ! -e "$dest/$file" ]] && { sudo ln -s "$HOME/.fzf/bin/$file" "$dest/$file" || return; }
	done
	echo "done"

	return 0
}

GpgInstall()
{
	header "GNU PGP"
	pkg gpg || return
	makeLink --symbolic "$UDATA/app/gpg" "$HOME/.gnupg" || return
	chmod go-rwx "$UDATA/app/gpg" || return
}

#################################################
# Game
#################################################

gameAll() { i BlueStacks EpicGames Oculus Origin Steam Uplay GameIcons || return; }

gameIcons()
{
	makeLink --merge --hide "$winAppData/Oculus" "$winDoc/Oculus Home" || return
	makeLink --merge --hide "$winAppData/Steam VR" "$winDoc/steamvr" || return

	makeLink --merge --hide "$winAppData/Shadow of the Tomb Raider" "$winDoc/Shadow of the Tomb Raider" || return
	mergeDir "$pp/Call of Duty Modern Warfare" "$pp/Game/Other" || return
	mergeDir "$pp/Battle.net" "$pp/Game/Other" || return

	$mv "$ud/The Elder Scrolls V Skyrim VR.url" "$pp/Game" || return
	$mv "$ud/Far Cry 5.url" "$pp/Game" || return
	$mv "$ud/Fortnite.url" "$pp/Game" || return
	$mv "$ud/Grand Theft Auto V.url" "$pp/Game" || return
	$mv "$ud/Half-Life 2 Lost Coast.url" "$pp/Game" || return
	$mv "$ud/Half-Life Alyx.url" "$pp/Game" || return
	$mv "$ud/Hot Dogs, Horseshoes & Hand Grenades.url" "$pp/Game" || return
	$mv "$ud/Jurassic World Evolution.url" "$pp/Game" || return
	$mv "$ud/Middle-earth Shadow of Mordor.url" "$pp/Game" || return
	$mv "$ud/realMyst Masterpiece Edition.url" "$pp/Game" || return
	$mv "$ud/NBA 2K17.url" "$pp/Game" || return
	$mv "$ud/Ravenfield.url" "$pp/Game" || return
	$mv "$ud/Rockstar Games Launcher.lnk" "$pp/Game" || return
	$mv "$ud/Shadow of the Tomb Raider.url" "$pp/Game" || return
	$mv "$ud/STAR WARS Jedi Fallen Order™.url" "$pp/Game" || return
	$mv "$ud/The Witness.url" "$pp/Game" || return
	$mv "$ud/Tom Clancy's Rainbow Six Siege.url" "$pp/Game" || return
}

BlueStacksInstall()
{
	header "BlueStacks"

	# https://www.bluestacks.com/
	run "game/BlueStacks/BlueStacksInstaller_4.120.5.1101_native_dd8ed79ebd104260f66cb75de271e11b.exe" || return

	makeDir "$pp/Game/Other/BlueStacks" || return
	$mv "$pp/BlueStacks.lnk" "$pp/Game/Other/BlueStacks" || return
	$mv "$pp/BlueStacks Multi-Instance Manager.lnk" "$pp/Game/Other/BlueStacks" || return
	$rm "$pd/BlueStacks Multi-Instance Manager.lnk" "$pd/BlueStacks.lnk" || return
}

EpicGamesInstall()
{
	header "Epic Games"
	run "game/Epic Games/EpicInstaller-7.9.0.msi" || return # https://www.epicgames.com/account/personal#

	echo "Updating icons..."
	$mv "$pp/Epic Games Launcher.lnk" "$pp/Game/Other" || return
	$rm "$pd/Epic Games Launcher.lnk" || return
	gameIcons || return
}

OculusInstall()
{
	header "Oculus"

	# https://www.oculus.com/setup/
	run "game/oculus/" -p "OculusSetup.exe" "mac" "" --elevate || return

	if [[ "$PLATFORM" == "win" ]]; then
		$mv "$pd/Oculus.lnk" "$pp/Game" || return
		mergeDir "$psm/Oculus" "$pp/Game/Other" || return
		makeLink --merge --hide "$winAppData/Oculus" "$winDoc/Oculus Home" || return
	fi

	return 0
}

OriginInstall()
{
	header "Origin Games"

	# https://www.origin.com/usa/en-us/store/download
	run "game/Origin/" -p "OriginThinSetup.exe" "Origin.dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then
		registry delete "urun/EADM" # "C:\Program Files (x86)\Origin\Origin.exe" -AutoStart
		mergeDir "$pp/Origin" "$pp/Game/Other" || return
		$rm "$pd/Origin.lnk" || return
	fi

	return 0
}

SteamInstall()
{
	header "Steam"

	# http://store.steampowered.com/about/
	run "game/Steam/" -p "SteamSetup.exe" "steam.dmg" "steam_latest.deb" --elevate || return

	if IsPlatform win; then
		registry delete "urun/Steam" # Steam	Steam Client Bootstrapper	Valve Corporation, c:\program files (x86)\steam\steam.exe
		mergeDir "$up/Steam" "$pp/Game/Other" || return
		mergeDir "$pp/Steam" "$pp/Game/Other" || return
		$rm "$pd/Steam.lnk" || return
		makeLink --merge --hide "$winAppData/Steam VR" "$winDoc/steamvr" || return
		gameIcons || return
	fi

	return 0
}

UplayInstall()
{
	header "UPlay (UbiSoft)"

	run "game/Ubisoft/UplayInstaller.exe" || return #
	makeLink --merge --hide "$winAppData/Uplay" "$winDoc/My Games" || return
	mergeDir "$up/Ubisoft" "$pp/Game/Other" || return
	$rm "$ud/Uplay.lnk" || return
}

#################################################
# Git
#################################################

gitAll()
{
	i GitClient GitServer || return
	i fork GitExtensions ghq GitForWindows GitKraken GitHub gitx lazygit SublimeMerge TortoiseGit || return
	pkg git-extras gitg tig || return
}

gitCore()
{
	pkg git || return
	i GitClient ghq lazygit || return	
	RunPlatform gitCore || return
	! IsPlatform chroot,vm && { GitHelper clone bin || return; }
	return 0
}

gitCoreMac() { i SublimeMerge || return; }
gitCorePi() { pkg kompare || return; }
gitCoreUbuntu() { pkg SublimeMerge || return; }

gitClient() { RunPlatform gitClient || return; }
gitClientMac() { i fork; }
gitClientDebian() { i GitKraken; }

gitClientWin()
{
	# .gitconfig link - for Windows programs, make it a hard link (symbolic links require elevation)
	if [[ ! -f "$WIN_HOME/.gitconfig" ]]; then
		MakeLink --hide --hard $winDoc/data/bin/.gitconfig $WIN_HOME/.gitconfig || return
	fi

 	# posix permissions do not work well on windows file systems
	if IsPlatform wsl1; then
		sudo git config --system core.filemode false || return
	else
		sudo git config --unset --system core.filemode
	fi

	i fork || return
}


gitServer()
{
	local gitDir="$DATA/appdata/git"

	# create git directory
	[[ ! -d "$gitDir" ]] && { sudoc mkdir "$gitDir" || return; }
	makeLinkSudo --symbolic "$gitDir" "/git" || return
	sudoc chmod o+rwx "/git" || return

	# create test repository
	[[ ! -d "/git/test" ]] && { git init --bare /git/test || return; }

	return 0
}

fork()
{
	header "Fork" # https://git-fork.com/
	run "git/Fork/" -p "ForkInstaller.exe" "Fork.dmg" "" --pause || return
	ForkFinal || return
	ForkHelper $noPrompt profile restore default || return

	if IsPlatform mac; then
		echot "- Preferences, Integration, Install Command Line Tools"
		macAppOpen "Fork" || return
	fi

	return 0
}

ForkFinal()
{
	if IsPlatform win; then
		mergeDir "$up/Fork" "$up/Development/Other" || return
		$rm "$ud/Fork.lnk" || return

		local forkGit="$ADATA/../Local/Fork/gitInstance/2.29.2.2/bin/git.exe"
		[[ -f "$forkGit" ]] && { "$forkGit" config --system core.filemode false || return; }
	fi

	return 0
}

GitExtensionsInstall()
{
	header "Git Extensions"

	# https://github.com/gitextensions/gitextensions/releases/latest
	run "git/GitExtensions/setup/GitExtensions-3.4.1.9675.msi" || return

	if [[ ! -d "$ADATA/../Roaming/GitExtensions/GitExtensions" ]]; then
		GitHelper gui || return
		echot "- English, Quit"
		pause
	fi

	local f="$WIN_HOME/.gitconfig.backup"
	[[ -f "$f" ]] && { attrib "$f" -h -s || return; }
	FileTouchAndHide "$WIN_HOME/.gitconfig.backup" || return

	makeDir "$pp/Development/Other/Git" || return
	$mv "$pp/Git Extensions.lnk" "$pp/Development/Other/Git" || return
	$rm -f "$pd/Git Extensions.lnk" || return
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shellex/ContextMenuHandlers/GitExtensions2/" || return
	registry unregister "$P32/GitExtensions/GitExtensionsShellEx64.dll" || return

	GitHelper profile restore default || return
}

GhqInstall()
{
	IsPlatform mac,arm && return
	header "ghq"
	installExecutable "git/ghq" || return # https://github.com/x-motemen/ghq - requires Go to compile
}

GitForWindowsInstall()
{
	header "Git for Windows"

	# https://git-scm.com/download/win
	# https://github.com/git-for-windows/git/releases/
	run "git/Git for Windows/setup/Git-2.27.0-64-bit.exe" /silent || return

	mergeDir "$pp/Git" "$pp/Development/Other" || return
	mergeDir "$up/Git" "$pp/Development/Other" || return
	$rm "$up/Git for Windows.lnk"	|| return

	# context menus
	registry delete "HKEY_CLASSES_ROOT/Directory/shell/git_gui/"
	registry delete "HKEY_CLASSES_ROOT/Directory/shell/git_shell/"
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shell/git_gui/"
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shell/git_shell/"

	askp 'Configure Git For Windows' && { GitForWindowsConfigure || return; }

	return 0
}

GitForWindowsConfigure()
{
	! IsElevated && { RunScript --elevate $verbose -- inst GitForWindowsConfigure "${options[@]}"; return; }

	local gw="$P/Git/cmd/git.exe"

	echo "Configuring git for windows..."
	"$gw" config --system http.sslcainfo "$(utw "$P/Git/usr/ssl/certs/ca-bundle.crt")" || return
	"$gw" config --system core.fscache true || return
	"$gw" config --system core.filemode false || return
	"$gw" config --system core.autocrlf false || return
	"$gw" config --system credential.helper wincred || return
}

GitKrakenInstall()
{
	header "Git Kraken" # https://www.gitkraken.com/download
	run "git/Git Kraken/setup/" -p "GitKrakenSetup.exe" "installGitKraken.dmg" "GitKraken-amd64.deb" || return
	IsPlatform wsl && { run "git/Git Kraken/setup/GitKraken-amd64.deb" || return; }
	IsPlatform win && { mergeDir "$up/Axosoft, LLC" "$up/Development/Other" || return; }
	return 0
}

GitHubInstall()
{
	header "GitHub"
	run "git/GitHub/setup/GitHubSetup.exe" || return # https://github-windows.s3.amazonaws.com/GitHubSetup.exe
	pause

	echo "Updating icons..."
	mergeDir --rename "$up/GitHub, Inc" "$up/Development/Other/GitHub" || return
	$rm "$ud/GitHub.appref-ms" || return
	$rm "$ud/Git Shell.lnk" || return

	echot "\
- GITHUB ENTERPRISE, GitHub Username or Email=IDSID
- Password=NNN
- GitHub Enterprise URL=https://GitHub.intel.com/
- Full Name=NNNN
- tools, options...
	- default storage directory=c:\Projects
	- SCAN FOR REPOSITORIES
- note:
	- GitHib is useful for quickly cloning a repository from GitHub
	- clone a repository - click an account on the left channel, right click on the repository, and select Clone To..."
}

GitUpInstall()
{
	pip3 install git-up || return;
	git config --global git-up.rebase.auto false || return
}

GitXInstall()
{
	header "GitX"
	run "git/GitX/GitX-dev.dmg" || return # http://rowanj.github.io/gitx/
}

LazyGitInstall()
{
	IsPlatform debian && { sudo add-apt-repository --yes ppa:lazygit-team/release || return; }
	pkg lazygit || return
}

SublimeMergeInstall()
{
	header "Sublime Merge"

	# https://www.sublimemerge.com/download
	# https://discord.com/channels/280102180189634562/650695903446827011 (beta)
	local v="2020" beta="2041"
	local linux="sublime-merge_build_${v}_amd64.deb"
	IsPlatform debian,arm && linux="sublime-merge_build_${v}_arm64.deb"
	run "other/Sublime/merge/" -p "sublime_merge_build_${v}_x64_setup.exe" "sublime_merge_build_${v}_mac.zip" "$linux" "${args[@]}" || return;

	IsPlatform win && { $mv "$pp/Sublime Merge.lnk" "$pp/Applications" || return; }

	return 0
}

TortoiseGitInstall()
{
	header "TortoiseGit"

	echot "- (optional) Check Registrer link handlers"
	run "shareware/TortoiseGit/setup/TortoiseGit-1.8.7.0-64bit.msi" || return # https://code.google.com/p/tortoisegit/wiki/Download?tm=2

	echo "Updating icons..."
	mergeDir "$pp/TortoiseGit" "$pp/Development/Other"

	local clip="$(utw "$program")"; clipw "$clip"
	findCompareProgram || return
	echot "\
- General
	- Contect Menu, uncheck all but Clone and Show log
	-Dialogs 1, check Enable Gravatar
- (optional) Diff Viewer (1 place) and Merge Tool (1 place), External=<paste> ($clip)
- Icon Overlays
	- check Unversioned files mark parent folder as modified
	- Icon Set, Icon Set=Straight"
}

#################################################
# hardware
#################################################

hardwareAll() { i BlueSherpa BrotherPrinter CanonCamera DasKeyboard DellDisplayManager DoxieGo dymo EpsonScan IntuosPro LabelMaker LgMonitor LogitechOptions EpsonScan PowerPanel; }

BalenaEtcher() # disc image burner
{
	header "Balena Etcher" # https://www.balena.io/etcher/
	local v="1.5.116" dir="hardware/Balena/Etcher"
	run "$dir/" -p "balenaEtcher-Setup-$v.exe" "balenaEtcher-$v.dmg" "balena-etcher-electron-$v-linux-x64.zip" || return

	v="v12.25.1"
	run "$dir/balena-cli-$v-" -p "windows-x64-standalone.zip" "macOS-x64-standalone.zip" "linux-x64-standalone.zip" --dest "balena-cli" --elevate || return

	if IsPlatform win; then
		$mv "$up/balenaEtcher.lnk" "$up/Applications" || return
		$rm "$ud/balenaEtcher.lnk" || return
	fi

	return 0
}

BlueSherpaInstall()
{
	# https://www.bluemic.com/en-us/products/sherpa/
	run "hardware/Yeti/blue/BlueSherpa-20191022" -p ".exe" ".pkg" || return

	IsPlatform win && { mergeDir "$pp/Blue Sherpa" "$pp/Media/Other" || return; }
	return 0

}

BrotherPrinterInstall()
{
	header "Brother Printer "
	echot "- Connection Type=Wired, check Custom Install
- Select Features=uncheck PC-FAX*"

	# https://support.brother.com/g/b/downloadtop.aspx?c=us&lang=en&prod=mfcl2740dw_us_eu_as	
	# Windows: run the decompressed instal``led, the compressed executable does not run properly from WSL
	run "hardware/Brother/MFC-L2740DW/setup/" -p "MFC-L2740DW-inst-C1-US/MFC-L2740DW_series/Setup.exe" "MonoLaserFB14_ULW_TP_110.dmg" "" || return

	if IsPlatform win; then
		mergeDir "$pp/Brother" "$ao" || return
		$mv "$pd/Brother Creative Center.lnk" "$ao/Brother" || return
		$rm "$pd/Brother Utilities.lnk" || return
		registry 32 delete "RunOnce/BrUrl" || return # rundll32 url.dll,FileProtocolHandler http://www.brother.com/rd/productreserch/usa/
		registry 32 delete "RunOnce/OmniJoinURL" || return # C:\Program Files (x86)\Brother\Brmfl14d\OmniJoinTrial.exe /R
		registry 32 delete "run/BrStsMon00" # C:\Program Files (x86)\Browny02\Brother\BrStMonW.exe /AUTORUN
		registry 32 delete "run/ControlCenter4" # C:\Program Files (x86)\ControlCenter4\BrCcBoot.exe /autorun
	fi

	return 0
}

CanonCameraInstall()
{
	header "Canon Camera"

	# https://www.usa.canon.com/internet/portal/us/home/support/details/cameras/eos-dslr-and-mirrorless-cameras/mirrorless/eos-r?tab=drivers_downloads
	local d="hardware/Canon/EOS R/setup"
	run "$d/EOS Utility v3.12.10." -p "exe" "zip" || return

	if IsPlatform win; then
		mergeDir "$pp/Canon Utilities" "$pp/Media/Other" || return
		$rm "$pd/EOS Utility.lnk" || return
		$rm "$pp/Startup/EOS Utility.lnk" || return # "C:\Program Files (x86)\Canon\EOS Utility\EOS Utility.exe" /AutoStartUp
	fi

	return 0
}

CorsairUtilityEngineInstall()
{
	header "Corsair Utility Engine (CUE)"

	# https://www.corsair.com/us/en/downloads
	run "hardware/Corsair/Utility Engine/iCUESetup_3.36.125_release.msi" || return

	registry 32 delete "run/CORSAIR iCUE Software" # "C:\Program Files (x86)\Corsair\iCUE\iCUE Launcher.exe" --autorun
	service stop CorsairService || return # high CPU
}

CricutInstall()
{
	header "Cricut"

	# https://design-beta2.cricut.com/#/download
	local v="5.2.14"
	run "hardware/Cricut/Cricut Design Space Install v$v." -p "exe" "mac" "" || return

	if IsPlatform win; then
		registry delete "run/ErmTray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe
		mergeDir "$up/Cricut Design Space Beta" "$up/Applications/other" || return
		$mv "$ud/Cricut Design Space.lnk" "$up/Applications" || return
		$mv "$ud/Cricut Design Space Beta.lnk" "$up/Applications" || return
		$rm "$up/Startup/Cricut Taskbar Application.lnk" || return # "C:\Users\jjbutare\AppData\Roaming\Cricut Design Space\Web\taskbar-application-win32\Release\CricutTaskbarApplication.exe"
	fi

	return 0
}

CpuzInstall()
{
	header "CPU-Z"

	# https://www.cpuid.com/softwares/cpu-z.html
	run "hardware/CPUID/cpu-z_1.92-en.exe" || return

	if IsPlatform win; then
		mergeDir "$pp/CPUID" "$oo" || return
		$rm "$pd/CPUID CPU-Z.lnk" || return
	fi

	return 0
}

DasKeyboardInstall()
{
	header "Das Keyboard"

	# https://www.daskeyboard.io/get-started/
	run "hardware/Das Keyboard/setup/" -p "Das-Keyboard-Q_3.2.4.exe" "q-Desktop.img" || return

	if IsPlatform win; then
		mergeDir "$pp/Das-Keyboard-Q" "$oo" || return
		$rm "$ud/das-keyboard-q.lnk" || return
		$rmd "$up/GitHub, Inc" || return
		registry 32 delete "run/Das Keyboard Q" || return # C:\Users\jjbutare\AppData\Local\das-keyboard-q\das-keyboard-q.exe
	fi
}

DellDisplayManager()
{
	header "Dell Display Manager"

	# 	https://www.dell.com/support/home/en-us/product-support/product/dell-u4021qw-monitor/drivers
	run "hardware/Dell/Dell Display Manager/setup/ddmsetup2054.exe" || return

	mergeDir --rename "$pp/Dell Display Manager" "$oo/Dell Display Manager" || return
	$rm "$pd/DJI Assistant 2.lnk" || return
	
}
DjiInstall()
{
	header "DJI"

	# https://www.dji.com/mavic/info#downloads
	run "hardware/dji/Assitant/setup/" -p "DJI Assistant 2 1.2.3.exe" "DJI+Assistant+2+1.2.3.pkg" "" || return

	mergeDir --rename "$up/DJI Product" "$pp/Travel/Other/DJI" || return
	mergeDir --rename "$pp/DJI Product" "$pp/Travel/Other/DJI" || return
	$rm "$pd/DJI Assistant 2.lnk" || return
}

DoxieGoInstall()
{
	header "Doxie Go"
	run "hardware/Doxie/Go/" -p "DoxieSetup_2.11.3.exe" "Doxie_2.11.3.dmg" "" || return # http://help.getdoxie.com/doxiego/

	echo "Updating icons..."
	$mv "$pd/Doxie.lnk" "$pp/Operating System" || return
	$rmd "$pp/Doxie" || return
}

DuetDisplayInstall()
{
	header "Duet Display"

	# https://www.duetdisplay.com/#download
	run "hardware/duet/" -p "DuetSetup-1-8-2-1.exe" "duet-2-3-0-5.zip" "" --elevate || return

	case "$PLATFORM" in

		win)
			mergeDir "$pp/Duet Display" "$oo" || return
			$rm "$pd/duet.lnk" || return
			registry 32 delete "run/Duet Display" # C:\Program Files\Kairos\Duet Display\duet.exe
			;;

	esac

	return 0
}

DymoInstall()
{
	header "Dymo Label"

	# http://www.dymo.com/en-US/dymo-user-guides
	run "hardware/DYMO/" -p "DCDSetup1.3.2.exe" "DLS8Setup.8.7.5.dmg" "" --elevate || return

	if IsPlatform mac; then

		local base="$UDATA/app/DYMO Label"
		local addressBook="$base/Address Books" label="$base/Labels"

		# ~/Documents/DYMOS Label Software is still re-created on startup
		mergeDir --rename "$udoc/DYMO Label Software" "$base" || return

		defaults write com.dymo.dls DataTrackingFolder -string "~/data/app/DYMO Label" || return
		defaults write com.dymo.dls AddressBookDirectory -string "$addressBook" || return
		defaults write com.dymo.dls LabelsDirectory -string "$label" || return

		defaults write com.dymo.dls LastAddressBookDirectory -string "$addressBook" || return
		defaults write com.dymo.dls LastLabelsDirectory -string "$label" || return
		defaults write com.dymo.dls LastSavedFile -string "" || return

		defaults write com.dymo.dls DefaultReturnAddress -string "John Butare\\n9204 Hagerman Ave., NE\\nAlbuquerque,NM 87109" || return

	elif IsPlatform win; then

		mergeDir "$pp/DYMO" "$ao" || return
		$rm "$pd/DYMO Connect.lnk" || return

		registry 32 delete "run/DymoOfficeHelper" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMO.OfficeHelper.exe" /w
		registry 32 delete "run/DYMOWebApi" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMO.WebApi.Win.Host.exe" /auto
		registry delete "urun/DYMOConnectLauncher" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMOConnectLauncher.exe"

	fi

	return 0
}

EpsonScanInstall()
{
	header "Epson Scan"

	# https://epson.com/Support/Scanners/Perfection-Series/Epson-Perfection-V100-Photo/s/SPT_B11B184051
	run "hardware/Epson/Perfection V100 Photo/epson13833.exe" || return

	mergeDir "$pp/EPSON Scan" "$oo" || return
	$rm "$pd/EPSON Scan.lnk" || return
}

GigabyteMotherboardInstall()
{
	local d="hardware/Gigabyte/utility" a=(--elevate --no-pause)

	header "Gigabyte Motherboard"

	# Designare EX: https://www.gigabyte.com/us/Motherboard/X299-DESIGNARE-EX-rev-10#support-dl
	# RGB Fusion: https://www.gigabyte.com/MicroSite/512/download.html
	# motherboard: https://www.gigabyte.com/us/Support/Utility/Motherboard (advanced search, chipset=Intel X299)
	run "$d/Application Center vB20.0219.1/Setup.exe" "${a[@]}" || return
	run "$d/RGB Fusion vB20.0430.1/UpdPack.exe" "${a[@]}" || return
	run "$d/Easy Tune vB19.1202.1/setup.exe" "${a[@]}" || return # B20.0214.1
	run "$d/System Information Viewer vB20.0409.1/setup.exe" "${a[@]}" || return # B20.0410.1
	run "$d/AT BIOS vB20.0406.1/setup.exe" "${a[@]}" || return # B20.0422.1
	run "$d/BIOS Setup vB17.0621.1/setup.exe" "${a[@]}" || return
	run "$d/Fast Boot vB17.0619.1/setup.exe" "${a[@]}" || return
	run "$d/V-Tuner vB17.0616.1/setup.exe" "${a[@]}" || return

	registry delete "run/RtkAudUService" # "C:\WINDOWS\System32\RtkAudUService64.exe" -background
	registry delete "run/RTHDVCPL" # "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s

	d="$oo/GIGABYTE"
	mergeDir "$pp/GIGABYTE" "$oo" || return

	# Application Center
	registry 32 delete "RunOnce/PreRun" # C:\Program Files (x86)\GIGABYTE\AppCenter\PreRun.exe
	mv "$d/APP Center/"* "$d" >& /dev/null
	rm -fr "$d/APP Center" || return
	[[ -f "$d/Launch APP Center.lnk" ]] && { mv "$d/Launch APP Center.lnk" "$d/GIGABYTE Application Center.lnk" || return; }

	# System Information Viewer
	mv "$d/SIV/"* "$d" >& /dev/null
	rm -fr "$d/SIV" || return

	# EasyTune
	makeLink --merge --hide "$winAppData/EasyTune" "$winDoc/EasyTune" || return
	mv "$d/EasyTune/"* "$d" >& /dev/null
	rm -fr "$d/EasyTune" || return

	# @BIOS
	mv "$d/@BIOS/"* "$d" >& /dev/null
	rm -fr "$d/@BIOS" || return

	# RGB Fusion
	registry 32 delete "RunOnce/SelLed" # C:\Program Files (x86)\GIGABYTE\RGBFusion\RunLed.exe
	mv "$pp/AORUS/RGBFusion 2.0/"* "$d" >& /dev/null
	rm -fr "$pp/AORUS" || return
	$rm "$pd/RGBFusion 2.0.lnk" || return
	$mv "$d/RGBFusion 2.0.lnk" "$d/RGB Fusion.lnk" || return

	# other
	$makeShortcut "$P32/GIGABYTE/BIOS Setup/BiosSetupConsole.exe" "$d/BIOS Setup" || return
	$makeShortcut "$P32/GIGABYTE/FastBoot/FastBoot.exe" "$d/Fast Boot.lnk" || return
	$makeShortcut "$P32/GIGABYTE/VTuner/vTuner.exe" "$d/VTuner.lnk" || return

	echot "\
Do not update APP Center
- Preferences
	- Update Schedule=Turn off
	- Uncheck Always run on next reboot"
	elevate "$P32/GIGABYTE/AppCenter/RunUpd.exe" || return
}

GigabyteThunderboltDriverInstall() { run "hardware/Gigabyte/Designare EX/driver/Thunderbolt Driver v1.41.648.4_n.exe"; }

goProInstall()
{
	header "GoPro"

	run "hardware/GoPro/setup/" -p "GoPro_Quik-WinInstaller-2.5.2.633.exe" "" "" || return # https://shop.gopro.com/softwareandapp/quik-%7C-desktop/Quik-Desktop.html#
	run "hardware/GoPro/setup/" -p "FusionStudio_x64_111_2018-02-07.exe" "FusionStudio_Mac_Sierra_111_2018-02-07.dmg" "" || return # https://shop.gopro.com/softwareandapp/gopro-fusion-studio-app/fusion-studio.html

	echo "Updating icons..."
	mergeDir "$pp/GoPro" "$pp/Travel/Other" || return
	mergeDir "$up/GoPro Fusion Studio 1.1" "$pp/Travel/Other/GoPro" || return
	mergeDir "$up/GoPro VR Player 3.0" "$pp/Travel/Other/GoPro" || return
	$rm "$pd/GoPro Quik.lnk" || return
	$rm "$ud/GoPro Fusion Studio 1.1.lnk"	 || return
	$rm "$ud/GoPro VR Player 3.0.lnk"	 || return
}

HarmonyRemoteInstall()
{
	header "Harmony Remote"
	run "Logitech/Harmony Remote/LogitechHarmonyRemote7.7.0-WIN-x86.exe" || return # http://www.logitech.com/en-us/440/6441?section=downloads&bit=&osid=14

	echo "Updating icons..."
	mergeDir "$pp/Logitech" "$ao" || return
	$rm "$pd/Logitech Harmony Remote Software 7.lnk" || return
}

hp9020Install()
{
	header "HP 9020 Printer"

	# https://support.hp.com/us-en/drivers/selfservice/hp-officejet-pro-9020-all-in-one-printer-series/23918456
	run "hardware/Hewlett Packard/OfficeJet Pro 9020/Basic Driver - OJP9020_Basicx64_49.6.4502.exe" || return

	echo "Updating icons..."
	mergeDir "$pp/HP" "$oo" || return
	$rm "$pd/HP OfficeJet Pro 9020 series-HP Scan.lnk" || return
	$rm "$pd/HP OfficeJet Pro 9020 series.lnk" || return
	$mv "$pd/HP Print Scan Doctor Downloader - HP OfficeJet Pro 9020 series.lnk" "$oo/HP/HP OfficeJet Pro 9020 series" || return
	$mv "$pd/Shop for Supplies - HP OfficeJet Pro 9020 series.lnk" "$oo/HP/HP OfficeJet Pro 9020 series" || return
}

IntelDriverUpdateInstall()
{
	header "Intel Driver Update "

	# https://downloadcenter.intel.com/download/28425/Intel-Driver-Support-Assistant
	run "hardware/Intel/driver/assistant/Intel-Driver-and-Support-Assistant-Installer.exe" --elevate || return

	IntelFinal || return
}

IntelDriversInstall()
{
	header "Intel Drivers "
	run "hardware/Intel/driver/WiFi/WiFi_21.80.2_Driver64_Win10/Netwtw08.INF" || return # https://downloadcenter.intel.com/download/29124/Intel-PROSet-Wireless-Software-and-Drivers-for-IT-Admins
	run "hardware/Intel/driver/Bluetooth/BT_21.80.0_64_Win10/Intel Bluetooth.msi" || return # https://downloadcenter.intel.com/download/29126/
	run "hardware/Intel/driver/Serial IO/SerialIO_30.100.1915.1_PV_CNL_19H1/SetupSerialIO.exe" -s || return # rosie
	i IntelStorageManagement IntelThunderboltControlCenter IntelFinal || return
}

IntelExtremeTuningInstall()
{
	header "Intel Extreme Tuning"

	# https://downloadcenter.intel.com/download/24075/Intel-Extreme-Tuning-Utility-Intel-XTU
	run "hardware/Intel/Exteme Tuning Utility/XTUSetup Software.exe" --elevate || return

	if IsPlatform win; then
		mergeDir "$pp/Intel" "$oo" || return
		$rm "$pd/Intel(R) Extreme Tuning Utility.lnk" || return
	fi

	return 0
}

IntelProcessorIdentificationUtilityInstall() { run "hardware/Intel/other/Intel(R) Processor Identification Utility.exe"; IntelFinal; }
IntelStorageManagementInstall() { storeInstall "Intel Storage Management" "9MZNG5HZWZ1T"; }
IntelThunderboltControlCenterInstall() { storeInstall "Thunderbolt Control Center" "9N6F0JV38PH1"; }

IntelFinal()
{
	makeDir "$oo/Intel" || return

	MergeDir --suppress "$pp/Intel" "$oo" || return

	mv "$pp/Intel Driver "*" Support Assistant.lnk" "$oo/Intel/Intel Driver Update.lnk" >& /dev/null
	$mv "$pd/Intel SSD Toolbox.lnk" "$oo/Intel" || return
	$mv "$ud/Intel(R) Processor Identification Utility.lnk" "$oo/Intel" || return

	registry 32 delete "run/Intel Driver \& Support Assistant" || return # C:\Program Files (x86)\Intel Driver and Support Assistant\DsaTray.exe
}

IntuosProInstall()
{
	header "Intuos Pro"
	run "other/Intuos/Pro/setup/WacomTablet_6.3." -p "16-2.exe" "15-3.dmg" "" || return # http://us.wacom.com/en/support/drivers/

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		mergeDir "$pp/Wacom Tablet" "$pp/Media/Other" || return
	fi
}

LgMonitorInstall()
{
	header "LG Monitor"

	run "hardware/LG/Gaming Monitor 34UC89G/OSC2_Setup_2-86.exe" || return

	mergeDir "$pp/OnScreen Control" "$oo" || return
	$rm "$pd/OnScreen Control.lnk" || return
}

LogitechGhubInstall()
{
	header "Logitech G HUB" # https://support.logi.com/hc/en-us/articles/360024696774--Downloads-PRO-Wireless-Gaming-Mouse
	run "hardware/Logitech/G HUB/lghub_installer.exe" || return	
	LogitechFinal || return
}

LogitechOptionsInstall()
{
	header "Logitech Options" # http://support.logitech.com/en_us/software/options
	run "hardware/Logitech/options/" -p "Options_8.54.161.exe" "LogiMgr Installer 8.54.147.app" "" --copy-local --elevate || return; pause
	LogitechFinal || return
	LogitechOptions $noPrompt profile restore default || return
}

LogitechFinal()
{
	! IsPlatform win && return
	$mv "$pp/Logitech/Logitech Options.lnk" "$pp/Operating System" || return
	$mv "$pd/Logitech G HUB.lnk" "$pp/Operating System" || return
	$rmd "$pp/Logi" "$pp/Logitech" || return
	registry delete "run/LogiOptions" || return # C:\Program Files\Logitech\LogiOptions\LogiOptions.exe /noui
	registry delete "run/Logitech Download Assistant" || return # C:\Windows\system32\rundll32.exe C:\Windows\System32\LogiLDA.dll,LogiFetch
}

MsiMotherboardInstall()
{
	header "MSI Motherboard"
	run "hardware/MSI/MSI PRESTIGE 15 A10SC-011/Creator Center/v1.1.1911.0501_1.1.1911.0501/Setup.exe" || return
	MsiMotherboardFinal || return
}

MsiMotherboardFinal()
{
	! IsPlatform win && return
	$mv "$up/Nahimic Companion.lnk" "$up/Applications" || return
	mergeDir "$pp/MSI" "$oo" || return
}

nVidiaGeForceExperience()
{
	header "nVidia GeForce Experience"

	# https://www.nvidia.com/en-us/geforce/geforce-experience/
	run "hardware/nVidia/experience/GeForce_Experience_v3.20.4.14.exe" --elevate || return

	nVidiaFinal || return
}

nVidiaDriver()
{
	header "nVidia Driver"

	# https://www.nvidia.com/en-us/drivers/results/159423/
	run "hardware/nVidia/driver/445.87/setup.exe" --elevate

	nVidiaFinal || return
}

nVidiaFinal()
{
	mergeDir --rename "$pp/NVIDIA Corporation" "$oo/NVIDIA" || return
	$rm "$pd/GeForce Experience.lnk" || return
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shellex/ContextMenuHandlers/NvCplDesktopContext/" || return
	return 0
}

PowerPanel()
{
	header "PowerPanel "

	# https://www.cyberpower.com/hk/en/software
	run "hardware/CyberPower/PowerPanel/setup/PPP_Windows_v2.2.1.exe" || return

	mergeDir "$pp/CyberPower PowerPanel Personal" "$oo" || return
	$rm "$pp/Startup/PowerPanel Personal.exe.lnk" || return # "C:\Program Files (x86)\CyberPower PowerPanel Personal\PowerPanel Personal.exe"
	$rm "$pp/Startup/ppuser.exe.lnk" || return # "C:\Program Files (x86)\CyberPower PowerPanel Personal\bin\ppuser.exe"
}

QnapExternalRaidManagerInstall()
{
	header "QNAP External RAID Manager"

	# https://www.qnap.com/en/utilities/essentials
	run "hardware/QNAP/Expansion Bay/setup/" -p "QNAPExternalRAIDManagerWindows-1.3.5.0309.exe" "QNAPExternalRAIDManagerMac-1.2.4.1202.dmg" || return

	if IsPlatform win; then
		mergeDir "$pp/QNAP" "$oo" || return
		$rm "$pd/QNAP External RAID Manager.lnk" || return
	fi

	return 0
}

TemperatureLoggerInstall()
{
	header "Elitech Temperature Logger"

	# https://www.elitechustore.com/pages/download
	run "hardware/Elitech/Temlog20/ElitechLogWin V4.5.2.exe" || return

	mergeDir --rename "$pp/ElitechLogWin" "$ao/Elitech Log" || return
	$rm "$pd/ElitechLogWin.lnk" || return
}

#################################################
# Homebridge
#################################################

homebridge()
{
	header "Homebridge"
	nodeCheck || return

	if ! InPath homebridge; then
		sudo npm install -g --unsafe-perm homebridge homebridge-config-ui-x || return
	fi

	RunPlatform homebridge || return
}

homebridgePi()
{
	if ! [[ -f /etc/systemd/system/homebridge.service ]]; then
		sudo hb-service install --user homebridge || return
	fi

	# Enable running homebridge from the command line for the current user
	makeLink --symbolic "/var/lib/homebridge" "$HOME/.homebridge" || return

	# Configuring Wake On Lan plugin
	InPath setcap && { sudo setcap cap_net_raw=pe /usr/bin/node || return; }

	if ! grep -q "/usr/local/data/bin" "/etc/default/homebridge"; then
		printf "\n"'PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/data/bin"'"\n" | sudo tee -a "/etc/default/homebridge" || return
	fi

	if ! credential exists homebridge default; then
		password linux -u homebridge --save || return
	fi

	# Enable passwordless ssh for the homebridge account - for scripts using ssh
	if [[ ! -d ~homebridge/.ssh ]]; then

		sudo mkdir ~homebridge/.ssh || return

		sudoc cp ~/.ssh/config ~/.ssh/known_hosts ~homebridge/.ssh || return
		sudo chown homebridge ~homebridge/.ssh/config ~homebridge/.ssh/known_hosts || return

		sudo cp ~/.ssh/id_ed25519 ~/.ssh/id_rsa ~homebridge/.ssh || return
		sudo chown homebridge ~homebridge/.ssh/known_hosts ~homebridge/.ssh/id_ed25519 ~homebridge/.ssh/id_rsa || return

		echo "Removing passphrase from private key files..."
		local p="$(credential get ssh default --fallback)"; [[ ! $p ]] && read -s -p "Enter your ssh passphrase: " password; echo
		sudo ssh-keygen -p -P "$p" -N '' -f ~homebridge/.ssh/id_ed25519 || return
		sudo ssh-keygen -p -P "$p" -N '' -f ~homebridge/.ssh/id_rsa || return

		echo "Testing passwordless ssh connection as homebridge..."
		su - homebridge <<-EOF
			$(credential get homebridge --fallback)
			ssh $USER@$HOSTNAME ls
		EOF
		[[ $? != 0 ]] && return 1

	fi

	return 0
}

homebridgeWiggin()
{
	header "Homebridge Wiggin"
	sudo npm install -g homebridge-chamberlain homebridge-neato homebridge-script2 homebridge-vera homebridge-webos-tv homebridge-wol homebridge-zp || return
	homebridgeRing || return	
}

homebridgeRing()
{
	sudo npm install -g --unsafe-perm homebridge-ring || return
	homebridgeFfmpeg || return	
}

homebridgeFfmpeg()
{
	header "Homebridge ffmpeg"

	# https://github.com/homebridge/ffmpeg-for-homebridge
	if IsPlatform pi; then
		sudo curl -Lf# "https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-raspbian-armv6l.tar.gz" | sudo tar xzf - -C / --no-same-owner
	elif IsPlatformAll mac,x86; then
		sudo curl -Lf# "https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-darwin-x86_64.tar.gz" | sudo tar xzfm - -C / --no-same-owner
	elif IsPlatform debian; then
		sudo curl -Lf# "https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-debian-$(uname -m).tar.gz" | sudo tar xzf - -C / --no-same-owner
	fi
}

#################################################
# Mac Setup
#################################################

MacSetup()
{
	header "Mac Setup"
	i MacConfigure MacFonts MacDockOrder MacDockCleanup MacAppStore MacAppCleanup || return
}

MacConfigure()
{
	echo "Configuring dock..."

	defaults write com.apple.dock orientation -string left || return 	# bottom|left|right
	defaults write com.apple.dock mineffect -string scale || return 		# genie|scale
	defaults write com.apple.dock tilesize -integer 50 || return
	defaults write com.apple.dock magnification -bool FALSE || return		# largesize is magnification size
	defaults write com.apple.dock minimize-to-application -bool TRUE || return
	defaults write com.apple.dock launchanim -bool FALSE || return			# Animate opening applications
	defaults write com.apple.dock autohide -bool FALSE || return
	defaults write com.apple.dock show-process-indicators -bool TRUE || return
	defaults write com.apple.dock show-recents -bool TRUE || return
	defaults write com.apple.dock NSTableViewDefaultSizeMode -integer 3 || return # General, Sidebar icon size=Large
	RestartDock || return

	defaults write com.apple.finder QuitMenuItem -bool true || return
	defaults write com.apple.finder WarnOnEmptyTrash -bool false || return
	RestartFinder || return
}

MacDockOrder()
{
	dockutil --move "iTerm" --after "Finder" || return
	dockutil --move "Notion" --after "iTerm" || return
	dockutil --move "Firefox" --after "Safari" || return
	dockutil --move "Messages" --after "Firefox" || return
}

MacDockCleanup()
{
	local args=() apps=( Launchpad Mail FaceTime Maps Photos Contacts Calendar Reminders Notes Music Podcasts TV News "App Store" "System Preferences" )

	for app in "${apps[@]}"; do
		args+=( --remove "$app" )
	done

	dockutil "${args[@]}" || return
}

MacFonts()
{
	findFile "fonts/MesloLGS NF/$PLATFORM" || return
	cp "$file/"* "$HOME/Library/Fonts" || return
}

MacAppCleanup()
{
	MacUninstall "Keynote" || return
	MacUninstall "iMovie" || return
	MacUninstall "Pages" || return
	MacUninstall "GarageBand" || return
	MacUninstall "Numbers" || return
}

MacUninstall()
{
	local app="/Applications/$1.app"

	[[ ! -d "$app" ]] && return
	echo "Removing $1..."
	sudoc rm -fr "$app"
}

MacAppStore()
{
	header "mas" # https://github.com/mas-cli/mas/releases
	pkg mas || return
}

MacPortsInstall()
{
	header "MacPorts" # https://www.macports.org/install.php
	run "platform/mac/Mac Ports/MacPorts-2.6.4_1-11-BigSur.pkg" || return
}

#################################################
# IT Management
#################################################

ItManagementAll() { i SaltMinion Hashi HashiUp; }

HashiInstall()
{ 
	inst consulK8s || return
	hashi install cli --encrypt $verbose $force "${otherArgs[@]}" || return
}

HashiUpInstall()
{
	header "hashi-up"
	installExecutable "shareware/hashi-up" || return # https://github.com/jsiebens/hashi-up - requires Go compile
}

ConsulInstall()
{
	header "consul" # https://www.consul.io/downloads.html
	installExecutable "other/HashiCorp/consul" || return
}

ConsulK8sInstall()
{
	header "consul-k8s" # https://releases.hashicorp.com/consul-k8s/
	installExecutable "other/HashiCorp/consul-k8s" || return
}

NomadInstall()
{
	header "nomad" # https://www.nomadproject.io/downloads
	installExecutable "other/HashiCorp/nomad" || return
}

VagrantInstall()
{
	header "vagrant"
	local v="2.2.16" # https://www.vagrantup.com/downloads
	run "other/HashiCorp/vagrant/vagrant_${v}_x86_64." -p "msi" "dmg" "deb" || return
	makeDir "$pdata/app/vagrant" || return
}

VaultInstall()
{
	header "vault" # https://www.vaultproject.io/downloads
	installExecutable "other/HashiCorp/vault" || return
}

SaltMinionInstall()
{
	IsPlatform win && return

	header "Salt Minion"
	pkg salt-minion || return
	sudo sed -i 's/^#master: salt$/master: salt/' /etc/salt/minion || return
	service restart salt-minion || return
}

#################################################
# Mail
#################################################

mailCore() { i CanaryMail spark thunderbird; }

CanaryMailInstall() { storeInstall "Canary Mail" 1236045954; }
SparkInstall() { storeInstall Spark 1176895641; }

ThunderbirdInstall()
{
	header "Thunderbird";	local v="78.11.0"; # https://www.thunderbird.net/en-US/thunderbird/all/#E
	run "other/Mozilla/Thunderbird/" -p "Thunderbird Setup $v.msi" "Thunderbird $v.dmg" "thunderbird-$v.tar.tar" || return
	thunderbird $noPrompt profile restore default || return
	ThunderbirdFinal || return
}

ThunderbirdFinal()
{
	if IsPlatform win; then
		$ren "$pp/Mozilla Thunderbird.lnk" "$pp/Applications/Thunderbird.lnk" || return
		$rm "$pd/Mozilla Thunderbird.lnk" || return
	fi
}

#################################################
# Music
#################################################

musicCore() { i deezer iTunes MusicBee plex tidal sonos WinAmp; }

deezerInstall()
{
	header "Deezer"
	IsPlatform win && storeInstall "9NBLGGH6J7VV" || run "other/Deezer/DeezerDesktop_4.18.60.dmg"
	return
}

iTunesInstall()
{
	header "iTunes"

	run "other/Apple/iTunes/setup/iTunes64Setup.exe" || return # http://itunes.com

	echo "Updating icons..."
	$rm "$pd/iTunes.lnk" || return
	mergeDir "$pp/iTunes" "$ao" || return

	quickTimePost || return

	echot "\
- iTunes Store, Sign In
- Store, Authorize Computer...
- Notes: Ctrl-t visualizer, ctrl-f full screen"
}

MusicBeeInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	header "MusicBee"
	run "shareware/MusicBee/setup/MusicBeeSetup_3_0_Update1.exe" || return # http://getmusicbee.com/download.html

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		mergeDir "$up/MusicBee" "$pp/Media/Other" || return
		$rm "$ud/MusicBee.lnk" || return
	fi

	echot "\
- Cancel"
}

plex()
{
	header "PLEX" # https://www.plex.tv/media-server-downloads/
	run "other/PLEX/" -p "Plex-1.27.2.1599-7689068b-x86_64.exe" "Plex-1.11.0.1215-1d8c460c-x86_64.zip" || return
	run "other/PLEX/" -p "PlexMediaServer-1.21.3.4021-5a0a3e4b2-x86.exe" "PlexMediaServer-1.18.8.2468-5d395aa9d-x86_64.zip" "plexmediaserver_1.18.8.2468-5d395aa9d_amd64.deb" || return
	PlexFinal || return
}

PlexFinal() { ! IsPlatform win && return; mergeDir "$pp/Plex" "$pp/Media/Other"; }

sonos()
{
	header "Sonos Music System"

	# https://support.sonos.com/s/downloads?language=en_US
	run "hardware/Sonos/SonosDesktopController121." -p "exe" "dmg" "" --elevate || return

	case "$PLATFORM" in
		mac) macAppConfigure Sonos;;
	esac

	SonosFinal || return
}

SonosFinal()
{
	case "$PLATFORM" in
		win) $rm "$pd/Sonos.lnk" || return; mergeDir "$pp/Sonos" "$pp/Media/Other" || return;;
	esac
}

TidalInstall()
{
	header "TIDAL"
	run "TIDAL/TIDALSetup." -p "exe" "dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		mergeDir "$up/TIDAL" "$up/Media/Other" || return
		$rm "$ud/TIDAL.lnk" || return
	fi
}

WinAmpInstall()
{
	header "Winamp"

	run "Nullsoft/WinAmp/setup/winamp565_pro_all.exe" || return

	echo "Updating icons..."
	mergeDir "$pp/Winamp" "$ao" || return
	mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" || return
	$rm "$pd/Winamp.lnk" || return

	echot "Note
- WiFi Sync - disable addition network interfaces (i.e. VMware networks), run WinAmp as Administrator"
}

wmp() { WindowsMediaPlayerInstall; }
WindowsMediaPlayerInstall()
{
	header "Windows Media Player"

 	start "$P32\Windows Media Player\wmplayer.exe" || return

	echot "\
- Recommended settings
- Organize, Manage Libraries, Music, Add..., This PC, portable4"
}

#
# Node.js
#

nodeCheck() { InPath node npm && return; i --no-header nodejs || return; }

NodeJsInstall()
{
	header "Node.js"
	local v="14" # LTS

	# https://nodejs.org/en/download/
	if IsPlatform debian && ! InPath node; then
		curl -sL https://deb.nodesource.com/setup_$v.x | sudo -E bash || return
		pkg nodejs || return
	elif IsPlatform mac && ! InPath node; then
		pkg nodejs || retun
	fi

	[[ ! -f ~/.npmrc ]] && { touch ~/.npmrc || return; }

	echo "Installing core node packages..."
	! InPath nodemon && { $sudo npm install -g nodemon || return; }
	! InPath n && { $sudo npm install -g n || return; }
	sudo n latest || return
	sudo n lts || return

	echo "Updating npm..."
	sudo npm install -g npm@latest || return
	sudo npm update -g || return

	echo "Rebuilding packages..."
	cd "$(sudo npm -g prefix)/lib/node_modules" || return
	sudo npm rebuild --unsafe-perm || return

	return 0
}

#################################################
# Network
#################################################

networkAll()
{
	i CloudInit domotz domotzAgent fiddler GlassWire JumpCloud JumpDesktop mDns MozillaVpn \
		Ninite NordVpn Proxifier TigerVnc Tribler UnifiController Wireshark
}

BindInstall()
{
	header "ISC BIND9 DNS Server"
	! verifyStaticIpAddress && { EchoErr "DHCP Server requires a static IP address"; return 1; }

	# https://www.isc.org/download/
	if IsPlatform pi; then
		pkg bind9 bind9utils bind9-doc dnsutils bind9-host || return
	else
		pkg bind9 bind9-utils bind9-doc bind9-dnsutils bind9-host || return
	fi

	sudo update-rc.d bind9 defaults || return
	DebianSudoPasswordless || return # for remote updates
}

CloudInitInstall() { cloudInitLimitUser; }

# limit the users sudo rights if they are too broad (cloud-init adds NOPASSWD:ALL)
cloudInitLimitUser()
{
	local file="/etc/sudoers.d/90-cloud-init-users"
	local line="$USER ALL=(ALL) NOPASSWD:ALL"

	! sudoc ls "$file" >& /dev/null && return 						# no cloud-init sudo file
	! sudoc grep -q "$line" "$file" && return		# user is already limited

	# add the user to the sudo group as a fail-safe
	sudoc usermod -aG sudo $USER || return

	# change the users password if not know since it is set randomly in cloud-init
	hilight "Enter $USER password and change if not known..."		
	[[ "$(su -c whoami $USER)" != "$USER" ]] && sudo passwd $USER

	# remove NOPASSWD:ALL from the user in the sudo cloud-init settings	
	sudoc sed -i "s/^$line/$USER ALL=(ALL) ALL/" "$file" || return
}

DomotzInstall()
{
	header "Domotz"

	# https://portal.domotz.com/portal/web_app
	local v="1.1.2" # http://www.techsmith.com/download/licenses/snagitupgrade.asp
	run "Domotz/Domotz Pro Desktop App " -p "Setup $v" "-$v.dmg" "" || return

	if IsPlatform win; then
		$mv "$pp/Domotz Pro Desktop App.lnk" "$pp/Operating System" || return
		$rm "$pd/Domotz Pro Desktop App.lnk" || return
	fi

	return 0
}

DomotzAgentInstall()
{
	header "Domotz"

	# https://portal.domotz.com/portal/domotz_software
	if IsPlatform pi; then
		local file="domotz-raspberry-armhf-1.0-2.5.9-3.3.2-b001-0054.deb"
		wget "https://portal.domotz.com/download/agent_packages/$file" -P "/tmp" || return
		sudo dpkg -i "/tmp/$file" || return
	fi

	echo "The Domotz Agent is available at https://$HOSTNAME:3000"

	# domotz is not a native service, use systemctl
	if ! askp "Autostart Domotz Agent"; then
		sudo systemctl stop domotz.service || return
		sudo systemctl disable domotz.service || return
	fi

	return 0
}

FiddlerInstall()
{
	header "Fiddler"

	# http://www.telerik.com/fiddler
	run "other/Telerik/Fiddler/" -p "Fiddler Everywhere 0.10.2.exe" "fiddler-mac.zip" "fiddler-linux.zip" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		$mv "$up/Fiddler Everywhere.lnk" "$up/Development" || return
		$rm "$ud/Fiddler Everywhere.lnk" || return
	fi
}

GlassWireInstall()
{
	header "GlassWire"
	run "network/GlassWire/GlassWireSetup.exe" --elevate || return # https://www.glasswire.com/download/

	registry delete "urun/GlassWire" # "C:\Program Files (x86)\GlassWire\glasswire.exe" -hide
	mergeDir "$pp/GlassWire" "$oo" || return
	$rm "$pd/GlassWire.lnk" || return

	echot "\
- Show Mini Viewer
- Activate GlassWire"
}

JumpCloudInstall()
{
	header "JumpCloud" # https://console.jumpcloud.com/#/devices/new

	local key="d55d2d17f6fdc877905cf7dd798e7c910948eff3"

	if IsPlatform mac,win; then
		echo "connect key=<paste> ($key)"; clipw "$key"
		run "network/JumpCloud/setup/" -p "JumpCloudInstaller.exe" "jumpcloud-agent.pkg" "" || return
	elif IsPlatform ubuntu; then
		curl --tlsv1.2 --silent --show-error --header "x-connect-key: $key" https://kickstart.jumpcloud.com/Kickstart | sudo bash
	fi

	IsPlatform win && { $mv "$pp/JumpCloud Agent App.lnk" "$pp/Operating System" || return; }

	return 0
}

KeaInstall()
{
	header "ISC Kea DHCP Server"
	! verifyStaticIpAddress && { EchoErr "DHCP Server requires a static IP address"; return 1; }

	pkg kea-dhcp4-server kea-admin kea-dhcp-ddns-server kea-dev kea-doc || return # kea-ctrl-agent kea-dhcp6-server

	makeDirSudo "/var/run/kea" || return
	sudo update-rc.d kea-dhcp4-server defaults || return
	service auto kea-dhcp4-server || return
	DebianSudoPasswordless || return # for remote updates
}

mDnsInstall()
{
	header "mDNS"
	pkg avahi-daemon avahi-utils || return
}

MozillaVpnInstall()
{
	header "Mozilla VPN"
	run "other/Mozilla/vpn/MozillaVPN.msi"  || return # https://vpn.mozilla.org/vpn/download
}

NiniteInstall()
{
	header "Ninite"

	# https://ninite.com/agent.exe
	run "network/Ninite/Ninite Agent Installer.exe" --elevate -- /silent || return
}

NordVpnInstall()
{
	header "NordVPN"

	# https://nordvpn.com/download/
	run "network/NordVPN/" -p "NordVPNSetup.exe" "mac" || return

	if [[ "$PLATFORM" == "win" ]]; then
		mergeDir "$pp/NordSec" "$oo" || return
		registry 32 delete "urun/NordVPN" || return # C:\Program Files (x86)\NordVPN\NordVPN.exe
	fi
}

ProxifierInstall()
{
	header "Proxifier"
	run "network/Proxifier/setup/" -p "ProxifierSetup.exe" "Proxifier.app.zip" "" || return # http://www.proxifier.com/download.htm https://intelpedia.intel.com/Proxifier


	findFile "Proxifier/profiles/Intel Custom.ppx" || return
	local clip="$(utw "$file")"; clipw "$clip"
	echot "\
- File, Import, <paste> ($clip)"
}

TriblerInstall()
{
	header "Tribler"

	# https://www.tribler.org/
	run "shareware/tribler/Tribler_7.2.2_x64.exe" || return

	mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
	mergeDir "$up/Tribler" "$oo" || return
	$rm "$pd/VLC media player.lnk" || return
	$rm "$ud/Tribler.lnk" || return

		echot "\
- settings
	- Save files to=C:\Users\jjbutare\Downloads
	- uncheck Family filter / Download anonymously / Encrypted anonymous seeding"
}

UnifiControllerInstall()
{
	header "UniFi Controller"

	# check for a package installation
	if [[ -f "/etc/apt/sources.list.d/100-ubnt-unifi.list" ]]; then
		ScriptErr "use 'sudo apt update' to update the UniFi Controller"
		return 1
	fi

	# https://www.ui.com/download/unifi	
	run "hardware/Ubiquiti Networks/UniFi/controller/" -p "UniFi-installer.exe" "UniFi.pkg" "unifi_sysvinit_all.deb" || return

	if IsPlatform win; then
		mergeDir "$up/Ubiquiti UniFi" "$oo" || return
		$rm "$ud/UnicatFi.lnk" || return
		MakeLink --merge --hide "$udata/Unifi Controller" "$WIN_HOME/Ubiquiti UniFi" || return
	fi

	unifiControllerFinal || return
}

UnifiControllerPackageInstall()
{
	header "UniFi Controller"

	# check for a manual installation
	if [[ -d "/usr/lib/unifi" ]]; then
		ScriptErr "use 'inst UnifiController' to update the UniFi Controller"
		return 1
	fi

	# add UniFi sources
	[[ ! $channel ]] && local channel="testing" # oldstable|stable|testing
	if [[ ! -f "/etc/apt/sources.list.d/100-ubnt-unifi.list" ]]; then
		echo "deb https://www.ui.com/downloads/unifi/debian $channel ubiquiti" | sudo tee "/etc/apt/sources.list.d/100-ubnt-unifi.list" || return
		sudo wget -O "/etc/apt/trusted.gpg.d/unifi-repo.gpg" "https://dl.ui.com/unifi/unifi-repo.gpg" || return
		sudo apt-get update || return
	fi

	# install packages
	IsPlatform pi && { pkg haveged || return; } # fix Raspberry Pi slow startup (low hardware entropy)
	pkg ca-certificates apt-transport-https || return
	pkg openjdk-8-jre-headless ca-certificates-java java-common jsvc libcommons-daemon-java || return
	pkg mongodb || return
	pkg unifi || return
	unifiControllerFinal || return
}

unifiControllerFinal()
{
	echo "The Unifi Controller is available at https://$HOSTNAME:8443"

	if ! askp "Autostart UniFi"; then
		service manual unifi || return
		service manual mongodb || return
	fi

	return 0
}

WiresharkInstall()
{
	header "Wireshark"

	# https://www.wireshark.org/#download
	run "network/Wireshark/" "Wireshark-win64-3.2.4.exe" "Wireshark 3.2.4 Intel 64.dmg" "wireshark-3.2.4.tar.xz" || return
}

#################################################
# Java
#################################################

JavaAll() { i eclipse jdk jre openJdk tomcat; }

javaCore()
{
	header "JAVA Development Core"
	local java="$pp/Development/Java/Other"
	makeDir "$java" || return
	i eclipse || return
}

eclipseInstall()
{
	header "Eclipse" # https://www.eclipse.org/downloads/ https://www.eclipse.org/downloads/packages/
	run "Shareware/Eclipse/setup/" -p "eclipse-inst-jre-win64.exe" "" "" || return
	
	if IsPlatform win; then
		mergeDir "$up/Eclipse" "$up/Development/Other" || return
		$rm "$ud/Eclipse IDE for Enterprise Java Developers - "*".lnk"
	fi

	return 0
}

jdkInstall()
{
	header "Java Development Kit Environment" # https://www.oracle.com/java/technologies/javase-downloads.html
	run "Oracle/Java/jdk/" -p "jdk-15.0.2_windows-x64_bin.exe" "jdk-15.0.2_osx-x64_bin.dmg" "jdk-15.0.2_linux-x64_bin.deb" || return
	JavaFinal || return
}

jreInstall()
{
	header "Java Runtime Environment "
	RunPlatform jre || return
	JavaFinal || return
}

jreDebian()
{
	IsPlatform win && return
	pkg openjdk-11-jre-headless || return
}

jreWin()
{
	# http://www.oracle.com/technetwork/java/javase/downloads/index.html
	# Test: http://www.java.com/en/download/installed.jsp http://java.com/en/download/help/testvm.xml
	run "Oracle/Java/jre/*-x64.exe" || return
}

JavaFinal()
{
	! IsPlatform win && return
	mergeDir "$pp/Java" "$oo" || return
	registry 32 delete "run/SunJavaUpdateSched" || return
	registry 64 delete "run/SunJavaUpdateSched" || return
}

openJdkInstall()
{
	header "Open Java Development Kit Environment"
	package default-jdk
}

tomcat10Install() { version=10.0.5 tomcatInstall; }
tomcat9Install() { version=9.0.43 tomcatInstall; }
tomcat7Install() { version=7.0.108 tomcatInstall; }

tomcatInstall()
{
	local dir="/opt/tomcat" user="tomcat"

	header "Tomcat" # https://tomcat.apache.org/
	i --no-header openJdk || return

	[[ ! $version ]] && local version="10.0.5"
	run "shareware/Tomcat/image/apache-tomcat-$version.zip" --dest "$dir" || return

	# user
	if ! getent passwd "$user" >& /dev/null; then
	  echo "Creating user $user..."
	  sudo useradd --system --home-dir "$dir" --shell "/bin/false" "$user" || exit
	fi

	# ownership and permissions
	sudo chown "$user:" -R "$dir" || return
	sudo chmod +x "$dir/bin/"* || return

	# service
	if IsSystemd; then
		local jdk="$(update-java-alternatives --list | tr -s " " | cut -d" " -f3)"
		local file="/etc/systemd/system/tomcat.service"
		
		if [[ ! -f "$file" || $force ]]; then
			cat <<-EOF | sudo tee "$file" > /dev/null || return
				[Unit]
				Description=Apache Tomcat
				After=network.target

				[Service]
				Type=forking

				User=tomcat
				Group=tomcat

				Environment=JAVA_HOME=$jdk
				Environment=CATALINA_PID=/opt/tomcat/tomcat.pid
				Environment=CATALINA_HOME=/opt/tomcat
				Environment=CATALINA_BASE=/opt/tomcat
				Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

				ExecStart=/opt/tomcat/bin/startup.sh
				ExecStop=/opt/tomcat/bin/shutdown.sh

				ExecReload=/bin/kill \$MAINPID
				RemainAfterExit=yes

				[Install]
				WantedBy=multi-user.target
			EOF
		fi

		sudo systemctl daemon-reload || return
		service start tomcat || return
	fi

	return 0
}

#################################################
# Microsoft
#################################################

MicrosoftAll() { inst IIS office PowerShell PowerToys Skype SqlServer SqlServerManagementStudio SystemsInternal WindowsAdministrationTools WindowsAssessmentAndDeploymentKit WindowsDownload WindowsStore WindowsSubsystemForLinux; }

IisInstall()
{
	# - Add/Remove Windows Components requires inf files
	# - Remote Desktop Web Connection reference http://www.microsoft.com/windowsxp/using/networking/expert/northrup_03may16.mspx
	header "IIS"
  echo "- Internet Information Services, check all"
  echo "- (optional) Internet Information Services Hostable Web Core"

	product optional --wait || return

	if [[ $client ]]; then
	  echo "Updating firewall..."
	  $firewall rule enable "World Wide Web Services HTTP Traffic In"
	fi

	echo "Updating services..."
	service exist FTPSVC && { service manual FTPSVC || return; }

	if [[ $client ]] && ask "Set IIS services to run manually"; then
	  service exist IISADMIN && { service manual IISADMIN || return; }
	  service exist w3svc && { service manual w3svc || return; }
	  service exist AppHostSvc && { service manual AppHostSvc || return; }
	fi

	makeDir "$pp/Development/Other/IIS" || return
	mergeDir "$pp/IIS" "$pp/Development/Other" || return
	$makeShortcut "$WINDIR/system32/inetsrv/iis.msc" "$pp/Development/Other/IIS/IIS Client Manager" || return

	# [[ $client ]] && ask "Install remote manager" && { IisRemoteManager || return; }
	# ask "Configure WebDAV" --default n && { IisWebDav || return; }
	# ask "Configure FTP" --default n && { IisFtp || return; }
	# ask "Configure debugging" --default n && { IisDebugging || return; }
	# ask "Configure compression" --default n && { IisCompression || return; }
	# ask "Configure SSL" --default n && { IisSsl || return; }

	echo "Restarting IIS..."
	iisreset
}

IisExpressFinal()
{
	makeLink --merge --hide "$winAppData/IISExpress" "$winDoc/IISExpress"
	[[ -d "$P32/IIS Express" ]] && { icacls.exe "$(utw "$P32/IIS Express")" /grant "$USER:(OI)(CI)F" /T; }
	return 0
}

OfficeInstall()
{
	header "Office 365"

	# https://stores.office.com/myaccount/advancedinstalls.aspx
	run "other/Microsoft/Office/" -p \
		"Setup.X64.en-US_O365HomePremRetail_08b88893-8375-4065-aeb5-26309617dc27_TX_PR_.exe" \
		"Microsoft_Office_16.47.21031401_Installer.pkg" || return

	OfficeFinal || return

	office $noPrompt profile restore default || return
	askp "Restore normal templates" && { word normal restore || return; }
	askp "Configure Word" && { word configure || return; }

	return 0
}

officeIcons()
{
	! IsPlatform win && return

	p="$ao/Office"
	makeDir "$p" || return

	makeLink --merge --hide "$winAppData/office/templates" "$winDoc/Custom Office Templates" || return
	mergeDir --rename "$pp/Microsoft Office Tools" "$p/tools" || return
	$mv "$pp/"Access.lnk "$p" || return
	$mv "$pp/"Excel.lnk "$p" || return
	$mv "$pp/"OneNote.lnk "$p" || return
	$mv "$pp/"Outlook.lnk "$p" || return
	$mv "$pp/"PowerPoint.lnk "$p" || return
	$mv "$pp/"Publisher.lnk "$p" || return
	$mv "$pp/"Word.lnk "$p" || return
	$rm "$up/Startup/Send to OneNote.lnk" || return

	skypeFinal || return

	mergeDir --rename "$pp/Microsoft Office 2013" "$p" || return
	mergeDir --rename "$p/Office 2013 Tools" "$p/tools" || return
	for f in "$p/"*2013.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	for f in "$p/tools/"*2013*.lnk; do $ren "$f" "${f/ 2013/}" || return; done

	mergeDir --rename "$pp/Microsoft Office 2016 Tools" "$p/tools" || return
	$mv "$pp/"*2016.lnk "$p" || return
	for f in "$p/"*2016.lnk; do $ren "$f" "${f/ 2016/}" || return; done
	for f in "$p/tools/"*2016*.lnk; do $ren "$f" "${f/ 2016/}" || return; done

	registry delete "urun/Lync" # "c:\Program Files\Microsoft Office\root\office16\lync.exe" /fromrunkey
}

OfficeFinal()
{
	. office.sh || { EchoErr "inst: Office is not installed"; return 1; }

	makeDir "$OfficeTemplates" || return

	if IsPlatform mac; then
		sudoc rm -fr "$P/Microsoft OneDrive.app" "$P/Microsoft OneNote.app" "$P/Microsoft Outlook.app" || return

	elif IsPlatform win; then
		registry import "$setupFiles/ShellNew.reg" || return
		officeIcons || return

	fi

	return 0
}

PowerShellInstall()
{
	header "PowerShell"

	# https://aka.ms/pscore6
	run "other/Microsoft/PowerShell/" -p "PowerShell-7.0.2-win-x64.msi" "powershell-7.0.2-osx-x64.pkg" "powershell-7.0.2-linux-x64.tar.gz" || return
}

PowerToysInstall()
{
	header "PowerToys"

	# https://github.com/microsoft/PowerToys
	run "other/Microsoft/Windows/other/PowerToysSetup-0.16.1-x64.msi" || return

	if IsPlatform win; then
		$ren "$pp/PowerToys (Preview).lnk" "$pp/Operating System/Power Toys.lnk" || return
	fi

	return 0
}

SkypeInstall()
{
	header "Skype"

	# https://www.skype.com/en/get-skype/
	run "other/Microsoft/Skype/" -p "Skype-8.59.0.77.exe" "Skype-8.59.0.77.dmg" "skypeforlinux-64.deb" || return

	skypeFinal || return
}

skypeFinal()
{
	! IsPlatform win && return
	mergeDir "$pp/Skype" "$pp/Applications/Other" || return
	$rm "$pp/"Skype*.lnk || return
	$rm "$pd/Skype.lnk" || return
	registry delete "urun/Skype for Desktop" # C:\Program Files (x86)\Microsoft\Skype for Desktop\Skype.exe
}

SqlServerInstall()
{
	local base="other/Microsoft/SQL Server"
	local setup="en_sql_server_2017_enterprise_x64_dvd_11293666"; [[ $client ]] && setup="en_sql_server_2017_developer_x64_dvd_11296168"
	header "SQL Server "

	echot "\
Setup logs are in \"$P/Microsoft SQL Server/130/Setup Bootstrap/Log\"
- run <drive>\setup.exe
- Installation, New SQL installation
- Feature Selection, Select Database Engine Services, SQL Server Replication
- Server Configuration, check Grant Perform Volume Maintenance Task provilege
- Database Engine Configuration
  - Authentication Mode=Mixed Mode, Enter password=XXX, Confirm password=XXX
  - Add Current User"
 	run "$base/setup/$setup.iso" || return

	i sqlServerConfig sqlServerLogCleanup sqlServerFinal || return
}

SqlServerManagementStudioInstall()
{
	local base="other/Microsoft/SQL Server"

	run "$base/studio/SSMS-Setup-ENU.exe" || return # https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms
	run "$base/studio/plugins/SSMSBoostInstaller_3.4.6796.msi" || return # http://www.ssmsboost.com

	local dir="$winAppData/SQL Server Management Studio"; makeDir "$dir" || return
	makeLink --merge --hide "$app" "$winDoc/SQL Server Management Studio" || return
	$makeShortcut "$CLOUD/data/sql" "$dir/Personal.lnk" || return

	sqlServerFinal || return
	SqlServerManagementStudio profile restore default || return
}

sqlServerConfig()
{
	ScriptEval SqlServer init || return

	echot "\

- SQL Server Network Configuration, Protocols for MSSQLSERVER
- Named Pipes and TCP/IP=Enabled
- TCP/IP, IP Addresses
	- (IP for primary NIC) IPn, Enabled=Yes
	-IPAll, TCP Port=$port"
	SqlServer config
	pause
	SqlServer service restart

	echot "
- Object Explorer, Server, Properties, Memory, Maximum server memory=256"
	SqlServerManagementStudio || return
	pause

	echo "Updating firewall..."
	local port=1433
	$firewall rule add "SQL Server" dir=in action=allow protocol=TCP localport=$port profile=private \
		program="$(utw "$P/Microsoft SQL Server/MSSQL${versionNum}.MSSQLSERVER/MSSQL/Binn/sqlservr.exe")" || return
}

sqlServerLogCleanup()
{
	ScriptEval SqlServer init || return

	echo "Removing log files..."
	$rmd "$P/Microsoft SQL Server/${versionNun}0/Setup Bootstrap/Log" || return
}

sqlServerFinal()
{
	ScriptEval SqlServerManagementStudio init || return

	local dir="$(utw "$udata/sql")" r="HKCU/Software/Microsoft/SQL Server Management Studio/${versionNum}.0"

	echo "Updating SQL Server registry..."
	registry set "$r/DefaultBrowseComponentLocation" REG_EXPAND_SZ "$dir" || return
	registry set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$dir" || return
	registry set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$dir" || return
	registry set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$dir" || return
	registry set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$dir" || return
	registry set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$dir" || return
	registry set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$dir" || return

	if [[ $client ]]; then
		SqlServer service demand --all || return
		SqlServer service stop --all || return
	fi

	os path editor || return
	echo "- Remove SQL entries from the system path"
	pause
}

SystemInternalsInstall()
{
	header "System Internals"
	registry import "$setupFiles/SysInternalsEula.reg"
}

TeamsInstall()
{
	header "Microsoft Teams"
	run "other/Microsoft/Teams/Teams_windows_x64.exe" || return # https://www.microsoft.com/en-us/microsoft-teams/download-app
	$mv "$up/Microsoft Teams.lnk" "$up/Applications" || return
	$rm "$ud/Microsoft Teams.lnk" || return
}

WindowsAdministrationToolsInstall()
{
	header "Windows Administration Tools"
	run "other/Microsoft/Server/tools/WindowsTH-RSAT_WS_1803-x64.msu" || return # http://www.microsoft.com/en-us/search/result.aspx?q=Remote%20Server%20Administration%20Tools&form=DLC

	echo "Updating icons..."
	mergeDir "$pp/Administrative Tools" "$oo" || return
	$rm "$pp/Server Manager.lnk" || return
	$rm "$pp/Administrative Tools.lnk" || return
}

WindowsAssessmentAndDeploymentKitInstall()
{
	header "Windows Assessment and Deployment Kit"

	# https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewADK
	local dir="other/Microsoft/Windows/adk"
	run "$dir/Windows_InsiderPreview_ADK_en-us_20211/adksetup.exe" || return
	run "$dir/Windows_Preinstallation_Environment_en-us_20211/adkwinpesetup.exe" || return

	mergeDir "$pp/Windows Kits" "$pp/Development/Other" || return
}

WindowsDownloadInstall()
{
	header "Windows Download"

	# 1909 https://www.microsoft.com/en-us/software-download/windows10/
	# 20201 https://docs.microsoft.com/en-us/windows-insider/flight-hub/ https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewadvanced?lc=1033&wa=wsignin1.0
	local v=1909
	run "other/Microsoft/Windows/setup/$v/MediaCreationTool$v.exe" --elevate || return

	[[ ! -f ~/Downloads/Windows.iso ]] && { EchoErr "Windpows was not downloaded"; return 1; }

	gcp ~/Downloads/Windows.iso "$(GetFilePath "$file")/Windows_$v.iso" || return
}

WindowsStoreInstall()
{
	echo "Configuring Windows Store..."
	echo "Log in to the Windows Store"
	store || return
}

WindowsSubsystemForLinuxInstall()
{
	header "Windows Subsystem for Linux"

	local data="$DATA/appdataw/wsl"; makeDir "$data" || return

	# VMware Workstation does not support nested virtualization if the host is using Hyper-V
	local dist="Ubuntu-20.04"; IsVmwareVm && dist="Ubuntu-18.04"

	# install WSL
	if ! InPath bash.exe ; then

		# newer versions of windows just run wsl.exe --install
		if InPath wsl.exe; then
			RunScript --elevate --no-hide -- wsl.exe --install || return

		# WSL 1 only
		elif IsVmwareVm; then
			RunScript --elevate --no-hide -- DISM.exe /online /enable-feature /FeatureName:Microsoft-Windows-Subsystem-Linux /all /norestart || return

		# WSL 2
		else
			run "platform/LINUX/wsl/setup/wsl_update_x64.msi" || return # Linux kernel update
			RunScript --elevate --no-hide -- dism.exe /online /enable-feature /FeatureName:VirtualMachinePlatform /all /norestart || return

		fi

		return
	fi

	# update the WSL 2 kernel
	if wsl.exe --update --status >& /dev/null; then # check if the wsl.exe  --update --status option exists (newer versions of Windows)
		if wsl.exe --update --status |& grep -q "kernel file is not found"; then
			RunScript --elevate --no-hide -- wsl.exe --update
		fi
	fi

	# install a distribution
	if ! wsl exists "$dist" >& /dev/null && askp "Install the $dist distribution"; then
		wsl restore "$dist" "$dist" || return
		wsl bootstrap "$dist" || return
	fi

	WslFinal || return
}

WslFinal()
{
	registry set "run/startup" REG_SZ 'c:\\Windows\\System32\\bash.exe -c \"/usr/local/data/bin/RunScript startup\"' || return
	$makeShortcut "wsl.exe" "$pp/Operating System/bash" || return
}

#
# .NET
#

DotNetAll() { i VisualStudio nUnit Silverlight; }

DotNetCore()
{
	header ".NET Development Core"
	i VisualStudio LinqPad NUnit || return
}

VisualStudioInstall()
{
	header "Visual Studio"

	local vs="other/Microsoft/Visual Studio"
	local vse="$vs/extension"

	run "$vs/setup/" -p "vs_community__29450078.1604187907.exe" "VisualStudioForMacInstaller__29450078.1604187907.dmg" || return # https://www.visualstudio.com/downloads/
	run "$vse/VSColorOutput.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496
	run "$vse/SolutionLoadManager.vsix" # https://marketplace.visualstudio.com/items?itemName=kolomiets.SolutionLoadManager

	VisualStudioFinal || return
	VisualStudio profile restore default || return
}

VisualStudioFinal()
{
	ScriptEval VisualStudio init || return

	local base="$pp/Development/DotNet"
	local other="$base/Other"
	local vs="$other/Visual Studio $vsName"
	local r="$vsRegistryKey" c="$(utw "$CODE")"

	makeDir "$CODE/test/vs"
	makeDir "$other" || return

	$makeShortcut "$WIN_ROOT/Windows/assembly" "$base/GAC.lnk" || return
	$hide ~/.dnx ~/.nuget || return
	makeLink --merge --hide "$winAppData/Visual Studio $vsName" "$winDoc/Visual Studio $vsName" || return
	mergeDir --rename "$pp/Visual Studio $vsName" "$other/Visual Studio $vsName" || return
	mergeDir "$pp/Windows Kits" "$pp/Development/Other" || return
	$mv "$pp/Visual Studio Installer.lnk" "$vs" || return
	$ren "$pp/Visual Studio $vsName.lnk" "$base/Visual Studio.lnk" || return
	$ren "$pp/Blend for Visual Studio $vsName.lnk" "$vs/Blend.lnk" || return

	IisExpressFinal || return
	SilverlightFinal || return
}

nUnitInstall()
{
	header "NUnit"
	run "shareware/DOT.NET/NUnit/setup/NUnit.Console-3.11.1.msi" || return # http://nunit.org/download/
	mergeDir "$up/NUnit $version" "$pp/Development/DotNet/Other" || return
}

SilverlightInstall()
{
	header "Silverlight SDK"

	# downloads  http://www.silverlight.net/downloads
	# - Developer Runtime (required, debugging): http://go.microsoft.com/fwlink/?linkid=229324
	# - toolkit (required, additonal controls): http://silverlight.codeplex.com/ http://silverlight.codeplex.com/releases/view/78435
	# - SDK (required if Visual Studio is not installed): http://www.microsoft.com/en-us/download/details.aspx?id=28359
	# - tools (developer runtime, SDK, Visual Studio 2010 support): http://www.microsoft.com/en-us/download/details.aspx?id=28358
	# version: http://www.microsoft.com/getsilverlight/Get-Started/Install/Default.aspx
	run "other/Microsoft/DOT.NET/Silverlight/development/Silverlight_Developer_64.exe"
	run "other/Microsoft/DOT.NET/Silverlight/development/Silverlight_5_Toolkit_December_2011.msi"

	silverlightFinal || return
}

SilverlightFinal()
{
	local base="$pp/Development/DotNet/Other/Silverlight"
	makeDir "$base" || return

	$ren "$pp/Microsoft Silverlight/Microsoft Silverlight.lnk" "$pp/Applications/Accessories/Silverlight.lnk"  || return
	$ren "$pp/Microsoft Silverlight 5 SDK/Welcome.lnk" "$base/Silverlight 5 SDK Welcome.lnk" || return

	mergeDir --rename "$pp/Microsoft Silverlight 5 Toolkit December 2011" "$base/Silverlight 5 Toolkit" || return

	$rmd "$pp/Microsoft Silverlight 5 SDK" || return
	$rmd "$pp/Microsoft Silverlight" || return
}

#################################################
# monitoring
#################################################

monitoringAll() { i CoreTemp iCUE; }

monitoringCore()
{
	header "System Monitoring Core"

	if IsPlatform win; then
		$makeShortcut "$PLATFORM_PATH/HWMonitorPro.exe" "$pp/Operating System/Hardware Monitor Pro" || return
	fi

	i CoreTemp iCUE || return
	pkg stacer || return
}

CoreTempInstall()
{
	# https://www.alcpu.com/CoreTemp/
	run "shareware/other/Core Temp/Core-Temp-setup.exe" --elevate || return
	mergeDir --rename "$pp/Core Temp" "$oo" || return
	$rm "$ud/Core Temp.lnk" || return
}

#################################################
# notes
#################################################

notesCore() { i notion StandardNotes Todoist; }

notionInstall()
{
	header "Notion"	# https://www.notion.so/desktop
	local v="2.0.11" suffix; IsPlatformAll mac,arm && suffix="-arm64"
	run "other/notion/" -p "Notion Setup $v.exe" "Notion-$v$suffix.dmg" || return
	NotionFinal || return
}

NotionFinal()
{
	if IsPlatform win; then
		$mv "$up/Notion.lnk" "$up/Applications" || return
		$rm "$ud/Notion.lnk" || return

	elif IsPlatform mac; then
		MakeDirOwner "$P/Notion.app" || return # must be writable otherwise prompted for invalid install
		! dockutil --find "Notion" >& /dev/null && { dockutil --add "/Applications/Notion.app" || return; }
	fi
}

StandardNotesInstall()
{
	header "Standard Notes"

	local v="3.0.19" # https://standardnotes.org/
	run "shareware/Standard Notes/" -p "standard-notes-setup-$v.exe" "standard-notes-$v-mac.zip" "standard-notes-$v-x86_64.AppImage" || return

	if IsPlatform linux; then
		cp "$installDir/shareware/Standard Notes/appimagekit-standard-notes.desktop" ~/.local/share/applications || return

	elif IsPlatform mac; then
		macAppConfigure "Standard Notes" || return

	elif IsPlatform win; then
		$mv "$ud/Standard Notes.lnk" "$up/Applications" || return
		$rm "$up/Standard Notes.lnk" || return
		makeDir "$winAppData/Standard Notes/backups" || return
		makeLink --merge --hide "$winAppData/Standard Notes/backups" "$WIN_HOME/Standard Notes Backups" || return

	fi

	return 0
}

TodoistInstall()
{
	header "Todoist"

	# https://todoist.com/downloads/
	run "Todoist/Todoist_for_Windows_Desktop_2_7_6.exe" || return

	mergeDir "$up/Todoist" "$up/Applications/Other" || return
	$rm "$ud/Todoist.lnk" || return
}

#################################################
# Package Management
#################################################

PackageManagementAll() { i apt chocolatey PackageManagement WinGet; }

AptInstall()
{
	local codeName="$(os CodeName)" || return

	# add universe sources
	if ! grep "$codeName universe" "/etc/apt/sources.list" |& grep -v "^#" >& /dev/null; then
		echo "deb http://us.archive.ubuntu.com/ubuntu/ $codeName universe" | sudo tee -a "/etc/apt/sources.list" || return
		sudo apt-get update || return
	fi

	return 0
}

ChocolateyInstall()
{
	header "choclatey"
	# installs: user environment path=c:\Chocolatey\bin, ChocolateyInstall=c:\Chocolatey
	start --wait cmd /c powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" "&&" pause
}

PackageManagement() # 70MB
{
	header "pkg Management"
	pkg apt-transport-https ca-certificates curl gnupg-agent || return
	pkg apt-show-versions debsums software-properties-common wajig || return
}

WinGetInstall() { storeInstall "winget" "9nblggh4nns1"; }

#################################################
# OPC
#################################################

opcCore() { i GrayboxOpx MatrikonOpcSimulator OpcScout; }

GrayboxOpcInstall()
{
	header "Graybox OPC "
	run "Graybox/setup/gbopcsim18.msi" || return # http://gray-box.net/opc_simulator.php

	echo "Updating icons..."
	mergeDir "$pp/Graybox" "$up/Development/Other" || return
}

MatrikonOpcSimulatorInstall()
{
	header "Matrikon OPC Simulator"
	run "Matrikon/setup/MatrikonOPCSimulation.EXE" || return

	echo "Updating icons..."
	mergeDir "$pp/MatrikonOPC" "$up/Development/Other" || return
}

OpcScoutInstall()
{
	header "OPC Scout"
	run "Siemens/setup/OPCScoutV10.zip" --dest "$P32/OPCScoutV10" || return

	echo "Updating icons..."
	MakeShortcut "$P32/OPCScoutV10/OPCScoutV10.exe" "$pp/Development/OPC Scout.lnk" || return
}

#
# PDF
#

pdfAll() { i NitroPdf PdfElement; }

NitroPdfInstall()
{
	header "Nitro PDF"

	# ​https://www.gonitro.com/nps/product-details/downloads
	run "other/Nitro/nitro_pro13.exe" || return

	$mv "$pp/Nitro Pro.lnk" "$pp/Applications" || return
	$rm "$pd/Nitro Pro.lnk" || return
}

PdfElement()
{
	header "PDFelement"

	# ​https://pdf.wondershare.com/
	run "other/Wondershare/PDFelement/" -p "pdfelement-pro_setup_full5239.exe" "mac-pdfelement6-pro_full2992.dmg" "" --elevate || return

	mergeDir "$pp/Wondershare/" "$pp/Applications/Other" || return
	$rm "$pd/Wondershare PDFelement.lnk" || return
}

#################################################
# performance
#################################################

performanceAll() { i Geekbench || return; pkg bonnie++ || return; }

GeekbenchInstall()
{
	header "Geekbench"

	# https://www.geekbench.com/
	local v=5.2.3
	run "other/Geekbench/" -p "Geekbench-$v-WindowsSetup.exe" "Geekbench-$v-Mac.zip" "Geekbench-$v-Linux.tar.gz" --dest "/usr/local/bin" --elevate || return

	if IsPlatform win; then
		echo "Updating icons..."
		$ren "$up/Geekbench 5/Geekbench 5.lnk" "$pp/Applications/Geekbench.lnk" || return
		$rmd "$up/Geekbench 5" || return
	fi

	return 0
}

#
# Python
#

PipInstall() # Python package install
{
	pythonCheck || return
	InPath "$@" && return
	sudo pip3 install "$@" || return
}

pythonCheck() { InPath pip,python && return 0; i --no-header python; }

PythonInstall() # 180MB
{
	header "Python"

	# python3
	! InPath python3 && IsPlatform debian,mac && { pkg python3 || return; }

	# dependencies
	if IsPlatform debian; then
		pkg libgirepository1.0-dev libgpgme-dev swig || return
		pkg libcairo2-dev libjpeg-dev libgif-dev || return # https://stackoverflow.com/questions/22100213/package-cairo-was-not-found-in-the-pkg-config-search-path-node-j-s-install-canv
	fi

	# pip3 - https://packaging.python.org/tutorials/installing-packages/
	if ! InPath pip3; then
		IsPlatform mac && { python3 -m ensurepip --default-pip || return; }
		IsPlatform pi,ubuntu && { pkg python3-pip || return; }
		! InPath pip3 && { sudo -H python3 "$setupFiles/get-pip.py" || return; }
	fi

	if IsPlatform win && [[ ! -d ~/.cache || ! -d ~/.pip ]]; then
		echo "Creating directories..."
		makeDir ~/.cache ~/.pip || return
		$hide ~/.cache ~/.pip || return
	fi

	return 0
}

GlancesInstall() {  header "glances"; PipInstall glances; }

#################################################
# Raspberry Pi
#################################################

piAll() { i BalenaEtcher PiDiskImager; }

piCore()
{
	header "Raspberry Pi Core"
 	i BalenaEtcher PiDiskImager || return;
}

PiDiskImager()
{
	header "Raspberry Pi Disk Imager" # https://www.raspberrypi.org/software/
	run "platform/linux/Raspberry Pi/imager/" -p "imager_1.6.1.exe" "imager_1.6.1.dmg" "imager_1.6.1_amd64.deb" || return
	IsPlatform win && { mergeDir "$up/Raspberry Pi" "$up/Applications/Other" || return; }
	return 0
}

RaspberryPiSetup()
{
	header "Raspberry Pi Setup"
	i RaspberryPiSwap || return
}

RaspberryPiSwap()
{
	grep -q "CONF_SWAPSIZE=4096" "/etc/dphys-swapfile" && return

	local clip="CONF_SWAPSIZE=4096"
	echo -e "- paste:\n$clip"; clipw "$clip" || pause

	sudoedit "/etc/dphys-swapfile" || return
	sudo "/etc/init.d/dphys-swapfile" stop || return
	sudo "/etc/init.d/dphys-swapfile" start || return
	free -m || return
}

#################################################
# Remote Desktop
#################################################

RemoteDesktopAll() { i JumpDesktop TigerVnc; }

JumpDesktopInstall()
{
	header "Jump Desktop" # https://app.jumpdesktop.com/dashboard
	run "network/JumpDesktop/" -p "JumpDesktop.exe" "JumpDesktopMac.zip" || return

	if IsPlatform win; then
		makeDir "$oo/Jump Desktop" || return
		$mv "$pp/Jump Desktop.lnk" "$oo/Jump Desktop" || return
		$mv "$pp/Jump Desktop Connect.lnk" "$pp/Operating System/other/Jump Desktop" || return
	fi

	return 0
}

TigerVnc()
{
	header "TigerVNC"
	echot "- uncheck all Server configuration options"

	# ​https://github.com/TigerVNC/tigervnc/releases
	run "shareware/TigerVNC/" -p "tigervnc64-1.8.0.exe" "" "" || return

	mergeDir --rename "$pp/TigerVNC 64-bit" "$oo/TigerVNC" || return
}

#################################################
# Ruby
#################################################

GemInstall() # Ruby gem install
{
	rubyCheck || return
	InPath "$@" && return
	gem install "$@" || return
}

rubyCheck() { InPath ruby rvm && return 0; i --no-header ruby || return; }
rvmInstalled() { [[ -d "$HOME/.rvm" ]]; }

RubyInstall()
{
	header "Ruby"

	if IsPlatform mac; then
		i --no-header RubyAsdf || return
	elif ! rvmInstalled && IsPlatform pi; then # rvm does not include arm binaries and compilation takes a long time
		i --no-header RubyPackage || return
	else
		i --no-header RubyRvm || return
	fi

	# create directories
	makeDir ~/.gem || return
	MakeLink --symbolic --hide "$UBIN/.gemrc" "$HOME/.gemrc" || return

	# update ~/.gemrc
	if IsPlatform mac && ! grep -q "/usr/local/bin" ~/.gemrc; then
		echo "gem: -n/usr/local/bin" >> ~/.gemrc
	fi

	! InPath lolcat && { gem install lolcat || return; }

	return 0
}

RubyAsdf()
{
	package gnupg asdf || return
	. /usr/local/opt/asdf/asdf.sh || return
	asdf plugin add ruby || return
	asdf install ruby latest || return
	asdf global ruby 3.0.0 || return
	MakeLink --symbolic --hide "$UBIN/.asdfrc" "$HOME/.asdfrc" || return
}

RubyRvm()
{
	header "Ruby (rvm)"

	# rvm
	if ! rvmInstalled; then
		gpg --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
		curl -sSL https://get.rvm.io | bash -s stable || return
		. "$HOME/.rvm/scripts/rvm" || return # add rvm to path in current shell
	fi

	# ruby
	local version="2.7"
	if ! InPath ruby || ! ruby --version | grep "$version" >& /dev/null; then
		rvm install 2.7 || return
		. "$HOME/.rvm/scripts/rvm" || return # add ruby and gem to the path in current shell
		rvm use --default "$version" || return
	fi

	return 0
}

RubyPackage()
{
	header "Ruby (package)"
	gccCheck || return

	# ruby
	! InPath ruby && { pkg ruby || return; }

	# development
	if [[ ! -f /usr/include/ruby-2.5.0/ruby.h ]]; then
		local devPackage="ruby$(ruby -e 'puts RUBY_VERSION[/\d+\.\d+/]')-dev"
		pkg $devpkg || return
	fi

	# SSL libraries
	IsPlatform debian && [[ ! -d /usr/include/openssl ]] && { pkg libssl-dev || return; }

	return 0
}

ColorLsInstall() {  header "colorls"; GemInstall colorls; }

#################################################
# shells
#################################################

BashInstall()
{
	header "Bourne Again Shell"

	bashProfile || return

	# login shell
	IsPlatform entware && { AddLoginShell "/opt/bin/bash" || return; }

	return 0
}

bashProfile()
{
	local file="/etc/bash.bashrc"
	local line='[[ -f "/usr/local/data/bin/bash.bashrc" ]] && . "/usr/local/data/bin/bash.bashrc"'
	local after="# this file has to be sourced in"
	local before='# If not running interactively, don'\''t do anything'

	IsPlatform mac && { file="/etc/bashrc"; after="# System-wide .bashrc file" before="if [ -z \"$PS1\" ]; then"; }
	IsPlatform dsm,qnap && { file="/opt/etc/profile"; before="# Please note"; }

	[[ ! -f "$file" ]] && { EchoErr "$file does not exist"; return 1; }

	# try and add the line automatically
	if ! grep -q "$line" "$file" && [[ $after ]]; then
		sudo ${G}sed -ie '/^'"$after"'/a \\n'"$line"'' "$file" || return
	fi

	# add the line manually
	if ! grep -q "$line" "$file"; then
		echo "$line"; clipw "$line"
		echo "- paste above line before \"$before\""
		pause
		sudoedit "$file" || return
	fi
}

ZshInstall()
{
	header "Z shell"

	# .oh-my-zsh profile
	[[ ! $force && ! -d "$HOME/.oh-my-zsh" ]] && { ZshHelper $noPrompt profile restore default || return; }

	# install Zsh
	pkg zsh || return

	# Zsh profile
	zshProfile || return

	# permissions
	local dir="/usr/local/share/zsh"
	[[ -d "$dir" ]] && { sudo chmod go-w "$dir" || return; }
	[[ -d "$dir/site-functions" ]] && { sudo chmod go-w "$dir/site-functions" || return; }

	# login shell
	IsPlatform entware && { AddLoginShell "/opt/bin/zsh" || return; }

	return 0
}

zshProfile()
{
	local file="/etc/zsh/zshenv"
	IsPlatform mac && file="/etc/zprofile"
	IsPlatform entware && file="/opt/etc/zshenv"
	makeFileSudo "$file" || return

	local line='[[ -f "/usr/local/data/bin/bash.bashrc" ]] && . "/usr/local/data/bin/bash.bashrc"'
	! grep -q "$line" "$file" && { echo "$line" | sudo tee -a "$file" || return; }
	sudoc chmod +x "$file" || return
}

ZplugInstall()
{
	IsPlatform pi && return # fails updating packages
	pkg zsh zplug || return

	# plugins
	zplug-install "mafredri/zsh-async", from:"github", use:"async.zsh" || return
	zplug-install "b4b4r07/enhancd", use:init.sh || return
	zplug-install "zsh-users/zsh-syntax-highlighting", from:github, defer:3 || return
	zplug-install || return
}

#################################################
# security
#################################################

securityCore() { i AxCrypt cfssl CredentialStore Dashlane LastPass pass pGina SecretTool VeraCrypt; }

AxCrypt()
{
	header "AxCrypt"

	run "AxCrypt/setup/" -p "AxCrypt-2.1.1573.0-Setup.exe" "AxCrypt-Mac-2.2.578.0.pkg" || return # https://www.axcrypt.net/download/

	if IsPlatform win; then
		mergeDir "$pp/AxCrypt" "$oo" || return
		makeLink --merge --hide "$udata/AxCrypt" "$udoc/My AxCrypt" || return
		makeLink --merge --hide "$uhome/DropBox/data/AxCrypt" "$uhome/DropBox/My AxCrypt" || return
		makeLink --merge --hide "$uhome/OneDrive/data/AxCrypt" "$uhome/OneDrive/My AxCrypt" || return
	fi

	return 0
}

CfsslInstall()
{
	header "CloudFlare SSL"

	IsPlatform mac && { pkg cfssl; return; }

	pushd "/tmp" > /dev/null || return

	wget -q --show-progress --https-only --timestamping \
		"https://pkg.cfssl.org/R1.2/cfssl_linux-amd64" \
		"https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64"

	chmod +x "cfssl"* || return

	sudoc mv "cfssl_linux-amd64" "/usr/local/bin/cfssl" || return
	sudoc mv "cfssljson_linux-amd64" "/usr/local/bin/cfssljson" || return

	popd > /dev/null
}

CredentialStoreInstall()
{
	header "Credential Store"

	# Mac OS and Windows - credential managed is installed with the OS
	if IsPlatform mac,win; then
		pkg pwgen || return

	# Debian - use the gnome-keyring (encryption) and secret-tool (command line)
	elif IsPlatform debian; then
		i --no-header SecretTool || return
		pkg pwgen || return

	# all other platforms - use gpg (encryption) and pass (command line)
	else
		i --no-header gpg pass || return

	fi

	unset CREDENTIAL_MANAGER # ensure the new credential manager is detected	
	! password CheckStore && { password store || return; }

	return 0
}

DashLaneInstall()
{
	header "Dashlane"

	# https://www.dashlane.com/download#downloaded
	run "Dashlane/Dashlane/" -p "Inst.exe" ".dmg" || return

	if [[ "$PLATFORM" == "win" ]]; then
		mergeDir "$up/DashLane" "$oo" || return
		$rm "$ud/Dashlane.lnk" || return
	fi

	return 0
}

KeybaseInstall()
{
	header "Keybase"
	run "	other/Keybase/" -p "keybase_setup_amd64.msi" ".dmg" || return
	[[ "$PLATFORM" == "win" ]] && { $mv "$up/Keybase.lnk" "$up/Applications" || return; }
	return 0
}

LastPassInstall() # LastPass for Linux only installs Chrome extension
{
	header "LastPass"

	# https://lastpass.com/misc_download2.php
	run "other/LastPass/setup/" -p "LastPassInstaller.exe" "LastPass.dmg" "lplinux.tar.bz2" --elevate || return
	package lastpass-cli || return
	
	if IsPlatform linux; then
		cd "$P/lplinux" || return
		./install_lastpass.sh || return
	elif IsPlatform win; then
		mergeDir "$pp/LastPass" "$oo" || return
		$rm "$pd/My LastPass Vault.lnk" || return
		registry 32 delete "run/LastApp" || return # C:\Program Files (x86)\LastPass\lastapp.exe
	fi

	return 0
}

PassInstall()
{
	header "pass"
	i --no-header gpg || return
	pkg pass || return;
	makeLink --symbolic "$UDATA/app/pass" "$HOME/.password-store" || return
	chmod go-rwx $UDATA/app/pass || return
}

pGinaInstall()
{
	header "pGina"

	IsInDomain && return 0

	# http://pgina.org/download.html
	run "other/Microsoft/Visual Studio/redistributable/vcredist_x86.exe" || return
	run "other/Microsoft/Visual Studio/redistributable/vcredist_x64.exe" || return
	run "shareware/pGina/setup/pGinaSetup-3.1.8.0.exe" /silent || return #

	echo "Updating icons..."
	mergeDir "$pp/pGina" "$oo" || return

	pGina profile restore default || return
}

SecretToolInstall()
{
	header "Secret Tool"
	i --no-header xClient || return
	! InPath secret-tool && { pkg gnome-keyring libsecret-tools seahorse || return; }
	installExecutable "platform/linux/lssecret" || return # https://gitlab.com/GrantMoyer/lssecret - requires libsecret-1-dev
}

VeraCryptInstall()
{
	header "VeraCrypt"

	local v="1.24-Update7" # https://www.veracrypt.fr/en/Downloads.html
	local setup="shareware/VeraCrypt/setup" 

	if IsPlatform mac,win; then
		run "$setup/" -p "VeraCrypt Setup $v.exe" "VeraCrypt_1.24-Update8.dmg" || return
	elif IsPlatform ubuntu; then
		run "$setup/veracrypt-1.24-Update7-Ubuntu-20.10-amd64.deb" || return
		run "$setup/veracrypt-console-1.24-Update7-Ubuntu-20.10-amd64.deb" || return
	elif IsPlatform pi; then
		run "$setup/veracrypt-1.24-Update7-Debian-10-armhf.deb" || return
		run "$setup/veracrypt-console-1.24-Update7-Debian-10-armhf.deb" || return
	fi

	makeDir "$UDATA/app/VeraCrypt" || return

	if [[ "$PLATFORM" == "win" ]]; then
		mergeDir "$pp/VeraCrypt" "$ao" || return
		$rm "$pd/VeraCrypt.lnk" || return
	fi

	VeraCrypt $noPrompt profile restore default || return
}

#################################################
# SSH
#################################################

sshAll() { i sshClient sshServer sshFs WinScp; }

sshCore()
{
	i sshClient sshServer
	! IsPlatform mac && { i sshFs || return; } # macOS FUSE installation is cumbersome
	return 0
}

sshServer()
{
	header "SSH Server"
	RunPlatform sshServer || return
}

sshServerUbuntu()
{
	# fix slow ssh login at "pledge: network", test with ssh -vvv HOST
	sudo sed -i "s/^session\s*optional\s*pam_motd.so\s*motd=\/run\/motd.dynamic$/#session    optional     pam_motd.so motd=\/run\/motd.dynamic/" "/etc/pam.d/sshd"  || return
}

sshServerWsl()
{
	# install
	! InPath sshd && { pkg openssh-server || return; }
	sudo service start ssh || return

	# port forwarding
	if IsPlatform wsl2; then
		elevate netsh interface portproxy delete v4tov4 listenport=22 listenaddress=0.0.0.0 >& /dev/null
		elevate netsh.exe interface portproxy add v4tov4 listenport=22 listenaddress=0.0.0.0 connectport=22 connectaddress=$(GetIpAddress)
	fi

	# service permission
	if ! sudo grep $USER /etc/sudoers >& /dev/null; then
		echo "$USER ALL = (root) NOPASSWD: /usr/sbin/sshd -D" | sudo tee -a /etc/sudoers || return
	fi

	return 0
}

sshClient()
{
	header "SSH Client"
	makeDir ~/.ssh && $hide ~/.ssh || return
	sshClientPermission || return
	RunPlatform sshClient || return
}

sshClientPermission()
{
	[[ ! -d ~/.ssh ]] && return

	sudoc chown $USER ~/.ssh/* || return
	IsPlatform wsl && { chgrp $USER ~/.ssh/* || return; }

	chmod 700 ~/.ssh || return
	$hide ~/.ssh || return

	[[ -f ~/.ssh/config ]] && { sudo chmod 700 ~/.ssh/config || return; }
	[[ -f ~/.ssh//authorized_keys ]] && { chmod 700 ~/.ssh/authorized_keys || return; }
	[[ -f ~/.ssh/id_rsa ]] && { chmod 700 ~/.ssh/id_rsa || return; }
	[[ -f ~/.ssh/id_ed25519 ]] && { chmod 700 ~/.ssh/id_ed25519 || return; }

	return 0
}

sshClientWsl()
{
	# SSH key for Windows clients
	[[ ! -d "$WIN_HOME/.ssh" ]] && { mkdir "$WIN_HOME/.ssh" || return; }
	cp ~/.ssh/id_ed25519* "$WIN_HOME/.ssh" || return
}

sshClientMac()
{
	if ! grep "XAuthLocation /opt/X11/bin/xauth" /etc/ssh/ssh_config  >& /dev/null; then
		echo "Configuring SSH authentication..."
		echo "XAuthLocation /opt/X11/bin/xauth" | sudo tee -a /etc/ssh/ssh_config
	fi

	return 0
}

sshFs()
{
	if IsPlatform debian; then
		pkg sshfs || return
		sudo sed -i 's/^#user_allow_other$/user_allow_other/' "/etc/fuse.conf" || return

	elif IsPlatform entware; then
		pkg sshfs || return

	elif IsPlatformAll mac,arm; then
		i --no-header fuse || return
		installExecutable "shareware/SSHFS/image" || return # https://www.reddit.com/r/macapps/comments/lea865/how_to_install_sshfs_on_big_sur/		

	elif IsPlatform mac; then
		i --no-header fuse || return
		run "shareware/SSHFS/setupsshfs-2.5.0.pkg" || return # https://github.com/osxfuse/sshfs/releases

	fi
}

WinScpInstall()
{
	header "WiNSCP" # https://winscp.net/eng/index.php

	run "shareware/WinSCP/WinSCP-5.17.10-Setup.exe" || return

	$mv "$pp/WinSCP.lnk" "$pp/Operating System" || return
	$rm "$pd/WinSCP.lnk" || return

	winscp $noPrompt profile restore default || return
}

#################################################
# surveillance
#################################################

surveillanceCore()
{
	header "Surveillance Core"
	i AmcrestCamera qvr SurveillanceStation || return
}

amcrestCameraInstall()
{
	header "Amcrest Camera"

	# https://support.amcrest.com/hc/en-us/categories/201939038-All-Downloads
	run "hardware/Amcrest/setup/" -p "Amcrest_ConfigTool_Eng_V3.20.10.T.180715.exe" "Amcrest IP Config.zip" "" --elevate || return
	run "hardware/Amcrest/setup/" -p "P2PSurveillance_3.01.001.0.exe" "" "" --elevate || return # browser plugin
	run "hardware/Amcrest/setup/" -p "Amcrest+Surveillance+Pro+Setup+V1.14.1.R.20161018.exe" "Amcrest_Surveillance_Pro_Mac.bz2" "" --elevate || return

	if IsPlatform win; then
		makeDir "$pp/Surveillance/Other" || return
		mv "$pd/Amcrest IP Config.lnk" "$pp/Surveillance" || return
		mv "$pd/Amcrest Surveillance Pro.lnk" "$pp/Surveillance" || return
		$rmd "$pp/Amcrest IP Config" || return
		$rmd "$pp/Amcrest Surveillance Pro" || return
	fi

	return 0
}

qnapQvrInstall()
{
	header "QVR (QNAP Video Recorder)"

	# https://www.qnap.com/en/download?model=tvs-471&category=firmware
	run "hardware/QNAP/QVR/" -p "QVRProClient.exe" "QVRMacClient-2.2.1-170221.dmg" || return

	if IsPlatform win; then
		mergeDir "$pp/QNAP" "$pp/Surveillance/Other" || return
		$mv "$ud/QVR Pro Client.lnk" "$pp/Surveillance/Other/QNAP/QVR Pro Client" || return
	fi

	return 0
}

surveillanceStationInstall()
{
	header "4 Station"
	run "hardware/Synology/Surveillance Station/" -p "Synology Surveillance Station Client-1.2.10-1148_x64.exe" "Synology Surveillance Station Client-1.2.10-1148.dmg" || return # https://www.synology.com/en-us/support/download/DS216+II?item_filter= x#utilities

	if IsPlatform win; then
		mergeDir "$pp/Synology" "$pp/Surveillance/Other" || return
		$rm "$pd/Live View.lnk" || return
		$rm "$pd/Synology Surveillance Station Client.lnk" || return
		$rm "$pd/Timeline.lnk" || return
	fi

	return 0
}

#################################################
# terminals
#################################################

terminalCore() { i iTerm terminator tmux WindowsTerminal; }

iTermInstall()
{
	header "iTerm" # https://iterm2.com/downloads.html
	run "platform/mac/iTerm2/iTerm2-3_4_4.zip" || return

	if ask "Do you want to install iTerm shell integration"; then # https://iterm2.com/documentation-shell-integration.html
		curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
	fi

	! dockutil --find "iTerm" >& /dev/null && { dockutil --add "/Applications/iTerm.app" || return; }

	local clip="$udata/profile/default"; clipw "$clip"
	echo "- Preferences, General, Preferences, check Load preferences from a custom folder, Browse, $clip"
	macAppOpen iTerm || return
}

terminator() # 450MB
{
	header "Terminator"

	pkg terminator || return
	TerminatorHelper $noPrompt profile restore default || return

	if IsPlatform win; then
		local d="$PROGRAMDATA/terminator"
		makeDir "$d" || return

		# IsPlatform wsl2
		cp "$DATA/icons/terminator2.ico" "$PLATFORM_PATH/terminator.vbs" "$d" || return
		$makeShortcut "wscript.exe" "$pp/Operating System/terminator" "$(utw "$d")\terminator.vbs" "$(utw "$d/terminator2.ico")" || return
	fi

	return 0
}

TmuxInstall() # 1MB
{
	header "tmux"
	pkg tmux || return

	# https://github.com/gpakosz/.tmux
	[[ ! -d "$HOME/.tmux" ]] && { git clone "https://github.com/gpakosz/.tmux.git" "$HOME/.tmux" || return; }
	ln -s -f ".tmux/.tmux.conf" "$HOME" || return
	ln -s -f "$UBIN/.tmux.conf.local" "$HOME" || return

	return 0
}

WindowsTerminalInstall()
{
	header "Windows Terminal"

	# https://github.com/microsoft/terminal/releases
	local version="1.7.572.0_8wekyb3d8bbwe"
	if ! InPath wt.exe || [[ $force || ! -d "$ADATA/Microsoft/WindowsApps/Microsoft.$version" ]]; then
		run "other/Microsoft/Windows/terminal/Microsoft.WindowsTerminalPreview_$version.msixbundle" || return
		WindowsTerminal $noPrompt profile restore default || return
	fi

	return 0
}

#################################################
# Text Editor
#################################################

TextEditorAll() 
{
	i bear geany micro notepadpp sublime VisualStduioCode || return
}

TextEditorCore()
{
	i sublime || return
	! IsInstalled sublime && { i geany || return; }
	return 0
}

BearInstall() { storeInstall "Bear" 1091189122; }

GeanyInstall()
{
	header "Geany"
	pkg geany gnome-icon-theme || return
	GeanyHelper $noPrompt profile restore default || return
	SetTextEditor || return
}

MicroInstall()
{
	MicroHelper update || return
	MicroHelper $noPrompt profile restore default || return

	if InPath update-alternatives; then
		sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/micro 50
		sudo update-alternatives --set editor /usr/local/bin/micro || return
	fi

	SetTextEditor || return
}

npp() { NotepadPpInstall; }
NotepadPpInstall()
{
	header "Notepad++"
	echo "- Uncheck Run Notepad++"

	# http://notepad-plus-plus.org/download/
	run "shareware/Notepad++/setup/npp.7.8.7.Installer.x64.exe" --elevate || return

	findFile "shareware/Notepad++" || return

	ask "Update plugins" && { RunScript --elevate $verbose -- rsync -vr --delete "\"$file/setup/plugins\"" "\"$P/Notepad++\"" || return; }
	registry import "$file/setup/NotepadPP.reg" || return
	
	NotepadPpFinal || return
	notepadpp profile restore default || return
}

NotepadPpFinal()
{	
	$mv "$pp/Notepad++.lnk" "$pp/Applications" || return
	$rmd "$pp/Notepad++" || return
	$rm "$pd/Notepad++.lnk" || return
}

SublimeInstall()
{
	header "Sublime Text Editor" # https://www.sublimetext.com/download

	if IsPlatform mac,win; then
		local v=4113
		run "other/Sublime/setup/" -p "sublime_text_build_${v}_x64_setup.exe" "sublime_text_build_${v}_mac.zip" || return

	# https://www.sublimetext.com/docs/linux_repositories.html
	elif IsPlatform debian; then

		# add package source
		if [[ ! -f "/etc/apt/sources.list.d/sublime-text.list" ]]; then
			wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - || return
	  	echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list || return
	  	sudo apt-get update || return
		fi

		# install package
		pkg sublime-text || return

	fi

	SublimeCommon || return
}

SublimeBetaInstall()
{
	header "Sublime Beta Text Editor" # https://discord.com/channels/280102180189634562/650695903446827011
	local v=4107
	local architecture="amd64"; IsPlatform arm && architecture="arm64"
	run "other/Sublime/setup/" -p "sublime_text_build_${v}_x64_setup.exe" "sublime_text_build_${v}_mac.zip" "sublime-text_build-${v}_${architecture}.deb" || return
	SublimeCommon || return
}

SublimeCommon()
{
	if IsPlatform win; then
		registry delete "HKEY_CLASSES_ROOT/Applications/sublime_text.exe/" # Fix Windows Open With
		makeDir "$adata/../Roaming/Sublime Text 3" || return; # for profile
	elif IsPlatform mac; then
		sudoc MakeLink "$P/Sublime Text.app/Contents/SharedSupport/bin/subl" "/usr/local/bin/subl" || return
	fi

	sublime $noPrompt profile restore default || return
	SetTextEditor || return
	SublimeFinal || return
}

SublimeFinal() { ! IsPlatform win && return; $ren "$pp/Sublime Text.lnk" "$pp/Applications/Sublime Text.lnk"; }

VisualStudioCodeInstall()
{
	header "Visual Studio Code" 
	local v="1.57.0" # https://code.visualstudio.com/
	run "other/Microsoft/Visual Studio/code/" -p "VSCodeUserSetup-x64-$v.exe" "VSCode-darwin-universal.zip" "code_$version-1623259737_amd64.deb" || return
	IsPlatform win && { mergeDir "$up/Visual Studio Code" "$up/Development/other" || return; }

	return 0
}

#################################################
# travel
#################################################

travelCore() { i garmin sena; }

garminInstall()
{
	header "Garmin"

	run "hardware/Garmin/setup/" -p "GarminExpress.exe" "GarminExpress.dmg" "" || return # GPS - https://www.garmin.com/en-US/software/express/
	run "hardware/Garmin/setup/" -p "BaseCamp_472.exe" "BaseCampforMac_489.dmg" "" || return # GPS - https://www.garmin.com/en-US/shop/downloads/basecamp
	run "hardware/Garmin/setup/" -p "inReach Sync en-US 203366.exe" "" "" || return # satellite - https://inreach.garmin.com/Sync

	makeLink --merge --hide "$winAppData/Garmin" "$winDoc/My Garmin" || return
	mergeDir "$pp/Garmin" "$pp/Travel/Other" || return
	$rm "$pd/Garmin Express.lnk"
	$rm "$pd/inReach Sync.lnk"
	registry delete "urun/GarminExpressTrayApp" # "C:\Program Files (x86)\Garmin\Express Tray\ExpressTray.exe"
}

senaInstall()
{
	header "Sena"
	run "hardware/Sena/setup/" -p "SenaBluetoothDeviceManagerForWindows-v3.8.2-setup_x64.exe" "SENABluetoothDeviceManagerForMAC-v3.7.pkg" "" || return # ​https://www.sena.com/software/#device-manager

	echo "Updating icons..."
	mergeDir "$up/Sena Technologies" "$pp/Travel/Other" || return
	$rm "$ud/SenaBluetoothDeviceManager.lnk"
}

#################################################
# utility
#################################################

utilityCore() { i AltTabTerminator aptivate AutoHotKey bartender BetterTouuchTool CloseAllWIndows EdgeDeflector flux greenshot karabiner Lingon LinkShellExtension fuse RightClickEnhancer SevenZip TaskLayout TidyTabs; }

AutoHotKeyInstall()
{
	header "AutoHotKey"

	AutoHotKey close || return

	# https://www.autohotkey.com/ https://autohotkey.com/download/2.0/
	run "shareware/AutoHotKey/image/AutoHotkey_2.0-a122-f595abc2.zip" --dest "AutoHotKey" --elevate || return

	printf "${GREEN}Starting AutoHotKey...${RESET}"
	AutoHotKey startup || return
	echo "${GREEN}done${RESET}"
}

altTabTerminatorInstall()
{
	header "Alt-Tab Terminator"

	# https://www.ntwind.com/software/alttabter.html
	run "platform/win/NTwind/AltTabTer_4.8-setup.exe" --elevate || return

	mergeDir "$pp/Alt-Tab Terminator" "$oo" || return
	$rm "$pd/Alt-Tab Terminator.lnk" || return
	registry delete "urun/Alt-Tab Terminator" # "C:\Program Files\Alt-Tab Terminator\AltTabTer64.exe" /startup

	echot "\
Settings...
- Uncheck Autostart on Windows startup
- Hamburger, check Replace Alt-Tab, uncheck Replace Win-Tab"
	app AltTabTerminator || return
}

apptivate() # MacOS keyboard shortcuts, simpler than Karabiner
{
	header "Apptivate"

	# http://www.apptivateapp.com
	run "platform/mac/Apptivate/Apptivate.app.zip" || return

	if askp "Configure apptivate"; then
		echot "Add Item...
- iTerm, ctrl-cmd-3
- Firefox, ctrl-cmd-a
- Standard Notes, ctrl-cmd-n
- Sublime Text, ctrl-cmd-t"
		macAppOpen Apptivate || return
	fi

	return 0
}

BartenderInstall()
{
	header "Bartender"
	run "platform/mac/Bartender/Bartender 4.dmg" || return # https://www.macbartender.com/
	bartender profile restore default || return
	sleep 1; macAppOpen "Bartender 4" || return
}

BetterTouchTool()
{
	header "BetterTouchTool"
	run "platform/mac/BetterTouchTool/setup/BetterTouchTool.zip" || return # https://folivora.ai/
	BetterTouchTool profile restore default || return
	sleep 1; macAppOpen "BetterTouchTool" || return
}

CloseAllWindowsInstall()
{
	header "Close All Windows"

	# https://www.ntwind.com/software/closeall.html
	run "platform/win/NTwind/CloseAll_4.8-setup.exe" --elevate || return

	echo "Updating icons..."
	mergeDir "$pp/CloseAll" "$oo" || return
	$rm "$pd/CloseAll.lnk" || return
}

EdgeDeflectorInstall() # redirect Windows Start menu to browser of choice
{
	header "EdgeDeflector"

	# https://github.com/da2x/EdgeDeflector/releases
	# copy local to avoid the unknown zone prompt
	run "shareware/other/EdgeDeflector_install.exe" --elevate --copy-local || return
}

FluxInstall()
{
	header "f.lux"
	run "shareware/f.lux/" -p "flux-setup.exe" "Flux.zip" "" || return # http://justgetflux.com/

	echo "Updating icons..."
	mergeDir "$up/Flux" "$up/Operating System/Other" || return

	echo "Updating registry..."
	registry delete "urun/f.lux" # "C:\Users\jjbutare\AppData\Local\FluxSoftware\Flux\flux.exe" /noshow

	echot "\
- Location: Search
- Transition: Slow
- check Start F.lux at Login"
	[[ "$PLATFORM" == "mac" ]] && { start "/Applications/Flux.app" || return; }
}

GreenshotInstall()
{
	header "Greenshot"

	# http://getgreenshot.org/downloads/
	run "shareware/Greenshot/" -p "Greenshot-INSTALLER-1.2.10.6-RELEASE.exe" "1103915944" "" /silent || return

	if IsPlatform win; then
		mergeDir "$pp/GreenShot" "$oo" || return
		registry delete "run/Greenshot" # C:\Program Files\Greenshot\Greenshot.exe

	elif IsPlatform mac && askp "Configure GreenShot"; then
		echo "System Preferences, Security & Privacy, Screen Recording, check Greenshot"
		macAppOpen "$1" || return
		pause
	fi

	return 0
}

KarabinerInstall() # keyboard shortcuts for MacOS
{
	header "Karabiner-Elements" # https://pqrs.org/osx/karabiner/
	run "platform/mac/Karabiner-Elements/Karabiner-Elements-13.3.0.dmg" || return

	KarabinerHelper profile restore default || return
	macAppOpen Karabiner-Elements || return
}

HiddenStartInstall()
{
	header "Hidden Start"

	# https://www.ntwind.com/software/hstart.html
	run "platform/win/NTwind/Hstart_4.9-setup.exe" --elevate || return

	mergeDir "$pp/Hidden Start" "$oo" || return
	rmSudo "$pd/Hidden Start.lnk" || return

	local d="$P/Hidden Start/"
	cp "$d/HstartUI.exe" "$d/hstart"* "$PLATFORM_PATH" || return

	HiddenStartConfigure || return
}

HiddenStartConfigued() { schtasks.exe | grep HstartUAC-x64 >& /dev/null; }

HiddenStartConfigure()
{
	header "Hidden Start Configuration"

	if [[ $force || ! "$(registry 32 get "HKLM/SOFTWARE/Alexander Avdonin/Hidden Start/RegName")" ]]; then
		registry import "$setupFiles/HiddenStart.reg" || return
	fi

	if [[ $force ]] || ! HiddenStartConfigued; then
		start --wait hstart64.exe /nouac /wait ""cmd" /c echo Hidden Start 64 scheduled task is setup"
		! HiddenStartConfigued && { EchoErr "inst: unable to add the Hidden Start scheduled task"; return 1; }
	fi

	return 0
}

LingonInstall()
{
	header "Longon"

 	# https://www.peterborgapps.com/lingon/
	run "platform/mac/LingonX7/LingonX7.zip" || return
}

LinkShellExtension()
{
	header "Link Shell Extension"

 	# http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.htm
	run "platform/win/Link Shell Extension/" -p "HardLinkShellExt_X64.exe" "mac" "" || return

	if IsPlatform win; then
		mergeDir "$up/Link Shell Extension" "$oo" || return
	fi
}

fuseInstall()
{
	header "FUSE"

	if IsPlatform debian; then
		package fuse || return # https://www.kernel.org/doc/html/latest/filesystems/fuse.html
	elif IsPlatform mac; then	 # requires GUI installer to properly install system extensions
		useGui="true" run "shareware/FUSE/macfuse-4.1.0.dmg" || return # https://osxfuse.github.io/
	fi
}

RightClickEnhancer()
{
	header "Right Click Enhancer"

	# https://rbsoft.org/downloads/right-click-enhancer/
	run "platform/win/RBSoft/Right Click Enhancer/Right.Click.Enhancer.Professional.Setup.exe" --elevate || return

	mergeDir "$up/Right Click Enhancer Professional" "$oo" || return
	$rm "$ud/Right Click Enhancer Professional.lnk" || return

	echot "\
Setup
- Registration, Registration
- Right Click Editor, Action, Install Customize this Menu
Definitions
- normal entries - static entries, normally no submenus or icons
- shell extensions - dynamic entries (from a DLL) , typically shown with an icon
Instructions
- shift-right-click - view hidden items
- shift-right-click, Customize this Menu - customize the right click menu which
  shows all normal and shell extensions fo the selected object together
- Right Click Editor, click top-left picture to toggle between normal entries and shell extensions
- EPP is Windows Defender, mscore (.NET programs)"
}

SevenZip() # 6MB
{
	header "7-Zip"

	IsPlatform debian && { pkg p7zip-full || return; }
	IsPlatform mac && { pkg p7zip || return; }

	! IsPlatform win && return;

 	# http://www.7-zip.org/download.html
	run "shareware/7-Zip/setup/7z1900-x64.exe" --elevate || return

	$cp "$P/7-zip/7-zip.chm" "$PLATFORM_PATH" || return
	$cp "$P/7-zip/7z.exe" "$P/7-zip/7z.dll" "$PLATFORM_PATH" || return
	mergeDir "$pp/7-Zip" "$ao" || return
}

TaskLayoutInstall()
{
	header "TaskLayout"

	# http://www.systemgoods.com/
	run "platform/win/SystemGoods/TaskLayout-v0.7.0.5-Installer.exe" || return
}

TidyTabsInstall()
{
	header "TidyTabs"

	# https://www.nurgo-software.com/pricing/tidytabs
	run "platform/win/NURGO/TidyTabs.msi" || return

	mergeDir "$pp/TidyTabs" "$oo" || return
	registry delete "urun/TidyTabs" || return; # C:\Program Files (x86)\TidyTabs\TidyTabs.Daemon.exe
	TidyTabs profile restore default || return
}

#################################################
# video
#################################################

videoAll() { i vlc; }

vlcInstall()
{
	header "VLC Media Player"

	# https://www.videolan.org/vlc/
	run "shareware/VideoLAN/" -p "vlc-3.0.4-win64.exe" "mac" || return

	if IsPlatform win; then
		echo "Updating icons..."
		mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
		$rm "$pd/VLC media player.lnk" || return
	fi

	return 0
}

#################################################
# virtualization
#################################################

vmAll() { i docker hyperv ParallelsDesktop VirtualBox VmwareWorkstation; }
vmCore() { RunPlatform vm || return; }
vmWin() { i VmwareWorkstation || return; }
vmMac() { i ParallelsDesktop || return; }

DockerInstall()
{
	header "Docker"

	if IsPlatform arm,pi; then
		curl -sSL get.docker.com | sh 

	# https://docs.docker.com/engine/install/ubuntu/
	elif IsPlatform ubuntu; then

		# add pkg source
		if ! grep "download.docker.com" "/etc/apt/sources.list" >& /dev/null; then
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - || return
			sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" || return
	  	sudo apt-get update || return
		fi

		# install packages
		pkg docker-ce docker-ce-cli containerd.io || return
		pkg docker-compose || return

		# test
		sudo docker run hello-world

	fi

	return 0
}

hv() { hypervInstall; }
hypervInstall()
{
	header "Hyper-V"

	local data="$DATA/appdataw/Hyper-V"; makeDir "$data" || return
	RunScript --elevate $verbose -- DISM.exe /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V

	mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return

	local clip="$(utw "$data")"; clipw "$clip"
	echot "- Hyper-V Manager, $HOSTNAME, Hyper-V Settings...
	- Virtual Hard Disks=<paste> ($clip\Virtual Hard Disks
	- Virtual Machines=<paste> ($clip)"
	hyperv gui || return
}

HypervLinuxTools()
{
	{ IsPlatform win || ! IsHypervVm || ! IsPlatform Ubuntu; } && return

	# https://medium.com/@francescotonini/how-to-install-ubuntu-20-04-on-hyper-v-with-enhanced-session-b20a269a5fa7
	# wget https://raw.githubusercontent.com/Microsoft/linux-vm-tools/master/ubuntu/18.04/install.sh

	pkg linux-tools-virtual linux-cloud-tools-virtual xrdp || return
	sudo systemctl stop xrdp || return
	sudo systemctl stop xrdp-sesman || return

	local f="/etc/xrdp/xrdp.ini"
	#sudo sed -i_orig -e 's/use_vsock=false/use_vsock=true/g' "$f" || return # does not work in Ubuntu 20.04
	sudo sed -i_orig -e 's/^port=3389$/port=vsock:\/\/-1:3389/g' "$f" || return
	sudo sed -i_orig -e 's/security_layer=negotiate/security_layer=rdp/g' "$f" || return
	sudo sed -i_orig -e 's/crypt_level=high/crypt_level=none/g' "$f" || return
	sudo sed -i_orig -e 's/bitmap_compression=true/bitmap_compression=false/g' "$f" || return # fast when local

	[[ ! -e /etc/xrdp/startubuntu.sh ]] && { echo "#!/bin/sh
export GNOME_SHELL_SESSION_MODE=ubuntu
export XDG_CURRENT_DESKTOP=ubuntu:GNOME
exec /etc/xrdp/startwm.sh" | sudo tee /etc/xrdp/startubuntu.sh || return; }

	sudo chmod a+x "/etc/xrdp/startubuntu.sh" || return

	sudo sed -i_orig -e 's/startwm/startubuntu/g' "/etc/xrdp/sesman.ini"  || return # setup the ubuntu session
	sudo sed -i -e 's/FuseMountName=thinclient_drives/FuseMountName=shared-drives/g' "/etc/xrdp/sesman.ini"  || return # rename the redirected drives to 'shared-drives'
	sudo sed -i_orig -e 's/allowed_users=console/allowed_users=anybody/g' "/etc/X11/Xwrapper.config" || return

	# Blacklist the vmw module
	[[ ! -e /etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf ]] &&
		{ echo "blacklist vmw_vsock_vmci_transport" | sudo tee -a "/etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf" || return; }

	#Ensure hv_sock gets loaded
	[[ ! -e /etc/modules-load.d/hv_sock.conf ]] && echo "hv_sock" | sudo tee "/etc/modules-load.d/hv_sock.conf"

	# Configure the policy xrdp session
	echo "[Allow Colord all Users]
Identity=unix-user:*
Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
ResultAny=no
ResultInactive=no
ResultActive=yes" | sudo tee "/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla" || return

	# reconfigure the service
	sudo systemctl daemon-reload || return
	sudo systemctl start xrdp || return
}

ParallelsDesktopInstall()
{
	header "Parallels Desktop"

	# http://www.parallels.com/downloads/desktop/ https://b2b.parallels.com/Apple-Silicon?_ga=2.196161644.1151248711.1610563362-1071921338.1610563362
	local file="ParallelsDesktop-16.1.2-49151.dmg"; IsPlatformAll mac,arm && file="ParallelsDesktop-16.3.1-50393.dmg"
	run "platform/mac/Parallels Desktop/setup/$file" || return
	$rm "$la\com.parallels.mobile.prl_deskctl_agent.launchagent.plist" || return
	$rm "$ula\com.parallels.mobile.startgui.launchagent.plist" || return

	echot "\
- Preferences
	- Shortcuts
		- System Shortcuts, Send system shortcuts=Always
		- Profile=Windows Custom - based on Windows, uncheck all
		add cmd-down=Ctrl+End cmd-up=Ctrl+Home ctrl-option-right=Win+Right
		ctrl-option-left=Win+Left
- Virtual Machine, Configure...
	- Options
		- Startup and Shutdown, On VM Shutdown=Close Window
		- Applications
			- check Show Dock icons in Coherence only
			- uncheck Dock icons bounce to alert
		- Full Screen, check Use all displays in full screen
	- Hardware
		- Mouse & Keyboard, uncheck Mouse pointer sticks at window edges
		- Network 1, Type=Bridge, Default adapter
	- Security, check Do not back up virtual machine"
}

VirtualBoxInstall()
{
	header "VirtualBox"

	# https://www.virtualbox.org/wiki/Downloads
	local v="6.1.10-138449"
	run "shareware/VirtualBox/setup/" -p "VirtualBox-$v-Win.exe" "VirtualBox-$v-OSX.dmg" "virtualbox-$v~Ubuntu~bionic_amd64.deb" || return
	run "shareware/VirtualBox/extension/Oracle_VM_VirtualBox_Extension_Pack-6.1.10.vbox-extpack" || return

	local data="$DATA/appdata/VirtualBox"; IsPlatform win && data="$DATA/appdataw/VirtualBox"
	makeDir "$data" || return

	if IsPlatform win; then
		mergeDir "$pp/Oracle VM VirtualBox" "$oo" || return
		$rm "$pd/Oracle VM VirtualBox.lnk" || return
		$hide "$WIN_HOME/.VirtualBox" || return
		$rm "$WIN_HOME/VirtualBox VMs" || return
	fi

	local clip="$(utw "$data")"; clipw "$clip"
	echot "- File, Preferences..., General, Default Machine Folder=<paste> ($clip)"
}

VmwareWorkstationInstall()
{
	header "VMware Workstation"

	# https://my.vmware.com/group/vmware/downloads#tab1
	run "other/VMware/workstation/" -p "VMware-workstation-full-15.5.6-16341506.exe" "" "VMware-Workstation-Full-15.5.6-16341506.x86_64.bundle" --elevate || return

	local data="$DATA/appdata/VMware"; IsPlatform win && data="$DATA/appdataw/VMware"
	makeDir "$data" || return

	if IsPlatform win; then
		mergeDir "$pp/VMware" "$oo" || return
		$rm "$pd/VMware Workstation Pro.lnk" || return

		# enable guest NAT ping - allow echo replies (ICMP type and code 0)
		$firewall rule add "VMware NAT Echo Reply" dir=in action=allow enable=yes profile=private,domain localip=any remoteip=any protocol=icmpv4:0,0 interfacetype=any edge=yes || return
	fi

	local clip="$(utw "$data")"; clipw "$clip"
	echot "\
- Edit, Preferences...
  - Workspace, Default location for virtual machines=$clip
  - Hotkeys, select Ctrl and Win only
  - Display
    - uncheck Autofit Window
    - check Autofit guest
    - uncheck Show toolbar edge when unpinned in full screen
  - Updates, check Automatically update VMware Tools on a virtual machine"
	vmware start || return
}

VmwareLinuxTools()
{
	{ IsPlatform win || ! IsVmwareVm; } && return

	if IsServer; then
		pkg open-vm-tools || return
	elif IsDesktop; then
		pkg open-vm-tools-desktop || return
	fi

	return 0
}

#################################################
# Window Layout
#################################################

WindowLayoutAll() { i AquaSnap Mosaico Rectangle UltraMon WinSplit; }

AquaSnapInstall() # Windows preferred
{
	header "AquaSnap"

	# https://www.nurgo-software.com/pricing/aquasnap
	run "platform/win/NURGO/AquaSnap.msi" || return

	mergeDir "$pp/AquaSnap" "$oo" || return
	registry delete "urun/AquaSnap" || return; # C:\Program Files (x86)\AquaSnap\AquaSnap.Daemon.exe
	AquaSnap $noPrompt profile restore default || return
}

MosaicoInstall()
{
	header "Mosaico"
	echo "- uncheck Launch Mosaico"

	run "Soulid Studio/Mosaico/setup/Mosaico Setup v1.9.0.0.exe" || return # http://www.soulidstudio.com/download/

	echo "Updating icons..."
	mergeDir "$pp/Mosaico" "$oo" || return

	echo "Updating registry..."
	registry delete "urun/Mosaico" # C:\Program Files (x86)\Mosaico\mosaico.exe

	echot "\
- Try Mosaico for Free!
- unselect Auto Place
- Settings
	- uncheck Always on top of other windows
	- uncheck Display info message when reduced to system tray
	- check Start minimized to system tray
	- uncheck Start with "auto place" turned on
	- uncheck Tabify when not active
	- Show quick guide at startup"
	mosaico start
}

RectangleInstall()
{
	header "Rectangle"
	brew install rectangle || return # https://rectangleapp.com/
	rectangle profile restore default || return
}

UltraMonInstall()
{
	header "UltraMon"

	# https://www.realtimesoft.com/ultramon/download.asp
	run "platform/win/UltraMon/UltraMon_3.4.1_en_x64.msi" || return

	if [[ "$PLATFORM" == "win" ]]; then
		$mv "$pp/UltraMon.lnk" "$pp/Applications" || return
		$rm "$pp/Startup/UltraMon.lnk" || return
	fi

	return 0
}

WinSplitInstall()
{
	header "WinSplit"
	run "shareware/WinSplit Revolution/image.zip" --dest "$P32/WinSplit Revolution" || return
	WinSplit startup
}


#################################################
# Windows
#################################################

WindowsSetup()
{
	! IsPlatform win && return

	header "Windows Setup"

	if ! IsElevated; then
		export WSLENV="PATH/l" # ensure hstart64.exe is in the path for elevate
		RunScript --elevate --no-hide $verbose -- inst WindowsSetup "${options[@]}"
		return
	fi

	i HiddenStartConfigure SystemInternals || return # run first to minimize prompts
	i WindowsPath WindowsPermissions WindowsDirectories WindowsIcons WindowsFonts WindowsConsole WindowsConfiguration WslFinal OneDrive || return
}

WindowsConfiguration()
{
	header "Windows Configuration"

	$hide "$WIN_ROOT/PerfLogs" || return
	$hide "$WIN_ROOT/Windows.old" || return
	$rm "$WIN_HOME\Documents\My Music" || return
	$rm "$WIN_HOME\Documents\My Pictures" || return
	$rm "$WIN_HOME\Documents\My Videos" || return
	$rm "$WIN_HOME\My Music" || return
	$rm "$WIN_HOME\My Pictures" || return
	$rm "$WIN_HOME\My Videos" || return

	echo "Cleaning startup programs..."
	registry 32 delete "run/NetFxUpdate_v1.1.4322" # "C:\Windows\Microsoft.NET\Framework\v1.1.4322\netfxupdate.exe" 1 v1.1.4322 GAC + NI NID, https://superuser.com/questions/137508/ngen-exe-is-constantly-using-cpu
	registry delete "run/SecurityHealth" # %windir%\system32\SecurityHealthSystray.exe

	echo "Configuring..."
	powershell.exe Set-ExecutionPolicy RemoteSigned || return
	registry import "$setupFiles/Windows Setup.reg" || return
	numlock boot off || return
	netsh.exe advfirewall firewall set rule group="Network Discovery" new enable=Yes || return

	echo "Configuring the desktop..."
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/HideDesktopIcons/NewStartPanel/{645FF040-5081-101B-9F08-00AA002F954E}" REG_DWORD 1 || return # hide recycle bin

	echo "Configuring Explorer..."
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/ShowFrequent" REG_DWORD 0 || return
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/ShowRecent" REG_DWORD 0 || return

	echo "Configure file sharing..."
	$firewall group enable "File and Printer Sharing" || return
 	registry set "HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Policies/system/LocalAccountTokenFilterPolicy" REG_DWORD 1 || return # Enable remote administrator access to protected file shares (admin$, c$...)

	echo "Configuring taskbar..."
	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/StuckRects3/Settings' REG_BINARY 30000000FEFFFFFF02000000000000004E0000003200000000000000000000004E000000380400007800000001000000 # left side of screen
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/MMTaskbarEnabled" REG_DWORD 0 || return # show on main display only

	echo "Configure remote desktop..."
 	registry set "HKLM/SYSTEM/CurrentControlSet/Control/Terminal Server/fDenyTSConnections" REG_DWORD 0 || return
	netsh.exe advfirewall firewall set rule group="Remote Desktop" new enable=yes; # sets for all profiles

	echo "Configuring the task area..."
	registry set "HKCU/Control Panel/Bluetooth/Notification Area Icon" REG_DWORD 0 || return # hide Bluetooth Devices

	echo 'Configuring the theme...'
	registry set 'HKCU/SOFTWARE/Microsoft/Windows/DWM/ColorPrevalence' REG_DWORD 1 || return # Show Accent Color on Title Bars and Window Borders

	echo "Configure VPN..."
 	registry set "HKLM/SYSTEM/CurrentControlSet/Services/PolicyAgent/AssumeUDPEncapsulationContextOnSendRule" REG_DWORD 2 || return # allow VPN to a server behind NAT

 	echo "Configuring Windows Update..."
	registry set "HKLM/SOFTWARE/Policies/Microsoft/Windows/WindowsUpdate/AU/AllowMUUpdateService" REG_DWORD 1 || return

	echo "Disable snap assist..."
 	registry set "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Advanced/SnapAssist" REG_DWORD 0 || return

	echo "Disabling AutoPlay..."
	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/AutoplayHandlers/DisableAutoplay' REG_DWORD 1 || return

	echo "Disabling start menu web search suggestions..."
	registry set 'HKCU/SOFTWARE/Policies/Microsoft/Windows/Explorer/DisableSearchBoxSuggestions' REG_DWORD 1 || return

	echo "Configuring printers..."
	local p='cscript.exe C:\Windows\System32\Printing_Admin_Scripts\en-US\prnmngr.vbs'
 	$p -d -p Fax >& /dev/null
 	$p -d -p "Microsoft XPS Document Writer" >& /dev/null
 	$p -d -p "OneNote (Desktop)" >& /dev/null
 	$p -d -p "OneNote for Windows 10" >& /dev/null

	if IsVm; then
		echo "Configuring power settings for a virtual machine..."
		powercfg.exe /change standby-timeout-ac 0
		powercfg.exe /change monitor-timeout-ac 0
	fi

	echo "Coniguring network settings..."
	IsHypervVm && { powershell.exe Set-DnsClientGlobalSetting -SuffixSearchList "$(ConfigGet domain)" || return; } # Hyper-V clients do not get the DNS suffix from the DHCP server

	echo "Coniguring network adapters..."
	network adapter name "Bluetooth Network Connection" "bluetooth" >& /dev/null
	network adapter name "Ethernet0" "wired1" >& /dev/null
	network adapter name "Ethernet1" "wired2" >& /dev/null
	network adapter name "Ethernet2" "wired3" >& /dev/null
	network adapter name "Ethernet3" "wired4" >& /dev/null
	network adapter name "Wi-Fi" "wifi" >& /dev/null

	local workgroup="$(ConfigGet "workgroup")"
	if [[ $workgroup ]] && askp "Configure network for $workgroup"; then
		network workgroup set "$workgroup" || return
		[[ $(network profile list | wc -l) == 1 ]] && { network profile set "$(ProperCase "$workgroup")" || return; }
	fi
	
 	if askp "Configure taskbar icons"; then
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/ShowCortanaButton' REG_DWORD 0 || return
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/ShowTaskViewButton' REG_DWORD 0 || return
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Search/SearchboxTaskbarMode' REG_DWORD 0 || return
	 	taskbar reset --no-prompt --no-restart || return
	fi

	# enable change - move taskbar to left side
	ProcessKill explorer && start explorer

	# host specific
	case "$HOSTNAME" in
		oversoul) service demand sysmain;; # superfetch (sysmain) causes slugishness on oversoul
	esac

	return 0
}

WindowsConsole()
{
	header "Windows Console"

	local key="HKCU/Console"
	registry set "$key/ColorTable01" REG_DWORD 0 || return
	registry set "$key/ColorTable11" REG_DWORD 16776960 || return
	registry set "$key/ColorTable15" REG_DWORD 16777215 || return
	registry set "$key/FaceName" REG_SZ "Lucida Console" || return
	registry set "$key/FontFamily" REG_DWORD 54 || return
	registry set "$key/FontSize" REG_DWORD 1048586 || return
	registry set "$key/FontWeight" REG_DWORD 400 || return
	registry set "$key/QuickEdit" REG_DWORD 1 || return
	registry set "$key/QuickEditMode" REG_DWORD 1 || return
	registry set "$key/ScreenBufferSize" REG_DWORD 19660900 || return
	registry set "$key/ScreenColors" REG_DWORD 7 || return
	registry set "$key/WindowSize" REG_DWORD 2621540 || return # 2621540=100x40 3276964=164x50
}

WindowsDirectories()
{
	header "Windows Directories"

	makeDir "$WIN_ROOT/temp" || return

	makeDir "$pp/Applications/Other" || return
	makeDir "$pp/Development/Other" || return
	makeDir "$pp/Game/Other" || return
	makeDir "$pp/Media/Other" || return
	makeDir "$pp/Operating System/Other" || return
	makeDir "$pp/Surveillance/Other" || return

	makeDir "$up/Applications/Other" || return
	makeDir "$pp/Development/DotNet/Other" || return

	makeDir "$udata/app" || return
	makeDir "$WIN_HOME/$(GetFileName "$CODE")" || return
}

WindowsFonts()
{
	header "Windows Fonts"

	windowsFontInstall "MesloLGS NF" || return

	# Add Windows fonts to Ubuntu configuration
	local file="/etc/fonts/local.conf"
	if [[ ! -f "$file" ]]; then
		cat <<-EOF | sudo tee -a "$file"
			<?xml version="1.0"?>
			<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
			<fontconfig>
			    <dir>/mnt/c/Windows/Fonts</dir>
			</fontconfig>
		EOF
	fi

	return 0
}

windowsFont()
{
	! IsElevated && { RunScript --elevate --no-hide $verbose -- inst WindowsFont "${options[@]}" -- "$@"; return; }

	for file in "$@" "${otherArgs[@]}"; do
		findFile "fonts/$file" || return
		CopyDir "$file" "/tmp/fonts/" || return # fontreg.exe fails on network share in wsl 2
	done

	# install font
	pushd "/tmp/fonts" > /dev/null || return
	FontReg.exe /copy || return # requires elevation
	popd  >& /dev/null || return
	rm -fr "/tmp/fonts" >& /dev/null

	return 0
}

WindowsIcons()
{
	! IsPlatform win && return

	header "Windows Icons"

	makeLink --merge --hide "$winAppData/Fax" "$winDoc/Fax" || return
	makeLink --merge --hide "$winAppData/Scanned Documents" "$winDoc/Scanned Documents" || return

	mergeDir "$up/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$pp/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$up/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$up/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$pp/IIS" "$pp/Development/Other/IIS" || return
	mergeDir "$up/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/Applications/Accessories/System Tools" "$pp/Operating System" || return
	mergeDir --rename "$pp/Microsoft Silverlight" "$oo/Silverlight" || return

	mvSudo "$pd/Mac Files.lnk" "$pp/Operating System" >& /dev/null
	$mv "$pp/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Microsoft Edge.lnk" "$pp/Applications" || return
	$mv "$pp/OneDrive.lnk" "$up/Applications" || return
	$mv "$up/PC Health Check.lnk" "$pp/Operating System" || return
	
	$rm "$pd/Microsoft Edge.lnk" || return
	$rm "$ud/Microsoft Edge.lnk" || return
	$rm "$up/Microsoft Edge.lnk" || return
	$rm "$up/OneDrive.lnk" || return

	$rmd "$pp/Bluetooth Devices" || return
	$rmd "$up/Maintenance" || return
	$rmd "$WIN_HOME/3D Objects" || return

	$hideAndSystem "$pp/Applications/Accessories/Desktop.ini" || return
	$hideAndSystem "$pp/Applications/Accessories/Accessibility/Desktop.ini" || return

	# PowerShell
	mergeDir --rename "$up/Windows PowerShell" "$oo/PowerShell" || return
	mergeDir --rename "$pp/Windows PowerShell" "$oo/PowerShell" || return
	$hideAndSystem "$oo/PowerShell/desktop.ini" || return

	# 3rd party
	mergeDir "$pp/ICEpower" "$oo" || return	# Asus ZenBook laptop
	mergeDir "$pp/WizTree" "$oo" || return
	mergeDir "$pp/core Temp" "$oo" || return
	$rm "$ud/Core Temp.lnk" || return
	$rm "$ud/WizTree.lnk" || return
	$rm "$ud/bootstrap-"*".lnk" || return
}

WindowsPath()
{
	header "Windows Path"
	SetVar --system --path PATH "$PLATFORM_PATH" || return
}

WindowsPermissions()
{
	! IsPlatform win && return
	! IsElevated && { RunScript --elevate --no-hide $verbose -- inst WindowsPermissions "${options[@]}"; return; }

	header "Windows Permissions"

	GrantFullPermission "$psm" || return
	GrantFullPermission "$pd" || return
}

#################################################
# X Windows
#################################################

xClient() # 140MB
{
	header "X Client"
	pkg xauth dbus-x11 wmctrl x11-utils xclip || return # xauth enables ssh X11 forwarding
}

xServer()
{
	header "X Server"
	RunPlatform xServer || return
}

xServerMac() { xQuartzInstall || return; }
xServerWin() { if wsl supports x --quiet; then xWslInstall; else x410Install; fi; }

vcxsrvInstall()
{
	# https://sourceforge.net/projects/vcxsrv/
	run "platform/linux/X Windows/VcXsrv/vcxsrv-64.1.20.1.4.installer.exe" --pause || return

	mergeDir "$pp/VcXsrv" "$oo" || return
}

x410Install()
{
	# http://tlu.dl.delivery.mp.microsoft.com/filestreamingservice/files/d58e1ec4-93e0-419d-9087-b4b6140cec73?P1=1592686347&P2=402&P3=2&P4=UINsnvSEcuBjJQ1nWgwyab8CSRSOjheiHY2nIZlGQhKh9frMHHpM4v%2bgxSuXfpuueMtIyJYmmBg4CnBrrW5dpw%3d%3d
	# storeInstall "X410" "9NLP712ZMN9Q" || return
	run "platform/linux/X Windows/X410/setup/X410_StorePkg_2.8.2.0_x64.appx" || return

echot "\
	- check Allow Public Access
	- at the Windows Firewall prompt check Public"
}

xMingInstall()
{
	# http://www.straightrunning.com/XmingNotes/ http://www.straightrunning.com/candidate/
	run "platform/linux/X Windows/Xming/rel_x64_Xming-7-7-0-54-setup.exe" || return

	mergeDir "$pp/Xming" "$oo" || return
	$rm "$pd/XLaunch.lnk" || return
	$hide "$WIN_HOME/Xdefaults" || return
}

xpraInstall() # 332MB (Linux)
{
	# https://github.com/Xpra-org/xpra/wiki/Download
	if IsPlatform mac,win && [[ $force || ! -d "$P/Xpra" ]]; then
		run "platform/linux/X Windows/Xpra/setup/" -p "Xpra-x86_64.msi" "Xpra-x86_64.pkg" || return
	fi

	if IsPlatform win; then

		# install fonts
		windowsFontInstall "other/urw-bookman-l-light.ttf" "DejaVu Serif/DejaVuSerif.ttf" || return

		# disable sound forwarding -  https://www.xpra.org/trac/wiki/Sound
		local file="$ADATA/../Roaming/Xpra/xpra.conf" line="speaker = off"
		[[ -f "$file" ]] && ! grep -q "$line" "$file" && { echo "$line" >> "$file" || return; }

		# icons
		mergeDir "$pp/Xpra" "$oo" || return

		# use newer plink in $WIN
		[[ -f "$P/Xpra/Plink.exe" ]] && { RunScript --elevate rm "$P/Xpra/Plink.exe" || return; }

		# do not use Xpra server on Windows
		return 0
	fi

	if IsPlatform mac; then
		local file="$HOME/Library/Application Support/Xpra/xpra.conf"
		local line="ssh = ssh -Y"
		! grep -q "^${line}$" "$file" && { echo "$line" >> "$file" || return; }

		return 0
	fi

	# http://www.xpra.org/trac/wiki/Download#Linux
	if IsPlatform debian,ubuntu && ! InPath xpra; then
		pkg apt-transport-https || return
		wget -q "https://xpra.org/gpg.asc" -O- | sudoc apt-key add - || return
		sudo add-apt-repository "deb https://xpra.org/ $(os CodeName) main"
		sudo apt-get update || return
		pkg "xpra" || return
	fi

	# enable X sessions (configure DISPLAY and D-Bus) 
	local file="/etc/xpra/conf.d/60_server.conf" line="start = \/etc\/X11\/Xsession true"
	sudoc sed -i "s/^#${line}\$/${line}/" "$file" || return

	# disable XPRA D-Bus (causes D-Bus timeouts)
	local file="/etc/xpra/conf.d/60_server.conf" line="dbus-launch ="
	sudoc sed -i "s/^\(${line}.*\)/# \1/g" "$file" || return # comment all dbus-launch lines
	sudoc sed -i "s/^# ${line}\$/${line}/" "$file" || return # uncomment the line to disable D-Bus

	# disable sound forwarding - https://www.xpra.org/trac/wiki/Sound
	local file="/etc/xpra/conf.d/20_sound.conf"
	sudoc sed -i "s/^speaker = on\$/speaker = off/" "$file" || return

	return 0
}

xQuartzInstall()
{
	# https://www.xquartz.org/releases/index.html
	run "platform/linux/X Windows/XQuartz/XQuartz-2.8.1.dmg" || return	

	echot "\
- Preferences, Security, check Allow connections from network clients"
	PathAdd "/opt/X11/bin"
	xserver start || return
}

xWslInstall() { elevate wsl update; }

#################################################
# other
#################################################

OtherAll() { i discord stamps; }

DiscordInstall()
{
	header "Discord"

	# https://discordapp.com/download
	run "other/Discord/" -p "DiscordSetup.exe" "Discord.dmg" "discord-0.0.9.deb" || return

	mergeDir "$up/Discord Inc" "$up/Applications/Other" || return
	$rm "$ud/Discord.lnk" || return
	registry delete "urun/Discord" # C:\Users\jjbutare\AppData\Local\Discord\app-0.0.305\Discord.exe --start-minimized
}

HostnameInstall()
{
	IsDocker && return # Docker hostname must be set in the containers config.vs.json

	! UpdateNeeded "HostnameChanged" && return

	os name set
	case $? in
		0) # name changed
			UpdateDone "HostnameChanged" || return
			SleepStatus "Rebooting in 5 seconds" 5 || return
			power reboot; return;;
		1) UpdateDone "HostnameChanged"; return;; # name unchanged
		2) return 1;; # error
	esac
}

StampsInstall()
{
	header "Stamps.com"
	run "other/stamps/Stamps.com.Connect.exe" --elevate || return

	if IsPlatform win; then
		registry 32 delete "run/Stamps.com" # C:\Program Files (x86)\Stamps.com Connect\StampsPlugin.exe a
		mergeDir "$pp/Stamps.com Connect" "$pp/Applications/Other" || return
		$rm "$pd/Launch Stamps.com Connect.lnk" || return
	fi

	return 0
}

ScriptRun "$@"