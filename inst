#!/usr/bin/env bash
. script.sh || exit
. color.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Programs installation.

	install	[APP]...		install applications
	list								list all applications"
}

init() { defaultCommand="install" hostname="$HOSTNAME"; unset sshAgentChecked; }

#
# commands
#

listCommand() { declare -f | grep --basic-regexp '.*Install () ' | cut -d" " -f1 | sed "s/Install//" | grep -v "^$" | sort --ignore-case; }

#
# install command
#

installUsage()
{
	EchoWrap "\
Usage: $(ScriptName) install [alternate|beta|compile|local|package|store] [OPTION]... [APP]...
Install an application.  To run a portion of the installation, the application name can be suffixed with download, final, help, profile, or register.  For example, 'inst SublimeProfile'.

	     --hint=DIR				first directory to search for installation files
	-H,  --host=HOST			comma separated list of hosts for the installation
	-nh, --no-header	   	suppress headers
	-np, --no-prompt	   	suppress interactive prompts
	-s,  --select					select the install location"
}

installArgStart() { unset -v apps hint hostArg hostOpt hosts installType noHeader noHelp npProfile noPrompt noRegister noRun select; }

installOpt() 
{
	case "$1" in
		--hint) ScriptOptGet "hint" "$@"; export INSTALL_DIR="$hint"; hint=(--hint "$hint");;
		--host|--host=*|-H|-H=*) ScriptOptGet hostArg host "$@";;
		--no-header|-nh) noHeader="--no-header";;
		--no-help) noHelp="--no-help";;
		--no-profile) noProfile="--no-profile";;
		--no-prompt|-np) noPrompt="--no-prompt";;
		--no-register) noRegister="--no-register";;
		--no-run|-nr) noRun="--no-run";;
		--select|-s) select="--select";;
		*) return 1
	esac
}

installArgs() { apps=("$@"); shift="$#"; }

installCommand() { installDo; }
installAlternateCommand() { installType="alternate"; installDo; }
installBetaCommand() { installType="beta"; installDo; }
installCompileCommand() { installType="compile"; installDo; }
installLocalCommand() { installType="local"; installDo; }
installPackageCommand() { installType="package"; installDo; }
installStoreCommand() { installType="store"; installDo; }

installDo() { installInit && i $noPrompt "${apps[@]}"; }

installInit()
{
	ScriptEval HostGetInfo --detail || return

	# other
	oo="$pp/Operating System/Other"
	setupFiles="$_data/setup"	

	# arguments
	options=($force $noPrompt $noRun $quiet $verbose "${hint[@]}")
	verboseInstaller=""; [[ $verbose ]] && verboseInstaller="-verbose"

	# commands
	cp="FileCommand cp"
	cpDir="CopyDir --recursive"
	firewall="firewall --suppress"
	hide="FileHide"
	hideAndSystem="FileHideAndSystem"
	makeShortcut="MakeShortcut"
	mv="FileCommand mv"
	ren="FileCommand ren"
	rm="${G}rm -f"
	rmd="${G}rm -fr"

	# export
	export PLATFORM_PATH="$(GetFullPath "$DATA/platform/$PLATFORM_OS")" # GetFullPath resolves links

	# aliases
	declare -Ag aliases=(
		[adk]="WindowsAssessmentAndDeploymentKit"
		[ahk]="AutoHotKey"
		[avahi]="mDns"
		[bb]="BorgBackup"
		[be]="BalenaEtcher"
		[borg]="BorgBackup"
		[brew]="HomeBrew"
		[btt]="BetterTouchTool"
		[bc]="BeyondCompare"
		[bcc]="BeyondCompareConfig"
		[cc]="CreativeCloud"
		[cctray]="CruiseControlTray"
		[code]="VisualStudioCode"
		[consul]="ConsulCli"
		[cts]="ConsulTemplateService"
		[ddm]="DellDisplayManager"
		[dnsserver]="bind"
		[dhcpserver]="kea"
		[epson]="epson4760"
		[filelocator]="FileLocatorPro"
		[fusion]="VmwareFusion"
		[FsviewInstall]="FastStoneImageViewer"
		[ge]="nVidiaGeForceExperience"
		[GeForceExperience]="nVidiaGeForceExperience"
		[gfw]="GitForWindows"
		[gk]="GnomeKeyring"
		[gh]="GitHub"
		[hstart]="HiddenStart"
		[hv]="hyperv"
		[icue]="CorsairUtilityEngine"
		[karabiner]="KarabinerElements"
		[lb]="LoadBalancer"
		[lo]="LogitechOptions"
		[lop]="LogitechOptions"
		[etcher]="BalenaEtcher"
		[ff]="firefox"
		[ghub]="LogitechGhub"
		[named]="bind"
		[nomad]="NomadCli"
		[vault]="VaultCli"
		[hasscli]="HomeAssistantCli"
		[hass]="HomeAssistantServer"
		[hassintegrations]="HomeAssistantIntegrations"	
		[npp]="NotepadPp"
		[op]="1Password"
		[opc]="1PasswordCli"
		[pa]="PartitionAssistant"
		[parallels]="ParallelsDesktop"
		[ps]="PowerShell"
		[rg]="ripgrep"
		[ss]="SqlServer"
		[sshkeys]="SshServerHostKeys"
		[ssms]="SqlServerManagementStudio"
		[textutilities]="PythonTextUtilities"
		[tftpc]="TftpClient"
		[tftps]="TftpServer"
		[ufw]="UncomplicatedFirewall"
		[vmw]="VmwareWorkstation"
		[vs]="VisualStudio"
		[vsc]="VisualStudioCode"
		[vse]="VisualStudioExtensions"
		[vscode]="VisualStudioCode"
		[winconfig]="WinConfiguration"
		[wmp]="WindowsMediaPlayer"
		[wt]="WindowsTerminal"
		[yubikey]="YubiKeyManager"
	)

	# force elevation
	elevateInstall=(GitForWindows win WinPermissions)

	# isInstallable	
	all=(download final register)
	all+=(AppDir bash duf envoy hostname jq magic NetbootxyzTftpServer PartitionManagement timezone zsh ZshProfile)	
	debian=(audacity bind ChronyServer cron CronLog DnsServer DhcpServer kea KeaService mDns SaltMinion SystemUser terminator)
	debian64=() debianWin=()
	mac=(amphetamine AppleConfigurator batteries bear Calendar366 CanaryMail CarrotWeather DayOne DiskInventortyX HomeAssistant iTerm KarabinerElements LiveDesktop Magnet MakrdownView pcalc rectagle spark speedtest SystemToolkit WallpaperWizard xcode XcodeCli XQuartz yoink)
	macDebian=(BalenaEtcher bat bc btop chrony colorls DotNet Dropbox DropboxDownload docker etcher exa fzf ghq gnupg NetbootxyzDocker passh PiDiskImager RpiBoot ruby RubyAsdf RubyPackage RubyRvm StandardNotes SublimeMerge tmux thunderbird unison)
	macWin=(BlueSherpa BrotherPrinter calibre CleanMyMac CreativeCloud cricut deezer DuetDisplay edge firefox fork garmin iExplorer keybase loom miro notion nVidia PdfElement plex quicken qvr slack sonos spotify SurveillanceStation VisualStudio VisualStudioExtensions xpra xServer zoom)
	pi=()
	win=(AjaSystemTest backupper bonjourSdk CoreTemp CorsairUtilityEngine cpuz DiskImager EdgeDeflector FileLocatorPro GigabyteMotherboard HardwareMonitor HiddenStart HiddenStartConfigure Hp9020 iCloud kindle KindleDrm vcxsrv WinScp xMing AjaSystemTest CPUZ DiskImager hyperv HiddenStart java LgMonitor MarkdownView NitroPdf nVidiaDriver nVidiaGeForceExperience OneDrive pa PartitionAssistant PowerPanel PowerrToys QuickBooks RealtekCardReader stamps SystemInternals TemperatureLogger Todoist UupDump Wallpaper4k WslConfig x410 xMing)
	winElevated=(HiddenStart HiddenStartConfigure MaxTo NoMachine SystemUser UltraMon)
	
	# Android
	win+=(AndroidIcon BlueStacks)

	# Apache
	macDebian+=(apache ApachePhp ApacheDocker ApacheDockerConfig)

	# browser
	macDebian+=(chrome firefox tor)
	
	# database
	macDebian+=(mysql MySqlWorkbench)
	win+=(SqlPrompt SsmsBoost)

	# development	
	macDebian+=(fiddler gcc JetBrains just postman VisualStudioCode)
	win+=(CruiseControlTray LinqPad MarkdownView)

	# File Comparison
	macDebian+=(BeyondCompare BeyondCompareConfig delta)

	# game
	debianWin+=(steam)
	macWin+=(origin)
	win+=(GameIcon EpicGames oculus steam uplay)

	# Git
	all+=(gitClient gitServer)
	mac+=(gitx)
	macDebian+=(GitHub GitKraken GitKrakenDownload)
	macWin+=(lazygit)
	win+=(GitExtensions GitForWindows)

	# Go
	macDebian+=(go cheat curlie)

	# Hardware
	mac+=(BetterDisplay DisplayLink)
	macWin+=(BlueSherpa BrotherPrinter CanonCamera CrealitySlicer DasKeyboard DellDisplayManager DoxieGo dymo Epson4760 IntuosPro LogitechGhub LogitechOptions)
	win+=(EpsonScan HardwareMonitor Hp920 LgMonitor LogitechBolt MsiCreatorCenter MsiSilentOption PowerPanel RealtekCardReader qFlipper)

	# Haskell
	macDebian+=(haskell bench)

	# HashiCorp
	macDebian+=(HashiUpdate HashiProgram ConsulProgram VaultProgram NomadProgram)
	macDebian+=(HashiCli ConsulCli NomadCli VaultCli)
	macDebian+=(HashiServer ConsulServer NomadServer VaultServer HashiServerUpdate ConsulServerUpdate NomadServerUpdate VaultServerUpdate)
	macDebian+=(HashiUp ConsulDocker ConsulK8s ConsulTemplate ConsulTemplateService damon NomadServerTools sockaddr wander)

	# Home Automation
	debian+=(HomeAssistant HomeAssistantServer HomeAssistantIntegrations HomeAssistantNomad)
	debian+=(homebridge HomebridgeFfmpeg HomebridgeWiggin)
	debian+=(mosquitto PoolController PoolDashPanel PoolTemperature)
	mac+=(homie)
	macDebian+=(HomeAssistantCli)

	# Intel
	win+=(intel IntelChipset IntelDrivers IntelDriverUpdate IntelExtremeTuning IntelStorageManagement IntelThunderboltDriver IntelThunderboltControlCenter)

	# Java
	macDebian+=(eclipse java jre jdk)
	debian+=(OpenJdk tomcat)

	# Kubernetes
	macDebian+=(k3s kubectl lens minikube)

	# Linux
	debian+=(chroot cups dbus rsyslog)
	macDebian+=(gpg)

	# Microsoft
	all+=(WindowsDownload)
	macWin+=(AzureCli AzureDataStudio AzureFunctions PowerShell teams TeamsWork office skype TfsCli VisualStudio)
	win+=(IIS PowerToys SystemsInternal WindowsAdministrationTools WindowsAssessmentAndDeploymentKit WindowsStore)

	# Nginx
	all+=(NginxProxyManagerNomad)
	macDebian+=(nginx NginxProxyManagerDocker)

	# network
	debian+=(CloudInit DomotzAgent keepalived mDNS mtr NetbootxyzDocker NetbootxyzTftpServer pivpn TftpClient TftpServer UncomplicatedFirewall)
	mac+=(proxifier)
	macDebian+=(JumpCloud MozillaVpn unifi)
	macWin+=(domotz WireGuard WireShark)
	ubuntu+=(NicUsb StaticIp)
	win+=(GlassWire Ninite NordVpn Tribler)

	# Node.js
	debian+=(NodeRed)
	macDebian+=(node fx gtop nvm)

	# Package Management
	debian+=(apt AptUtilities flatpak nala snap SnapStore)
	macDebian+=(asdf homebrew)
	win+=(chocolatey WinGet)

	# Python
	all+=(pip pipx python PythonLocal PythonGlobal PythonTextUtilities cowsay figlet fortune httpie lolcat stui)
	debian64+=(PythonDeadsnakes)
	macDebian+=(PythonAsdf Python3.10 Python3.11)
	macDebianQnap+=(BorgBackup certbot DockerCompose GitUp glances vorta)

	# QNAP
	qnap=(asdf qcli)
	macWin+=(qnap Qfinder QnapExternalRaidManager)

	# Raspberry Pi
	piKernel=(PiConfig PiFirmware PiGpio PiI2c PiOverclock PiOneWire PiPinout PiReporter PiSpi PiUps PiWifi)

	# Remote Desktop
	mac+=(AppleRemoteDesktop MicrosoftRemoteDesktop)
	macDebian+=(NoMachine TeamViewer TigerVNC TurboVNC)
	macWin+=(JumpDesktop)

	# Rust
	all+=(fd)
	macDebian+=(rust broot choose dog dust gping just mcfly procs ripgrep)

	# security
	all+=(CredentialStore)
	debian+=(cfssl GnomeKeyring LastPass)
	macDebian+=(1Password 1PasswordCli AxCrypt certbot pass VeraCrypt YubiKeyManager)
	macWin+=(AxCrypt)
	win+=(Dashlane pGina)
	winElevated+=(SystemUser)

	# Server Applications
	debian+=(LoadBalancer VpnServer)

	# Text Editor
	debian+=(geany micro)
	mac+=(bear) 
	macDebian+=(obsidian sublime)
	win+=(notepadpp)

	# Utility - GUI
	all+=(wallpaper)
	mac+=(AltTab alfred aptivate bartender BetterTouuchTool flux KarabinerElements lingon shottr SoundSource)
	macDebian+=(7zip fuse)
	macWin+=(greenshot)
	win+=(AltTabTerminator AutoHotKey CloseAllWIndows DreamAquarium EdgeDeflector LinkShellExtension RightClickEnhancer TaskLayout TidyTabs)

	# Virtualization
	debian+=(HypervLinuxTools VmwareLinuxTools)
	mac+=(ParallelsDesktop VmwareFusion)
	macDebian+=(docker portainer VirtualBox VmwareWorkstation)
	win+=(ProxmoxWinTools)

	# Window Layout
	mac+=(moom rectangle)
	win+=(AquaSnap MaxTo Mosaico UltraMon WinSplit)

	# X Windows
	debian+=(xClient xServer xpra)
	
	# exclude
	notArm=(BeyondCompare GitKraken homebrew)
	notArm32=(1Password)
	notMacArm=(chrony)
	notPi=(sublime)
	notWin=(certbot snap SnapStore)
	notWinArm=(exa)
}

askp() { [[ $noPrompt ]] && { echo "$1..."; return; }; ask "$1"; } # askp MESSAGE - ask a question if prompting
couldNotLocate() { ScriptErr "could not locate '$app'"; return 1; }
getFile() { curl --silent --location --output "$@"; }
getFileSudo() { sudo curl --silent --location --output "$@"; }
httpsOpen() { local url="$1"; [[ ! $url ]] && return; IsInteger "$url" && url="https://$(GetIpAddress --wsl):$url"; echo "Opening $url..."; browser "$url"; }
httpShow() { local url="$1"; [[ ! $url ]] && return; IsInteger "$url" && url="http://$(GetIpAddress --wsl):$url"; echo "URL: $url"; }
httpsShow() { local url="$1"; [[ ! $url ]] && return; IsInteger "$url" && url="https://$(GetIpAddress --wsl):$url"; echo "URL: $url"; }
isMacStoreId() { IsPlatform mac && IsInteger "$1"; }
macAppConfigure() { askp "Configure $1" && { macAppOpen "$1" || return; }; return 0; }
macAppOpen() { open -a "$1" || return; pause; }
makeFileSudo() { local file="$1" dir="$(GetFilePath "$1")"; makeDir --sudo "$dir" || return; [[ ! -f "$dir" ]] && { sudo touch "$file" || return; }; }
makeLinkSudo() { sudoc MakeLink --suppress $quiet $noPrompt "$@"; }
mergeDir() { MergeDir --parents --suppress "$@"; }
minimalInstall() { [[ $_minimalInstall ]]; }
moveAppData() { local src="$1" dest="${2:-$1}"; makeLink --merge --hide "$(platformUserAppData)/$dest" "$DOC/$src"; }
mvSudo() { [[ ! -e "$1" ]] && return; sudoc mv "$1" "$2"; }
pausep() { [[ $noPrompt ]] && return; pause; } # pausep - pause if prompting
pkg() { package --quiet "$@"; }
platformUserAppData() { local d; d="$(GetPlatformVar "UDATA")/app" && makeDir "$d" && echo "$d"; }
rebootIfNeeded() { [[ ! $rebootNeeded ]] && return; rebootDo; }
rebootDo() { SleepStatus "Rebooting in 10 seconds" 10 && power reboot; }
registryDo() { ! CanElevate && return; registry "$@"; }
rmSudo() { [[ ! -f "$1" ]] && return; sudoc ${G}rm -f "$1"; }
serviceAutoStart() { service auto "$1" && service start "$1"; }
serviceDemandStop() { service demand "$1" && service stop "$1"; }
servicesDemandStop() { local s; for s in "$@"; do serviceDemandStop "$s" || return; done; }
serviceDisableStop() { service disable "$1" && service stop "$1"; }
sshAgentCheck() { [[ $sshAgentChecked ]] && return; SshAgentConf --quiet "${globalArgs[@]}" && sshAgentChecked="true"; }
sshRun() { sshAgentCheck && RunLog ssh "$@"; }
sshRunInteractive() { sshAgentCheck && RunLog SshHelper "$1" --credentials "${globalArgs[@]}" -- "${@:2}"; }
waitForInstall() { [[ ! $ran ]] && return; local args=(--quiet); [[ $verbose ]] && unset args; FileWait --no-cancel "${args[@]}" "$1" || { ScriptErr "installation did not complete"; return; }; }
waitForInstallWin() { ! IsPlatform win && return; waitForInstall "$1"; }

appIsInstalled()
{
	local app="$1"; isInstallable "$app" || return # app is not installed if it is not installable on this platform
	local appHelper="$1"; [[ "$app" == @(1Password) ]] && appHelper="${app}Helper"
	! InPath "$appHelper" || $appHelper IsInstalled
}

checkInstallable()
{
	local app="$1"

	isInstallable "$app" && return
	[[ ! $quiet && ! $isRegistering ]] && echo "$(ScriptName): '$app' is not installable on $(PlatformSummary)"
	return 1
}

# copyLocal FILE - copy a file or directory to the local drive, returns the local file or directory
copyLocal()
{
	local file="$1" t="$(PlatformTmp)"

	# logging
	log1 "copying '$(GetFileName "$file")' to '$t'..."

	# copy directory or file
	if [[ -d "$file" ]]; then
		CopyDir --recursive "$file" "$t" &> /dev/stderr || return
	else
		CopyFileProgress "$file" "$t"  >& /dev/stderr || return
	fi

	echo "$t/$(GetFileName "$file")"
}

findCompareProgram()
{
	unset args name program
	BeyondCompare IsInstalled && { name="bc" program="BeyondCompare"; return; }
	InPath meld && { name="meld" program="meld"; return; }
	InPath kompare && { name="kompare" program="kompare"; return; }
	return 1
}

findEditorProgram()
{
	unset args program
	sublime IsInstalled && { program="sublime" args="-w"; return; }
	program="$(GetTextEditor)"
}

findFile()
{
	local quiet; [[ "$1" == @(-q|--quiet) ]] && { quiet="true"; shift; }
	local pattern; file="$1"

	(isMacStoreId "$file" || IsUrl "$file" ) && return 0

	if IsWild "$file"; then
		GetFileName "$file" pattern || return
		GetFilePath "$file" file || return
	fi

	if ! ScriptEval FindInstallFile $select --suppress --eval --quiet "${hint[@]}" "$file"; then
		[[ ! $quiet ]] && ScriptErr "could not locate ${1:-the installation directory}"
		return 1
	fi

	hint=(--hint "$installDir"); export INSTALL_DIR="$installDir"
	[[ $pattern ]] && { SelectFile "$file" "$pattern" || return; }
	return 0
}

extractFiles()
{
	local dir="$1"
	pushd "$dir" >& /dev/null || return

	local file files; IFS=$'\n' ArrayMake files "$(fd --max-depth=1 '\.(bz2|gz|tar|tgz|zip)$')"
	for file in "${files[@]}"; do

		# rename .tar.gz files to tgz for easier handling
		if [[ "$file" =~ (.tar.gz$) ]]; then
			local fileNew="$(GetFileNameWithoutExtension "$file" | GetFileNameWithoutExtension).tgz"
			mv "$file" "$fileNew" || return; file="$fileNew"
		fi
		
		# extract
		echo "Extracting $file..."		
		case "$(GetFileExtension "$file")" in
			gz) gunzip "$file" --to-stdout > "$(GetFileNameWithoutExtension "$file")" || return;;
			tar) tar --file "$file" --extract --to-stdout > "$(GetFileNameWithoutExtension "$file")" || return;;
			bz2|tar|tgz) tar --file "$file" --extract --auto-compress --to-stdout "$file" > "$(GetFileNameWithoutExtension "$file")" || return;;
			zip) unzip -p "$file" \* -x '*.sig' > "$(GetFileNameWithoutExtension "$file")" || return;;
		esac
		rm -f "$file" || return
	done

	popd >& /dev/null
	return 0
}

# getArch IA64 ARM64 ARM32
getArch()
{
	local ia64="$1" arm64="$2" arm32="$3"

	local arch="$ia64"
	IsPlatformAll arm,64 && arch="$arm64"
	IsPlatformAll arm,32 && arch="$arm32"
	echo "$arch"
}

# getElevate YES NO
getElevate() { CanElevate && echo "$1" || echo "$2"; }

# getInstallFunction APP - find the function used to install the specified application
# - The function will have the name appInstall
# - A case insensitive search of all functions is performed, i.e. the app xming will match the function xMingInstall
# - the actual install function name is returned, i.e. xMingInstall
getInstallFunction()
{
	local app="${1,,}"

	# alias lookup
	[[ ${aliases[$app]} ]] && app="${aliases[$app]}"

	# find the install function (with Install suffix)
	declare -f | grep -iE "^${app}Install \(\) $" | sed "s/ () //"
	return ${PIPESTATUS[1]}
}

header()
{
	installDesc="$1"
	[[ $noHeader ]] && return
	HeaderBig "$installDesc"
}

# i [--no-header] [--no-prompt] APPS - install applications
i()
{
	local args=() noHeaderArg="$noHeader" noPromptArg="$noPrompt" prompt

	# arguments
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-nh|--no-header) noHeaderArg="--no-header";;
			-np|--no-prompt) noPromptArg="--no-prompt";;
			*) args+=("$1")
		esac
		shift
	done
	set -- "${args[@]}"

	[[ ! $noPromptArg ]] && (( $# > 1 )) && prompt="true"

	# install applications
	while (($# != 0 )); do		
		local app="$1"; shift

		[[ ! $app ]] && { ScriptErr "application not specified"; return 1; }
		local appCheck="${app,,}" suffix

		# check for suffix
		[[ "$appCheck" =~ .download$ && "$appCheck" != "download" ]] && { suffix="Download"; }
		[[ "$appCheck" =~ .final$ && "$appCheck" != "final" ]] && { suffix="Final"; }
		[[ "$appCheck" =~ .help$ ]] && { suffix="Help"; }
		[[ "$appCheck" =~ .profile$ ]] && { suffix="Profile"; }
		[[ "$appCheck" =~ .register$ ]] && { suffix="Register"; }
		[[ $suffix ]] && appCheck="$(RemoveEnd "$appCheck" "${suffix,,}")"

		# find the name of the function used to install the application without the Install suffix, i.e. xMing
		local appFunction; appFunction="$(getInstallFunction "$appCheck")" || { ScriptErr "'$app' installation does not exist"; return 1; }
		appFunction="$(RemoveEnd "$appFunction" "Install")"

		# ensure the application is installable for the current platform
		! checkInstallable "$appFunction" && continue

		# variables
		unset ran runCheck rebootNeeded

		# elevate install
		if IsInArray --case-insensitive "${appFunction}" elevateInstall && CanElevate && ! IsElevated; then
			RunScript --elevate --no-hide "${globalArgs[@]}" -- inst "$app" "${options[@]}" || return
			continue
		fi

		# run a portion of the install
		if [[ $suffix ]] ; then
			iPortion "${suffix}" || return

		# run the app install
		elif [[ ! $prompt ]] || ask "\nInstall $appFunction"; then
			iPortion "Install" || return
			[[ ! $force && ! $runCheck ]] && continue # return if we did not try and run an install 
			{ iPortion "Final" && iPortion "Profile" && iPortionRegister "Register" && iPortion "Help"; } || return
		fi

	done
}

# iPortion PORTION - run a portion of the application install
iPortion()
{
	local portion="$1"
	local -n no="no${portion^}"; [[ $no ]] && return 			# return if the --no-PORTION option was used
	local noHeader="$noHeaderArg" noPrompt="$noPromptArg" # don't run as prefix, interferes with local variables later
	RunFunction "${appFunction}${portion}" || return 			# run the portion
	noHeader="$noHeaderArg" noPrompt="$noPromptArg" RunPlatform "${appFunction}${portion}"; # run the platform specific portion
}

iPortionRegister() { [[ $noRegister ]] && return; iPortion "Register";  }

isInstallable()
{
	local check="${1,,}"

	# process exclusions first
	IsInArray -ci "$check" notArm && IsPlatform arm && ! IsPlatform mac,win && return 1
	IsInArray -ci "$check" notArm32 && IsPlatformAll arm,32 && return 1
	IsInArray -ci "$check" notMacArm && IsPlatformAll mac,arm && return 1
	IsInArray -ci "$check" notPi && IsPlatform pi && return 1
	IsInArray -ci "$check" notWin && IsPlatformAll win && return 1
	IsInArray -ci "$check" notWinArm && IsPlatformAll win,arm && return 1
	IsInArray -ci "$check" winElevated && IsPlatform win && ! CanElevate && return 1

	# app name checks
	[[ "$check" =~ ^(.*all|app.*|bootstrap.*|hashi.*|.*core|ssh.*)$ ]] && return
	[[ "$check" =~ ^(debian.*)$ ]] && IsPlatform debian && return
	[[ "$check" =~ ^(linux.*)$ ]] && IsPlatform linux,mac,win && return
	[[ "$check" =~ ^(mac.*)$ ]] && IsPlatform mac && return
	[[ "$check" =~ ^(ubuntu.*)$ ]] && IsPlatform ubuntu && return
	[[ "$check" =~ ^(win.*|SqlServer.*)$ ]] && IsPlatform win && return

	# platform list checks
	IsInArray -ci "$check" all && return
	IsInArray -ci "$check" debian && IsPlatform debian && return
	IsInArray -ci "$check" debian64 && IsPlatformAll debian,64 && return
	IsInArray -ci "$check" debianWin && IsPlatform debian,win && return
	IsInArray -ci "$check" mac && IsPlatform mac && return
	IsInArray -ci "$check" macDebian && IsPlatform mac,debian && return
	IsInArray -ci "$check" macDebianQnap && IsPlatform mac,debian,qnap && return
	IsInArray -ci "$check" macWin && IsPlatform mac,win && return
	IsInArray -ci "$check" pi && IsPlatform pi && return
	IsInArray -ci "$check" piKernel && IsPlatform PiKernel && return
	IsInArray -ci "$check" qnap && IsPlatform qnap && return
	IsInArray -ci "$check" ubuntu && IsPlatform ubuntu && return
	IsInArray -ci "$check" win && IsPlatform win && return

	return 1
}

# iStore APPS - install store applications
iStore()
{
	while (($# != 0 )); do		
		local app="$1"; shift
		run --store "$app" || return
	done
}

makeDir()
{
	# arguments
	local dir dirs=() owner shift sudo
	while (( $# != 0 )); do
		local shift=1
		[[ "$1" == @(-s|--sudo) ]] && { sudo="sudo"; shift; continue; }
		[[ "$1" == @(-o|--owner) ]] && { ScriptOptGet "owner" "$@"; shift "$shift"; continue; }
		IsOption "$1" && UnknownOption "$1" "makeDir"
		dirs+=("$1"); shift
	done

	# make directories
	for dir in "${dirs[@]}"; do

		# make directory
		! [[ -d "$dir" ]] && { RunLog $sudo ${G}mkdir --parents "$dir" || return; }

		# change ownership
		if [[ $owner ]]; then
			RunLog $sudo chown --recursive "$owner:$owner" "$dir" || return
		fi

	done
}

makeLink()
{
	local dir="$(GetFilePath "${@: -1}")"
	
	# only make links on mounted drives, i.e. Parallels $HOME/Documents is a network drive and is not mounted
	! drive IsMounted "$dir" && return

	MakeLink --suppress $quiet $noPrompt "$@"; 
}

# register APP - enter the registration information for an application
register()
{
	local app="$1"; { ! appIsInstalled "$app" || [[ $noPrompt ]]; } && return

	# skip registration if a remote credential manager is not installed
	credential manager status --manager=remote --quiet || { [[ ! $quiet ]] && ScriptErr "register: remote credential manager is not available"; return; }

	# message
	local app="$1"
	message="Register '$app' with the contents of the clipboard"
	[[ $noPrompt ]] && { hilight "$message..."; } || { ! ask "$message" && return; }

	# get registration
	local registration; registration="$(credential get --fallback $app registration)" || return
	clipw "$registration" || return

	# start the application
	app "$app" && pause
}

# run [PROGRAM] - run an installation program
run() 
{
	# arguments
	local args=() cd copyLocal dest header elevate name noInstallCheck p pause rename type="extension" version

	while (( $# != 0 )); do
		local shift=1
		case "$1" in
			"") : ;;
			--) shift; args+=("$@"); shift "$#"; break;;

			--docker) type="docker"; [[ ! "$dest" ]] && dest="$SRV";;
			--executable) type="executable";;
			--homebrew) type="homebrew";;
			--go) type="go";;
			--haskell) type="haskell";;
			--node) type="node";;
			--nomad) type="nomad";;
			--package) type="package";;
			--python) type="python";;
			--python-global) type="pythonGlobal";;
			--ruby) type="ruby";;
			--rust) type="rust";;
			--snap) type="snap";;
			--store) type="store";; 

			--cd) cd="--cd";;
			--copy-local) copyLocal="--copy-local";;
			--copy-local-win) IsPlatform win && copyLocal="--copy-local";;
			--dest|--dest=*|-d|-d=*) ScriptOptGet "dest" "$@";;
			--header|--header=*|-h|-h=*) ScriptOptGet "header" "$@";;
			--elevate) IsPlatform win && elevate="--elevate";;
			--name|--name=*|-n|-n=*) ScriptOptGet name "$@" || return;;
			--no-header|-nh) local noHeader="--no-header";;
			--no-install-check) noInstallCheck="--no-install-check";;
			--no-pause) unset pause;;
			--pause) pause="--pause";;
			--rename) rename="--rename" copyLocal="--copy-local";; # must copy for rename so we do not impact the original file
			--version|--version=*) ScriptOptGet version "$@" || return;;
			*)
				if ! IsOption "$1" && [[ ! $p ]]; then p="$1"
				else UnknownOption "$1"
				fi
		esac
		shift "$shift"
	done

	[[ ! "$p" ]] && { MissingOperand "program" "run"; }
	(( $# != 0 )) && { ExtraOperand "$@"; return 1; }
	[[ ! "$dest" ]] && dest="$P"

	# version check
	local forceVersion; [[ $version && ! $force ]] && { versionCheck "${name:-$header}" "$version" && return; forceVersion="true"; }

	# variables
	local platform; unset ran

	# get file for platform if the program p is in the format PATH/WIN_FILE|MAC_FILE|LINUX_FILE
	local file="$(GetFileName "$p")"

	local files=(); StringToArray "$file" "|" files; set -- "${files[@]}"
	if (( $# > 1 )); then
		case "$PLATFORM_OS" in win) file="$1";; mac) file="$2";; linux) file="$3";; esac
		p="$(GetFilePath "$p")/$file"
		[[ ! $file ]] && { ScriptErr "No program specified for '$(PlatformDescription)' platform."; return 1; }
	fi

	# infer name
	if [[ ! $name ]]; then 
		[[ "$type" == @(executable) ]] && name="$(GetFileName "$p")"
		[[ "$type" == @(package|python|pythonGlobal|ruby|store) ]] && name="$p"
	fi

	# infer mac store install
	isMacStoreId "$p" && type="store"

	# show header	
	if [[ $header ]]; then header "$header"
	elif [[ $name ]]; then header "${name^}"
	fi

	# return if not running installations
	[[ $noRun ]] && return;

	# return if the program is installed
	if [[ ! $force && ! $noInstallCheck ]]; then
		[[ "$type" == @(go|python|pythonGlobal|ruby) ]] && InPath "$p" && return
		[[ "$type" == @(executable) ]] && InPath "$name" && return
		[[ "$type" == @(package) ]] && PackageInstalled "$p" && return
	fi

	# prompt to run the installation
	runPrompt "$p" "$name" || return 0

	# run specified installation type
	RunFunction "runType" "$type" -- "$p" "$name" "$dest" "${args[@]}" || return
	ran="true"

	# cleanup
	[[ $pause ]] && pause "When the installation has finished press any key..."

	return 0
}

# runType: docker extension package python pythonGlobal ruby snap store
runTypePackage() { package --quiet "$1"; }

# runTypeDocker PROGRAM NAME DEST [--swarm] - run a Docker setup program
runTypeDocker()
{
	local p="$1" name="$2" dest="${3:-$SRV}"; shift 3
	local useCompose; [[ "$1" == "--compose" ]] && useCompose="true"

	dockerCheck || return

	# locate the compose file	
	if ! IsUrl "$p" && ! [[ -f "$(CloudGet --quiet "$p")" ]]; then
		local file		
		if ! file="$(CloudGet --quiet "$(ConfigGet confDir)/docker/compose/$p")" && ! findFile --quiet "shareware/Docker/image/$p"; then
			ScriptErr "unable to locate '$(GetFileName "$p")' Docker compose YAML file"; return 1
		fi
		p="$file"
	fi

	# create the application directory
	local app="$name"; [[ ! $app ]] && app="$(GetFileNameWithoutExtension "$p" | RemovePort)"
	local appDir="$dest/$app"
	makeDir --sudo "$appDir" || return

	# copy the compose file to the application directory
	local composeFile="$appDir/docker-compose.yml"
	if [[ ! -f "$composeFile" || $force ]]; then
		if IsUrl "$p"; then
			sudoc curl -L "$p" -o "$composeFile" || return
		else
	 		sudoc cp "$p" "$composeFile" || return
	 	fi
	fi
	
	# install - compose	
	if [[ $useCompose ]] || ! IsPlatform swarm; then

		# pull the service images
		cd "$appDir" || return
		docker-compose pull || return

		# create and start the containers
		docker-compose up -d || return

	# install - swarm
	else
		docker stack deploy -c "$composeFile" "${app,,}" || return

	fi
}

# runTypeExecutable DIR NAME- find an executable for the current platform in the passed directory.
# The executable is copied to /usr/local/bin/NAME.
runTypeExecutable()
{
	# arguments
	local dir="$1" name="${2,,}" dest="$3" zipName="$4" file; shift 4

	# find the executable location
	findFile "$dir" || return; dir="$file"

	# extract the executable from compressed files so we can analyze them
	extractFiles "$dir" || return

	# find the correct file for this machine
	file="$(os executable find "$dir")"
	[[ ! $file ]] && { ScriptErr "could not find an executable for $name"; return 1; }
	log1 "installing '$(FileToDesc "$file")'"

	# copy the file to /usr/local/bin
	local dest="/usr/local/bin/$name"; IsPlatform entware && dest="/opt/bin/$name"

	if [[ ! -e "$dest" || $force ]] || ! diff "$file" "$dest"; then
		printf "Installing $name to $(GetFilePath "$dest")..."
		if IsPlatform mac; then # macOS requires mv or new process killed
			RunLog sudoc cp "$file" "$TEMP/$name" || return
			RunLog sudoc mv "$TEMP/$name" "$dest" || return
		else
			RunLog sudoc cp "$file" "$dest" || return
		fi
		sudo chmod ugo+rx "$dest" || return
		echo "done"
	fi

	return 0
}

runTypeExtension()
{
	local p="$1" name="$2" dest="$3"; shift 3
	local ext="$(GetFileExtension "$p")"

	# if p is a function run it
	IsFunction "$p" && { "$p"; return; }

	# pause for installations which return without waiting
	[[ "$ext" == @(air|msu|vsix|xpi) ]] && pause="--pause"

	# elevate for installations which require it
	[[ "$ext" == @(msi) ]] && elevate="--elevate"

	# do not try and elevate if we cannot
	! CanElevate && unset elevate

	# find the installation file
	findFile "$p" || { ask "Continue the installation"; return; }
	p="$file"

	# copy the installation file to the local computer if needed
	[[ $copyLocal ]] && { runCopyLocal || return; }
	
	# change to the installation directory if needed
	[[ $cd ]] && { cd "$(GetFilePath "$p")" || return; }

	# mount installation share elevated if required - WSL 2 mounted network shares are not present when elevating
	# - if this causes issues, instead of mounting elevated force copyLocal
	if ! IsElevated && [[ $elevate && ! $copyLocal ]] && IsPlatform wsl2; then
		local installUnc="$(unc get unc --root "$INSTALL_DIR")"
		local newInstallDir="$(unc mount "$installUnc" --elevate $verbose)documents/data/install" || return # don't use globalArgs, can't set quiet and want to prompt
		p="${p/$INSTALL_DIR/$newInstallDir}"; log1 "p=${p}"
	fi

	# disable Open File Secirity Warning
 	[[ "$PLATFORM_OS" == "win" ]] && export SEE_MASK_NOZONECHECKS=1

 	# run the installation based off the program extension
	case "$ext" in
		app) start "$p" "$@";;
		AppImage) runAppImage "$p" "$@";;
		appx|bat|cmd) cmd.exe /c "$(utw "$p")" "$@";;
		bundle) sudo sh "$p";;
		deb) runDeb "$p" "$@";;
		dmg) runDmg "$p" "$@";;
		inf) elevate --wait pnputil.exe -i -a "$p" "$@";;
		iso|img) runIso "$p" "$@";;
		msi) RunMsi $elevate $verbose "$p" -- "$@";;
		msixbundle) cd "$(GetFilePath "$p")" && powershell Add-AppxPackage "$(GetFileName "$p")";;
		pkg) sudo installer $verboseInstaller -pkg "$p" -target /Applications;;
		7z|bz2|gz|tar|xpi|zip|ear|jar|war|xz) InstallAppFromZip $elevate "${globalArgs[@]}" "$p" "$dest" "$@";;
		xip) runXip "$p" "$dest";;
		*) RunExecutable $elevate $verbose "$p" -- "$@";;
	esac
	local result="$?"

	# cleanup
	[[ $copyLocal ]] && rm "$p" >& /dev/null

	return "$result"
}

runTypeGo()
{
	local p="$1" name="$2" dest="$3"; shift 3
	goCheck && go install "$p" "$@" || return
}

runTypeHaskell()
{
	local p="$1" name="$2" dest="$3"; shift 3
	haskellCheck && stack install "$p" "$@" || return
}

runTypeHomebrew()
{
	local p="$1" name="$2" dest="$3"; shift 3
	homebrewCheck && brew install "$p" "$@"
}

runTypeNode()
{
	local p="$1" name="$2" dest="$3"; shift 3
	nodeCheck || return
	sudo npm install -g "$p" "$@" || return
}

runTypeNomad()
{
	local p="$1" name="$2" dest="${3:-$SRV}"; shift 3
	local useCompose; [[ "$1" == "--compose" ]] && useCompose="true"

	nomadCheck || return

	# locate the Nomad job file
	if ! [[ -f "$p" ]]; then
		local file="$(ConfigGet "confDir")/hashi/job/$p"
		if [[ -f "$file.yml" ]]; then p="$file.yml"
		elif [[ -f "$file.json" ]]; then p="$file.json"
		else ScriptErr "unable to locate '$(GetFileName "$p")' Nomad job file"; return 1
		fi
	fi

	# run the job
	CloudGet --quiet "$p" && hashi nomad job run "$p"
}

# runTypePython - Python package install
runTypePython() 
{
	local p="$1" name="$2" dest="$3"; shift 3
	pythonCheckLocal || return
	RunLog python3 -m pipx install "$p" "$@" || return
}

# runTypePythonGlobal - Python package install for all users
runTypePythonGlobal()
{
	local p="$1" name="$2" dest="$3"; shift 3
	pythonCheckGlobal || return
	RunLog pipxg install $force "$p" "$@" || return
}

runTypeRuby()
{
	local p="$1" name="$2" dest="$3"; shift 3
	rubyCheck || return
	gem install "$p" "$@" || return
}

runTypeRust()
{
	local p="$1" name="$2" dest="$3"; shift 3
	rustCheck && cargo install "$p" "$@"
}

runTypeSnap()
{
	local p="$1" name="$2" dest="$3"; shift 3
	snapCheck && sudoc snap install core && sudo snap refresh core && pause snap install "$p" "$@"
}

runTypeStore() { RunPlatform runStore "$@"; }
runStoreMac() { InPath mas && mas install "$1"; [[ $2 ]] && sleep 2 && macAppOpen "$2"; }
runStoreQnap() { qnap package install "$1"; }
runStoreWin() { start RunProcess.exe "ms-windows-store://pdp/?ProductId=$1"; return 0; } # Windows Store  always returns an error

# run helper

runAppImage()
{
	local p="$1"; shift
	local appName="$(GetFileNameWithoutExtension "$p")"
	local app="$P/$(GetFileName "$p")"

	if [[ -f "$app" ]] && ask "Do you want to delete the existing installation in \"$appName\"" -dr n; then
		rmSudo "$app" || return
	fi

	if [[ ! -f "$app" ]]; then
		echo "Installing....$app"
		sudo pcp "$p" "$P" || { cat ~/.gcp/journal; return; }
	fi

	sudo chmod ugo+x "$app" || return

	echo "Configuring $appName..."
	start "$app" || return

	pause="--pause"
	return 0
}

runCopyLocal()
{
	p="$(copyLocal "$p")" || return

	if [[ $rename ]]; then
		local newP="$(mktemp --tmpdir="$(PlatformTmp)" --suffix ".$(GetFileExtension "$p")")"
		mv "$p" "$newP" || return
		p="$newP"
	fi

	return 0
}

# runDeb - install a program from a Debian archive file
# - if forcePrompt is set, gdebi will run in interactive mode.  This is for packages which 
#   require interaction.
runDeb()
{
	local p="$1"; shift

	hilight "Installing $(GetFileName "$p") version $(PackageFileVersion "$p")..."

	# install with gdebi for dependencies
	! InPath gdebi && { pkg gdebi || return; }
	local args=(); [[ ! $forcePrompt ]] && args+=(--non-interactive)
	sudo gdebi "${args[@]}" "$p" "$@"
}

runDmg()
{
	local result

	runDmgWorker "$@"; result=$?
	hdiutil detach /Volumes/install -quiet || return

	return $result
}

runDmgWorker()
{
	local p="$1"; shift

	if ! hdiutil mount "$p" -mountpoint /Volumes/install -quiet; then
		EchoErr "inst: unable to mount \"$p\""
		hdiutil mount "$p" -mountpoint /Volumes/install
		return 1
	fi

	if [[ -f "/Volumes/install/Install.mpkg" ]]; then
		sudoc installer $verboseInstaller -pkg "/Volumes/install/Install.mpkg" -target /Applications
	elif [[ -f "/Volumes/install/Install.app" ]]; then
		start "/Volumes/install/Install.app"
	elif ls /Volumes/install/*.pkg >& /dev/null; then
		if [[ $useGui ]]; then
			open /Volumes/install/*.pkg || return
		else
			sudoc installer $verboseInstaller -pkg /Volumes/install/*.pkg -target /Applications
		fi
	else
		shopt -s nullglob; local app=(/Volumes/install/*.app);

		[[ ! "$app" ]] && { EchoErr "inst: \"$p\" does not contain an application"; return 1; }
		local dir; GetFileName "$app" dir || return
		[[ -d "$P/$dir" && ! $force  && ! $forceVersion ]] && { echo "$dir is already installed"; return 0; }
		sudoc acp --recursive --progress-bar "$app" "$P"
	fi

	echo "Updating Spotlight..."
	mdimport "/Applications/$dir" || return
}

runIso()
{
	local p="$1"

	iso mount "$p" || return

	if IsPlatform win && cmd.exe /c dir 'd:\setup.exe' >& /dev/null; then
		elevate cmd.exe /c 'd:\setup.exe' || return
	else
		pause "Run the setup program..."
	fi

	iso dismount "$p" || return
}

# runProgramDescription PROGRAM [NAME] - get program description
runProgramDescription()
{
	local desc p="$1" name="$2"
	local desc parts

	# use the program name as the description if passed
	[[ $name ]] && { echo "$name"; return; }

	# get description based off of the program path
	StringToArray "$p" "/" parts
	desc="$(IFS=/; echo "${parts[*]: -3}")"
	[[ ! $desc ]] && desc="$p"
	echo "$desc"
}

# runPrompt PROGRAM [NAME] - prompt to run a program
runPrompt()
{
	local name="$(runProgramDescription "$1" "$2")"

	runCheck="true"
	if [[ $noPrompt ]]; then
		hilight "Running $name..."
	else
		ask "Do you want to run $name"
	fi
}

runXip()
{
	local p="$1" dest="$2"
	! InPath unxip && { package "unxip" || return; }
	sudo unxip "$p" "$dest" || return
}

versionCheck()
{
	local name="$1" version="$2"
	[[ ! $name ]] && { MissingOperand "name" "versionCheck"; }
	[[ ! $version ]] && { MissingOperand "version" "versionCheck"; }
	[[ "$(AppVersion --quiet "$(echo "$name" | sed 's/ //g')")" == "$version" ]]
}


#################################################
# applications
#################################################

AppCoreInstall() { winPathFix && i AppPlatform AppNetwork AppHost register && rebootIfNeeded; }

AppPlatformInstall() { RunPlatform app; }
appMac() { package macchina tokei && i AltTab iTerm KarabinerElements; }
appQnap() { i qcli && iStore MalwareRemover NotificationCenter Qboost QuLog SSDLaboratory SecurityCounselor; }
appWin() { i WindowsTerminal AutoHotKey UltraMon; }
appProxmox() { i ProxmoxWinTools; }

appDebian()
{
	# minimal
	i AptUtilities CloudInit nala dbus rsyslog xClient || return
	{ [[ ! $force ]] && minimalInstall; } && return

	# other	
	! IsPlatform CasaOs,win && { pkg gnome-system-monitor hardinfo nautilus terminator || return; }
	! IsPlatform pi,win && { pkg gnome-software || return; }

	return 0
}

appDebianMac()
{	
	# minimal
	i LinuxMinimalUtilities PythonLocal PythonTextUtilities || return
	{ [[ ! $force ]] && minimalInstall; } && return

	# other
	i 7Zip CompareCore firefox LinuxUtilities TextEditorCore xServer || return
}

appPhysical()
{
	i TimeCore PowerCore || return
	! IsPlatform CasaOs,piKernel && { i NoMachine || return; }
	IsPlatform win && { i MaxTo || return; }
	return 0;
}

appPi() { pkg piclone; }
appPiKernel() { i PiFirmware PiGpio PiPinout; }

AppHostInstall() { i hostname AppHostHardware AppHostSoftware; } # get correct hostname first

AppHostHardwareInstall()
{
	local commonHw="DellDisplayManager LogitechOptions"

	case "$hostname" in
		bc) i IntelChipset IntelThunderboltDriver $commonHw;;
		flo|jane|pants) i $commonHw batteries BetterDisplay;;
		oversoul) i IntelChipset IntelThunderboltDriver $commonHw;;
		rosie) i nVidiaDriver IntelThunderboltDriver IntelDriverUpdate RealtekCardReader $commonHw;;
	esac
}

AppHostSoftwareInstall()
{
	local common="1Password 1PasswordCli dropbox notion office GitCore"
	local commonLaptop="WireGuard"
	local commonMac="$common alfred bartender CleanMyMac rectangle shottr SoundSource spark"
	local coreServer="StaticIp ChronyServer cron cups DhcpServer DnsServer GitServer LoadBalancer VpnServer"
	local coreServices="ApacheDockerConfig PoolDashPanel HomeAssistant NodeRed"

	case "$hostname" in
		pi6) i DomotzAgentInstall || return;;
	esac

	case "$hostname" in

		# Mac
		ender) i 1Password 1PasswordCli amphetamine dymo NetbootxyzDocker;;
		flo) i $commonMac $commonLaptop AzureCli TfsCli;;
		jane) i $commonMac $commonLaptop BetterTouchTool;;
		pants) i $commonMac $commonLaptop BetterTouchTool;;

		# PC
		bc) i $common Quicken TidyTabs VeraCrypt;;
		micro|ultron) i $common;;
		oversoul) i $common TidyTabs VeraCrypt;;
		rosie) i $common $commonLaptop Quicken thunderbird TidyTabs VeraCrypt;;

		# server
		nas3) iStore Firefox HybridBackup MultimediaConsole NetbootxyzDocker Terminology;;
		pi1|pi2|pi3|pi4) i $coreServer;;
		pi5|pi6|pi10|pi11) i $coreServices;;
		pi7) i PiWiFi PoolTemperature PoolController;; 			# pool pad
		pi8|pi9) i $coreServices HomebridgeWiggin unifi;; 	# DomotzAgent HomebridgeWiggin unifi (pi9 active, pi8 backup)
	esac
}

AppNetworkInstall()
{
	network current update --quiet || return
	ScriptEval network vars || return # sets NETWORK and NETWORK_DOMAIN
	
	header "${NETWORK^} Applications"

	# network
	case "$NETWORK" in
		hagerman) i borgbackup glances HashiCli unison || return;;
	esac

	# domain
	case "$NETWORK_DOMAIN" in
		coexist) i docker VisualStudioCode || return;;
	esac

	# wiggin physical machine, not in another domain, not linux
	if [[ "$NETWORK" == "hagerman" && ! $NETWORK_DOMAIN ]] && IsPlatform physical && ! IsPlatform linux; then
		i JumpCloud ninite || return
	fi

	return 0
}

#
# Application Directories (appdata appconfig)
#

AppDirInstall()
{
	# primary
	declare dir="$DATA"
	appDirCreate "$DATA" || return

	# extended
	local appdata2
	IsPlatform qnap && appdata2="/share/data2"
	[[ "$HOST" == "ender" && -d "/Volumes/data" ]] && appdata2="/Volumes/data" # external SSD array

	# platform specific
	RunPlatform appDir || return
}

appDirWin()
{
	appDirCreate "$WIN_ROOT/Users/Public/data" "w" || return

	# move Windows executables to the Windows file system
	# - for performance and reliability (some Windows programs do not run well from WSL shares)
	makeLink --symbolic --merge "$DATA/appdataw/win" "$DATA/platform/win" || return
	makeLink --symbolic --merge "$DATA/appdataw/win_arm" "$DATA/platform/win_arm" || return
}

# appDirCreate DIR SUFFIX - create application directories in the directory, link to $ADATA{suffix} and $ACONFIG{suffix}
appDirCreate()
{
	local dir="$1" suffix="$2"

	# create directories
	makeDir "$dir/appconfig" "$dir/appdata" || return
	
	# create links if needed
	[[ ! -d "$ACONFIG${suffix}" ]] && { MakeLink --symbolic "$dir/appconfig" "$ACONFIG${suffix}" || return; }
	[[ ! -d "$ADATA${suffix}" ]] && { MakeLink --symbolic "$dir/appdata" "$ADATA${suffix}" || return; }

	return 0
}

#################################################
# Installs
#################################################

DownloadInstall()
{
	local app apps=(BeyondCompare Docker Dropbox Firefox GitKraken HashiProgram Sublime VisualStudioCode)
	for app in "${apps[@]}"; do i "${app}Download" || return; done
}

FinalInstall()
{
	local app apps=(bootstrap 1Password BeyondCompare CreativeCloud Dropbox Edge Firefox Fork Intel Java JetBrains LogitechOptions NotepadPp nVidia Plex Python Sonos Sublime Thunderbird VisualStudio Zoom)
	printf "final..."
	for app in "${apps[@]}"; do
		printf "$app..."
		i --no-header --no-prompt "${app}Final" || return
	done
	echo "done"
}

RegisterInstall()
{
	local app apps=(1Password alfred BeyondCompare firefox GitHub MaxTo sublime SublimeMerge TidyTabs)
	local isRegistering="true"
	noRegister="" # force registration
	for app in "${apps[@]}"; do i --no-header "${app}Register" || return; done
}

#################################################
# Android
#################################################

AndroidAllInstall() { i AndroidIcon BlueStacks; }
AndroidIconInstall() { runCheck="true"; }

AndroidIconFinalWin()
{
	makeDir "$pp/Android" || return
	$mv "$ud/BroadLink.lnk" "$pp/Android" || return
}

BlueStacksInstall() { run --header "BlueStacks" "game/BlueStacks/BlueStacksInstaller_5.10.0.1085_native.exe"; } # https://www.bluestacks.com/

BlueStacksFinalWin()
{
	mergeDir "$pp/BlueStacks X" "$oo" || return
	$rm "$pd/BlueStacks X.lnk" || return
	$rm "$pd/BlueStacks 5.lnk" || return
	$rm "$pd/BlueStacks 5 Multi-Instance Manager.lnk" || return
	i AndroidIcon || return
}

#################################################
# Adobe
#################################################

CreativeCloudInstall()
{
	header "Adobe Creative Cloud" # https://creativecloud.adobe.com/en/apps/download/creative-cloud
	run "other/Adobe/Creative Cloud/Creative_Cloud_Set-Up.exe|Creative_Cloud_Installer.dmg" --copy-local-win || return
}

CreativeCloudFinalFinalMac() { duti -s com.adobe.Acrobat.Pro .pdf all; }

CreativeCloudFinalWin()
{
	makeDir "$pp/Media/Other/Adobe" || return
	$mv "$pp/Adobe"*".lnk" "$pp/Media/Other/Adobe" 
	$mv "$pd/Adobe"*".lnk" "$pp/Media/Other/Adobe"
	moveAppData "Adobe" || return
	moveAppData "Creative Cloud Files" || return

	registry 32 delete "run/Adobe Creative Cloud" # "C:\Program Files (x86)\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe" --showwindow=false --onOSstartup=true
	registry 32 delete "run/Acrobat Assistant 8.0" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\Acrotray.exe"
	registry delete "run/AdobeGCInvoker-1.0" # "C:\Program Files (x86)\Common Files\Adobe\AdobeGCClient\AGCInvokerUtility.exe"
	registry delete "urun/Adobe Acrobat Synchronizer" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\AdobeCollabSync.exe"

	registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/" # Desktop Creative Cloud icon
	registry set "HKCU/Software/Classes/CLSID/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 > /dev/null || return # Desktop Creative Cloud icon
}

#################################################
# Apple
#################################################

AppleAllInstall() { i AppleConfigurator bonjourSdk QuickTime xcode; }
AppleConfiguratorInstall() { run --name "Apple Configurator" "1037126344"; }

BonjourSdkInstall()
{
	header "Bonkour SDK" # https://developer.apple.com/bonjour/
	run "other/Apple/Bonjour SDK/bonjoursdksetup.exe"
}

BonjourSdkFinalWin() { mergeDir "$pp/Bonjour SDK" "$pp/Development/Other"; }

QuickTimeInstall() { :; }

QuickTimeFinalWin()
{
	registry 32 delete "run/QuickTime Task" # "C:/Program Files/QuickTime/qttask.exe" -atboottime
	makeDir "$ao/Apple" || return
	mergeDir "$pp/QuickTime" "$ao" || return
	$rm "$pd/QuickTime Player.lnk" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return
}

XcodeInstall() { run --name "Xcode" "other/Apple/Xcode/setup/Xcode_14.2.xip"; } # https://developer.apple.com/download/all/
XcodeCliInstall() { run --header "Xcode Command Line Tools (CLI)" "other/Apple/Xcode/tools/Command_Line_Tools_for_Xcode_14.2.dmg"; } # https://developer.apple.com/xcode/

#################################################
# audio
#################################################

AudioAllInstall() { i Audacity; }
AudacityInstall() { run --name "Audacity" "other/Audacity/setup/audacity-win-2.4.2.exe||audacity-minsrc-2.4.2.tar.xz"; } # https://www.audacityteam.org/download
AudacityFinalWin() { rmSudo "$pd/Audacity.lnk" && $mv "$pp/Audacity.lnk" "$pp/Media" && moveAppData "Audacity"; }

#
# books
#

BookAllInstall() { i calibre calibre2opds kindle KindleDrm; }
Calibre2opdsInstall() { run --name "calibre2opds" "shareware/Calibre/calibre2opds/setup/calibre2opds-3.3-253.zip" --dest "$P/calibre2opds" --elevate; } # http://calibre2opds.com/downloads/
Calibre2opdsFinalWin() { $makeShortcut "$P/calibre2opds/rungui.cmd" "$pp/Media/calibre2opds - OPDS Catalog Generator" "-" "" "" min; }
KindleDrmInstall() { run --name "Kindle DRM" "other/Amazon/Kindle/converter/kindledrmsetup.exe"; } # http://www.ebook-converter.com/kindle-drm-removal.htm
KindleDrmInstallFinalWin() { mergeDir "$pp/eBook Converter" "$ao"; }

CalibreInstall()
{
	header "Calibre"
	[[ "$PLATFORM_OS" == "win" ]] && echo "- Advanced, uncheck Add install directory to path"

	local v=2.57.1 # http://calibre-ebook.com/download
	run "shareware/Calibre/setup/calibre-64bit-$v.msi|calibre-$v.dmg" || return
}

CalibreHelp()
{
	echot "\
	- choose a location for your books=\\nas\home\documents\data\books
	- Manufacturers=Amazon, Devices=Kindle PaperWhite
	- E-Book Viewer, Configure, General, Page Flip options, Page flip duration=disabled
	- Notes:
	  - Organizes library folders by <author>/<book> on import or metadata change
	  - Search uses regular expressions: not mobi and not pdf and not azw
	  - Import content from the download directory using the Add books button (content
	    is copied to the ebook location)"
}

CalibreFinalWin()
{
	mergeDir --rename "$pp/calibre 64bit - E-book Management" "$ao/calibre" || return
	$rm "$pd/calibre 64bit - E-book management.lnk" || return
}

KindleInstall() { run --name "Kindle" "other/Amazon/Kindle/setup/KindleForPC-installer-1.29.58059.exe"; } # https://www.amazon.com/kindle-dbs/fd/kcp

KindleHelp()
{
	echot "\
- Output Option, Set Output Folder, $(platformUserAppData)/Kindle DRM
- Kindle, Kindle Serial Number=NNN"
}

KindleProfile() { start "https://www.amazon.com/gp/digital/fiona/manage?ie=UTF8&ref_=sv_kinc_7&signInRedirect=1&#manageDevices"; }
KindleFinalWin() { mergeDir "$up/Amazon" "$up/Applications/Other" && $rm "$ud/Kindle.lnk" && moveAppData "My Kindle Content" "Kindle"; }

#################################################
# bootstrap - fresh operating system install
#################################################

BootstrapInstall()
{
	header "Bootstrap"	

	[[ ! $force ]] && ! UpdateNeeded "bootstrap" && return

	# dependencies
	i BootstrapFiles SshClientPermission CredentialStore timezone || return 

	# bootstrap
	RunPlatform bootstrapStart || return
	RunPlatform bootstrap || return

	# applications
	i AppDir bash SshCore SystemUser zsh $PLATFORM_OS || return
}

BootstrapFinal() { i BootstrapIcons && UpdateDone "bootstrap"; }
BootstrapIconsInstall() { RunPlatform BootstrapIcons; }
BootstrapIconsWin() { i WinIcons; }

BootstrapFilesInstall()
{
	local file files dir dirs

	printf "permissions..."
	files=("$HOME/.bash_history")
	for file in "${files[@]}"; do
		printf "."; [[ -f "$file" ]] && { sudoc chown "$USER" "$file" || return; }
	done

	printf "files..."
	files=(.bash_history .hushlogin .lesshst .z)
	for file in "${files[@]}"; do
		printf "."; touch "$HOME/$file" || return
	done

	printf "directories..."
	files=("$HOME/.config" "$CODE/test" "$HOME/tmp")
	for file in "${files[@]}"; do
		printf "."; makeDir "$file" || return
	done

	files=("/usr/local/bin" "$PUB")
	for dir in "${files[@]}"; do
		printf "."; makeDir --sudo "$dir" || return
	done

	printf "links..."
	local files=(.bashrc .bash_logout .bash_profile .dialogrc .gitconfig .gitignore .inputrc .kdiff3rc .lessfilter .magic .p10k.zsh .profile .Xresources .zlogin .zshrc)
	for file in "${files[@]}"; do
		printf "."; makeLink --symbolic --hide "$UBIN/$file" "$HOME/$file" || return
	done

	if [[ -d "$HOME/.config" ]]; then
		IFS=$'\n' ArrayMake dirs "$(find "$HOME/.config" -maxdepth 1 -mindepth 1 -type d -print)"
		for dir in "$dirs[@]"; do
			printf "."; makeLink --symbolic "$UBIN/.config/$dir" "$HOME/.config/$dir" || return
		done
	fi	
	
	if [[ ! -L "/etc/ethers" ]]; then
		[[ -f "/etc/ethers" ]] && { sudo rm "/etc/ethers" || return; }
		printf "."; sudo ${G}ln --symbolic "$DATA/setup/ethers" "/etc/ethers" || return
	fi

	echo "done"
}

bootstrapStartWin() { bootstrapStartHiddenStart && bootstrapStartWsl; }

# bootstrapStartHiddenStart - install early to prevent excessive UAC dialogs
bootstrapStartHiddenStart()
{
	! CanElevate && return
	winPathFix && i HiddenStartConfigure
}

# bootstrapStartWsl - set default user to aid troubleshooting - only supported in WSL 2
bootstrapStartWsl()
{
	IsPlatform wsl1 && return
	header "Set WSL User" && wsl dist user set --user="$USER"
}


bootstrapCm4() { i NicUsb; }

bootstrapStartDebianMac()
{
	header "Bootstrap Start macOS and Debian"
	pkg bc curl dialog expect git htop jq less moreutils unzip zip || return
}

bootstrapStartDebian()
{
	header "Bootstrap Start Debian"
	pkg virt-what; unset VM_TYPE_CHECKED # force GetVmType to check again
}

bootstrapDebian()
{
	header "Bootstrap Debian"

	if ! IsPlatform win; then
		IsHypervVm && { i HypervLinuxTools || return; }
		IsVmwareVm && { i VmwareLinuxTools || return; }
	fi

	# libdbus-glib-1-dev - fails on ZimaBoard
	pkg file man-db sensible-utils sharutils xz-utils || return			# other
	pkg avahi-daemon dnsutils net-tools wakeonlan || return															# network
	pkg --no-prompt keyboard-configuration 
	! IsPlatform wsl1 && { pkg smbclient || return; }

	i DebianSetup || return
}

bootstrapEntware()
{
	header "Bootstrap Entware"

	local c="coreutils"
	if ! InPath lynx > /dev/null; then
		printf "\nInstalling core packages..."
		! IsPlatform qnap && { pkg man-pages || return; } # QNAP error: "mandb: the setuid man user "root" does not exist"
		pkg bc dialog moreutils tmux || return																	# other
		pkg unzip xz-utils																											# compression
		pkg $c-chroot $c-expand $c-head $c-install $c-sort $c-stat || return 		# coreutils
		pkg git git-http libcurl || return 																			# git - libcurl required for https origins
		pkg diffutils file hdparm lsblk mount-utils ncdu || return							# file
		pkg atop htop iperf3 lscpu nethogs pv || return													# monitoring
		pkg etherwake ncat nmap openssh-client-utils || return									# network - fping is not functional
		pkg daemonize || return																									# process
		pkg column ncurses-bin screen || return																	# terminal
		pkg jq || return																												# text
		pkg chrony ntpdate || return																						# time
		pkg curl elinks lynx || return																					# web
	fi

	[[ -f "/opt/etc/man_db.conf" ]] && { sudo chmod ugo+r "/opt/etc/man_db.conf" || return; }
 	[[ -f "/usr/bin/mount.cifs" ]] && { sudo chmod u+s "/usr/bin/mount.cifs" || return; }

 	return 0
}

bootstrapMac()
{
	header "Bootstrap Mac"

	# packages
	pkg duti findutils fontconfig pidof wakeonlan wget xz || return

	# file sharing
	defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE || return # faster SMB file sharing - https://support.apple.com/en-us/HT208209

	# dockutil - https://github.com/kcrawford/dockutil/issues/127
	! InPath dockutil && [[ ! $force ]] && { brew install --cask hpedrorodrigues/tools/dockutil || return; }

	# Rosetta - x86_64 emulation
	IsPlatform arm && [[ ! -d "/usr/libexec/rosetta" ]] && { sudoc softwareupdate --install-rosetta || return; }

	if [[ ! -f "/etc/paths.d/wiggin" ]]; then
		echo "/usr/local/data/bin
$PLATFORM_PATH
/usr/local/bin" | sudo ${G}tee "/etc/paths.d/wiggin" || return;
	fi

	# directories
	makeDir "$HOME/Applications" || return
	makeDir "$HOME/Library/LaunchAgents" || return

	# startup
	local file="$HOME/Library/LaunchAgents/startup.plist"
	[[ ! -f "$file" ]] && { cp "$setupFiles/startup.plist" "$file" || return; }

	return 0
}

bootstrapPi()
{
	header "Bootstrap Raspberry Pi OS"

	piConfigCheck || return

	# other
	sudo raspi-config nonint do_net_names 0 || return # enable predictable network names
	sudo raspi-config nonint do_wifi_country US || return
	[[ -f /run/sshwarn ]] && { password linux -u pi || return; } # if needed change pi password

	# locale
	local locale="$(ConfigGet "locale")"
	! cat /etc/default/locale | grep -q "$locale" && { sudo raspi-config nonint do_change_locale $locale || return; export LOCALE="$locale"; }

	# other setup
	i PiSwap || return
}

bootstrapPiKernel()
{
	header "Bootstrap Raspberry Pi Kernel"
 	package libraspberrypi-bin || return # vcgencmd
}

bootstrapQnap()
{
	header "Bootstrap QNAP"

	# autorun
	if [[ $force ]] || UpdateNeeded "QnapAutorun"; then

		local clip; clip="$(cat <<-EOF
			# add links
			sudo ln -s "/share/Public/documents/data" "/usr/local/data"
			sudo ln -s "/share/homes/$USER" "$USERS/$USER" || return

			#  fix mount.cifs 'This program is not installed setuid root -  "user" CIFS mounts not supported.''
			[[ -f "/usr/bin/mount.cifs" ]] && { sudo chmod u+s "/usr/bin/mount.cifs" || return; }

			# mute mount.cifs "sh: /bin/systemd-ask-password: No such file or directory" error
			file="/bin/systemd-ask-password" && sudo touch "$file" && sudo chmod +x "$file"

			# add DNS suffix
			! grep -q "search butare.net hagerman.butare.net" "/etc/resolv.conf" && echo "search butare.net hagerman.butare.net" | sudo ${G}tee -a /etc/resolv.conf

			true
			EOF
		)"

		echo -e "- paste at the end of the file:\n$clip"; clipw "$clip" || pause
		qnap autorun || return

		UpdateDone "QnapAutorun"
	fi

	# share root directory from admin uses to allow access to $DATA from root share, this should be shared out as root
	sudo MakeLink --symbolic "/" "/share/homes/admin/root" || return

	return 0
}

bootstrapRock() # https://wiki.radxa.com/Rockpi4/Ubuntu#
{
	header "Bootstrap Rock Pi"

	password linux -u rock || return

	local f="/etc/apt/sources.list.d/apt-radxa-com.list"
	if [[ ! -f "$f" ]]; then
		echo "Adding radxa pkg source..."
		export DISTRO=bionic-stable
		echo "deb http://apt.radxa.com/$DISTRO/ ${DISTRO%-*} main" | sudo ${G}tee -a "/etc/apt/sources.list.d/apt-radxa-com.list" || return
		wget -O - apt.radxa.com/$DISTRO/public.key | sudo apt-key add - || return
		PackageUpdate || return
	fi

	sudo apt-get install rockchip-overlay rockchip-fstab || return
	sudo apt-get install -y rockpi4b-rk-u-boot-latest || return
	sudo apt-get install linux-base || return
	sudo apt-get install linux-4.4-latest || return
}

bootstrapUbuntu()
{
	header "Bootstrap Ubuntu"

	# remaining setup is not applicable for Windows
	IsPlatform win && return

 	# do not blank screen
	InPath gsettings && { gsettings set org.gnome.desktop.session idle-delay 0 || return; }

	# permissions
	chmod ugo+x "$BIN/"* || return
}

bootstrapWin()
{
	header "Bootstrap Windows"

	# directories
	local target="$WIN_HOME"
	IsPlatform parallels && { drive mount all --no-optical || return; target="/mnt/Home"; }
	makeLink --symbolic "$target/Desktop" "$HOME/Desktop" || return	
	makeLink --symbolic "$target/Documents" "$HOME/Documents" || return
	makeLink --symbolic "$target/Downloads" "$HOME/Downloads" || return
}

#################################################
# Browser
#################################################

BrowserAllInstall() { i chrome firefox tor; }

ChromeInstall()
{
	header "Google Chrome Browser"
	echo '- Sign in, Email=NNN, Password=NNN'

	# https://www.gtricks.com/chrome/how-to-download-chrome-offline-installer-for-windows-mac-and-linux/
	# https://www.google.com/chrome/?standalone=1&platform=win64
	# https://www.google.com/chrome/?standalone=1&platform=mac
	# https://www.google.com/chrome/?standalone=1&platform=linux
	run "other/Google/Chrome/setup/ChromeStandaloneSetup64.exe|googlechrome.dmg|google-chrome-stable_current_amd64.deb" --elevate || return
}

ChromeHelp() { echot "- Settings, uncheck Continue running background apps when Google Chrome is closed"; }

ChromeFinalMac() { $rm "$la\com.google.keystone.agent.plist"; }

ChromeFinalWin()
{
	$mv "$pp/Google Chrome.lnk" "$pp/Applications" || return
	$rm "$up/Google Chrome.lnk" || return
	$rm "$ud/Google Chrome.lnk" || return
	$rm "$pd/Google Chrome.lnk" || return
	$rm "$ud/Chrome App Launcher.lnk" || return
	$rm "$ud/Google Chrome Canary Build.lnk" || return
	mergeDir --rename "$pp/Google Chrome" "$ao/Chrome" || return
	mergeDir --rename "$up/Google Chrome" "$ao/Chrome" || return
	mergeDir "$up/Chrome Apps" "$up/Applications" || return
	mergeDir --rename "$up/Google Chrome Canary Build" "$ao/Chrome Beta" || return
	mergeDir "$up/Chrome Apps" "$up/Applications/Other" || return
}

EdgeInstall() { run --header "Edge" "install/other/Microsoft/Edge/MicrosoftEdgeSetup.exe|MicrosoftEdge-108.0.1462.76$(getArch "", "_arm").pkg"; } # https://www.microsoft.com/en-us/edge/download?form=MA13FJ

EdgeFinalWin()
{ 
	registry delete "urun/MicrosoftEdgeAutoLaunch_CD09796F491D40AB562929001A2218A6" || return	# "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" --no-startup-window --win-session-start /prefetch:5
}

FirefoxInstall()
{
	header "Firefox"; local v="111.0" # https://www.mozilla.org/en-US/firefox/all/

	# version check
	firefox IsInstalled && [[ "$(firefox version)" == "Mozilla Firefox $v" && ! $force ]] && return

	# install
	if IsPlatform mac,win; then run "other/Mozilla/Firefox/Firefox Setup $v.$(getArch "msi" "exe")|Firefox $v.dmg" --dest="firefox" --copy-local
	elif IsPlatform debian; then pkg firefox-esr
	fi
}

FirefoxFinalMac() { dockutil --find "Firefox" >& /dev/null && return; dockutil --add "/Applications/Firefox.app"; }
FirefoxFinalWin() { ! CanElevate && return; $mv "$pp/Firefox.lnk" "$pp/Applications" && $mv "$pp/Firefox Private Browsing.lnk" "$pp/Applications" && $rm "$pd/Firefox.lnk"; }
FirefoxProfile() { firefox $noPrompt profile restore default; }
FirefoxRegister() { register "firefox"; }

FirefoxDownload()
{
	header "Firtefox Download"

	# change to the install location
	local file; findFile "other/Mozilla/Firefox" || return; cd "$file" || return

	# get version
	local url="http://www.mozilla.org/en-US/firefox/notes"
	local v="$(curl --silent --location "$url" | grep "Firefox " | head -1 | tr -s " " | cut -d" " -f3 | cut -d"," -f1)"
	[[ ! $v ]] && { ScriptErr "unable to get the current Firefox version from '$url'"; return 1; }

	# check version
	[[ -f "version.txt" && "$(cat "version.txt")" == "$v" && ! $force ]] && return

	# store version
	echo "$v" > "version.txt" || return

	# download
	local baseUrl="https://download.mozilla.org/?lang=en-US&product=firefox-latest-ssl&os="
	local suffix suffixes=("linux64" "osx" "win64" "win64-aarch64")
	for suffix in "${suffixes[@]}"; do
		local downloadUrl="$baseUrl$suffix"
		[[ "$suffix" == "win64" ]] && downloadUrl="https://download.mozilla.org/?product=firefox-msi-latest-ssl&os=win64&lang=en-US"
		url="$(curl --silent -H -L "$downloadUrl" | cut -d"\"" -f2)" || { ScriptErr "unable to get the Firefox download URL from '$downloadUrl'"; return 1; }		
		file="$(GetFileName "$url" | UrlDecode)"
		[[ -f "$file" ]] && { rm "$file" || return; }
		hilight "Downloading '$file'..."
		curl -L "$url" --output "$file" || return
		echo
	done

	# show version
	echo "Downloaded Firefox version $v"

}

FirefoxHelp()
{
	echot "\
- Application menu, Options, Sign in to Firefox, Sign In...
- Extensions, Pin to Toolbar: Simple Tab Groups, Multithreaded Download Manager, 1Password
	- Bookmarks search plus 2, Manage Extension, Options, uncheck Match active FF theme, check Override text color to white and background color to black
	- Multithreaded Download Manager, Manage Extension..., Options, Interface, Icon=Light
- More Tools..., Customize Toolbar..., 
	- (left) Home, Sidebars
	- (right) Simple Tab Groups, Multithreaded Download Manager, 1Password
	- (overflow) Firefox Account, Downloads, 
	- Toolbars, Bookmarks Toolbar, Never Show"
}

TorInstall()
{
	header "Tor Browser"
	local v="11.0.9"
	
	if IsPlatform win; then
		local clip; clip="$(utw "$UADATA/Tor Browser")"; clipw "$clip"
		echot "- Destination Folder=<paste> ($clip)"
	fi

	run "shareware/Tor Browser/torbrowser-install-win64-${v}_en-US.exe|TorBrowser-$v-osx64_en-US.dmg|tor-browser-linux64-$v_en-US.tar.xz" || return # https://www.torproject.org/download/
}

TorFinalWin() { $mv "$up/Start Tor Browser.lnk" "$up/Applications" && $mv "$ud/Start Tor Browser.lnk" "$up/Applications"; }

#################################################
# File Comparison
#################################################

CompareAllInstall() { pkg meld && i BeyondCompare delta; }

CompareCoreInstall()
{ 
	header "Compare Core"

	i delta || return

	if isInstallable BeyondCompare; then
		i BeyondCompare
	else
		pkg meld
	fi
}

BeyondCompareInstall()
{
	local v=4.4.6.27483 # http://www.scootersoftware.com/download.php
	IsPlatform linux && BeyondCompare IsInstalled && [[ ! $force ]] && return
	run --name "BeyondCompare" --header "Beyond Compare" "other/Scooter Software/Beyond Compare/setup/BCompare-${v}_x64.msi|BCompareOSX-${v}.zip|bcompare-${v}_amd64.deb" --version=$v --copy-local || return
}

BeyondCompareDownload()
{
	header "BeyondCompare Download"

	# change to the install location
	local file; findFile "other/Scooter Software/Beyond Compare/setup" || return; cd "$file" || return

	# get version
	local url="https://www.scootersoftware.com/download.php"	
	local s; s="$(curl --silent "$url" | grep "Current Version" | cut -d";" -f2)" || { ScriptErr "unable to get the current BeyondCompare version from '$url'"; return 1; }
	local v="$(echo "$s" | cut -d"," -f1 | RemoveSpaceTrim)" || return
	local build="$(echo "$s" | cut -d"," -f2 | cut -d" " -f3)"
	[[ ! $v || ! $build ]] && { ScriptErr "unable to get the current BeyondCompare version from '$url'"; return 1; }
	v="$v.$build"	

	# check version
	[[ -f "version.txt" && "$(cat "version.txt")" == "$v" && ! $force ]] && return

	# store version
	echo "$v" > "version.txt" || return

	# download
	local file files=("BCompare-${v}_x64.msi" "BCompareSetup-$v.zip" "BCompareOSX-${v}.zip" "bcompare-${v}_amd64.deb")
	for file in "${files[@]}"; do
		[[ -f "$file" ]] && { rm "$file" || return; }
		hilight "Downloading '$file'..."
		curl -L "https://www.scootersoftware.com/$file" --output "$file" || return
		echo
	done

	# show version
	echo "Downloaded BeyondComalpare version $v"
}

BeyondCompareProfile()
{
	echo "- Help|Preferences, Enter Key..."
	IsPlatform mac && echo "- Beyond Compare, Install Command Line Tools…"
	BeyondCompare profile restore default "${globalArgs[@]}" || return	
}

BeyondCompareRegister() { register "BeyondCompare"; }

BeyondCompareFinalWin()
{
	$rm "$ud/Beyond Compare 4.lnk" || return
	! CanElevate && return
	mergeDir --rename "$pp/Beyond Compare 4" "$ao/Beyond Compare" || return
	$rm "$pd/Beyond Compare 4.lnk" || return
	registry delete "urun/BCClipboard" # C:\Program Files\Beyond Compare 4\BCClipboard.exe
}

DeltaInstall()
{	
	header "delta"; local v="0.13.0" # https://dandavison.github.io/delta/installation.html

	# version check
	InPath delta && [[ "$(delta --version | head -1 | cut -d" " -f2)" == "$v" && ! $force ]] && return

	# install - install gdebi
	if IsPlatform mac; then package git-delta
	elif IsPlatform apt; then run "shareware/delta/git-delta_${v}_$(getArch "amd64" "arm64" "armhf").deb"
	else couldNotLocate
	fi
}

#################################################
# Debian
#################################################

DebianAllInstall() { i DebianSetup DebianSudoPasswordless; }

DebianSetupInstall() # called by bootstrapDebian
{
	header "Debian Setup"
	i apt DebianDns DebianFileSharing DebianFonts DebianLocale DebianPolicies DebianProxyServer DebianSudoSecurePath || return
	DbusSetup || return
}

DebianDnsInstall()
{
	header "Debian DNS"

	# Windows does not uses systemd for DNS, chroot gets /etc/resolv.conf from host
	{ IsPlatform chroot,win || ! InPath systemd-resolve; } && return 0

	# return if the FQDN and the short non-qualified name resolves
	local domain="$(ConfigGet "domain")"
	IsAvailable "router.$domain" && IsAvailable "router" && return

	sudo systemd-resolve -i eth0 --set-domain="$domain"
}

DebianFileSharingInstall()
{	
	IsPlatform win && return

	header "Debian File Sharing"

	local restart

	! InPath smbd && { pkg samba || return; } # service
	! InPath smbclient && { pkg smbclient || return; }

	local workgroup; workgroup="$(ConfigGet "workgroup")"
	if [[ "$(network workgroup name)" != "$workgroup" ]]; then
		network workgroup set "$workgroup" || return
		restart="true"
	fi

	local file="/etc/samba/smb.conf"

	# root share
	if ! grep -q "\[root\]" "$file"; then
		cat <<-EOF | sudo ${G}tee -a "$file" > /dev/null || return

			[root]
			path = /
			valid users = $USER
			read only = no
			follow symlinks = yes
			wide links = no
		EOF
		restart="true"
	fi

	# admin share
	if ! grep -q "\[admin\]" "$file"; then
		cat <<-EOF | sudo ${G}tee -a "$file" > /dev/null || return

			[admin]
			path = /
			browseable = no
			valid users = $USER
			admin users = $USER
			force user = root
			force group = root
			read only = no
			follow symlinks = yes
			wide links = no
		EOF
		restart="true"
	fi

	# restart smbd service to configuration changes take effect
	[[ $restart ]] && { service restart smbd || return; }

	# add SMB password for the current user
	! sudo pdbedit -L -u $USER >& /dev/null  && { sudo smbpasswd -a $USER || return; }

	return 0
}

DebianFontsInstall()
{
	header "Debian Fonts"
	pkg fontconfig || return

	local dir="/usr/local/fonts"
	[[ ! -d "$dir" ]] && dir="/usr/share/fonts"
	[[ ! -d "$dir" ]] && { EchoErr "DebianFonts: could not locate the fonts directory."; return 1; }

	if [[ "$(ls "$dir/Meslo"* |& wc -l)" != "4" ]]; then
		findFile "fonts/MesloLGS NF" || return
		sudoc cp "$file/"*.ttf "$dir" || return
		fc-cache -fv || return
	fi

	return 0
}

DebianLocaleInstall()
{
	header "Debian Locale"

	local locale="$(ConfigGet "locale")"
	[[ "$LANG" == "$locale" ]] && return

	pkg locales || return

	local line="$(grep "^$locale " /usr/share/i18n/SUPPORTED)"
	[[ ! $line ]] && { EchoErr "inst: $locale is not supported"; return 1; }

  local encoding="$(echo $line | cut -f2 -d " ")"
  echo "$locale $encoding" | sudo ${G}tee -a "/etc/locale.gen" || return
  sudo sed -i "s/^\s*LANG=\S*/LANG=$locale/" "/etc/default/locale" || return
  sudo dpkg-reconfigure -f noninteractive locales || return
}

DebianPoliciesInstall()
{
	header "Debian Policies"

	local dir="/etc/polkit-1/localauthority/50-local.d" file

	! { InPath systemctl && systemctl >& /dev/null && sudo ls "$dir" >& /dev/null; } && return

	# reboot
	file="$dir/allow_shutdown_suspend.pkla"
	if ! sudo ls "$file" >& /dev/null; then
		echo "[Shutdown or suspend without a password]
Identity=unix-user:$USER
Action=org.freedesktop.login1.halt-multiple-sessions;org.freedesktop.login1.reboot-multiple-sessions;org.freedesktop.login1.set-wall-message;org.freedesktop.login1.halt;org.freedesktop.login1.power-off;org.freedesktop.login1.reboot;org.freedesktop.login1.suspend
ResultAny=yes" | sudo ${G}tee "$file"
	fi

	return 0
}

DebianProxyServerInstall()
{
	header "Debian Proxy Server"
	sudo grep -q "HTTP_PROXY" /etc/sudoers && return
	echo 'Defaults env_keep += "ftp_proxy http_proxy https_proxy no_proxy FTP_PROXY HTTP_PROXY HTTPS_PROXY NO_PROXY"' | sudo ${G}tee -a "/etc/sudoers" || return
}

DebianSudoSecurePathInstall() # add /usr/local/data/bin to the sudo secure path
{
	header "Debian SUDO Secure Path"

	sudo grep -q "/usr/local/data/bin" "/etc/sudoers" && return

	local find="/usr/local/sbin"
	local clip="/usr/local/data/bin:$PLATFORM_PATH:"

	# try automatic change
	sudo sed -i "s/$(echo "$find" | QuotePath)/$(echo "$clip$find:" | QuotePath)/" "/etc/sudoers" || return
	sudo grep -q "/usr/local/data/bin" "/etc/sudoers" && return

	# manual change
	echo "Paste the contents of the clipboard ($clip) at the beginning of the secure_path"
	clipw "$clip" || pause
	sudo visudo || return
}

DebianSudoPasswordlessInstall()
{
	local line="$USER ALL=(ALL) NOPASSWD: ALL"
	sudo grep -q "^$line$" /etc/sudoers && return
	echo "$line" | sudo ${G}tee -a "/etc/sudoers" || return
}

#################################################
# development
#################################################

DevAllInstall() { i CruiseControlTray fiddler JetBrains just LinqPad MarkdownView postman VisualStudioCode; }
DevCoreAllInstall() { i DotNetCore GitCore JavaCore SqlCore WebCore; }
DevLanguageAllInstall() { i gcc go haskell python ruby rust; }
MarkdownViewInstall() { run --name "Markdown View" --store "9PJ021LR0M3G"; }
FiddlerInstall() { run --header "Fiddler" "other/Telerik/Fiddler/Fiddler Everywhere 0.10.2.exe|fiddler-mac.zip|fiddler-linux.zip"; } # http://www.telerik.com/fiddler
FiddlerFinalWin() {	$mv "$up/Fiddler Everywhere.lnk" "$up/Development" && $rm "$ud/Fiddler Everywhere.lnk"; }
LinqPadInstall() { run --name "LINQPad" "shareware/DOT.NET/LinqPad/LINQPad5Setup.exe"; } # https://www.linqpad.net/Download.aspx
LinqPadFinalWin() { makeDir "$udata/LINQPad" && $mv "$ud/LINQPad 5.lnk" "$pp/Development/DotNet" && $rmd "$pp/LINQPad" && moveAppData "LINQPad Queries"; }
PostmanInstall() { run --header "Postman" "other/Postman/Postman-win64-Setup.exe|Postman for macOS ($(getArch "x64" "arm64")).zip|postman-linux-x64.tar"; } # https://www.postman.com/downloads/
PostmanFinalWin() {	$rm "$ud/Postman.lnk" && mergeDir "$up/Postman" "$up/Development/Other"; }
gccCheck() { InPath gcc make && return; i --no-header gcc; }
GccInstall() { run --package --header "gcc" gcc && pkg make; }

DevCoreInstall()
{
	header "Development Core"
	i GitCore gcc go MarkdownView VisualStudioCode || return
	pipxg install rich-cli || return
}

WebCoreInstall()
{
	header "Web Development Core"
}

goCheck() { InPath go && return; i --no-header go; }

GoInstall()
{
	header "Go" # https://golang.org/dl/ - *.tar.gz

	# dependencies
	gccCheck || return

	# platform
	local version="1.19" dest="/usr/local" platform 
	case "$(uname -m)" in "") : ;;
		armv7l) platform="linux-armv6l";;
		aarch64) platform="linux-arm64";;
		x86_64) platform="linux-amd64";;
	esac
	IsPlatform mac && platform="darwin-amd64"
	IsPlatformAll mac,arm && platform="darwin-arm64"
	[[ ! $platform ]] && { ScriptErr "unknown platform"; return 1; }

	# install
	findFile "other/Go/image/go$version.$platform.tar.gz" || return
	sudoc tar -C "$dest" -xzf "$file" || return

	makeLinkSudo --symbolic "$dest/go/bin/go" "$dest/bin/go" || return
	makeLinkSudo --symbolic "$dest/go/bin/gofmt" "$dest/bin/gofmt" || return
}

haskellCheck() { InPath stack && return; i --no-header "haskell"; }

HaskellInstall()
{
	IsPlatform debian && { package build-essential curl libffi-dev libffi7 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5 || return; }
	curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh && source "$HOME/.ghcup/env" && stack setup
}

CruiseControlTrayInstall()
{
	local version="1.8.5.0"
	header "CruiseControl Tray"
	echo '- Uncheck Run CruiseControl.NET CCTray 1.8.5.0'

	# download: http://vmspwbld001/ccnetpreprod/ViewFarmReport.aspx http://www.cruisecontrolnet.org/projects/cctray http://cruisecontrol.sourceforge.net http://ccnet.sourceforge.net/CCNET/CCTray.html https://github.com/ccnet/CruiseControl.NET
	run "shareware/CruiseControl/tray/CruiseControl.NET-CCTray-$version-Setup.exe" || return

	echo "Installing plugins..."
	findFile "shareware/CruiseControl/plugins/CCTray" || return
	$cp	"$file"/* "$P32/CCTray" || return
} 

CruiseControlTrayHelp()
{
	CruiseControlTray startup || return
 	echot "\
- File, Settings, Build Projects, Add..., select a secure Build Server,
  check Server is secure, Authorisation Mode=Secure user name/password authentication,
  Configure, Username=%USERNAME%"
}

CruiseControlTrayProfile() { CruiseControlTray profile restore default; }

CruiseControlTrayFinalWin()
{
	mergeDir "$pp/CCTray" "$pp/Development/Other" || return
	mergeDir "$up/CCTray" "$pp/Development/Other" || return
	$rm "$ud/CCTray.lnk" || return
	$rm "$up/Startup/CCTray.lnk" || return
}

JetBrainsInstall()
{
	local v="1.27.2.13801" # https://www.jetbrains.com/toolbox-app/
	local p="jetbrains-toolbox-$v"; IsPlatform mac && p+="$(getArch "" "-arm64" "")"
	run --header "JetBrains" "other/JetBrains/toolbox/$p.exe|$p.dmg|$p.tar.gz" --copy-local || return
}

JetBrainsHelp() { echot "- ctrl-, uncheck Launch Toolbox App at system startup"; }

JetBrainsFinalWin()
{
	mergeDir "$up/JetBrains Toolbox" "$up/Development/other" || return
	mergeDir "$up/JetBrains" "$up/Development/other" || return
	registry delete "urun/JetBrains Toolbox" || return	# "C:\Users\jjbutare\AppData\Local\JetBrains\Toolbox\bin\jetbrains-toolbox.exe" --minimize
}

JustInstall()
{
	header "just" # https://github.com/casey/just

	if IsPlatform debian,mac && [[ ! $force ]]; then run --executable "shareware/just" # https://github.com/casey/just/releases
	else run --rust "just"
	fi
}

#################################################
# communications
#################################################

CommunicationsAllInstall() { i TeamViewer zoom; }
CommunicationsCoreInstall() { i zoom; }

TeamViewerInstall()
{
	run --name "TeamViewer" "other/TeamViewer/TeamViewer_Setup.exe|TeamViewer.dmg|teamviewer_15.5.3_amd64.deb" || return # https://www.teamviewer.com/en/download/
}

TeamViewerFinalWin()
{
	$mv "$pp/TeamViewer.lnk" "$pp/Operating System" || return
	$rm "$pd/TeamViewer.lnk" || return
}

ZoomInstall()
{
	header "Zoom" # https://support.zoom.us/hc/en-us/articles/207373866-Zoom-Installers
	local suffix; IsPlatform arm && suffix="_arm"
	run "other/Zoom/ZoomInstallerFull$suffix.msi|zoomusInstallerFull$suffix.pkg|zoom_amd64.deb" || return
}

ZoomFinalMac() { mergeDir "$udoc/Zoom" "$udata/app"; }

ZoomFinalWin()
{
	mergeDir "$pp/Zoom" "$pp/Applications/Other" || return
	$rm "$pd/Zoom.lnk" || return
	$rm "$ud/Zoom.lnk" || return
	moveAppData "Zoom" || return	
	registry delete "urun/Zoom" || return # "C:\Program Files (x86)\Zoom\bin\Zoom.exe" --background=true
}

#################################################
# database
#################################################

DatabaseAllInstall() { i MySql MySqlWorkbench SqlPrompt SqlServer SqlServerManagementStudio SsmsBoost; }
DatabaseCoreInstall() {	header "Database Core"; i SqlServerManagementStudio SqlPrompt SqlServer; }
MySqlWorkbenchInstall() { run --header "MySQL Workbench" "shareware/MySql/workbench/mysql-workbench-community-8.0.23-winx64.msi||mysql-workbench-community_8.0.23-1ubuntu20.04_amd64.deb"; } # https://dev.mysql.com/downloads/workbench/
MySqlWorkbenchFinalWin() { mergeDir "$pp/MySQL" "$pp/Development/Other" && moveAppData "dumps" "MySQL Dumps"; }
SsmsBoostInstall() { run "other/Microsoft/SQL Server/studio/plugins/SSMSBoostInstaller_3.4.6796.msi"; } # http://www.ssmsboost.com

Mysql8Install() { local version=8.0.22 MySqlInstall; }

MySqlInstall()
{
	header "MySQL Workbench" # https://dev.mysql.com/downloads/mysql/

	local wasInstalled; PackageInstalled mysql-server && wasInstalled="true"

	# install
	if [[ $version ]]; then
		run "shareware/MySql/setup/mysql-community-server_${version}-1ubuntu20.04_amd64.deb" || return
	elif ! PackageInstalled mysql-server; then
		pkg mysql-server || return
	fi

	# secure installation
	[[ ! $wasInstalled ]] && { sudo mysql_secure_installation || return; }

	# update network insterface configuration
	if ask 'Bind to all network interfaces'; then
		sudo sed -i "s/^bind-address\s*=\s127.0.0.1/bind-address		= 0.0.0.0/" "/etc/mysql/mysql.conf.d/mysqld.cnf" || return
		service restart mysql || return
	fi

	return 0
}

SqlPromptInstall() { run --name "SQL Prompt" "platform/win/RedGate/SQLPrompt_10.13.1.31417.exe" --copy-local; } # downloads to "$UADATA/Temp/Red Gate", http://www.red-gate.com/products/sql-development/sql-prompt

SqlPromptHelp()
{
	echot "\
- SQL Prompt
	- Help, Enter Serial Number...
	- Tabs, History, uncheck Restore open tabs"
}

SqlPromptFinalWin() { mergeDir "$pp/Red Gate" "$pp/Development/Other"; }

#################################################
# disk
#################################################

DiskAllInstall() { i AjaSystemTest backupper BorgBackup CleanMyMac DiskImager DiskInventortyX FileLocatorPro iExplorer ParagonExtFs PartitionAssistant TeraCopy ToDoBackup TrueImage vorta; }
AjaSystemTestInstall() { run --name "AJA System Test" "shareware/AJA System Test/AJA_SystemTest_12.5.0.msi"; }
AjaSystemTestFinalWin() {	mergeDir "$pp/AJA" "$oo"; }
BackupperInstall() { run --name "Backupper" "platform/win/AOMEI/Backupper/AOMEIBackupperStd.exe"; }
BackupperFinalWin() { mergeDir --rename "$pp/AOMEI Backupper" "$oo" && $rm "$pd/AOMEI Backupper.lnk"; }
CleanMyMacInstall() { run --header "CleanMyMac" "platform/mac/MacPaw/CleanMyMac/CleanMyMacX.dmg"; } # https://macpaw.com/cleanmymac
CleanMyMacHelp() { echot "- Notifications, uncheck all\n- Menu, uncheck Enable Menu"; }
CleanMyMacRegister() { register "CleanMyMac"; }
DiskImagerInstall() { run --name "Disk Imager" "shareware/other/win32diskimager-1.0.0-install.exe"; } # http://www.paragon-drivers.com/extfs-windows
DiskImagerFinalWin() { mergeDir "$pp/Image Writer" "$oo"; }
DiskInventortyXInstall() { run --name "Disk Inventory X" "shareware/Disk Inventory X/DIX1.0Universal.dmg"; } # http://www.derlien.com/downloads/index.html
ToDoBackupInstall() { run --name "ToDo Backup" "platform/win/EaseUS/ToDo Backup Home/tbh_trial.exe"; } # https://www.easeus.com/backup-software/personal.html
ToDoBackupFinalWin() { mergeDir --rename "$pp/EaseUS Todo Backup 11.5" "$oo/ToDo Backup" && $rm "$pd/EaseUS Todo Backup Home 11.5.lnk"; }
TeraCopyInstall() { run --name "TeraCopy" "platform/win/TeraCopy/teracopy3.5b2.exe"; } # https://codesector.com/teracopy
VortaInstall() { run --python-global vorta; }

BorgBackupInstall()
{
	header "Borg Backup"; local v="1.2.0" # https://borgbackup.readthedocs.io/en/stable/installation.html#from-source

	# check if installed
	InPath borg && [[ "$(borg --version)" == "borg $v" && ! $force ]] && return

	# other platforms
	IsPlatform qnap && { run --store "BorgBackup"; return; }
	IsPlatform CasaOs && { pkg borgbackup; return; }

	# prerequisites
	
	if IsPlatform debian; then
		pkg g++ gcc libfuse-dev || return
		pkg python3 python3-dev python3-virtualenv build-essential libacl1-dev libacl1 libssl-dev liblz4-dev libzstd-dev libxxhash-dev pkg-config || return		
		pkg-config python3-pkgconfig # returns an error, but borg installs successfully
	elif IsPlatform mac; then
		pkg python3 pkg-config lz4 openssl xxhash zstd || return
		i fuse || return
	fi

	# install
	{ ! InPath borg || [[ $force ]]; } && { run --no-header --python-global borgbackup || return; }
	pipxg inject borgbackup llfuse || return	

	# create directories
	makeDir "$ADATA/borg" || return
}

PartitionManagementInstall()
{
	! IsPlatform entware,mac,win && { pkg partitionmanager || return; } # KDE Partition Manager
	IsPlatform win && { pkg gparted || return; i PartitionAssistant || return; }
	return 0
}

FileLocatorProInstall()
{
	header "FileLocator Pro" # https://www.mythicsoft.com/filelocatorpro/download/
	local v="3278"
	run "platform/win/Mythicsoft/FileLocator Pro/filelocator_x64_$v.msi" || return
}

FileLocatorProFinalWin() { mergeDir "$pp/FileLocator Pro" "$oo"; }

iExplorerInstall() { run --header "iExplorer" "other/Macroplant/iExplorer/iExplorerSetup.exe|iExplorer-4.6.0.dmg"; } # https://macroplant.com/iexplorer/download
iExplorerFinalMac() { i fuse; }

iExploreFinalWin()
{
	registry delete "urun/iExplorer" # "C:\Program Files (x86)\iExplorer\iExplorer.exe" /background
	mergeDir "$pp/iExplorer" "$oo" || return
	$rm "$oo/iExplorer/Uninstall iExplorer.lnk" || return
	$rm "$oo/iExplorer/iExplorer on the Web.url" || return
	QuickTimeFinalWin || return
}

ParagonExtFsInstall()
{
	header "Paragon ExtFS" # http://www.paragon-drivers.com/extfs-windows/
	run "platform/win/Paragon/ExtFS/Paragon-608-PEU_WinInstallSN-4.3.852.msi" || return
}

ParagonExtFsFinalWin()
{
	mergeDir --rename "$pp/Paragon ExtFS for Windows" "$oo/Paragon ExtFS" || return
	$rm "$pd/Paragon ExtFS for Windows.lnk" || return
	service manual "ParagonMounter" || return # does not allow computer to sleep
}

PartitionAssistantInstall()
{
	header "Partition Assistant" # https://www.aomeitech.com/pa/professional.html?ref=en.nav.partition-manager
	run "platform/win/AOMEI/Partition Assistant/PAssist_ProDemo.exe" --elevate || return
}

PartitionAssistantFinalWin()
{
	mergeDir --rename "$pp/AOMEI Partition Assistant" "$oo/Partition Assistant" || return
	$ren "$oo/Partition Assistant/AOMEI Partition Assistant Demo Edition "*".lnk" "$oo/Partition Assistant/Partition Assistant.lnk" || return
	rmSudo "$pd/AOMEI Partition Assistant"*".lnk" || return
}

TrueImageInstall()
{
	header "True Image" # https://www.acronis.com/en-us/support/updates/index.html
	local f="AcronisTrueImage2019."
	run "acronis/True Image/setup/$f.exe|$f.dmg." || return
}

TrueImageHelp()
{
	echot "\
- Active Protection, off
- settings, Mobile backup location=d:\backup"
}

TrueImageFinalWin()
{
	mergeDir "$pp/Acronis" "$oo" || return
	$rm "$pp/Acronis True Image.lnk" || return
	$rm "$pd/Acronis True Image.lnk" || return
	registry delete "run/Acronis Scheduler2 Service" # C:\Program Files (x86)\Common Files\Acronis\Schedule2\schedhlp.exe
	registry 32 delete "run/AcronisTibMounterMonitor" # C:\Program Files (x86)\Common Files\Acronis\TibMounter\TibMounterMonitor.exe
	registry 32 delete "run/TrueImageMonitor.exe" # C:\Program Files (x86)\Acronis\TrueImageHome\TrueImageMonitor.exe
}

#################################################
# File Hosting
#################################################

FileHostingCoreInstall() { i Dropbox iCloud OneDrive; }

DropboxInstall()
{
	local v="169.4.5684" # i DropboxDownload; https://www.dropbox.com/install-linux
	local mac=" $v"; IsPlatform mac && [[ "$installType" == "beta" ]] && mac="Installer"; # https://www.dropboxforum.com/t5/Dropbox-desktop-client-builds/bd-p/101003016
	run --name "dropbox" "other/Dropbox/Dropbox $v Offline Installer.x86.exe|Dropbox${mac}.dmg|dropbox_2020.03.04_amd64.deb" --version=$v --elevate -- /S || return
} 

DropboxHelp()
{
	echot "\
- Dropbox, Preferences...,
  - General, Dropbox Badge, Show only if others present
  - Backups, uncheck Show setup notifications when new external drivers are plugged-in.
  - Notifications, uncheck New files synced, Edits to files"
}

DropboxFinalLinux()
{
	local company user; dropboxGetInfo || return
	makeLink "$HOME/$company Dropbox/$user" "$HOME/Dropbox" || return
}

DropboxFinalMac()
{
	local company user; dropboxGetInfo || return
	makeLink "$HOME/Library/CloudStorage/Dropbox-$company/$user" "$HOME/Dropbox" || return
}

DropboxFinalWin()
{
	local company user; dropboxGetInfo || return

	mergeDir "$up/Dropbox" "$up/Applications/Other" || return
	mergeDir "$pp/Dropbox" "$pp/Applications/Other" || return
	$rm "$up/Startup/Dropbox.lnk" || return
	$rm "$ud/"*"Dropbox.lnk" "$ud/$company Dropbox.lnk" || return

	#registry 32 delete "run/Dropbox" # "C:\Program Files (x86)\Dropbox\Client\Dropbox.exe" /systemstartup
	registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{E31EA727-12ED-4702-820C-4B6445F28E1B}/" # Desktop Dropbox icon
	registry set "HKCU/SOFTWARE/Classes/CLSID/{E31EA727-12ED-4702-820C-4B6445F28E1A}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 > /dev/null || return # Desktop Dropbox icon

	makeLink "$WIN_HOME/$company Dropbox" "$HOME/$company Dropbox" || return
	makeLink "$WIN_HOME/$company Dropbox/$user" "$HOME/Dropbox" || return
	$hide "$WIN_HOME/$company Dropbox/.dropbox" || return
}

DropboxDownload()
{
	header "Dropbox Download"

	# find the install ocation
	findFile "other/Dropbox" || return; cd "$file" || return

	# download
	local url urls=("https://www.dropbox.com/download?full=1&plat=mac" "https://www.dropbox.com/download?full=1&plat=win")
	for url in "${urls[@]}"; do
		local file; file="$(curl --silent -H -L "$url" |& grep "The resource was found" | cut -d" " -f6 | RemoveAfter ';' | UrlDecodeAlt)" || { ScriptErr "unable to download '$url'"; return 1; }
		file="$(GetFileName "$file")"
		if [[ $force || ! -f "$file" ]]; then
			hilight "Downloading '$file'..."
			curl -L "$url" --output "$file" || return
			echo .
		fi
	done
}

dropboxGetInfo()
{
	company="$(ConfigGet "dropboxCompany")" || return
	user="$(ConfigGet "dropboxUser")" || return
}

iCloudInstall() { run --name "iCloud" --store "9PKTQ5699M62"; } # http://support.apple.com/kb/DL1455

iCloudHelp()
{
	echot "\
iCloud Control Panel
- uncheck Mail, Contacts, Calendars, & TaskLayoutInstall
- Bookmarks, check only Firefox"
}

OneDriveInstall() { :; }

OneDriveFinalWin()
{
	if [[ -d "$WIN_HOME/OneDrive - DriveTime" ]]; then makeLink "$WIN_HOME/OneDrive - DriveTime" "$HOME/OneDrive" || return
	elif [[ -d "$WIN_HOME/OneDrive" ]]; then makeLink "$WIN_HOME/OneDrive" "$HOME/OneDrive" || return
	fi

	SetVar --delete OneDrive || return
	registry delete "urun/OneDrive" # "C:\Users\jjbutare\AppData\Local\Microsoft\OneDrive\OneDrive.exe" /background
	registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/" # Desktop One Drive icon
	registry set "HKCR/CLSID/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return
}

#
# finances
#

FinanceAllInstall() { i quickbooks quicken; }
QuickBooksInstall() { run --name "Quick Books" "Intuit/QuickBooks-Setup.exe"; }
QuickBooksFinalWin() { $mv "$ud/QuickBooks.lnk" "$pp/Applications" && $mv "$up/QuickBooks.lnk" "$pp/Applications"; }
QuickenInstall() { run --name "Quicken" "other/Quicken/Quicken.exe|Quicken.dmg" --elevate --pause; } # https://www.quicken.com/activate
QuickenFinalWin() { mergeDir --rename "$pp/Quicken" "$ao/Quicken" && $rm "$pd/Quicken.lnk"; }

#################################################
# graphics
#################################################

GraphicsCoreInstall() { i picasa FastStoneImageViewer IrfanView PaintNet; }

FastStoneImageViewerInstall() { run -- name "FastStone Image Viewer" "shareware/FastStoneImageViewer/setup/FSViewerSetup53.exe"; }

FastStoneImageViewerHelp()
{
	echot "Settings, Settings (F12)
	- Viewer
		- uncheck Confirm on ESC exit
		- uncheck Confirm on overwriting files
		- uncheck Auto-Load next image in Crop Board
		- Single File Deleted to=Recyle-Bin, No Confirmation
	- Dual Monitor, check "Preview" on the secodary monitor
	- Associations, Select All
	- Favorites, Add, P:(\\NAS\Photo), Display Name=NAS"
}

FastStoneImageViewerProfile() { fsview start; }

FastStoneImageViewerFinalWin() { $rmd "$pp/FastStone Image Viewer" && $mv "$pd/FastStone Image Viewer.lnk" "$pp/Media"; }

IrfanViewInstall()
{
	header "IrfanView"

	run "shareware/IrfanView/setup/iview451_x64_setup.exe" || return
	run "shareware/IrfanView/setup/irfanview_plugins_436_setup.exe" || return
}

IrfanViewFinalWin()
{
	mergeDir "$up/IrfanView" "$pp/Media/Other" || return
	$rm "$ud/IrfanView 64.lnk" || return
	$rm "$ud/IrfanView 64 Thumbnails.lnk" || return
}

PaintNetInstall()
{
	run -- name "paint.net" "shareware/paint.net/setup/paint.net.4.0.6.install.exe" || return # http://www.getpaint.net/
}

PaintNetFinalWin()
{
	$mv "$pp/paint.net.lnk" "$pp/Media" || return
	$rm "$pd/paint.net.lnk" || return
}

PicasaInstall()
{
	header "Picasa"

	echot "\
- Completing the Picasa 3 Setup
  - Uncheck Google as my default search engine in Internet Explorer
  - Uncheck Send anonymous usage stats to Google
- Only search My Documents, My Pictures, and Desktop
- Select Don't use Picasa Photo Viewer"

	run "other/Google/Picasa/setup/Picasa Setup v3.9.139.161.exe" || return
	run "other/Google/Picasa/starter/image v2.0.zip" --dest "$P32/PicasaStarter" --elevate || return
}

PicassaHelp()
{	
	echot "Tools, Options
- General
	- Check Single-click to exit Edit View
	- Delete from disk without confirmation
	- Check Remove from album without confirmation
- E-Mail, E-mail program=Use my Google account
- File Types, select .PNG
- Name Tags, check Store name tags in photo"
}

PicassaProfile() { picasa start; }

PicasaFinalWin()
{
	mergeDir --rename "$pp/Picasa 3" "$pp/Media/Other/Picasa" || return
	mergeDir "$up/Google+ Auto Backup" "$up/Operating System/Other" || return
	$rm "$pp/Media/Other/Picasa/Uninstall.lnk" || return
	$rm "$pd/Picasa 3.lnk" || return
	$makeShortcut "$P32/PicasaStarter/PicasaStarter.exe" "$pp/Media/Other/Picasa/Picasa Starter" || return
}

#################################################
# Linux
#################################################

LinuxAllInstall() {  i LinuxMinimalUtilities LinuxUtilities LinuxNetworkUtilities chroot cups dbus gpg rsyslog; }
LinuxInstall() { :; } # called by bootstrap

LinuxMinimalUtilitiesInstall()
{
	header "Linux Minimal Utilities"
	pkg di lsof ncdu tree || return																	# file
	pkg nethogs pv || return																				# monitoring
	pkg fail2ban fping mosh ncat nmap traceroute whois || return		# network
	pkg ntpdate || return																						# other
	i fd jq magic || return
}

LinuxUtilitiesInstall()
{
	header "Linux Utilities"

	pkg di lsof ncdu tree || return										# file
	pkg atop iotop iperf3 || return										# monitoring
	pkg ipcalc iproute2 || return											# network, iproute2 (ip command)
	pkg daemonize psmisc || return										# process
	pkg shellcheck || return													# script
	pkg sox || return																	# sound (play)
	pkg direnv timewarrior util-linux || return				# other
	i bat cheat choose dog duf dust exa httpie mcfly procs ripgrep || return
}

LinuxNetworkUtilitiesInstall()
{
	header "Linux Network Utilities"
	pkg lynx nmap || return
}

ChrootInstall()
{
	header "chroot"
	pkg debootstrap schroot qemu-user-static || return
	makeDir --sudo "/var/chroot" || return
	return 0
}

CupsInstall()
{
	# install
	package cups || return
	
	# configure
	GroupAddUser "lpadmin" || return
	sudo cupsctl --remote-admin --remote-any --share-printers || return

	# set allowed host headers
	local file="/etc/cups/cupsd.conf"
	if ! sudo grep -q "^ServerAlias " "$file"; then
		echo "ServerAlias cups.$(ConfigGet "baseDomain") $HOSTNAME $HOSTNAME.$(ConfigGet "domain")" | sudo ${G}tee -a "$file" || return
	fi

	# show the web interface URL
	httpsShow "631" || return
}

DbusInstall()
{
	# shared D-Bus
	IsPlatform debian && ! PackageInstalled dbus-user-session && { package dbus-user-session || return; }

	# fix WSL error message
	local file="/usr/share/dbus-1/system.d/org.freedesktop.NetworkManager.conf"
	IsPlatform wsl && [[ -f "$file" ]] && grep -q "whoopsie" "$file" && { echo "Remove whoopsie policy..."; sudoe "$file"; }
	
	return 0
}

GpgInstall()
{
	header "GNU PGP"
	pkg gpg || return

	if [[ ! -d "$HOME/.gnupg" ]]; then
			echot "Accept defaults except for:\n
- "
		gpg --full-generate-key || return
	fi
}

RsyslogInstall()
{
	! os IsServer && return # remote logging only on servers
	local server="$(ConfigGetCurrent syslog)"; [[ ! $server ]] && return # return if there is no syslog server defined

	# install rsyslog
	run --package --header "rsyslog" rsyslog || return

	# configure
	local file="/etc/rsyslog.d/10-remote.conf"
	local line="*.* @$server:514"
	[[ -f "$file" && ! $force ]] && return
	echo "$line" | sudo ${G}tee "$file" || return
	sudoc systemctl restart rsyslog --no-block || return # rsyslog hangs on restart
}

#################################################
# Game
#################################################

GameAllInstall() { i GameIcon EpicGames Oculus Origin Steam Uplay; }
GameIconInstall() { runCheck="true"; }

GameIconFinalWin()
{
	local data="$CLOUD/data"

	i OculusFinal OriginFinal SteamFinal UplayFinal || return

	moveAppData "Rockstar Games" || return
	moveAppData "Shadow of the Tomb Raider" || return
	mergeDir "$pp/Call of Duty Modern Warfare" "$pp/Game/Other" || return
	mergeDir "$pp/Battle.net" "$pp/Game/Other" || return


	$mv "$ud/Atomic Heart.url" "$pp/Game" || return
	$mv "$ud/The Elder Scrolls V Skyrim VR.url" "$pp/Game" || return
	$mv "$ud/Far Cry 5.url" "$pp/Game" || return
	$mv "$ud/Fortnite.url" "$pp/Game" || return
	$mv "$ud/Grand Theft Auto V.url" "$pp/Game" || return
	$mv "$ud/Half-Life 2 Lost Coast.url" "$pp/Game" || return
	$mv "$ud/Half-Life Alyx.url" "$pp/Game" || return
	$mv "$ud/High On Life.url" "$pp/Game" || return	
	$mv "$ud/Hot Dogs, Horseshoes & Hand Grenades.url" "$pp/Game" || return
	$mv "$ud/Jurassic World Evolution.url" "$pp/Game" || return
	$mv "$ud/Middle-earth Shadow of Mordor.url" "$pp/Game" || return
	$mv "$pp/Minecraft Launcher/Minecraft Launcher.lnk" "$pp/Game" || return	
	$mv "$ud/realMyst Masterpiece Edition.url" "$pp/Game" || return
	$mv "$ud/NBA 2K17.url" "$pp/Game" || return
	$mv "$ud/Ravenfield.url" "$pp/Game" || return
	$mv "$ud/Red Dead Redemption 2.url" "$pp/Game" || return	
	$mv "$ud/Rockstar Games Launcher.lnk" "$pp/Game" || return
	$mv "$ud/Shadow of the Tomb Raider.url" "$pp/Game" || return
	$mv "$ud/Sons Of The Forest.url" "$pp/Game" || return
	$mv "$ud/STAR WARS Jedi Fallen Order™.url" "$pp/Game" || return
	$mv "$ud/The Witness.url" "$pp/Game" || return
	$mv "$ud/Tom Clancy's Rainbow Six Siege.url" "$pp/Game" || return

	$rmd "$pp/Minecraft Launcher" || return
	$rmd "$up/Rockstar Games" || return
}

EpicGamesInstall()
{
	run --name "Epic Games" "game/Epic Games/EpicInstaller-7.9.0.msi" || return # https://www.epicgames.com/account/personal#
}

EpicGamesFinalWin()
{
	$mv "$pp/Epic Games Launcher.lnk" "$pp/Game/Other" || return
	$rm "$pd/Epic Games Launcher.lnk" || return
	i GameIcon || return
}

OculusInstall() { run --name "Oculus" "game/oculus/OculusSetup.exe" --elevate; } # https://www.oculus.com/setup/
OculusFinalWin() { $mv "$pd/Oculus.lnk" "$pp/Game" && mergeDir "$psm/Oculus" "$pp/Game/Other" && moveAppData "Oculus Home" "Oculus"; }

OriginInstall() { run --name "Origin Games" "game/Origin/OriginThinSetup.exe|Origin.dmg"; } # https://www.origin.com/usa/en-us/store/download

OriginFinalWin()
{
	registry delete "urun/EADM" # "C:\Program Files (x86)\Origin\Origin.exe" -AutoStart
	mergeDir "$pp/Origin" "$pp/Game/Other" || return
	$rm "$pd/Origin.lnk" || return
}

SteamInstall() { run --name "Steam" "game/Steam/SteamSetup.exe|steam.dmg|steam_latest.deb" --elevate; } # http://store.steampowered.com/about/

SteamFinalWin()
{
	registry delete "urun/Steam" # Steam	Steam Client Bootstrapper	Valve Corporation, c:\program files (x86)\steam\steam.exe
	mergeDir "$up/Steam" "$pp/Game/Other" || return
	mergeDir "$pp/Steam" "$pp/Game/Other" || return
	$rm "$pd/Steam.lnk" || return
	moveAppData "steamvr" "Steam VR" || return
}

UplayInstall() { run --name "UPlay (UbiSoft)" "game/Ubisoft/UplayInstaller.exe"; }
UplayFinalWin() {	mergeDir "$up/Ubisoft" "$pp/Game/Other" && $rm "$ud/Uplay.lnk" && moveAppData "My Games" "Uplay"; }

#################################################
# Git
#################################################

GitAllInstall()
{
	i GitClient GitServer || return
	i fork GitExtensions ghq GitForWindows GitKraken GitHub gitx lazygit SublimeMerge TortoiseGit || return
	pkg git-extras gitg tig || return
}

GitCoreInstall()
{
	header "Git Core"
	pkg git || return
	i GitClient GitHub || return	
	RunPlatform gitCore || return
	! IsPlatform chroot,vm && { GitHelper clone bin || return; }
	return 0
}

gitCorePi() { pkg kompare || return; }

GitClientInstall() { RunPlatform gitClient; }
gitClientMac() { i GitKraken SublimeMerge; }
gitClientPi() { pkg gitg || return; }
gitClientUbuntu() { i GitKraken SublimeMerge; }

gitClientWin()
{
 	# posix permissions do not work well on windows file systems
	if IsPlatform wsl1; then
		sudo git config --system core.filemode false || return
	fi
	return 0
}

ForkInstall() { run --name "Fork" "git/Fork/ForkInstaller.exe|Fork-2.24.dmg" --pause; } # https://git-fork.com/
ForkFinalWin() { mergeDir "$up/Fork" "$up/Development/Other" && $rm "$ud/Fork.lnk" && gitFixWin "$UADATA/../Local/Fork/gitInstance/2.33.1/bin/git.exe"; }
ForkHelpMac() { echot "- Preferences, Integration, Install Command Line Tools"; }
ForkProfile() { ForkHelper $noPrompt profile restore default; }
GitUpInstall() { run --python-global git-up && git config --global git-up.rebase.auto false; }

GitExtensionsInstall()
{
	header "Git Extensions"

	# https://github.com/gitextensions/gitextensions/releases/latest
	run "git/GitExtensions/setup/GitExtensions-3.4.1.9675.msi" || return

	if [[ ! -d "$UADATA/../Roaming/GitExtensions/GitExtensions" ]]; then
		GitHelper gui || return
		echot "- English, Quit"
		pause
	fi

	local f="$WIN_HOME/.gitconfig.backup"
	[[ -f "$f" ]] && { attrib "$f" -h -s || return; }
	FileTouchAndHide "$WIN_HOME/.gitconfig.backup" || return
}

GitExtensionsProfile() { GitHelper profile restore default; }

GitExtensionsFinalWin()
{
	makeDir "$pp/Development/Other/Git" || return
	$mv "$pp/Git Extensions.lnk" "$pp/Development/Other/Git" || return
	$rm -f "$pd/Git Extensions.lnk" || return
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shellex/ContextMenuHandlers/GitExtensions2/" || return
	registry unregister "$P32/GitExtensions/GitExtensionsShellEx64.dll" || return
}

GhqInstall() {	run --name "ghq" --executable "git/ghq"; } # https://github.com/x-motemen/ghq/releases

GitForWindowsInstall()
{
	header "Git for Windows" # https://git-scm.com/download/win https://github.com/git-for-windows/git/releases/
	run "git/Git for Windows/setup/Git-2.39.0.2-64-bit.exe" -- /silent || return
	askp 'Configure Git For Windows' && { GitForWindowsConfigure || return; }
	return 0
}

GitForWindowsFinalWin()
{
		mergeDir "$pp/Git" "$pp/Development/Other" || return
	mergeDir "$up/Git" "$pp/Development/Other" || return
	$rm "$up/Git for Windows.lnk"	|| return

	# context menus
	registry delete "HKEY_CLASSES_ROOT/Directory/shell/git_gui/"
	registry delete "HKEY_CLASSES_ROOT/Directory/shell/git_shell/"
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shell/git_gui/"
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shell/git_shell/"
}

GitForWindowsConfigure()
{
	local gw="$P/Git/cmd/git.exe"

	echo "Configuring git for windows..."
	"$gw" config --system http.sslcainfo "$(utw "$P/Git/usr/ssl/certs/ca-bundle.crt")" || return
	"$gw" config --system core.fscache true || return
	"$gw" config --system core.filemode false || return
	"$gw" config --system core.autocrlf false || return
	"$gw" config --system credential.helper wincred || return
}

GitKrakenInstall()
{
	local v="9.2.0"; # https://www.gitkraken.com/download
	IsPlatformAll win,x64 && { run "git/Git Kraken/GitKraken-amd64.deb" || return; }
	run --header "Git Kraken" "git/Git Kraken/GitKrakenSetup.exe|installGitKraken_$(os architecture).dmg|GitKraken-amd64.deb" --version="$v" --copy-local || return
}

GitKrakenProfile() { GitKrakenHelper profile restore default; }
GitKrakenFinalWin() { mergeDir "$up/GitKraken" "$up/Development/Other"; }

GitKrakenDownload()
{	
	header "GitKraken Download"

	# change to the install location
	local file; findFile "git/Git Kraken" || return; cd "$file" || return

	# version
	local v="$(curl --silent https://www.gitkraken.com/download | ${G}grep "release:" | grep -oP '(?<=release:).*' | cut -d"<" -f1 | RemoveSpaceTrim)" || return
	[[ -f "version.txt" && "$(cat "version.txt")" == "$v" && ! $force ]] && return
	echo "$v" > "version.txt" || return

	# download
	local url urls=("https://release.axocdn.com/win64/GitKrakenSetup.exe" "https://release.axocdn.com/darwin/installGitKraken.dmg" "https://release.axocdn.com/darwin-arm64/installGitKraken.dmg" "https://release.axocdn.com/linux/gitkraken-amd64.deb")
	for url in "${urls[@]}"; do
		file="$(GetFileName "$url")"
		[[ "$url" =~ darwin-arm64 ]] && file="$(GetFileNameWithoutExtension "$file")_arm.dmg"
		[[ -f "$file" ]] && { rm "$file" || return; }
		hilight "Downloading '$file'..."
		curl -L "$url" --output "$file" || return
		echo
	done

	# show version
	echo "Downloaded GitKraken version $v"
}

GitHubInstall()
{
	# https://cli.github.com/manual/installation

	# Debian
	local file="/usr/share/keyrings/githubcli-archive-keyring.gpg"
	if IsPlatform debian && [[ ! -f "$file" || $force ]]; then
		SudoCheck || return
		curl -fsSL "https://cli.github.com/packages/githubcli-archive-keyring.gpg" | sudo dd of="$file" || return
		sudo chmod go+r "$file" || return
		echo "deb [arch=$(dpkg --print-architecture) signed-by=$file] https://cli.github.com/packages stable main" | sudo tee "/etc/apt/sources.list.d/github-cli.list" > /dev/null
		PackageUpdate || return
	fi

	package gh && sudoc MakeLink --symbolic "$(FindInPath "gh")" "/usr/local/bin/gh"
} 

GitHubRegister() { ! InPath gh && return; gh auth login && gh auth setup-git; }

GitHubHelp()
{
	echot "\
- GITHUB ENTERPRISE, GitHub Username or Email=IDSID
- Password=NNN
- GitHub Enterprise URL=https://GitHub.intel.com/
- Full Name=NNNN
- tools, options...
	- default storage directory=c:\Projects
	- SCAN FOR REPOSITORIES
- note:
	- GitHib is useful for quickly cloning a repository from GitHub
	- clone a repository - click an account on the left channel, right click on the repository, and select Clone To..."
}

GitHubFinalWin() { mergeDir --rename "$up/GitHub, Inc" "$up/Development/Other/GitHub" && $rm "$ud/GitHub.appref-ms" && $rm "$ud/Git Shell.lnk"; }

GitXInstall()
{
	header "GitX"
	run "git/GitX/GitX-dev.dmg" || return # http://rowanj.github.io/gitx/
}

LazyGitInstall()
{
	header "Lazy Git"
	IsPlatform debian && { sudo add-apt-repository --yes ppa:lazygit-team/release || return; }
	run --package lazygit || return
}

SublimeMergeInstall()
{
	local v="2079" # https://www.sublimemerge.com/download https://discord.com/channels/280102180189634562/650695903446827011 (beta)
	local args=(); ! CanElevate && args+=(--dest "$UADATA/Sublime Merge")
	run --header "Sublime Merge" "other/Sublime/merge/sublime_merge_build_${v}_x64$(getElevate "_setup.exe" ".zip")|sublime_merge_build_${v}_mac.zip|sublime-merge_build_${v}_$(getArch "amd64" "arm64").deb" --version "$v" "${args[@]}" || return;
}

SublimeMergeFinalWin()
{
	if ! CanElevate; then
		$makeShortcut "$UADATA/Sublime Merge/sublime_merge.exe" "$up/Applications/Sublime Merge" || return
		gitFixWin "$UADATA/Sublime Merge/Git/cmd/git.exe" || return
		return
	fi

	$mv "$pp/Sublime Merge.lnk" "$pp/Applications" && gitFixWin "$P/Sublime Merge/Git/cmd/git.exe" "elevate"; 
}

SublimeMergeProfile() { SublimeMerge $noPrompt profile restore default; }
SublimeMergeRegister() { register "SublimeMerge"; }

TortoiseGitInstall()
{
	header "TortoiseGit"

	echot "- (optional) Check Registrer link handlers"
	run "shareware/TortoiseGit/setup/TortoiseGit-1.8.7.0-64bit.msi" || return # https://code.google.com/p/tortoisegit/wiki/Download?tm=2
}

TortoiseGitHelp()
{
	local clip; clip="$(utw "$program")"; clipw "$clip"
	findCompareProgram || return
	echot "\
- General
	- Contect Menu, uncheck all but Clone and Show log
	-Dialogs 1, check Enable Gravatar
- (optional) Diff Viewer (1 place) and Merge Tool (1 place), External=<paste> ($clip)
- Icon Overlays
	- check Unversioned files mark parent folder as modified
	- Icon Set, Icon Set=Straight"
}

TortoiseGitFinalWin() { mergeDir "$pp/TortoiseGit" "$pp/Development/Other"; }

# gitFixWin GIT_PROGRAM [elevate] - file permissions does not work for Windows git programs
gitFixWin()
{
	local git="$1"
	[[ ! -f "$1" ]] && return
	$(LowerCase "$2") "$git" config --system core.filemode false
}

#################################################
# hardware
#################################################

HardwareAllInstall() { i BetterDisplay BlueSherpa BrotherPrinter CanonCamera CrealitySlicer DasKeyboard DellDisplayManager DisplayLink DoxieGo dymo Epson4760 EpsonScan HardwareMonitor Hp920 MsiCreatorCenter MsiSilentOption IntuosPro LgMonitor LogitechOptions LogitechGhub PowerPanel RealtekCardReader SilentOption; }

BetterDisplayInstall() { local v="1.3.10b"; run --name="BetterDisplay" "platform/mac/BetterDisplay/|BetterDisplay-v$v.dmg" --version=$v; } # https://github.com/waydabber/BetterDisplay
CpuzInstall() { run --name "CPU-Z" "hardware/CPUID/cpu-z_1.92-en.exe"; } # https://www.cpuid.com/softwares/cpu-z.html
CpuzFinalWin() { mergeDir "$pp/CPUID" "$oo" && 	$rm "$pd/CPUID CPU-Z.lnk"; }
DisplayLinkInstall() { run --name "Display Link Manager" "hardware/Synaptics/DisplayLink/|DisplayLink Manager Graphics Connectivity1.8-EXE.pkg"; } # https://support.displaylink.com/
HardwareMonitorInstall() { run --name "CPU-Z" "hardware/CPUID/hwmonitor-pro_1.47.exe"; } # https://www.cpuid.com/softwares/hwmonitor-pro.html
HardwareMonitorFinalWin() { mergeDir "$pp/CPUID" "$oo" && 	$rm "$pd/CPUID HWMonitorPro.lnk"; }
HarmonyRemoteInstall() { run --name "Harmony Remote" "Logitech/Harmony Remote/LogitechHarmonyRemote7.7.0-WIN-x86.exe"; } # http://www.logitech.com/en-us/440/6441?section=downloads&bit=&osid=14
HarmonyRemoteFinalWin() { mergeDir "$pp/Logitech" "$ao" && $rm "$pd/Logitech Harmony Remote Software 7.lnk"; }
IntuosProInstall() { run --name "Intuos Pro" "other/Intuos/Pro/setup/WacomTablet_6.3.16-2.exe|WacomTablet_6.3.15-3.dmg"; } # http://us.wacom.com/en/support/drivers
IntuosProFinalWin() { mergeDir "$pp/Wacom Tablet" "$pp/Media/Other"; }
LgMonitorInstall() { run --name "LG Monitor" "hardware/LG/Gaming Monitor 34UC89G/OSC2_Setup_2-86.exe"; }
LgMonitorFinalWin() {	mergeDir "$pp/OnScreen Control" "$oo" && $rm "$pd/OnScreen Control.lnk"; }
RealtekCardReaderInstall() { run "hardware/Realtek/Card Reader/setup/v10.0.19041.21342/setup.exe" --elevate -- /S; } # 	https://www.intel.com/content/www/us/en/download/19417/realtek-card-reader-driver-for-windows-10-windows-11-for-several-intel-nuc-product-families.html
MsiSilentOptionInstall() { run --name "MSI Silent Option" "hardware/MSI/Silent Option/setup.exe"; } # https://forum-en.msi.com/index.php?threads/updated-2016-05-06-silent-option-fan-control-application-for-msi-laptops.255972/
MsiSilentOptionFinalWin() { mergeDir "$pp/Silent Option" "$oo" && $rm "$pd/Silent Option.lnk"; }
QflipperInstall() { local v="1.2.2"; run --header "qFlipper" "hardware/Flipper/qFlipperSetup-64bit-$v.exe|qFlipper-$v.dmg|qFlipper-x86_64-$v.AppImage"; }
QflipperFinalWin() { $mv "$up/qFlipper.lnk" "$pp/Applications"; }

PowerCoreInstall()
{
	[[ ! $force ]] && ! UpdateNeeded "PowerCore" && return
	IsPlatformAll physical,win && { power fix disable || return; }
	UpdateDone "PowerCore"	
}

BalenaEtcherInstall() # disc image burner
{
	header "Balena Etcher"
	local v="1.18.4" dir="hardware/Balena/Etcher" # https://www.balena.io/etcher/
	run "$dir/balenaEtcher-Setup-$v.exe|balenaEtcher-$v.dmg|balena-etcher-electron-$v-linux-x64.zip" || return

	v="v15.0.3" 
	file="balena-cli-$v" # https://github.com/balena-io/balena-cli/releases
	run "$dir/$file-windows-x64-standalone.zip|$file-macOS-x64-standalone.zip|$file-linux-x64-standalone.zip" --dest "balena-cli" --elevate || return
}

BalenaEtcherFinalWin()
{
	$mv "$up/balenaEtcher.lnk" "$up/Applications" || return
	$rm "$ud/balenaEtcher.lnk" || return
}

BlueSherpaInstall()
{
	header "Blue Sherpa" # https://www.bluemic.com/en-us/products/sherpa/
	local file="BlueSherpa-20191022"
	run "hardware/Yeti/blue/$file.exe|$file.pkg" || return
	return 0
}

BlueSherpaFinalWin()
{
	mergeDir "$pp/Blue Sherpa" "$pp/Media/Other" || return
}

BrotherPrinterInstall()
{
	header "Brother Printer" # https://support.brother.com/g/b/downloadtop.aspx?c=us&lang=en&prod=mfcl2740dw_us_eu_as	
	echot "- Connection Type=Wired, check Custom Install
- Select Features=check only Network* and ControlCenter4"

	! IsPlatform win && return

	# Windows setup
	local setup="$(PlatformTmp)/install/MFC-L2740DW_series/Setup.exe"

	# decrompress setup - the compressed executable does not run properly from WSL
	if [[ ! -f "$setup" ]]; then
		findFile "hardware/Brother/MFC-L2740DW/setup/install.zip" || return # removed driver/ps|pcfaxtx
		unzip "$file" -d "$(PlatformTmp)"
	fi

	# run setup
	elevate "$setup" || return
	pause
	rm -fr "$(PlatformTmp)/install" || return
}

BrotherPrinterFinalWin()
{
	mergeDir "$pp/Brother" "$ao" || return
	$mv "$pd/Brother Creative Center.lnk" "$ao/Brother" || return
	$rm "$pd/Brother Utilities.lnk" || return
	registry 32 delete "RunOnce/BrUrl" || return # rundll32 url.dll,FileProtocolHandler http://www.brother.com/rd/productreserch/usa/
	registry 32 delete "RunOnce/OmniJoinURL" || return # C:\Program Files (x86)\Brother\Brmfl14d\OmniJoinTrial.exe /R
	registry 32 delete "run/BrStsMon00" # C:\Program Files (x86)\Browny02\Brother\BrStMonW.exe /AUTORUN
	registry 32 delete "run/ControlCenter4" # C:\Program Files (x86)\ControlCenter4\BrCcBoot.exe /autorun
}

CanonCameraInstall()
{
	header "Canon Camera" # https://www.usa.canon.com/internet/portal/us/home/support/details/cameras/eos-dslr-and-mirrorless-cameras/mirrorless/eos-r?tab=drivers_downloads
	local file="EOS Utility v3.12.10"
	run "hardware/Canon/EOS R/setup/$file.exe|$file.zip" || return
}

CanonCameraFinalWin()
{
	mergeDir "$pp/Canon Utilities" "$pp/Media/Other" || return
	$rm "$pd/EOS Utility.lnk" || return
	$rm "$pp/Startup/EOS Utility.lnk" || return # "C:\Program Files (x86)\Canon\EOS Utility\EOS Utility.exe" /AutoStartUp
}

CorsairUtilityEngineInstall()
{
	header "Corsair Utility Engine (CUE)" # https://www.corsair.com/us/en/downloads
	run "hardware/Corsair/Utility Engine/iCUESetup_4.28.174_release.msi" || return
}

CorsairUtilityEngineProfile() { profile restore default --app "CorsairUtilityEngine" --method "$UADATA/../Roaming/Corsair/CUE4"; }

CorsairUtilityEngineFinalWin()
{
	mv "$pd/iCUE.lnk" "$pp/Operating System" || return
	registry 32 delete "run/CORSAIR iCUE Software" || return # "C:\Program Files (x86)\Corsair\iCUE\iCUE Launcher.exe" --autorun	
}

CrealitySlicerInstall()
{
	header "Creality Slicer" # https://www.creality.com/download/
	local v="4.2"
	run "hardware/Creality/Ender-3 V2/setup/Creality Slicer_$v/Creality Slicer_$v.msi" || return
}

CrealitySlicerFinalWin()
{
	$mv "$pp/Creality Slicer.lnk" "$pp/Applications" || return
	$rm "$pd/Creality Slicer.lnk" || return
}

CricutInstall()
{
	header "Cricut" # https://design-beta2.cricut.com/#/download
	local f="Cricut Design Space Install v5.2.14"
	run "hardware/Cricut/$f.exe|$f.dmg" || return
}

CricutFinalWin()
{
	registry delete "run/ErmTray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe
	mergeDir "$up/Cricut Design Space Beta" "$up/Applications/other" || return
	$mv "$ud/Cricut Design Space.lnk" "$up/Applications" || return
	$mv "$ud/Cricut Design Space Beta.lnk" "$up/Applications" || return
	$rm "$up/Startup/Cricut Taskbar Application.lnk" || return # "C:\Users\jjbutare\AppData\Roaming\Cricut Design Space\Web\taskbar-application-win32\Release\CricutTaskbarApplication.exe"
}

DasKeyboardInstall()
{
	run --name "Das Keyboard" "hardware/Das Keyboard/setup/Das-Keyboard-Q_3.2.4.exe|q-Desktop.img" || return # https://www.daskeyboard.io/get-started/
}

DasKeyboardFinalWin()
{
	mergeDir "$pp/Das-Keyboard-Q" "$oo" || return
	$rm "$ud/das-keyboard-q.lnk" || return
	$rmd "$up/GitHub, Inc" || return
	registry 32 delete "run/Das Keyboard Q" || return # C:\Users\jjbutare\AppData\Local\das-keyboard-q\das-keyboard-q.exe
}

DellDisplayManagerInstall() { run --header "Dell Display Manager" "hardware/Dell/Dell Display Manager/setup/ddmsetup.exe|DDMP_Installer.pkg" --elevate --copy-local; } # https://www.dell.com/support/home/en-us/product-support/product/dell-u4021qw-monitor/drivers
DellDisplayManagerProfile() { DellDisplayManager $noPrompt profile restore default; }	

DellDisplayManagerFinalWin()
{
	mergeDir --rename "$pp/Dell Display Manager" "$oo/Dell Display Manager" || return
	$rm "$pp/Startup/Dell Display Manager.lnk" || return	
}

DjiInstall() { run --name "DJI" "hardware/dji/Assitant/setup/DJI Assistant 2 1.2.3.exe|DJI+Assistant+2+1.2.3.pkg"; } # https://www.dji.com/mavic/info#downloads
DjiFinalWin() { mergeDir --rename "$up/DJI Product" "$pp/Travel/Other/DJI" && mergeDir --rename "$pp/DJI Product" "$pp/Travel/Other/DJI" && $rm "$pd/DJI Assistant 2.lnk"; }

DoxieGoInstall() { run --name "Doxie Go" "hardware/Doxie/Go/DoxieSetup_3.0.exe|Doxie-3.0.dmg"; } # http://help.getdoxie.com/doxiego/
DoxieGoFinalWin() { $mv "$pd/Doxie.lnk" "$pp/Operating System" && $rmd "$pp/Doxie"; }

DuetDisplayInstall() { run --name "Duet Display" "hardware/duet/DuetSetup-1-8-2-1.exe|duet-2-3-0-5.zip" "" --elevate; } # https://www.duetdisplay.com/#download

DuetDisplayFinalWin()
{
	mergeDir "$pp/Duet Display" "$oo" || return
	$rm "$pd/duet.lnk" || return
	registry 32 delete "run/Duet Display" # C:\Program Files\Kairos\Duet Display\duet.exe
}

DymoInstall() { run --name "Dymo Label" "hardware/DYMO/DCDSetup1.3.2.exe|DLS8Setup.8.7.5.dmg" --elevate; } # http://www.dymo.com/en-US/dymo-user-guides

DymoHelp()
{
	echot "\
- Preferences, Printers & Scanners, +, Windows (last icon on right), wiggin, pi4, Study_Color_Printer
	- name=Study Label Printer
	- Location=Study Closet
	- Use=Select Software..., Filter=450, clock DYMO LabelWriter 450"
}

DymoFinalMac()
{
	local base="$UDATA/app/DYMO Label"
	local addressBook="$base/Address Books" label="$base/Labels"

	# ~/Documents/DYMOS Label Software is still re-created on startup
	mergeDir --rename "$udoc/DYMO Label Software" "$base" || return

	defaults write com.dymo.dls DataTrackingFolder -string "~/data/app/DYMO Label" || return
	defaults write com.dymo.dls AddressBookDirectory -string "$addressBook" || return
	defaults write com.dymo.dls LabelsDirectory -string "$label" || return

	defaults write com.dymo.dls LastAddressBookDirectory -string "$addressBook" || return
	defaults write com.dymo.dls LastLabelsDirectory -string "$label" || return
	defaults write com.dymo.dls LastSavedFile -string "" || return

	defaults write com.dymo.dls DefaultReturnAddress -string "John Butare\\n9204 Hagerman Ave., NE\\nAlbuquerque,NM 87109" || return
}

DymoFinalWin()
{
	mergeDir "$pp/DYMO" "$ao" || return
	$rm "$pd/DYMO Connect.lnk" || return

	registry 32 delete "run/DymoOfficeHelper" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMO.OfficeHelper.exe" /w
	registry 32 delete "run/DYMOWebApi" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMO.WebApi.Win.Host.exe" /auto
	registry delete "urun/DYMOConnectLauncher" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMOConnectLauncher.exe"
}

EpsonScanInstall()
{
	header "Epson Scan" # https://epson.com/Support/Scanners/Perfection-Series/Epson-Perfection-V100-Photo/s/SPT_B11B184051
	run "hardware/Epson/Perfection V100 Photo/epson13833.exe" || return
}

EpsonScanFinalWin() { mergeDir "$pp/EPSON Scan" "$oo" && $rm "$pd/EPSON Scan.lnk"; }

Epson4760Install()
{
	header "Epson 4760 Printer" # https://www.epson.com/support/et4760
	run "hardware/Epson/ET-4660/ET4760_Lite_NA.exe|ET4760_Lite_64NR_NA.dmg" || return
}

Epson4760FinalWin()
{
	mergeDir "$pp/EPSON" "$oo" || return
	mergeDir "$pp/EPSON Software" "$oo" || return
	$rm "$pd/Epson ET-4760 User’s Guide.url" || return
	registry delete "urun/EPSDNMON" || return	# "C:\Program Files (x86)\EPSON Software\Download Navigator\EPSDNMON.EXE"
	registry 32 delete "run/EEventManager" || return	# "C:\Program Files (x86)\Epson Software\Event Manager\EEventManager.exe”
	registry 32 delete "run/FUFAXRCV" || return	# "C:\Program Files (x86)\Epson Software\FAX Utility\FUFAXRCV.exe”
	registry 32 delete "run/FUFAXSTM" || return	# "C:\Program Files (x86)\Epson Software\FAX Utility\FUFAXSTM.exe”
}

GigabyteMotherboardInstall()
{
	local d="hardware/Gigabyte/utility" a=(--elevate --no-pause)

	header "Gigabyte Motherboard"

	# drivers
	run "hardware/Gigabyte/Designare EX/driver/Thunderbolt Driver v1.41.648.4_n.exe"

	# applications
	# Designare EX: https://www.gigabyte.com/us/Motherboard/X299-DESIGNARE-EX-rev-10#support-dl
	# RGB Fusion: https://www.gigabyte.com/MicroSite/512/download.html
	# motherboard: https://www.gigabyte.com/us/Support/Utility/Motherboard (advanced search, chipset=Intel X299)
	run "$d/Application Center vB20.0219.1/Setup.exe" "${a[@]}" || return
	run "$d/RGB Fusion vB20.0430.1/UpdPack.exe" "${a[@]}" || return
	run "$d/Easy Tune vB19.1202.1/setup.exe" "${a[@]}" || return # B20.0214.1
	run "$d/System Information Viewer vB20.0409.1/setup.exe" "${a[@]}" || return # B20.0410.1
	run "$d/AT BIOS vB20.0406.1/setup.exe" "${a[@]}" || return # B20.0422.1
	run "$d/BIOS Setup vB17.0621.1/setup.exe" "${a[@]}" || return
	run "$d/Fast Boot vB17.0619.1/setup.exe" "${a[@]}" || return
	run "$d/V-Tuner vB17.0616.1/setup.exe" "${a[@]}" || return
}

GigabyteMotherboardHelp()
{
	echot "\
Do not update APP Center
- Preferences
	- Update Schedule=Turn off
	- Uncheck Always run on next reboot"
}

GigabyteMotherboardProfile() { elevate "$P32/GIGABYTE/AppCenter/RunUpd.exe"; }

GigabyteMotherboardFinalWin()
{
	registry delete "run/RtkAudUService" # "C:\WINDOWS\System32\RtkAudUService64.exe" -background
	registry delete "run/RTHDVCPL" # "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s

	d="$oo/GIGABYTE"
	mergeDir "$pp/GIGABYTE" "$oo" || return

	# Application Center
	registry 32 delete "RunOnce/PreRun" # C:\Program Files (x86)\GIGABYTE\AppCenter\PreRun.exe
	mv "$d/APP Center/"* "$d" >& /dev/null
	rm -fr "$d/APP Center" || return
	[[ -f "$d/Launch APP Center.lnk" ]] && { mv "$d/Launch APP Center.lnk" "$d/GIGABYTE Application Center.lnk" || return; }

	# System Information Viewer
	mv "$d/SIV/"* "$d" >& /dev/null
	rm -fr "$d/SIV" || return

	# EasyTune
	moveAppData "EasyTune" || return
	mv "$d/EasyTune/"* "$d" >& /dev/null
	rm -fr "$d/EasyTune" || return

	# @BIOS
	mv "$d/@BIOS/"* "$d" >& /dev/null
	rm -fr "$d/@BIOS" || return

	# RGB Fusion
	registry 32 delete "RunOnce/SelLed" # C:\Program Files (x86)\GIGABYTE\RGBFusion\RunLed.exe
	mv "$pp/AORUS/RGBFusion 2.0/"* "$d" >& /dev/null
	rm -fr "$pp/AORUS" || return
	$rm "$pd/RGBFusion 2.0.lnk" || return
	$mv "$d/RGBFusion 2.0.lnk" "$d/RGB Fusion.lnk" || return

	# other
	$makeShortcut "$P32/GIGABYTE/BIOS Setup/BiosSetupConsole.exe" "$d/BIOS Setup" || return
	$makeShortcut "$P32/GIGABYTE/FastBoot/FastBoot.exe" "$d/Fast Boot.lnk" || return
	$makeShortcut "$P32/GIGABYTE/VTuner/vTuner.exe" "$d/VTuner.lnk" || return
}

GoProInstall()
{
	header "GoPro"
	IsPlatform win && { run "hardware/GoPro/setup/GoPro_Quik-WinInstaller-2.5.2.633.exe" || return; } # https://shop.gopro.com/softwareandapp/quik-%7C-desktop/Quik-Desktop.html#
	run "hardware/GoPro/setup/FusionStudio_x64_111_2018-02-07.exe|FusionStudio_Mac_Sierra_111_2018-02-07.dmg" || return # https://shop.gopro.com/softwareandapp/gopro-fusion-studio-app/fusion-studio.html
}

GoProFinalWin()
{
	mergeDir "$pp/GoPro" "$pp/Travel/Other" || return
	mergeDir "$up/GoPro Fusion Studio 1.1" "$pp/Travel/Other/GoPro" || return
	mergeDir "$up/GoPro VR Player 3.0" "$pp/Travel/Other/GoPro" || return
	$rm "$pd/GoPro Quik.lnk" || return
	$rm "$ud/GoPro Fusion Studio 1.1.lnk"	 || return
	$rm "$ud/GoPro VR Player 3.0.lnk"	 || return
}

Hp9020Install()
{
	header "HP 9020 Printer" # https://support.hp.com/us-en/drivers/selfservice/hp-officejet-pro-9020-all-in-one-printer-series/23918456
	run "hardware/Hewlett Packard/OfficeJet Pro 9020/Basic Driver - OJP9020_Basicx64_49.6.4502.exe" || return
}

Hp9020FinalWin()
{
	mergeDir "$pp/HP" "$oo" || return
	$rm "$pd/HP OfficeJet Pro 9020 series-HP Scan.lnk" || return
	$rm "$pd/HP OfficeJet Pro 9020 series.lnk" || return
	$mv "$pd/HP Print Scan Doctor Downloader - HP OfficeJet Pro 9020 series.lnk" "$oo/HP/HP OfficeJet Pro 9020 series" || return
	$mv "$pd/Shop for Supplies - HP OfficeJet Pro 9020 series.lnk" "$oo/HP/HP OfficeJet Pro 9020 series" || return
}

LogitechFinalWin()
{
	registry delete "run/LogiOptions" || return # C:\Program Files\Logitech\LogiOptions\LogiOptions.exe /noui
	registry delete "run/Logitech Download Assistant" || return # C:\Windows\system32\rundll32.exe C:\Windows\System32\LogiLDA.dll,LogiFetch
	registry delete "urun/LGHUB" || return # "C:\Program Files\LGHUB\lghub.exe" --background
	mergeDir "$pp/Logitech" "$oo" || return
	mergeDir --rename "$pp/Logi" "$oo/Logitech" || return
	$rm "$pd/Logi Options+.lnk" || return
}

LogitechBoltInstall() { run --header "Logitech Bolt"  "hardware/Logitech/bolt/LogiBoltInstaller.exe" --elevate; } # https://support.logi.com/hc/en-us/articles/4418089333655-Logi-Bolt-App
LogitechBoltFinalWin() { LogitechFinalWin; }

LogitechGhubInstall()
{
	local v="2022.8.306864" # https://support.logi.com/hc/en-us/articles/360024696774--Downloads-PRO-Wireless-Gaming-Mouse
	run --header="Logitech G HUB" --name="ghub" "hardware/Logitech/G HUB/lghub_installer.exe|lghub_installer.zip" --version=$v --copy-local --elevate || return
}

LogitechGhubFinalWin() { 	serviceDemandStop "LGHUBUpdaterService" && LogitechFinalWin; }

LogitechOptionsInstall()
{
	local v="1.34.376143" # https://www.logitech.com/en-ca/software/logi-options-plus.html
	run --header "Logitech Options" --name="LogitechOptions" "hardware/Logitech/options/logioptionsplus_installer.exe|logioptionsplus_installer.zip" --version="$v" --elevate --copy-local -- /quiet /sso no || return
}

LogitechOptionsFinalWin() { LogitechFinalWin; }
LogitechOptionsProfile() { LogitechOptions $noPrompt profile restore default; }

MsiCreatorCenterInstall()
{
	run --name "MSI Creator Center" "hardware/MSI/Creator Center/Creator Center_2.0.126.0.exe" || return # https://www.msi.com/Landing/creator-center-download
	service disable EneTechIo || return # light control, ene.sys causes blue screens and Windows prevents loading, https://forum-en.msi.com/index.php?threads/mystic-light-driver-ene-sys-flagged-as-a-vulnerable-driver.373963/
} 

MsiCreatorCenterFinalWin() 
{ 
	servicesDemandStop MSI_Central_Service MSI_Companion_Service "MSI Foundation Service" MSI_VoiceControl_Service Mystic_Light_Service || return # "MSI Sendevsvc" "Micro Star SCM"
	mergeDir "$pp/MSI" "$oo" || return
}

nVidiaInstall() { i nVidiaGeForceExperience nVidiaDriver; }

nVidiaFinalWin()
{
	mergeDir --rename "$pp/NVIDIA Corporation" "$oo/NVIDIA" || return
	$rm "$pd/GeForce Experience.lnk" || return
	[[ -d "$WIN_HOME/Ansel" ]] && { makeLink --merge --hide "$(platformUserAppData)/nVidia/Ansel" "$WIN_HOME/Ansel" || return; } # screenshots
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shellex/ContextMenuHandlers/NvCplDesktopContext/" || return
	#serviceDisableStop NvContainerLocalSystem || return # https://www.file.net/process/nvcontainer.exe.html
}

nVidiaDriverInstall() { run --header "nVidia Driver" "hardware/nVidia/driver/512.15/setup.exe" --elevate; } # https://www.nvidia.com/Download/index.aspx?lang=en-us
nVidiaDriverFinal() { i nVidiaFinal; }

nVidiaGeForceExperienceInstall() { run --header "nVidia GeForce Experience" "hardware/nVidia/experience/GeForce_Experience_v3.26.0.160.exe" --elevate; } # https://www.nvidia.com/en-us/geforce/geforce-experience/
nVidiaGeForceExperienceFinal() { i nVidiaFinal; }
nVidiaGeForceExperienceHelp() {	echot "- Settings, uncheck in-game overlay"; }

PowerPanelInstall() { run --name "PowerPanel" "hardware/CyberPower/PowerPanel/setup/PPP_Windows_v2.2.1.exe"; } # https://www.cyberpower.com/hk/en/software

PowerPanelFinalWin()
{
	mergeDir "$pp/CyberPower PowerPanel Personal" "$oo" || return
	$rm "$pp/Startup/PowerPanel Personal.exe.lnk" || return # "C:\Program Files (x86)\CyberPower PowerPanel Personal\PowerPanel Personal.exe"
	$rm "$pp/Startup/ppuser.exe.lnk" || return # "C:\Program Files (x86)\CyberPower PowerPanel Personal\bin\ppuser.exe"
}

QnapInstall() { :; }

QnapFinalWin()
{
	mergeDir "$pp/QNAP" "$oo" || return
	$rm "$pd/Qfinder Pro.lnk" || return
	$rm "$pd/QNAP External RAID Manager.lnk" || return
}

QcliInstall()
{
	# qcli group
	GroupAddUser "qcli" || return

	# qcli permissions
	local dir="/mnt/HDA_ROOT/.logs/qcli"
	sudo chgrp qcli "$dir" || return
	sudo chmod g+w "$dir" || return
}

QnapExternalRaidManagerInstall()
{
	header "QNAP External RAID Manager" # https://www.qnap.com/en/utilities/essentials
	run "hardware/QNAP/Expansion Bay/setup/QNAPExternalRAIDManagerWindows-1.3.5.0309.exe|QNAPExternalRAIDManagerMac-1.2.4.1202.dmg" || return
}

QnapExternalRaidManagerFinalWin() { QnapFinalWin; }

QfinderInstall()
{
	header "Qfinder Pro" # https://www.qnap.com/en/utilities/essentials
	run "hardware/QNAP/Qfinder/QNAPQfinderProWindows-7.6.0.0924.exe|QNAPQfinderProMac-7.6.0.0913.dmg|QNAPQfinderProUbuntux64-7.6.0.0913.deb" || return
}

QfinderFinalWin() { QnapFinalWin; }

TemperatureLoggerInstall()
{
	header "Elitech Temperature Logger" # https://www.elitechustore.com/pages/download
	run "hardware/Elitech/Temlog20/ElitechLogWin V4.5.2.exe" || return
}

TemperatureLoggerFinalWin()
{
	mergeDir --rename "$pp/ElitechLogWin" "$ao/Elitech Log" || return
	$rm "$pd/ElitechLogWin.lnk" || return
}

#################################################
# hardware - Intel
#################################################

IntelHardwareAllInstall() { i intel IntelChipset IntelDriverUpdate IntelDrivers IntelExtremeTuning IntelProcessorIdentificationUtility IntelStorageManagement IntelThunderboltControlCenter IntelThunderboltDriver; }
IntelInstall() { :; } # placeholder for IntelFinal
IntelProcessorIdentificationUtilityInstall() { run "hardware/Intel/other/Intel(R) Processor Identification Utility.exe"; IntelFinal; }
IntelStorageManagementInstall() { run --name "Intel Storage Management" --store "9MZNG5HZWZ1T"; }
IntelThunderboltControlCenterInstall() { run --name "Thunderbolt Control Center" --store "9N6F0JV38PH1"; }
IntelThunderboltDriverInstall() { run --name "Intel Thunderbolt Driver" "hardware/Intel/driver/Thunderbolt/TBT-Win10_Win11-1.41.1193.0/Thunderbolt(TM) Software Installer.exe"; } # https://www.intel.com/content/www/us/en/download/714224/thunderbolt-3-and-4-dch-driver-for-windows-10-for-intel-nuc11tn-x.html?wapkw=intel%20thunderbolt%201193

IntelChipsetInstall()
{
	# host dependant (mothboard and processor)
	case "$HOSTNAME" in
		oversoul) winInfDriver "hardware/Gigabyte/Designare EX/driver/Skylake Extreme/Skylake-ESystem.inf" && service demand sysmain;; # superfetch (sysmain) causes slugishness on Skylake Extreme (oversoul)
	esac
}

IntelDriverUpdateInstall()
{
	header "Intel Driver Update" # https://downloadcenter.intel.com/download/28425/Intel-Driver-Support-Assistant
	run "hardware/Intel/driver/assistant/Intel-Driver-and-Support-Assistant-Installer.exe" --elevate || return
	i IntelFinal
}

IntelDriversInstall()
{
	header "Intel Drivers"
	run "hardware/Intel/driver/WiFi/WiFi_21.80.2_Driver64_Win10/Netwtw08.INF" || return # https://downloadcenter.intel.com/download/29124/Intel-PROSet-Wireless-Software-and-Drivers-for-IT-Admins
	run "hardware/Intel/driver/Bluetooth/BT_21.80.0_64_Win10/Intel Bluetooth.msi" || return # https://downloadcenter.intel.com/download/29126/
	run "hardware/Intel/driver/Serial IO/SerialIO_30.100.1915.1_PV_CNL_19H1/SetupSerialIO.exe" -s || return # rosie
	i IntelStorageManagement IntelThunderboltControlCenter IntelFinal || return
}

IntelExtremeTuningInstall()
{
	header "Intel Extreme Tuning" # https://downloadcenter.intel.com/download/24075/Intel-Extreme-Tuning-Utility-Intel-XTU
	run "hardware/Intel/Exteme Tuning Utility/XTUSetup Software.exe" --elevate || return
}

IntelExtremeTuningFinalWin()
{
	mergeDir "$pp/Intel" "$oo" || return
	$rm "$pd/Intel(R) Extreme Tuning Utility.lnk" || return
}

IntelFinalWin()
{
	makeDir "$oo/Intel" || return
	MergeDir --suppress "$pp/Intel" "$oo" || return

	mv "$pp/Intel Driver "*" Support Assistant.lnk" "$oo/Intel/Intel Driver Update.lnk" >& /dev/null
	$mv "$pd/Intel SSD Toolbox.lnk" "$oo/Intel" || return
	$mv "$ud/Intel(R) Processor Identification Utility.lnk" "$oo/Intel" || return
	$mv "$ud/IntelMAS_GUI.lnk" "$oo/Intel" || return
	$mv "$up/Intel(R) Memory and Storage Tool/IntelMAS_GUI.lnk" "$oo/Intel" || return
	$mv "$ud/Solidigm(TM) Storage Tool.lnk" "$oo/Intel"

	$rmd "$up/Intel(R) Memory and Storage Tool" || return
	$rmd "$up/Solidigm(TM) Storage Tool" || return

	registry 32 delete "run/Intel Driver & Support Assistant" || return # C:\Program Files (x86)\Intel\Driver and Support Assistant\DSATray.exe
}

#################################################
# Home Automation
#################################################

HomeAutomationAllInstall() { i HomeAssistantAll HomebridgeAll HomeOtherAll homie; }
HomeAssistantAllInstall() { i HomeAssistant HomeAssistantCli HomeAssistantNomad HomeAssistantServer; }
HomebridgeAllInstall() { i homebridge HomebridgeFfmpeg HomebridgeWiggin; }
HomeOtherAllInstall() { i mosquitto PoolController PoolDashPanel PoolTemperature; }

# Home Assistant

HomeAssistantInstall() { run --name "Home Assistant" "1099568401"; }
HomeAssistantNomadInstall() { run --header "Home Assistant (Nomad Job)" --nomad "home-assistant.hcl" && nomadHttpShow "home-assistant" "8123"; }

HomeAssistantServerInstall()
{
	header "Home Assistant"

	# docker - https://www.home-assistant.io/installation/linux#install-home-assistant-container
	# docker-compose https://www.home-assistant.io/installation/linux#docker-compose
	# linux - https://www.home-assistant.io/installation/linux#install-home-assistant-core
	# Raspberry Pi - https://www.home-assistant.io/installation/raspberrypi#install-home-assistant-core 

	# install python
	if ! InPath python3.10 || [[ $force ]]; then
		hilight "Installing python..."
		i --no-header Python3.10 || return
		IsPlatformAll debian,64 && { package python3.10-dev python3.10-venv || return; }																											# Python 3.9 dependencies
	fi

	# install package dependencies
	local packages="libffi-dev libssl-dev libjpeg-dev zlib1g-dev autoconf build-essential libopenjp2-7 libtiff5 libturbojpeg0 tzdata" # Home Assistant Core dependencies
	packages+=" ffmpeg" # other dependencies
	if PackageInstalled $packages || [[ $force ]]; then
		hilight "Installing package dependencies..."
		package $packages ffmpeg || return																																																						# other dependencies
	fi

	# prepare user
	if ! UserExists "homeassistant"; then
		hilight "Creating user..."
		local groups=(); IsPlatform pi && groups=(-G dialout,gpio,i2c )
 		sudoc useradd --create-home --system homeassistant "${groups[@]}" || return
 		makeDir --sudo --owner "homeassistant" "$USERS/homeassistant/.homeassistant" || return
	fi

	# install
	if [[ $force || ! -f "/srv/homeassistant/bin/activate" ]]; then
		hilight "Installing..."
		makeDir --sudo --owner "homeassistant" "/srv/homeassistant/.homeassistant" || return
		sudo chown "homeassistant:homeassistant" "/srv/homeassistant" || return
		sudo --user=homeassistant --set-home --shell <<-EOF || return
			cd /srv/homeassistant || exit 1
			python3.10 -m venv . || exit 1
			source bin/activate || exit 1
			python3 -m pip install --upgrade pip || exit 1
			python3 -m pip install wheel || exit 1
			python3 -m pip install homeassistant || exit 1
		EOF
	fi

	# service
	local service="home-assistant@homeassistant"
	local file="/etc/systemd/system/$service.service"
	if [[ ! -f "$file" || $force ]]; then
		hilight "Creating service..."
		cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=Home Assistant
			After=network-online.target

			[Service]
			Type=simple
			User=%i
			WorkingDirectory=/home/%i/.homeassistant
			ExecStart=/srv/homeassistant/bin/hass -c "/home/%i/.homeassistant"
			Restart=on-failure
			RestartSec=5s

			[Install]
			WantedBy=multi-user.target
		EOF

		{ service refresh && serviceAutoStart "$service" && WaitForPort localhost 8123; } || return
	fi

	# Home Assistant Community Store (HACS)
	if [[ ! -d ~homeassistant/.homeassistant/custom_components/hacs || $force ]]; then
		hilight "Installing the Home Assistant Community Store..."
		echo 'bash -c "$(wget -q -O - https://install.hacs.xyz)"' | sudo --user=homeassistant --set-home --shell || return
		service restart "$service" || return
	fi
	
	# other
	hashiApp "home-assistant" "home-assistant@homeassistant" && httpShow "8123" && i --no-header --no-prompt HomeAssistantCli HomeAssistantIntegrations
}

HomeAssistantCliInstall()
{
	InPath hass-cli && [[ ! $force ]] && return
	run --name "Home Assistant CLI" --python-global "homeassistant-cli" || return

	# https://github.com/home-assistant-ecosystem/home-assistant-cli/issues/382
	pipxg inject homeassistant-cli click==8.0.4 
}

HomeAssistantIntegrationsInstall()
{
	header "Home Assistant Integrations"
	haIntegrations "hacs" "sonos" || return
}

haIntegrations()
{
	local toInstall=()

	# see which integrations are not installed
	while (( $# > 0 )); do
		! HomeAssistant integration IsInstalled "$1" && toInstall+=("$1")
		shift
	done

	# install integrations
	set -- "${toInstall[@]}"
	while (( $# > 0 )); do
		askp "Install the $1 integration" && { HomeAssistant integration install "$1" || return; }
		shift
	done

	return 0
}

# Homebridge
homebridgeCheck() { InPath homebridge && return 0; i --no-header homebridge || return; }
HomebridgeInstall() { header "Homebridge" && homebridgeCore && homebridgeSsh; }

homebridgeCore()
{
	InPath hb-service && [[ ! $force ]] && return

	if IsPlatform debian; then # https://github.com/homebridge/homebridge/wiki/Install-Homebridge-on-Debian-or-Ubuntu-Linux
		curl -sSfL "https://repo.homebridge.io/KEY.gpg" | sudo gpg --dearmor | sudo tee "/usr/share/keyrings/homebridge.gpg"  > /dev/null
		echo "deb [signed-by=/usr/share/keyrings/homebridge.gpg] https://repo.homebridge.io stable main" | sudo tee "/etc/apt/sources.list.d/homebridge.list" > /dev/null
		PackageUpdate || return
		package homebridge || return
	else
		run --node homebridge -- homebridge-config-ui-x --unsafe-perm || return
	fi
}

# homebridgeSsh - enable passwordless ssh for the homebridge account - for scripts using ssh
homebridgeSsh()
{
	local user="homebridge"
	local dir="$USERS/$user/.ssh"

	# return if already configured
	[[ -d "$dir" && ! $force ]] && return
	[[ ! -d "$dir" ]] && { sudo mkdir "$dir" || return; }

	echo "Copying SSH files from the current user..."	
	local src="$HOME/.ssh"
	sudoc cp "$src/config" "$src/known_hosts" "$src/id_ed25519" "$src/id_rsa" "$dir" || return
	sudo chown "$user" "$dir/config" "$dir/known_hosts" "$dir/id_ed25519" "$dir/id_rsa" || return

	echo "Removing passphrase from private key files..."	
	local p="$(credential get ssh default --fallback)"; [[ ! $p ]] && read -s -p "Enter your ssh passphrase: " password; echo
	sudo ssh-keygen -p -P "$p" -N '' -f "$dir/id_ed25519" || return
	sudo ssh-keygen -p -P "$p" -N '' -f "$dir/id_rsa" || return

	echo "Testing SSH as $user user..."
	echo "ssh $USER@$HOSTNAME ls" | sudoc hb-shell || return
}

HomebridgeFfmpegInstall()
{
	header "Homebridge ffmpeg"

	# https://github.com/homebridge/ffmpeg-for-homebridge
	if IsPlatform pi; then
		sudo curl -Lf# "https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-raspbian-armv6l.tar.gz" | sudo tar xzf - -C / --no-same-owner
	elif IsPlatformAll mac,x86; then
		sudo curl -Lf# "https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-darwin-x86_64.tar.gz" | sudo tar xzfm - -C / --no-same-owner
	elif IsPlatform debian; then
		sudo curl -Lf# "https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-debian-$(uname -m).tar.gz" | sudo tar xzf - -C / --no-same-owner
	fi
}

HomebridgeWigginInstall()
{
	header "Homebridge Wiggin"

	# install Homebridge
	homebridgeCheck || return

	# install plugins	
	local plugin plugins; plugins=(airthings broadlink-rm-pro dyson-pure-cool http-temperature-sensor meross nest purpleair-sensor rachio-platform ring script2 vera weather-plus)	
	local cmd="sudoc hb-service add"
	for plugin in "${plugins[@]}"; do cmd+=" homebridge-$plugin"; done
	cmd+="; echo done" # prevents "suspended (tty output)" error
	RunLog $cmd || return

	# Configuring Wake On Lan plugin
	InPath setcap && { sudo setcap cap_net_raw+pe "$(FindInPath node)" || return; }

	# final
	hashiApp "homebridge" && httpShow "8581"
}

# Home Other

MosquittoInstall()
{
	package mosquitto mosquitto-clients || return
	serviceAutoStart mosquitto || return

	hilight "Testing:"

	echot "\
mosquitto_sub -v -t test/message -h $HOSTNAME
mosquitto_pub -t test/message -m 'Hello World!' -h $HOSTNAME"
}

PoolControllerInstall()
{
	header "Pool Controller"
	nodeCheck || return

	# install
	local dir="/opt/pool-controller"
	if [[ ! -d "$dir" || $force ]]; then
		[[ -d "$dir" ]] && { sudoc rm -fr "$dir" || return; }
		sudoc git clone "https://github.com/tagyoureit/nodejs-poolController/" "$dir" || return
		cd "$dir" || return
		sudoc npm install || return
	fi

	# service
	local file="/etc/systemd/system/pool-controller.service"
	if [[ ! -f "$file" || $force ]]; then
		hilight "Creating service..."
		cat <<-EOF | sudoc ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=Pool Controller

			[Service]
			ExecStart=/usr/local/bin/npm start
			WorkingDirectory=$dir
			Restart=on-failure
			RestartSec=5s

			[Install]
			WantedBy=multi-user.target
		EOF

		{ service refresh && serviceAutoStart pool-controller && WaitForPort localhost 4200; } || return
	fi

	# final
	hashiApp "pool-controller" && httpShow 4200
}

PoolDashPanelInstall()
{
	header "Pool Dash Panel"
	nodeCheck || return

	# install
	local dir="/opt/pool-dash-panel"
	if [[ ! -d "$dir" || $force ]]; then
		[[ -d "$dir" ]] && { sudoc rm -fr "$dir" || return; }
		sudoc git clone "https://github.com/rstrouse/nodejs-poolController-dashPanel" "$dir" || return
		cd "$dir" || return
		sudoc npm install || return
	fi

	# service
	local file="/etc/systemd/system/pool-dash-panel.service"		
	if [[ ! -f "$file" || $force ]]; then
		hilight "Creating service..."
		cat <<-EOF | sudoc ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=Pool Temperature

			[Service]
			ExecStart=/usr/local/bin/npm start
			WorkingDirectory=$dir
			Restart=on-failure
			RestartSec=5s

			[Install]
			WantedBy=multi-user.target
		EOF

		{ service refresh && service start pool-dash-panel && WaitForPort localhost 5150; } || return
	fi

	# final
	hashiApp "pool-dash-panel" && httpShow 5150
}

PoolTemperatureInstall()
{
	header "Pool Temperature"

	# dependencies
	pythonCheckGlobal || return
	sudoc python3 -m pip install flask flask_restful spidev sqlalchemy || return

	# install
	local dir="/opt/pool-temperature"
	if [[ ! -d "$dir" || $force ]]; then
		[[ -d "$dir" ]] && { sudoc rm -fr "$dir" || return; }
		sudo GitHelper clone pi2 pool --dest "/opt/pool-temperature" || return
	fi

	# service
	local file="/etc/systemd/system/pool-temperature.service"	
	if [[ ! -f "$file" || $force ]]; then
		hilight "Creating service..."
		cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=Pool Temperature

			[Service]
			ExecStart=/usr/bin/python3 /opt/pool-temperature/pool.py
			Restart=on-failure
			RestartSec=5s

			[Install]
			WantedBy=multi-user.target
		EOF

		{ service refresh && serviceAutoStart pool-temperature && WaitForPort localhost 5002; } || return
	fi

	# final
	hashiApp "pool-temperature" && httpShow 5002 # http://$HOST:5002/AnalogTemperature/1
}

#################################################
# Mac
#################################################

MacInstall() # called by bootstrap
{
	header "Mac Setup"
	i MacAppCleanup MacAppStore MacConfigure MacDirectories MacDockCleanup MacDockOrder MacFonts MacShortcuts || return
}

MacAppCleanupInstall()
{
	macUninstall "Keynote" || return
	macUninstall "iMovie" || return
	macUninstall "Pages" || return
	macUninstall "GarageBand" || return
	macUninstall "Numbers" || return
}

MacAppStoreInstall()
{
	header "mas" # https://github.com/mas-cli/mas/releases
	pkg mas || return
}

MacConfigureInstall()
{
	echo "Configuring dock..."

	defaults write com.apple.dock orientation -string left || return							# bottom|left|right
	defaults write com.apple.dock mineffect -string scale || return 							# genie|scale
	defaults write com.apple.dock tilesize -integer 30 || return
	defaults write com.apple.dock magnification -bool FALSE || return							# largesize is magnification size
	defaults write com.apple.dock minimize-to-application -bool TRUE || return
	defaults write com.apple.dock launchanim -bool FALSE || return								# Animate opening applications
	defaults write com.apple.dock autohide -bool FALSE || return
	defaults write com.apple.dock show-process-indicators -bool TRUE || return
	defaults write com.apple.dock show-recents -bool TRUE || return
	defaults write com.apple.dock NSTableViewDefaultSizeMode -integer 3 || return # General, Sidebar icon size=Large
	RestartDock || return

	defaults write com.apple.finder QuitMenuItem -bool true || return
	defaults write com.apple.finder WarnOnEmptyTrash -bool false || return
	RestartFinder || return
}

MacDirectoriesInstall()
{
	header "Mac Directories"
	makeLink "$HOME/Library/Mobile Documents/com~apple~CloudDocs" "$HOME/iCloud" || return
}

MacDockCleanupInstall()
{
	echo -n "cleaning dock..."
	local args=() apps=("App Store" Contacts Calendar FaceTime Launchpad Mail Maps Messages Music News Notes Photos Podcasts Reminders Safari "System Preferences" TV )
	for app in "${apps[@]}"; do
		echo -n "$app..."
		dockutil --list | ${G}grep "^$app" && { dockutil --remove "$app" || return; }
	done
	echo "done"
}

MacDockOrderInstall() { macDockOrder Finder iTerm Notion Firefox Work Spark Sublime; }

MacFontsInstall()
{
	findFile "fonts/MesloLGS NF/$PLATFORM_OS" || return
	cp "$file/"* "$HOME/Library/Fonts" || return
}

MacPortsInstall()
{
	header "MacPorts" # https://www.macports.org/install.php
	run "platform/mac/Mac Ports/MacPorts-2.6.4_1-11-BigSur.pkg" || return
}

MacShortcutsInstall()
{
	printf "Updating Mac OS keyboard shortcuts..."

	# disable Mission Control Move left a space (ctrl-left)
	defaults write com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 79 "<dict><key>enabled</key><false/><key>value</key><dict><key>type</key><string>standard</string><key>parameters</key><array><integer>65535</integer><integer>123</integer><integer>8650752</integer></array></dict></dict>"
	defaults write com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 80 "<dict><key>enabled</key><false/><key>value</key><dict><key>type</key><string>standard</string><key>parameters</key><array><integer>65535</integer><integer>123</integer><integer>8781824</integer></array></dict></dict>"

	# disable Mission Control Move right a space  (ctrl-right)
	defaults write com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 81 "<dict><key>enabled</key><false/><key>value</key><dict><key>type</key><string>standard</string><key>parameters</key><array><integer>65535</integer><integer>124</integer><integer>8650752</integer></array></dict></dict>"
	defaults write com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 82 "<dict><key>enabled</key><false/><key>value</key><dict><key>type</key><string>standard</string><key>parameters</key><array><integer>65535</integer><integer>124</integer><integer>8781824</integer></array></dict></dict>"

	echo "done (logout to enable changes)"
}

macUninstall()
{
	local app="/Applications/$1.app"

	[[ ! -d "$app" ]] && return
	echo "Removing $1..."
	sudoc rm -fr "$app"
}

# macDockOrder item... - set the order of items in the dock FOO
macDockOrder()
{
	local item after

	for item in "$@"; do
		[[ "${item,,}" != "finder" ]] && ! dockutil --find "$item" >& /dev/null && continue # check if the item is in the dock (Finder is always first in the dock)
		[[ $after ]] && { dockutil --move "$item" --after "$after" || return; }							# move the item
		after="$item"
	done
}

# Mac Applications
MacAppAllInstall() { i CarrotWeather DayOne LiveDesktop magnet pcalc SpeedTest yoink; }
CarrotWeatherInstall() { run --name "CARROTweather" "993487541"; }
DayOneInstall() { run --name "Day One" "1055511498"; }
LiveDesktopInstall() { run --name "LiveDesktop" "846060286"; }
MagnetInstall() { run --name "Magnet" "441258766"; }
PcalcInstall() { run --name "PCalc" "403504866"; }
SpeedTestInstall() { run --name "Speedtest" "1153157709"; }
YoinkInstall() { run --name "Yoink" "457622435"; }

#################################################
# IT Management
#################################################

ItManagementAllInstall() { i Envoy HashiAll SaltMinion; }
EnvoyInstall() { run --name "envoy" --executable "other/Cloud Native Computing Foundation/envoy"; } # https://www.envoyproxy.io/docs/envoy/latest/start/install

SaltMinionInstall()
{
	run --name "Salt Minion" --package "salt-minion" || return
	sudo sed -i 's/^#master: salt$/master: salt/' /etc/salt/minion || return
	service restart salt-minion || return
}

#
# IT Management - HashiCorp
#

HashiAll() { i HashiUpdate HashiOtherInstall HashiCliInstall HashiProgramInstall HashiServerInstall HashiServerUpdate; }
HashiOtherAll() { i ConsulK8s ConsulTemplate ConsulTemplateService HashiUp sockaddr vagrant; }

HashiUpdateInstall() { i HashProgramDownload HashiProgram && i HashiServerUpdate -H=pi3 && pause "Check status..." && i HashiServerUpdate; }

# Hashi CLI - install programs, certificates, and other setup necessary to run Hashi tools on the command line as clients
HashiCliInstall() { i VaultCli ConsulCli NomadCli; }
ConsulCliInstall() { hashiCli "consul"; }
NomadCliInstall() { hashiCli "nomad"; }
VaultCliInstall() { hashiCli "vault"; }

hashiCli()
{	
	local what="$1"; header "${what^} CLI"
	[[ ! $force ]] && ! UpdateNeeded "$what-cli" && return
	RunLog hashi install cli "$what" --encrypt "${globalArgs[@]}" "${otherArgs[@]}" && UpdateDone "$what-cli"
}

# Hashi Server - install Hashi server on the specified servers, set servers explicitly for safety
HashiServerInstall() { i ConsulServer NomadServer VaultServer; }
ConsulServerInstall() { ScriptOptHostVerify; ForAllHosts hashiServerConsul; }
NomadServerInstall() { ScriptOptHostVerify; ForAllHosts hashiServerNomad; }
VaultServerInstall() { ScriptOptHostVerify; ForAllHosts hashiServerVault; }

hashiServerConsul() { local host="$1"; hashiServer "consul" "$host" && sshRun "$host" "inst ConsulDocker"; }
hashiServerNomad() { local host="$1"; hashiServer "nomad" "$host" && sshRunInteractive "$host" "inst NomadServerTools"; }
hashiServerVault() { local host="$1"; hashiServer "vault" "$host"; }
hashiServer() { local what="$1" host="$2"; header "${what^} Server ($host)"; RunLog hashi install service "$what" --host="$host" --encrypt "${globalArgs[@]}" "${otherArgs[@]}"; }

# update - update local program and server
HashiUpdateInstall() { inst HashiProgram && inst HashiServerUpdate; }
ConsulUpdateInstall() { inst ConsulProgram && inst ConsulServerUpdate; }
NomadUpdateInstall() { inst NomadProgram && inst NomadServerUpdate; }
VaultUpdateInstall() { inst VaultProgram && inst VaultServerUpdate; }

# program install - install Hashi program only by decrompressing downloads in install directory and update the program locally
HashiProgramInstall() { i ConsulProgram NomadProgram VaultProgram; }
ConsulProgramInstall() { hashiProgram "consul"; }
NomadProgramInstall() { hashiProgram "nomad"; }
VaultProgramInstall() { hashiProgram "vault"; }

hashiProgram() { run --header "${1^} Program" --executable --no-install-check "other/HashiCorp/$1"; }

# program download
HashiProgramDownload() { i ConsulProgramDownload NomadProgramDownload VaultProgramDownload; }
ConsulProgramDownload() { hashiDownload "consul"; } # https://www.consul.io/downloads.html
NomadProgramDownload() { hashiDownload "nomad"; }		# https://www.nomadproject.io/downloads
VaultProgramDownload() { hashiDownload "vault"; }		# https://www.vaultproject.io/downloads

hashiDownload()
{
	local program="$1"
	header "${program^} Download"

	# find the install ocation
	findFile "other/HashiCorp/$program" || return; cd "$file" || return

	# get latest version
	local url="https://releases.hashicorp.com/$program"
	local version; version="$(curl -s "$url" | grep "$program" | grep -v "+ent" | head -1 | cut -d">" -f2 | cut -d"<" -f1 | cut -d"_" -f2)"
	[[ ! $version ]] && { ScriptErr "cannot get ${program^} version"; return 1; }

	# download
	local prefix="$url/$version/${program}_${version}"
	local suffix suffixes=("darwin_amd64" "darwin_arm64" "linux_amd64" "linux_arm" "linux_arm64" "windows_amd64")

	for suffix in "${suffixes[@]}"; do
		local url="${prefix}_${suffix}.zip"
		local file="$(GetFileNameWithoutExtension "$url")"
		
		if [[ $force || ! -f "$file" ]]; then
			hilight "Downloading '$file'..."
			curl -L "$url" --output "${file}.zip" || return
			echo .
		fi
	done

	extractFiles || return
}

# Hashi Server Update - extract new executables and install them on the specified servers
HashiServerUpdateInstall() { ForAllHosts hashiServerUpdate all; }
ConsulServerUpdateInstall() { ForAllHosts hashiServerUpdate consul; }
NomadServerUpdateInstall() { ForAllHosts hashiServerUpdate nomad; }
VaultServerUpdateInstall() { ForAllHosts hashiServerUpdate vault; }

hashiServerUpdate() { local what="$1" host="$2"; hashi update service program $what --host="$host" --encrypt "${globalArgs[@]}" "${otherArgs[@]}"; }

# other
ConsulK8sInstall() { run --name "consul-k8s" --executable "other/HashiCorp/consul-k8s"; } # https://releases.hashicorp.com/consul-k8s/
ConsulTemplateInstall() { run --name "consul-template" --executable "other/HashiCorp/consul-template"; } # https://releases.hashicorp.com/consul-template/
DamonInstall() { run --executable "other/HashiCorp/damon"; } # https://github.com/hashicorp/damon/releases/tag/nightly
HashiUpInstall() { run --name "hashi-up" --executable "shareware/hashi-up"; } # https://github.com/jsiebens/hashi-up
NomadServerToolsInstall() { i docker DockerCompose envoy jre; }
SockaddrInstall() { run --go --header "sockaddr" "github.com/hashicorp/go-sockaddr/cmd/sockaddr@latest"; }
WanderInstall() { run --executable "other/HashiCorp/shareware/wander"; } # https://github.com/robinovitch61/wander/releases

# ConsulDockerInstall - allows consul user to use docker for service checks
ConsulDockerInstall()
{
	IsPlatform mac && return
	! { UserExists "consul" && GroupExists "docker"; } || UserInGroup "consul" "docker" && return
	GroupAddUser "docker" "consul" && service restart consul --no-service-check
}

ConsulTemplateServiceInstall()
{
	header "consul-template Service"
	
	# install consul-template
	! InPath consul-template && { i --no-header ConsulTemplate || return; }

	# service
	local dir="/etc/consul-template.d"
	local file="/etc/systemd/system/consul-template.service"
		
	if [[ ! -f "$file" || $force ]]; then
		cat <<-EOF | sudoc ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=consul-template
			Requires=network-online.target
			After=network-online.target consul.service nomad.service vault.service

			[Service]
			EnvironmentFile=/etc/systemd/system/consul-template.env
			ExecStart=/usr/local/bin/consul-template \$OPTIONS -syslog -config=/etc/consul-template.d
			ExecReload=/bin/kill -HUP \$MAINPID
			Restart=on-failure
			RestartSec=5s
			KillSignal=SIGINT

			[Install]
			WantedBy=multi-user.target
		EOF
	fi

	# environment
	local file="/etc/systemd/system/consul-template.env"
	! [[ -f "$file" ]] && { sudo touch "$file" || return; }

	# start the service
	service refresh || return
	serviceAutoStart consul-template || return
}

VagrantInstall()
{
	local file="vagrant_2.2.16_x86_64" # https://www.vagrantup.com/downloads
	run --header "Vagrant" "other/HashiCorp/vagrant/$file.msi|$file.dmg|$file.deb" || return
	makeDir "$(platformUserAppData)/app/vagrant" || return
}

# Hashi helper

hashiRegisterApp() { ! hashiRegisterAppCheck && return; hashi app node register "$1"; }
hashiRegisterAppCheck() { InPath consul && hashi service verify nomad --quiet; }
nomadCheck() { InPath nomad && return 0; header "Nomad"; hashi install cli nomad --encrypt "${globalArgs[@]}" "${otherArgs[@]}"; }
nomadHttpShow() { local service="$1" port="$2"; local url; url="http://$(hashi resolve "$service"):$port" && echo "URL: $url"; } # SERVICE PORT

# hashiApp APP [SERVICE](APP) - if the application is running with HashiCorp Nomad register it, otherwise start it
hashiApp()
{
	local app="$1" service="${2:-$1}" port="$3"

	if hashiRegisterAppCheck; then
		serviceDemandStop "$service" && hashiRegisterApp "$app"
	else
		serviceAutoStart "$service"
	fi
}

#################################################
# Mail
#################################################

MailCoreInstall() { i CanaryMail spark thunderbird; }
CanaryMailInstall() { run --name "Canary Mail" "1236045954"; }
SparkInstall() { run --name "Spark" "1176895641"; }
ThunderbirdInstall() { local v="102.6.1"; run --name "thunderbird" "other/Mozilla/Thunderbird/Thunderbird Setup $v.msi|Thunderbird $v.dmg|thunderbird-$v.tar" --version=$v; } # https://www.thunderbird.net/en-US/thunderbird/all/#E
ThunderbirdHelp() { echot "- see Mozilla Notes, ThunderBird"; }
ThunderbirdProfile() { thunderbird $noPrompt profile restore default; }
ThunderbirdFinalWin() { $ren "$pp/Thunderbird.lnk" "$pp/Applications/Thunderbird.lnk" && $rm "$pd/Mozilla Thunderbird.lnk"; }

#################################################
# Music
#################################################

MusicCoreInstall() { i deezer iTunes MusicBee plex tidal sonos WinAmp; }
MusicBeeInstall() { run -- name "MusicBee" "shareware/MusicBee/setup/MusicBeeSetup_3_0_Update1.exe"; } # http://getmusicbee.com/download.html
MusicBeeFinalWin() { mergeDir "$up/MusicBee" "$pp/Media/Other" $rm "$ud/MusicBee.lnk"; }
SonosInstall() { local f="SonosDesktopController1341"; run --header "Sonos Music System" "hardware/Sonos/$f.exe|$f.dmg" --elevate; } # https://support.sonos.com/s/downloads?language=en_US
SonosFinalMac() { macAppConfigure Sonos; }
SonosFinalWin() {	$rm "$pd/Sonos.lnk" && mergeDir "$pp/Sonos" "$pp/Media/Other"; }
TidalInstall() { run --name "TIDAL" "TIDAL/TIDALSetup.exe|TIDALSetup.dmg" || return; }
TidalFinalWin() { mergeDir "$up/TIDAL" "$up/Media/Other" && $rm "$ud/TIDAL.lnk"; }
WinAmpInstall() { run --name "Winamp" "Nullsoft/WinAmp/setup/winamp565_pro_all.exe"; }
WinAmpHelp() { echot "- WiFi Sync - disable addition network interfaces (i.e. VMware networks), run WinAmp as Administrator"; }
WinAmpFinalWin() { mergeDir "$pp/Winamp" "$ao" && mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" && $rm "$pd/Winamp.lnk"; }

DeezerInstall()
{
	header "Deezer"	
	IsPlatform win && run --store "9NBLGGH6J7VV" || run "other/Deezer/DeezerDesktop_4.18.60.dmg"
}

iTunesInstall()
{
	run --name "iTunes" "other/Apple/iTunes/setup/iTunes64Setup.exe" || return # http://itunes.com
	quickTimePost || return
}

iTunesHelp()
{
	echot "\
- iTunes Store, Sign In
- Store, Authorize Computer...
- Notes: Ctrl-t visualizer, ctrl-f full screen"
}

iTunesFinalWin()
{
	$rm "$pd/iTunes.lnk" || return
	mergeDir "$pp/iTunes" "$ao" || return
}

plexInstall()
{
	header "PLEX" # https://www.plex.tv/media-server-downloads/
	run "other/PLEX/Plex-1.33.0.2444-a220eae4-x86_64.exe|PlexMediaPlayer-2.58.0.1076-38e019da-macosx-x86_64.zip" || return
	run "other/PLEX/PlexMediaServer-1.24.0.4921-ce9f9dc95-x86.exe|Plex-1.33.0.2444-a220eae4-x86_64.zip" || return
	PlexFinal || return
}

PlexFinalWin() { mergeDir "$pp/Plex" "$pp/Media/Other"; }

SpotifyInstall() { run --header "Spotify" "other/Spotify/SpotifySetup.exe|SpotifyInstaller.zip"; } # https://www.spotify.com/us/download/

SpotifyFinalWin()
{
	$rm "$ud/Spotify.lnk" || return
	$mv "$up/Spotify.lnk" "$up/Media" || return
	registry delete "urun/Spotify" || return	# C:\Users\jjbutare\AppData\Roaming\Spotify\Spotify.exe --autostart --minimized
}

WindowsMediaPlayerInstall() { header "Windows Media Player"; }

WindowsMediaPlayerHelp()
{
	echot "\
- Recommended settings
- Organize, Manage Libraries, Music, Add..., This PC, portable4"
}

WindowsMediaPlayerProfile() { start "$P32\Windows Media Player\wmplayer.exe"; }

#
# Node.js
#

NodeAllInstall() { i node NodeRed; }
nodeCheck() { InPath node npm && return; i --no-header node || return; }

NodeInstall()
{
	header "Node.js"
	local v="16" # LTS

	# alternate (Windows) install
	if [[ "$installType" == "alternate" ]]; then
		local v="16.17.0"; IsPlatform arm && v="16.2.0"; 
		run "shareware/Node.js/setup/node-v$v-$(getArch "x64.msi" "win-arm64.zip")" --dest "$P/nodejs" || return		
		return
	fi

	# Node.js - https://nodejs.org/en/download/
	if IsPlatform debian && ! InPath node; then
		curl -sL https://deb.nodesource.com/setup_$v.x | sudo -E bash || return
		pkg nodejs || return
	elif IsPlatform mac && ! InPath node; then
		pkg nodejs || retun
	fi

	[[ ! -f ~/.npmrc ]] && { touch ~/.npmrc || return; }

	# core packages
	! InPath nodemon && { sudo npm install -g nodemon || return; }
	! InPath n && { sudo npm install -g n || return; }

	# other Node.js versions
	sudo n latest || return
	sudo n lts || return

	# update
	sudo npm install -g npm@latest || return
	sudo npm update -g || return

	# rebuild
	hilight "Rebuilding packages..."
	cd "$(sudo npm -g prefix)/lib/node_modules" || return
	sudo npm rebuild --unsafe-perm || return

	# cleanup
	IsPlatform mac && brew list node &> /dev/null && { packageu node || return; }

	return 0
}

NodeInstallFinalWin() { mergeDir "$pp/Node.js" "$pp/Development/Other"; }

# Node-RED - from https://nodered.org/docs/getting-started/raspberrypi - not used because it changes node
NodeRedInstall()
{	
	# initialize
	header "Node-RED"
	service exists nodered --quiet && { service stop nodered || return; }

	# install
	if ! InPath node-red || [[ $force ]]; then
		run --node node-red@latest -- --unsafe-perm --no-progress --no-update-notifier --no-audit --no-fund || return
	fi

	# create  user
	local user="nodered"
	local home="$USERS/$user"
	if ! UserExists "nodered"; then
		hilight "Creating user..."
		local groups=(); IsPlatform pi && groups=(-G dialout,gpio,i2c )
 		sudoc useradd --create-home --system $user "${groups[@]}" || return
	fi
	nodeRedPermissions || return
	
	# nodes
	local dir="$home/.node-red"
	cd "$dir" || return

	# create package.json
	local file="$dir/package.json"
	if [[ ! -f "$file" ]] || [[ $force ]]; then
		hilight "Creating package.json..."
		local version="$(npm --no-progress --no-update-notifier --no-audit --no-fund -g ls node-red | grep node-red | cut -d '@' -f 2)" || return
		cat <<-EOF | sudo ${G}tee "$file" || return
			{
			  "name": "node-red-project",
			  "description": "initially created for you by Node-RED $version",
			  "version": "0.0.1",
			  "private": true,
			  "dependencies": {
			  }
			}
		EOF
	fi

	# Raspbery Pi Nodes
	if IsPlatform PiKernel && [[ ! -d "node_modules/node-red-node-serialport" || $force ]]; then
		hilight "Installing Raspberry Pi nodes..."
		local piNodes="node-red-node-pi-gpio@latest node-red-node-random@latest node-red-node-ping@latest node-red-contrib-play-audio@latest node-red-node-smooth@latest node-red-node-serialport@latest"
		sudo npm install $piNodes --unsafe-perm --save --no-progress --no-update-notifier --no-audit --no-fund || return
	fi

	# programs
	local download="https://raw.githubusercontent.com/node-red/linux-installers/master/resources"
	if [[ ! -f "/usr/bin/node-red-log" || $force ]]; then
		hilight "Installing programs..."		
		getFileSudo "/etc/logrotate.d/nodered" "$download/nodered.rotate" || return
		getFileSudo "/usr/share/icons/hicolor/scalable/apps/node-red-icon.svg" "$download/node-red-icon.svg" || return
		getFileSudo "/usr/share/applications/Node-RED.desktop" "$download/Node-RED.desktop" || return
		getFileSudo "/usr/bin/node-red-start" "$download/node-red-start" || return
		getFileSudo "/usr/bin/node-red-stop" "$download/node-red-stop" || return
		getFileSudo "/usr/bin/node-red-restart" "$download/node-red-restart" || return
		getFileSudo "/usr/bin/node-red-reload" "$download/node-red-reload" || return
		getFileSudo "/usr/bin/node-red-log" "$download/node-red-log" || return
		sudo chmod +x "/usr/bin/node-red-"* || return
	fi

	# service
	local file="/lib/systemd/system/nodered.service"
	if [[ ! -f "$file" || $force ]]; then
		hilight "Installing service..."
		getFileSudo "$file" "$download/nodered.service" || return
		local osMemoryGb="$(os memory)"
		local serviceMemoryMb=256
		(( $osMemoryGb >= 1 )) && serviceMemoryMb="512"
		(( $osMemoryGb >= 2 )) && serviceMemoryMb="1024"
		(( $osMemoryGb >= 4 )) && serviceMemoryMb="2048"
		sudo sed -i 's#=512#='$serviceMemoryMb'#;' "$file" || return
		sudo sed -i 's#^User=pi#User='$user'#;s#^Group=pi#Group='$user'#;s#^WorkingDirectory=/home/pi#WorkingDirectory='$home'#;' "$file" || return
		service refresh || return
		service restart nodered || return
	fi

	# Node-RED assumes python is in the path
	makeLinkSudo "$(which python3)" "/usr/bin/python" || return

	# remove unneeded large sentiment library to save space and load time
  rmSudo "/usr/lib/node_modules/node-red/node_modules/multilang-sentiment/build/output/build-all.json" || return

  # configure Raspberyy Pi
  if IsPlatform PiKernel; then
	  sudo setcap cap_net_raw+eip "$(FindInPath "node")"
	  sudo setcap cap_net_raw=ep "/bin/ping"
	  GroupAddUser "gpio" "$user" || return
	  package python3-rpi.gpio || return
  fi

	# settings
	local file="$home/.node-red/settings.js"
	waitForInstall "$file" || return
	sudo sed -i 's/enabled: false/enabled: true/' "$file" || return # assume the one 'enabled: false' in the default settings.js file is for projects
	sudo sed -i 's/lib: "ace",/lib: "monaco",/' "$file" || return

	# finish
	nodeRedPermissions || return
	service restart nodered || return

	# final
	hashiApp "node-red" "nodered" && httpShow 1880	
}

nodeRedPermissions() { makeDir --sudo --owner "$user" "$home/.config" "$home/.node-red" "$home/.node-red/node_modules" "$home/.npm"; }

NvmInstall()
{
	header "Node Version Manager (NVM)"
	IsPlatformAll win,x64 && { run "shareware/Node.js/nvm/nvm-setup.exe" || return; } # https://github.com/coreybutler/nvm-windows
	! InPath nvm && [[ ! $force ]] && { curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash || return; } # http://nvm.sh
}

NvmFinalWin() { mergeDir "$pp/NVM For Windows" "$pp/Development/Other"; }

#################################################
# Network
#################################################

NetworkAllInstall() { i CloudInit curlie domotz domotzAgent fiddler GlassWire gping httpie JumpCloud JumpDesktop kea KeaService keepalived mDns mtr MozillaVpn NetbootxyzDocker NetbootxyzTftpServer nginx NicUsb Ninite NordVpn pivpn Proxifier StaticIp TftpClient TftpServer TigerVnc Tribler TurboVnc UncomplicatedFirewall unifi WireGuard Wireshark; }
HttpieInstall() { run --python-global "httpie"; }
MtrInstall() { run --package "mtr"; }
TftpclientInstall() { run --name "TFTP Client" --package "tftp-hpa"; }
TftpserverInstall() { run --name "TFTP Server" --package "tftpd-hpa" && serviceAutoStart "tftpd-hpa"; }

BindInstall()
{
	header "ISC BIND9 DNS Server"
	! IsStaticIp && { EchoErr "DNS Server requires a static IP address"; return 1; }

	# https://www.isc.org/download/
	if IsPlatform pi; then
		pkg bind9 bind9utils bind9-doc dnsutils bind9-host || return
	else
		pkg bind9 bind9-utils bind9-doc bind9-dnsutils bind9-host || return
	fi

	# update service file - for Raspberry Pi time syncronization
	local file="/etc/systemd/system/multi-user.target.wants/named.service"
	if IsPlatformAll ubuntu,PiKernel && [[ -f "$file" ]] && { [[ $force ]] || ! grep --quiet "clock-sync" "$file"; }; then
		hilight "Updating service..."
		
		cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=BIND Domain Name Server
			Documentation=man:named(8)			
			Wants=nss-lookup.target
			Before=nss-lookup.target

			# ensures time is syncronized to prevent broken trust chain errors on systems without clock
			After=network.target clock-sync.target multi-user.target

			[Service]
			EnvironmentFile=-/etc/default/named
			ExecStart=/usr/sbin/named -f \$OPTIONS
			ExecReload=/usr/sbin/rndc reload
			ExecStop=/usr/sbin/rndc stop

			[Install]
			WantedBy=multi-user.target
			Alias=bind9.service
		EOF

		service refresh || return
		service restart named || return
	fi

	i DebianSudoPasswordless || return # for remote updates
}

CloudInitInstall() { header "cloud-init"; cloudInitLimitUser; }

# limit the users sudo rights if they are too broad (cloud-init adds NOPASSWD:ALL)
cloudInitLimitUser()
{
	local file="/etc/sudoers.d/90-cloud-init-users"
	local line="$USER ALL=(ALL) NOPASSWD:ALL"

	! sudoc ls "$file" >& /dev/null && return		# no cloud-init sudo file
	! sudoc grep -q "$line" "$file" && return		# user is already limited

	# add the user to the sudo group as a fail-safe
	GroupAddUser "sudo" || return

	# change the users password if not know since it is set randomly in cloud-init
	hilight "Enter $USER password and change if not known..."		
	[[ "$(su -c whoami "$USER")" != "$USER" ]] && sudo passwd "$USER"

	# remove NOPASSWD:ALL from the user in the sudo cloud-init settings	
	sudoc sed -i "s/^$line/$USER ALL=(ALL) ALL/" "$file" || return
}

CurlieInstall()
{
	local v="7.68.0"

	# version check
	InPath curlie && [[ ! $force && "$(curlie --version | head -1 | cut -d" " -f2)" == "$v" ]] && return

	# install	
	run --go --header "curlie" "github.com/rs/curlie@latest"
}

DomotzInstall()
{
	header "Domotz" # https://portal.domotz.com/portal/web_app
	local v="1.1.3" 
	run "network/Domotz/Domotz Pro Desktop App Setup $v.exe|Domotz Pro Desktop App-$v.dmg" || return
}

DomotzFinalWin()
{
	$mv "$pp/Domotz Pro Desktop App.lnk" "$pp/Operating System" || return
	$rm "$pd/Domotz Pro Desktop App.lnk" || return
}

DomotzAgentInstall()
{
	header "Domotz Agent" # https://portal.domotz.com/portal/domotz_software

	# install
	local name="domotzpro-agent-publicstore"		
	sudoc snap install "$name" || return
  sudo snap connect $name:firewall-control || return
  sudo snap connect $name:network-observe || return
  sudo snap connect $name:raw-usb || return
  sudo snap connect $name:shutdown || return
  sudo snap connect $name:system-observe || return

	# configure
	InPath ufw && { sudoc ufw allow 3000 || return; }

	# final
	hashiApp "domotz-agent" "snap.domotzpro-agent-publicstore.domotzpro-agent-publicstore" && httpShow 3000
}

GlassWireInstall() { run --name "GlassWire" "network/GlassWire/GlassWireSetup.exe" --elevate; } # https://www.glasswire.com/download/

GlassWireHelp()
{
	echot "\
- Show Mini Viewer
- Activate GlassWire"
}

GlassWireFinalWin()
{
	registry delete "urun/GlassWire" # "C:\Program Files (x86)\GlassWire\glasswire.exe" -hide
	mergeDir "$pp/GlassWire" "$oo" || return
	$rm "$pd/GlassWire.lnk" || return
}

GpingInstall()
{
	header "gping"

	if IsPlatform mac && [[ ! $force ]]; then package gping
	elif IsPlatform arm && [[ ! $force ]]; then run --executable "shareware/gping" # https://github.com/orf/gping/releases
	elif IsPlatformAll debian,brew && [[ ! $force ]]; then run --homebrew "orf/brew/gping"
	else run --rust "gping"
	fi
}

JumpCloudInstall()
{
	header "JumpCloud" # https://console.jumpcloud.com/#/devices/new
	local key="d55d2d17f6fdc877905cf7dd798e7c910948eff3"

	# check if installed
	[[ ! $force && -d "$P/JumpCloud" ]] && return

	# install
	if IsPlatform mac,win; then
		echo "connect key=<paste> ($key)"; clipw "$key"
		run "network/JumpCloud/setup/JumpCloudInstaller.exe|jumpcloud-agent.pkg" --elevate || return
	elif IsPlatform ubuntu; then
		curl --tlsv1.2 --silent --show-error --header "x-connect-key: $key" https://kickstart.jumpcloud.com/Kickstart | sudo bash
	fi
}

JumpCloudFinalWin() { mergeDir "$pp/JumpCloud" "$pp/Operating System/Other" && $mv "$pp/JumpCloud Agent App.lnk" "$pp/Operating System"; }

KeaInstall()
{
	header "ISC Kea DHCP Server"
	! IsStaticIp && { EchoErr "DHCP Server requires a static IP address"; return 1; }

	pkg kea-dhcp4-server kea-admin kea-dhcp-ddns-server kea-dev kea-doc || return # kea-ctrl-agent kea-dhcp6-server

	makeDir --sudo "/var/run/kea" || return
	makeDir --sudo "/var/log/kea" || return
	sudo update-rc.d kea-dhcp4-server defaults || return
	service auto kea-dhcp4-server || return
	i DebianSudoPasswordless || return # for remote updates
}

KeaServiceInstall() # separate service installation - use when installing from source
{
	! IsSystemd && DefaultReturnAddress

	header "ISC Kea DHCP Server Service"

	# check if Kea is installed
	local prefix="/usr/local"; [[ ! -f "$prefix/sbin/kea-dhcp4" ]] && prefix="/usr"
	[[ ! -f "$prefix/sbin/kea-dhcp4" ]] && { ScriptErr "the Kea DHCP server is not installed"; return 1; }

	# create service
	local file="/lib/systemd/system/kea-dhcp4-server.service"
	if [[ ! -f "$file" || $force ]]; then
		cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
			[Unit]
			Description=ISC KEA IPv4 DHCP daemon
			Documentation=man:kea-dhcp4(8)
			Wants=network-online.target
			After=network-online.target
			After=time-sync.target

			[Service]
			ExecStart=$prefix/sbin/kea-dhcp4 -c $prefix/etc/kea/kea-dhcp4.conf

			[Install]
			WantedBy=multi-user.target
		EOF
	fi

	# start service
	service refresh || return
	serviceAutoStart kea-dhcp4-server || return
}

KeepalivedInstall()
{
	# install
	run --package --no-header "keepalived" || return

	# check if the configuration file exists
	local file="/etc/keepalived/keepalived.conf"
	[[ -f "$file" && ! $force ]] && return

	# create the configure file
	keepalivedConfigureCreate "$file" || return

	# start service
	service refresh || return
	serviceAutoStart keepalived || return

	# test all vips
	local file="/etc/keepalived/keepalived.conf"
	local vip vips; ArrayMake vips "$(grep -A 1 "virtual_ipaddress" "$file" | grep -v "virtual_ipaddress" | grep -v '\-\-' | awk '{ print $1; }')"
	for vip in "${vips[@]}"; do WaitForAvailable "$vip" "" 10 || return; done

	# ensure service is running in case other keepalived servers are responding to the vips
	service running keepalived
}

# keepalivedConfigureCreate - create the keepalived configuration file
keepalivedConfigureCreate()
{	
	local file="$1"

	# configure - use existing file for the host or build a new configuration file
	local confFile="$DATA/setup/keepalived_$HOSTNAME.conf"
	if [[ -f "$confFile" ]]; then
		sudoc cp "$confFile" "$file" || return
	else
		keepalivedConfigureBuild "$file" || return
	fi

	# set configuration file permissions
	sudoc chmod ugo-x "$file" && sudoc chmod go-w "$file"
}

# keepalivedConfigureBuild - build the keepalived configuration file
keepalivedConfigureBuild()
{
	local file="$1"
	local interface; interface="$(GetInterface)" || return
	local priority="${HOSTNAME//[!0-9]/}"; ! IsNumeric "$priority" && { ScriptErr "unable to determine VIP priority from hostname"; return 1; }
	local password; password="$(credential get --fallback keepalived password)" || { ScriptErr "unable to get the keepalived password"; return 1; }
	local vip="$(ConfigGetCurrent "vip")"; ! IsIpAddress "$vip" && { ScriptErr "unable to determine VIP for the '$(network current name)' network"; return 1; }

	# status
	EchoWrap "Configuring keepalived on interface '$interface' with priority '$priority' for vip '$vip'..."

	# create configuration
	cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
		vrrp_instance VI_1 {
		    state MASTER
		    interface $interface
		    virtual_router_id 100
		    priority $priority
		    advert_int 1
		    authentication {
		        auth_type PASS
		        auth_pass $password
		    }
		    virtual_ipaddress {
		        $vip
		    }
		}
	EOF
}

mDnsInstall()
{
	header "mDNS"
	pkg avahi-daemon avahi-utils || return
	serviceAutoStart avahi-daemon || return
}

MozillaVpnInstall()
{
	if IsPlatform mac,win; then
		run --name "Mozilla VPN" "other/Mozilla/vpn/MozillaVPN.msi|MozillaVPN.pkg"  || return # https://vpn.mozilla.org/vpn/download
	elif IsPlatform debian; then
		sudo apt-add-repository -y ppa:mozillacorp/mozillavpn || return
		PackageUpdate || return
		pkg mozillavpn || return
	fi
}

MozillaVpnFinalWin() { $mv "$pp/Mozilla VPN.lnk" "$pp/Operating System"; }

NetbootxyzDockerInstall() { run --header "netboot.xyz (Docker Container)" --docker "netboot-xyz.yml" --name "netboot-xyz" && httpShow "10180"; }
NetbootxyzTftpServerInstall() { ForAllHosts netbootxyzTftpServerDeploy; }

# netbootxyzDeploy HOST
netbootxyzTftpServerDeploy()
{
	header "Deploying netboot.xyz TFPT server to $(RemoveDnsSuffix "$host")..." 

	RunLog RunScript --ssh "$host" "$(cat <<-EOF
		inst --no-header --no-prompt TftpServer || exit
		sudoc sed -i "s/^TFTP_DIRECTORY=.*/TFTP_DIRECTORY=\"$(echo "$(apache dir web)/netboot.xyz" | QuotePath)\"/" "/etc/default/tftpd-hpa" || return
		service restart tftpd-hpa || exit
		EOF
	)" || return

}

NginxInstall()
{
	run --header "NGINX" --package "nginx" || return
	sudoc mkdir --parents /var/lib/nginx/cache/{private,public} || return
	sudo rm /etc/nginx/sites-enabled/default || return
}

NicUsbInstall()
{
	local file="/etc/netplan/01-network-manage-all.yaml"
	[[ -f "$file" && ! $force ]] && return

	header "USB Nic on eth1"
	cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
		network:
		  version: 2
		  renderer: networkd
		  ethernets:
		    eth1:
		      dhcp4: yes
	EOF
}

NiniteInstall()
{
	local v="0,1,1,1382" # https://ninite.com/agent.exe
	local p="$P32/Ninite Agent/NiniteAgent.exe"; [[ ! $force && -f "$p" && "$(AppVersion "$p")" == "$v" ]] && return
	run --name "Ninite" "network/Ninite/Ninite Agent Installer.exe" --elevate -- /silent
} 

NordVpnInstall() { run --name "NordVPN" "network/NordVPN/NordVPNSetup.exe"; } # https://nordvpn.com/download/

NordVpnFinalWin()
{
	mergeDir "$pp/NordSec" "$oo" || return
	rm "$ud/NordVPN.lnk" || return
	registry 32 delete "urun/NordVPN" || return # C:\Program Files (x86)\NordVPN\NordVPN.exe
}

PiVpnInstall()
{
	header "PiVPN"

	# check if installed
	InPath pivpn && [[ ! $force ]] && return

	# variables
	local args=()
	local dir="/etc/pivpn/wireguard"
	local file="$dir/setupVars.conf"
	local confFile="$DATA/setup/PiVpn_setupVars_$HOSTNAME.conf"	
	
	# install
	if [[ -f "$confFile" ]]; then
		curl -sSL "https://install.pivpn.io" | bash /dev/stdin --unattended "$confFile" || return
	else
		echot "\
		- DNS Provider=PiVPN-is-local-DNS
		- DNS=DNS Entry, vpn.butare.net"

		curl -sSL "https://install.pivpn.io" | bash || return
	fi

	# final	
	service refresh && service auto wg-quick@wg0 && sudoc "/usr/local/src/pivpn/scripts/self_check.sh" wireguard
}

ProxifierInstall()
{
	header "Proxifier" # http://www.proxifier.com/download.htm https://intelpedia.intel.com/Proxifier
	run "network/Proxifier/setup/ProxifierSetup.exe|Proxifier.app.zip" "" || return

	findFile "Proxifier/profiles/Intel Custom.ppx" || return
	local clip; clip="$(utw "$file")"; clipw "$clip"
}

ProxifierHelp() { echot "\n- File, Import, <paste> ($clip)"; }

StaticIpInstall()
{
	header "Static IP Address"
	IsStaticIp && [[ ! $force ]] && return
	RunPlatform staticIp
}

staticIpUbuntu()
{	
	# configure static IP address using the existing IP configuration
	local file="/etc/netplan/01-network-manage-all.yaml"
	if [[ ! -f "$file" || $force ]]; then
		local defaultGatway; defaultGatway="$(GetDefaultGateway)" || return
		local dnsSearch; dnsSearch="$(GetDnsSearch | sed "s/ /,/g")" || return
		local dnsServers; dnsServers="$(GetDnsServers | sed "s/ /,/g")" || return
		local interface; interface="$(GetInterface)" || return
		local ipAddress; ipAddress="$(GetIpAddress)" || return
		local subnetNumber; subnetNumber="$(GetSubnetNumber)" || return

		# validate
		! IsIpAddress "$defaultGatway" && { ScriptErr "the default gateway '$defaultGatway' is not a valid IPv4 address"; return 1; }
		! IsIpAddress "$ipAddress" && { ScriptErr "the IP address '$defaultGatway' is not a valid IPv4 address"; return 1; }
		! IsNumeric "$subnetNumber" && { ScriptErr "the subnet number '$subnetNumber' is not a valid IPv4 subnet number"; return 1; }

		# update
		cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
			network:
			  version: 2
			  renderer: networkd
			  ethernets:
			    $interface:
			      dhcp4: no
			      addresses:
			        - $ipAddress/$subnetNumber
			      routes:
			        - to: default
			          via: $defaultGatway
			      nameservers:
			          addresses: [$dnsServers]
			          search: [$dnsSearch]
		EOF

	fi

	# disable DHCP
	local file="/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"
	[[ ! -f "$file" || $force ]] && { echo "network: {config: disabled}" | sudo ${G}tee "$file" > /dev/null || return; }
	
	file="/etc/netplan/50-cloud-init.yaml"
	[[ -f "$file" ]] && sudo rm "/etc/netplan/50-cloud-init.yaml"

	sudo netplan apply || return
	IsStaticIp
}

TriblerInstall() { run --name "Tribler" "shareware/tribler/Tribler_7.2.2_x64.exe"; } # https://www.tribler.org/

TriblerHelp()
{
	echot "\
- settings
	- Save files to=C:\Users\jjbutare\Downloads
	- uncheck Family filter / Download anonymously / Encrypted anonymous seeding"
}

TriblerFinalWin()
{
	mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
	mergeDir "$up/Tribler" "$oo" || return
	$rm "$pd/VLC media player.lnk" || return
	$rm "$ud/Tribler.lnk" || return
}

UncomplicatedFirewallInstall()
{
	header "Uncomplicated Firewall" # https://help.ubuntu.com/community/UFW
	pkg "ufw" || return
	sudo ufw allow "$(SshHelper config get "$HOSTNAME" port)" || return
}

UnifiInstall()
{
	header "UniFi Network Application"

	if IsPlatform debian && ! IsPlatform 64 && [[ "$installType" == @(|package) ]]; then
		unifiPackage || return
	elif [[ "$installType" == @(|local) ]]; then
		unifiLocal || return
	else
		couldNotLocate
	fi

	unifiFinal || return
}

UnifiFinalWin() { mergeDir "$up/Ubiquiti UniFi" "$oo" && $rm "$ud/UnicatFi.lnk" && moveAppData "Ubiquiti UniFi" "Unifi Controller"; }

unifiLocal()
{
	# check for a package installation
	if [[ -f "/etc/apt/sources.list.d/100-ubnt-unifi.list" ]]; then
		ScriptErr "use 'inst install package unifi' to update the UniFi Network Application"
		return 1
	fi
	
	IsPlatform debian && ! IsPlatform win && { pkg openjdk-11-jre-headless || return; }
	run "hardware/Ubiquiti Networks/UniFi/controller/UniFi-installer.exe|UniFi.pkg|unifi_sysvinit_all.deb" || return # https://www.ui.com/download/unifi	
}

unifiPackage()
{
	# check for a local installation
	if [[ -d "/usr/lib/unifi" ]]; then
		ScriptErr "use 'inst install local unifi' to update the UniFi Network Application"
		return 1
	fi

	# add UniFi sources
	local file="/etc/apt/sources.list.d/100-ubnt-unifi.list"
	[[ ! $channel ]] && local channel="testing" # oldstable|stable|testing
	if [[ $force || ! -f "$file" ]]; then
		echo "deb https://www.ui.com/downloads/unifi/debian $channel ubiquiti" | sudoc ${G}tee "$file" || return
		sudo wget -O "/etc/apt/trusted.gpg.d/unifi-repo.gpg" "https://dl.ui.com/unifi/unifi-repo.gpg" || return
		PackagfeUpdate || return
		sudo apt-mark hold openjdk-11-* || return
	fi

	# install packages
	IsPlatform pi && { pkg haveged || return; } # fix Raspberry Pi slow startup (low hardware entropy)
	pkg ca-certificates apt-transport-https || return
	pkg unifi || return
	unifiFinal || return
}

unifiFinal() { hashiApp "unifi" && httpsShow 8443; }

WireGuardInstall()
{
	header "WireGuard" # https://download.wireguard.com/windows-client/
	
	if IsPlatform win; then # install Windows first so debian package is not installed in Windows
		run "shareware/WireGuard/wireguard-amd64-0.5.3.msi" || return
	elif IsPlatform debian; then
		package wireguard || return
	elif IsPlatform mac; then
		run "1451685025" || return
	fi
}

WireGuardFinalWin() { $mv "$pp/WireGuard.lnk" "$ao"; }
WireGuardHelp() { echot "Import tunnel(s) from file, //pi2/root/home/jjbutare/configs/$HOSTNAME.conf"; }

WiresharkInstall()
{
	local v="3.4.9" # https://www.wireshark.org/#download
	run --name "Wireshark" "network/Wireshark/setup/Wireshark-win64-$v.exe|Wireshark $v Intel 64.dmg" || return
}

WiresharkFinalWin()
{
	$mv "$pp/Wireshark.lnk" "$pp/Operating System" || return
}

#################################################
# Java
#################################################

JavaAllInstall() { i eclipse jdk jre openJdk tomcat; }

JavaCoreInstall()
{
	header "JAVA Development Core"
	local java="$pp/Development/Java/Other"
	makeDir "$java" || return
	i eclipse || return
}

EclipseInstall()
{
	header "Eclipse" # https://www.eclipse.org/downloads/ https://www.eclipse.org/downloads/packages/
	run "Shareware/Eclipse/setup/eclipse-inst-jre-win64.exe|eclipse-inst-jre-mac64.dmg" --pause || return
}

EclipseFinalWin()
{	
	mergeDir "$up/Eclipse" "$up/Development/Other" || return
	$rm "$ud/Eclipse IDE"*".lnk"
}

JavaInstall() { i jre; }

JavaFinalWin()
{
	mergeDir "$pp/Java" "$oo" || return
	registry 32 delete "run/SunJavaUpdateSched" || return
	registry 64 delete "run/SunJavaUpdateSched" || return
}

JdkInstall()
{
	header "Java Development Kit Environment" # https://www.oracle.com/java/technologies/javase-downloads.html
	run "Oracle/Java/jdk/jdk-15.0.2_windows-x64_bin.exe|jdk-15.0.2_osx-x64_bin.dmg|jdk-15.0.2_linux-x64_bin.deb" || return
}

JdkFinalWin() { JavaFinalWin; }

JreInstall() { header "Java Runtime Environment" && RunPlatform jre; }
JreFinalWin() { JavaFinalWin; }

jreDebian()
{
	IsPlatform win && return
	pkg openjdk-17-jre-headless || return
}

jreWin()
{
	# http://www.oracle.com/technetwork/java/javase/downloads/index.html
	# Test: http://www.java.com/en/download/installed.jsp http://java.com/en/download/help/testvm.xml
	run "Oracle/Java/jre/*-x64.exe" || return
}

OpenJdkInstall()
{
	run --name "Open Java Development Kit Environment" --package "default-jdk" || return
}

Tomcat10Install() { version=10.0.5 TomcatInstall; }
Tomcat9Install() { version=9.0.43 TomcatInstall; }
Tomcat7Install() { version=7.0.108 TomcatInstall; }

TomcatInstall()
{
	local dir="/opt/tomcat" user="tomcat"

	header "Tomcat" # https://tomcat.apache.org/
	i --no-header openJdk || return

	[[ ! $version ]] && local version="10.0.5"
	run "shareware/Tomcat/image/apache-tomcat-$version.zip" --dest "$dir" || return

	# user
	if ! getent passwd "$user" >& /dev/null; then
	  echo "Creating user $user..."
	  sudo useradd --system --home-dir "$dir" --shell "/bin/false" "$user" || exit
	fi

	# ownership and permissions
	sudo chown "$user:" -R "$dir" || return
	sudo chmod +x "$dir/bin/"* || return

	# service
	if IsSystemd; then
		local jdk="$(update-java-alternatives --list | tr -s " " | cut -d" " -f3)"
		local file="/etc/systemd/system/tomcat.service"
		
		if [[ ! -f "$file" || $force ]]; then
			cat <<-EOF | sudo ${G}tee "$file" > /dev/null || return
				[Unit]
				Description=Apache Tomcat
				After=network.target

				[Service]
				Type=forking

				User=tomcat
				Group=tomcat

				Environment=JAVA_HOME=$jdk
				Environment=CATALINA_PID=/opt/tomcat/tomcat.pid
				Environment=CATALINA_HOME=/opt/tomcat
				Environment=CATALINA_BASE=/opt/tomcat
				Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

				ExecStart=/opt/tomcat/bin/startup.sh
				ExecStop=/opt/tomcat/bin/shutdown.sh

				ExecReload=/bin/kill \$MAINPID
				RemainAfterExit=yes

				[Install]
				WantedBy=multi-user.target
			EOF
		fi

		service refresh || return
		serviceAutoStart tomcat || return
	fi

	return 0
}

#################################################
# Kubernetes
#################################################

KubernetesAllInstall() { i k3s kubectrl lens minikube && package helm; }
KubernetesCoreInstall() { i kubectrl lens && package helm; }

K3sInstall()
{
	# enable memory cgroups - Raspberry Pi Ubuntu
	local file="/boot/firmware/cmdline.txt"
	local what=" cgroup_memory=1 cgroup_enable=memory"
	if [[ $file ]] && ! grep --quiet "$what" "$file"; then
		sudoc sed -i '$s/$/'"$what/" "$file" && rebootDo
	fi

	# installs
	curl -sfL https://get.k3s.io | sh - && sudo chmod go+r "/etc/rancher/k3s/k3s.yaml" && sudoc k3s kubectl get node
}

KubeCtlInstall()
{
	header "kubectl" # https://kubernetes.io/docs/tasks/tools/

	# repository
	local file="/etc/apt/sources.list.d/kubernetes.list"
	if IsPlatform debian && { [[ ! -f "$file" || $force ]]; }; then		
		sudoc curl -fsSLo "/usr/share/keyrings/kubernetes-archive-keyring.gpg" "https://packages.cloud.google.com/apt/doc/apt-key.gpg" || return
		echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudoc tee "$file" || return
	fi

	# package
	PackageUpdate && package kubectl
}

LensInstall()
{
	local v="6.0.0-latest.20220728.2" # https://k8slens.dev/desktop.html
	local architecture="amd64"; IsPlatform arm && architecture="arm64" 
	run "shareware/Kubernetes/Lens/Lens Setup $v.exe|Lens-$v.$architecture.dmg|Lens-$v.$architecture.deb" --elevate || return
}

LensFinalWin() { $rm "$pd/Lens.lnk" && $mv "$pp/Lens.lnk" "$pp/Applications" && $hide "$WIN_HOME/.k8slens"; }

MinikubeInstall() { run --header "minikube" --executable "shareware/kubernetes/minikube"; } # https://minikube.sigs.k8s.io/docs/start/

#################################################
# Microsoft
#################################################

MicrosoftAllInstall() { inst AzureCli AzureDataStudio IIS teams TeamsWork office PowerShell PowerToys Skype SqlServer SqlServerManagementStudio SystemsInternal TfsCli VisualStudio WindowsAdministrationTools WindowsAssessmentAndDeploymentKit WindowsDownload WindowsStore; }
AzureDataStudioInstall() { local v="1.41.2"; run --header "Azure Data Studio" "other/Microsoft/azure/azuredatastudio-windows-user-setup-$v.exe|azuredatastudio-macos-1.41.2.zip"; } # https://learn.microsoft.com/en-us/sql/azure-data-studio/download-azure-data-studio
AzureDataStudioFinalWin() { $mv "$pp/Azure Data Studio/Azure Data Studio.lnk" "$pp/Development" && $rmd "$pp/Azure Data Studio"; }
AzureFunctionsInstall() { brew tap azure/functions && brew install azure-functions-core-tools@4; }
TfsCliInstall() { run --header "Team Foundation Server CLI" --node "tfx-cli" && tfx login; }

AzureCliInstall()
{
	header "Azure CLI"
	i --no-header python3.11 || return
	brew install azure-cli && az login && az aks install-cli
}

AzureCliFinalWin() { $hide "$WIN_HOME/.azure"; }

IisInstall()
{
	# - Add/Remove Windows Components requires inf files
	# - Remote Desktop Web Connection reference http://www.microsoft.com/windowsxp/using/networking/expert/northrup_03may16.mspx
	header "IIS"
  echo "- Internet Information Services, check all"
  echo "- (optional) Internet Information Services Hostable Web Core"

	product optional --wait || return

	if [[ $client ]]; then
	  echo "Updating firewall..."
	  $firewall rule enable "World Wide Web Services HTTP Traffic In"
	fi

	echo "Updating services..."
	service exists FTPSVC --quiet && { service manual FTPSVC || return; }

	if [[ $client ]] && ask "Set IIS services to run manually"; then
	  service exists IISADMIN --quiet && { service manual IISADMIN || return; }
	  service exists w3svc --quiet && { service manual w3svc || return; }
	  service exists AppHostSvc  --quiet && { service manual AppHostSvc || return; }
	fi

	iisreset
}

IisFinalWin() { makeDir "$pp/Development/Other/IIS" && mergeDir "$pp/IIS" "$pp/Development/Other" && $makeShortcut "$WINDIR/system32/inetsrv/iis.msc" "$pp/Development/Other/IIS/IIS Client Manager"; }

TeamsInstall() { run --header "Microsoft Teams" "other/Microsoft/teams/Teams_windows_x64.exe"; } # https://www.microsoft.com/en-us/microsoft-teams/download-app
TeamsWorkInstall() { run --header "Microsoft Teams for Work" "other/Microsoft/teams/TeamsSetup_c_w_.exe"; } # https://www.microsoft.com/en-us/microsoft-teams/download-app
TeamsWorkFinalWin() { TeamsFinalWin; }
TeamsWorkHelp() { TeamsHelp; }

TeamsFinalWin()
{
	$mv "$up/Microsoft Teams.lnk" "$up/Applications" || return
	$mv "$up/Microsoft Teams (work or school).lnk" "$up/Applications" || return
	$rm "$ud/Microsoft Teams.lnk" || return
	registry 32 delete "urun/com.squirrel.Teams.Teams" || return # $UADATA/Microsoft/Teams/Update.exe --processStart "Teams.exe" --process-start-args "--system-initiated"
}

TeamsHelp()
{
	echot "\
- Settings, General
	- uncheck Auto-start application
	- check Open application in background"
}

OfficeInstall()
{
	header "Office 365"
	local v="16.0.15028.20204"; IsPlatform mac && v="16.47" # https://stores.office.com/myaccount/advancedinstalls.aspx

	# check if installed
	word IsInstalled && [[ ! $force && "$(word version)" == "$v" ]] && return

	# install	
	run "other/Microsoft/office/OfficeSetup.exe|Microsoft_Office_16.62.22061100_Installer.pkg" || return
	waitForInstallWin "$pp/Word.lnk"
}

OfficeFinalWin()
{
	registry import "$setupFiles/ShellNew.reg" || return
	p="$ao/Office"; makeDir "$p" || return
	mergeDir --rename "$pp/Microsoft Office Tools" "$p/tools" || return
	moveAppData "Custom Office Templates" || return
	for app in Access Excel OneDrive OneNote Outlook PowerPoint Publisher Word; do $mv "$pp/$app.lnk" "$p" || return; done
}

OfficeProfile()
{
	. "office.sh" || return
	makeDir "$OfficeTemplates" || return
	askp "Configure Word" && { word configure || return; }
	askp "Restore normal templates" && { word normal restore || return; }
	return 0
}

PowerShellInstall()
{
	header "PowerShell" # https://aka.ms/pscore https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.2#msi

	# application
	local v="7.2.1"
	if IsPlatform mac; then
		brew install --cask powershell || return
	else
		run "other/Microsoft/PowerShell/PowerShell-$v-win-x64.msi|powershell-$v-osx-x64.pkg|powershell-lts_$v-1.deb_amd64.deb" || return
	fi

	# help
	powershell Update-Help || return
}


PowerShellFinalWin() { mergeDir "$pp/PowerShell" "$oo"; }

PowerToysInstall()
{
	header "PowerToys" # https://github.com/microsoft/PowerToys
	run "other/Microsoft/Windows/other/PowerToysSetup-0.16.1-x64.msi" || return
	$ren "$pp/PowerToys (Preview).lnk" "$pp/Operating System/Power Toys.lnk" || return
}

SkypeInstall()
{
	header "Skype" # https://www.skype.com/en/get-skype/
	run "other/Microsoft/Skype/Skype-8.59.0.77.exe|Skype-8.59.0.77.dmg|skypeforlinux-64.deb" || return
}

SkypeFinalWin()
{
	mergeDir "$pp/Skype" "$pp/Applications/Other" || return
	$rm "$pp/"Skype*.lnk || return
	$rm "$pd/Skype.lnk" || return
	registry delete "urun/Skype for Desktop" # C:\Program Files (x86)\Microsoft\Skype for Desktop\Skype.exe
}

SqlServerInstall()
{
	local v="2019"; local setup="SQLServer$v-x64-ENU"; os IsServer && setup+="-Dev"
	header "SQL Server"

	clipw "$(cred get secure system)" || return

	echot "\
Setup logs are in \"$P/Microsoft SQL Server/130/Setup Bootstrap/Log\"
- Installation, New SQL Server stand-alone installation
- Feature Selection, Select Database Engine Services
- Server Configuration, check Grant Perform Volume Maintenance Task privilege
- Database Engine Configuration
  - Authentication Mode=Mixed Mode, Enter password=<paste>, Confirm password=<paste>
  - Add Current User"
 	run "other/Microsoft/SQL Server/setup/$v/$setup.iso" && i SqlServerConfig SqlServerLogCleanup SqlServerFirewall
}

SqlServerFinalWin()
{
	os IsServer && return

	ScriptEval SqlServer vars || return
	mergeDir "$pp/Microsoft SQL Server $version" "$pp/Development/other" || return
	SqlServer service demand --all && SqlServer service stop --all
}

SqlServerManagementStudioInstall() { run "other/Microsoft/SQL Server/studio/setup/SSMS-Setup-ENU.exe"; } # https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms
SqlServerManagementStudioProfile() { SqlServerManagementStudio profile restore default; }

SqlServerManagementStudioFinalWin()
{
	mergeDir "$pp/Microsoft SQL Server Tools 18" "$pp/Development/other" || return
	mergeDir "$pp/Azure Data Studio" "$pp/Development/other" || return
	moveAppData "SQL Server Management Studio" || return
	moveAppData "Visual Studio 2017" || return
}
 
SqlServerConfigInstall()
{
	ScriptEval SqlServer init || return

	echot "\

- SQL Server Network Configuration, Protocols for MSSQLSERVER
- Named Pipes and TCP/IP=Enabled
- TCP/IP, IP Addresses
	- (IP for primary NIC) IPn, Enabled=Yes
	-IPAll, TCP Port=$port"
	SqlServer config
	pause
	SqlServer service restart

	echot "
- Object Explorer, Server, Properties, Memory, Maximum server memory=256"
	SqlServerManagementStudio || return
	pause
}

SqlServerFirewallInstall()
{
	local port=1433
	$firewall rule add "SQL Server" dir=in action=allow protocol=TCP localport=$port profile=private \
		program="$(utw "$P/Microsoft SQL Server/MSSQL${versionNum}.MSSQLSERVER/MSSQL/Binn/sqlservr.exe")" || return
}


SqlServerLogCleanup()
{
	ScriptEval SqlServer init || return

	echo "Removing log files..."
	$rmd "$P/Microsoft SQL Server/${versionNun}0/Setup Bootstrap/Log" || return
}

SystemInternalsInstall()
{
	header "System Internals" # https://docs.microsoft.com/en-us/sysinternals/downloads/
	registry import "$setupFiles/SysInternalsEula.reg"
}

WindowsAdministrationToolsInstall()
{
	header "Windows Administration Tools" # http://www.microsoft.com/en-us/search/result.aspx?q=Remote%20Server%20Administration%20Tools&form=DLC
	run "other/Microsoft/Server/tools/WindowsTH-RSAT_WS_1803-x64.msu" || return
}

WindowsAdministrationToolsFinalWin()
{
	mergeDir "$pp/Administrative Tools" "$oo" || return
	$rm "$pp/Server Manager.lnk" || return
	$rm "$pp/Administrative Tools.lnk" || return
}

WindowsAssessmentAndDeploymentKitInstall()
{
	header "Windows Assessment and Deployment Kit"

	# https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewADK
	local dir="other/Microsoft/Windows/setup/$(os build)"
	run "$dir/adk/adksetup.exe" || return
	run "$dir/WinPE/adkwinpesetup.exe" || return

	mergeDir "$pp/Windows Kits" "$pp/Development/Other" || return
}

WindowsDownloadInstall()
{
	header "Windows Download"

	# 1909 https://www.microsoft.com/en-us/software-download/windows10/
	# 20201 https://docs.microsoft.com/en-us/windows-insider/flight-hub/ https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewadvanced?lc=1033&wa=wsignin1.0
	local v=1909
	run "other/Microsoft/Windows/setup/$v/MediaCreationTool$v.exe" --elevate || return

	[[ ! -f ~/Downloads/Windows.iso ]] && { EchoErr "Windpows was not downloaded"; return 1; }

	gcp ~/Downloads/Windows.iso "$(GetFilePath "$file")/Windows_$v.iso" || return
}

WindowsStoreInstall()
{
	header "Windows Store"
	[[ ! $force ]] && ! UpdateNeeded "WindowsStore" && return
	UpdateDone "bootstrapStart" || return

	echo "Log in to the Windows Store"
	store && UpdateDone "WindowsStore"
}

WslConfigInstall()
{
	header "Windows Subsystem for Linux Configuration"
	$makeShortcut "wsl.exe" "$pp/Operating System/bash" || return
	local prefix; ! CanElevate && prefix="u"
	registry set "${u}run/startup" REG_SZ "$(utw "$(FindInPath "wsl.exe")") /usr/local/data/bin/RunScript startup"
}

#
# .NET
#

DotNetAllInstall() { i DotNet nUnit Silverlight VisualStudio; }

DotNetInstall()
{
	header ".NET"; local v="6.0.101" # https://dotnet.microsoft.com/download
	if IsPlatform mac,win; then
		local f="dotnet-sdk-$v"
		run "other/Microsoft/DOT.NET/setup/$f-win-x64.exe" "${f}osx-x64.pkg" || return
	else
		curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel Current
	fi
}

DotNetCoreInstall()
{
	header ".NET Development Core"
	i VisualStudio LinqPad NUnit || return
}

VisualStudioInstall()
{
	local suffix; [[ "$installType" == "beta" ]] && suffix="Preview" # https://www.visualstudio.com/downloads/
	run --header "Visual Studio" "other/Microsoft/Visual Studio/setup/VisualStudioSetup$suffix.exe|VisualStudioForMac${suffix}Installer.dmg" --pause || return
} 

VisualStudioProfile() { VisualStudio profile restore default; }

VisualStudioFinalWin()
{
	! VisualStudio IsInstalled && return
	ScriptEval VisualStudio init || return

	mergeDir --rename "$pp/Microsoft Azure" "$pp/Development/other/Azure" || return
	mergeDir "$pp/Visual Studio $vsName" "$pp/Development/Other" || return
	mergeDir "$pp/Windows Kits" "$pp/Development/Other" || return
	$mv "$pp/Blend for Visual Studio $vsName"*".lnk" "$pp/Development/other/Visual Studio $vsName" || return
	$mv "$pp/Visual Studio $vsName"*".lnk" "$pp/Development/other/Visual Studio $vsName" || return
	$mv "$pp/Visual Studio Installer.lnk" "$pp/Development" || return
	$makeShortcut "$WIN_ROOT/Windows/assembly" "$pp/Development/GAC.lnk" || return
	moveAppData "Visual Studio $vsName" || return
	moveAppData "IISExpress" || return
	moveAppData "My Web Sites" || return
	SilverlightFinalWin && $hide "$WIN_HOME/.nuget"
}

VisualStudioExtensionsInstall()
{
	local vse="other/Microsoft/Visual Studio/extension"
	run "$vse/VSColorOutput64.vsix" || return # https://marketplace.visualstudio.com/items?itemName=MikeWard-AnnArbor.VSColorOutput64
	#run "$vse/SolutionLoadManager.vsix" # https://marketplace.visualstudio.com/items?itemName=kolomiets.SolutionLoadManager
}

nUnitInstall()
{
	header "NUnit"
	run "shareware/DOT.NET/NUnit/setup/NUnit.Console-3.11.1.msi" || return # http://nunit.org/download/
	mergeDir "$up/NUnit $version" "$pp/Development/DotNet/Other" || return
}

SilverlightInstall()
{
	header "Silverlight SDK"

	# downloads  http://www.silverlight.net/downloads
	# - Developer Runtime (required, debugging): http://go.microsoft.com/fwlink/?linkid=229324
	# - toolkit (required, additonal controls): http://silverlight.codeplex.com/ http://silverlight.codeplex.com/releases/view/78435
	# - SDK (required if Visual Studio is not installed): http://www.microsoft.com/en-us/download/details.aspx?id=28359
	# - tools (developer runtime, SDK, Visual Studio 2010 support): http://www.microsoft.com/en-us/download/details.aspx?id=28358
	# version: http://www.microsoft.com/getsilverlight/Get-Started/Install/Default.aspx
	run "other/Microsoft/DOT.NET/Silverlight/development/Silverlight_Developer_64.exe"
	run "other/Microsoft/DOT.NET/Silverlight/development/Silverlight_5_Toolkit_December_2011.msi"
}

SilverlightFinalWin()
{
	local dest="$pp/Development/Other/Silverlight"
	mergeDir --rename "$pp/Microsoft Silverlight" "$dest"  || return
	mergeDir --rename "$pp/Microsoft Silverlight 5 Toolkit December 2011" "$dest" || return
	$ren "$pp/Microsoft Silverlight 5 SDK/Welcome.lnk" "$dest/SDK Welcome.lnk" || return
	$rmd "$pp/Microsoft Silverlight 5 SDK" || return
	$rmd "$pp/Microsoft Silverlight" || return
}

#################################################
# monitoring
#################################################

MonitoringAllInstall() { i btop CoreTemp glances gtop iCUE procs && pkg gnome-system-monitor hardinfo stacer; }
GtopInstall() {	run --node gtop; }

MonitoringCoreInstall()
{
	header "System Monitoring Core"

	if IsPlatform win; then
		$makeShortcut "$PLATFORM_PATH/HWMonitorPro.exe" "$pp/Operating System/Hardware Monitor Pro" || return
	fi

	i CoreTemp iCUE || return
	pkg stacer || return
}

BtopInstall()
{
	local v=1.2.8 # https://github.com/aristocratos/btop
	run --name "btop" --header "btop++" "shareware/btop/$PLATFORM_OS-$(os architecture)-$(os bits)/install.sh" --version=$v --cd || return
}

CoreTempInstall()
{
	# https://www.alcpu.com/CoreTemp/
	run "shareware/other/Core Temp/Core-Temp-setup.exe" --elevate || return
	mergeDir --rename "$pp/Core Temp" "$oo" || return
	$rm "$ud/Core Temp.lnk" || return
}

ProcsInstall()
{
	header "procs"; local v="0.12.1" # # https://github.com/dalance/procs

	# version check
	InPath procs && [[ "$(procs --version | head -1 | cut -d" " -f 2)" == "$v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then pkg procs
	elif IsPlatform debian && [[ "$installType" == @(|local) ]]; then run --executable "shareware/procs" --no-header # built from source
	elif [[ "$installType" == @(|compile) ]]; then run --rust "procs"
	else couldNotLocate
	fi
}

#################################################
# notes
#################################################

NotesAllInstall() { i notion StandardNotes Todoist; }

NotionInstall()
{
	header "Notion" # https://www.notion.so/desktop
	local v="2.0.29" suffix
	IsPlatformAll mac,arm && { v="2.1.1" suffix="-arm64"; }
	IsPlatformAll mac,x86 && v="2.0.24"
	local vCheck="$v"; IsPlatform win && vCheck+=".0"

	# check if installed
	notion IsInstalled && [[ ! $force && "$(notion version)" == "$vCheck" ]] && return

	# install
	run "other/Notion/Notion Setup $v.exe|Notion-$v$suffix.dmg" --copy-local || return

	# change ownership to current user - prevents "Invalid Install" message
	IsPlatform mac && { sudoc chown -R "$USER" "$P/Notion.app" || return; }

	return 0
}

NotionFinalMac()
{
	#MakeDirOwner "$P/Notion.app" || return # must be writable otherwise prompted for invalid install
	! dockutil --find "Notion" >& /dev/null && { dockutil --add "/Applications/Notion.app" || return; }
	return 0
}

NotionFinalWin()
{
	$mv "$up/Notion.lnk" "$up/Applications" || return
	$rm "$ud/Notion.lnk" || return
}

StandardNotesInstall() { local v="3.0.19"; run -- header "Standard Notes" "shareware/Standard Notes/standard-notes-setup-$v.exe|standard-notes-$v-mac.zip|standard-notes-$v-x86_64.AppImage"; } # https://standardnotes.org/
StandardNotesFinalLinux() { cp "$installDir/shareware/Standard Notes/appimagekit-standard-notes.desktop" ~/.local/share/applications; }
StandardNotesFinalMac() { macAppConfigure "Standard Notes"; }
StandardNotesFinalWin() {	$mv "$ud/Standard Notes.lnk" "$up/Applications" && $rm "$up/Standard Notes.lnk" && moveAppData "$WIN_HOME/Standard Notes Backups"; }

TodoistInstall()
{
	header "Todoist" # https://todoist.com/downloads/
	run "Todoist/Todoist_for_Windows_Desktop_2_7_6.exe" || return
}

TodoistFinalWin()
{
	mergeDir "$up/Todoist" "$up/Applications/Other" || return
	$rm "$ud/Todoist.lnk" || return
}

#################################################
# Package Management
#################################################

PackageManagementAllInstall() { i apt AptUtilities asdf chocolatey flatpak homebrew nala snap SnapStore WinGet; }
snapCheck() { InPath snap && return; i --no-header snap; }
SnapInstall() { pkg snapd; }
SnapStoreInstall() { run --name "Snap Store" --snap "snap-store"; }

AptInstall()
{
	local codeName; codeName="$(os CodeName)" || return

	# add universe sources
	if IsPlatform ubuntu && ! grep "$codeName universe" "/etc/apt/sources.list" |& grep -v "^#" >& /dev/null; then
		echo "deb http://us.archive.ubuntu.com/ubuntu/ $codeName universe" | sudo ${G}tee -a "/etc/apt/sources.list" || return
		PackageUpdate || return
	fi

	if ! service --quiet exists unattended-upgrades; then
		package unattended-upgrades || return
	fi

	return 0
}

AptUtilitiesInstall() # 70MB
{
	header "APT Utilities"

	# check if installed
	InPath wajig && [[ ! $force ]] && return

	# install
	pkg apt-transport-https ca-certificates curl gnupg-agent || return
	pkg apt-file apt-show-versions deborphan debsums software-properties-common wajig || return

	# configure
	sudoc apt-file update || return
}

AsdfInstall()
{
	header "asdf" # https://asdf-vm.com/

	# dependencies
	package curl git gnupg || return

	# install asdf
	local v="v0.8.1"
	if ! [[ -d "$HOME/.asdf" ]]; then
		git clone "https://github.com/asdf-vm/asdf.git" "$HOME/.asdf" --branch "$v" || return
	fi

	# configuration
	[[ -f "$UBIN/.asdfrc" ]] && { MakeLink --symbolic --hide "$UBIN/.asdfrc" "$HOME/.asdfrc" || return; }

	# initialize
	. "$HOME/.asdf/asdf.sh" || return
}

ChocolateyInstall()
{
	header "choclatey"

	# installs: user environment path=c:\Chocolatey\bin, ChocolateyInstall=c:\Chocolatey
	start --wait cmd /c powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" "&&" pause
}

FlatpakInstall() { package flatpak && sudo flatpak remote-add --if-not-exists flathub "https://flathub.org/repo/flathub.flatpakrepo"; }

homebrewCheck() { homebrewInstalled && return 0; i --no-header homebrew || return; }
homebrewInstalled() { [[ -f "$(homebrewDir)/bin/brew" ]]; }

homebrewDir() 
{
	if IsPlatformAll mac,x86; then echo "/usr/local/bin/brew"; 
	elif IsPlatformAll mac,arm; then echo "/opt/homebrew/bin/brew"
	elif IsPlatformAll debian,x86; then echo "/home/linuxbrew/.linuxbrew"
	fi
}

HomebrewInstall()
{
	header "Homebrew"
	homebrewInstalled && [[ ! $force ]] && return
	IsPlatform debian &&  { curl -fsSL "https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh" | bash; return; }
	eval "$("$(homebrewDir)" shellenv)"
}

NalaInstall()
{
	header "nala"

	InPath nala && [[ ! $force ]] && return

	# https://gitlab.com/volian/nala/-/issues/72
	local useLegacy
	IsPlatform ubuntu && (( $(echo "$(os release) < 22.04" | bc -l) )) && useLegacy="true"
	IsPlatform CasaOs,DebianBase && (( $(echo "$(os release) < 12" | bc -l) )) && useLegacy="true"

	[[ ! $useLegacy ]] && { package nala; return; }

	# repository
	local file="/etc/apt/sources.list.d/volian-archive-scar-unstable.list"
	if [[ ! -f "$file" || $force ]]; then
		echo "deb [arch=amd64,arm64,armhf] http://deb.volian.org/volian/ scar main" | sudo tee "$file" || return
	fi

	# siging key
	file="/etc/apt/trusted.gpg.d/volian-archive-scar-unstable.gpg"
	if [[ ! -f "$file" || $force ]]; then
		wget -qO - "https://deb.volian.org/volian/scar.key" | sudo tee "$file" > /dev/null || return
	fi

	# package
 	sudo apt update && package nala-legacy && sudo nala fetch
}

WinGetInstall() { run --name "winget" --store "9nblggh4nns1"; }

#################################################
# OPC
#################################################

OpcAllInstall() { i GrayboxOpx MatrikonOpcSimulator OpcScout; }

GrayboxOpcInstall()
{
	run --name "Graybox OPC" "Graybox/setup/gbopcsim18.msi" || return # http://gray-box.net/opc_simulator.php
	mergeDir "$pp/Graybox" "$up/Development/Other" || return
}

MatrikonOpcSimulatorInstall()
{
	run --name "Matrikon OPC Simulator" "Matrikon/setup/MatrikonOPCSimulation.EXE" || return
	mergeDir "$pp/MatrikonOPC" "$up/Development/Other" || return
}

OpcScoutInstall()
{
	run --name "OPC Scout" "Siemens/setup/OPCScoutV10.zip" --dest "$P32/OPCScoutV10" || return
	MakeShortcut "$P32/OPCScoutV10/OPCScoutV10.exe" "$pp/Development/OPC Scout.lnk" || return
}

#
# PDF
#

PdfAllInstall() { i NitroPdf PdfElement; }

NitroPdfInstall()
{
	header "Nitro PDF" # https://www.gonitro.com/nps/product-details/downloads
	run "other/Nitro/nitro_pro13.exe" || return
}

NitroPdfFinalWin()
{
	$mv "$pp/Nitro Pro.lnk" "$pp/Applications" || return
	$rm "$pd/Nitro Pro.lnk" || return
}

PdfElementInstall()
{
	header "PDFelement" # https://pdf.wondershare.com/
	run "other/Wondershare/PDFelement/pdfelement-pro_setup_full5239.exe|mac-pdfelement6-pro_full2992.dmg" --elevate || return
}

PdfElementFinalWin()
{
	mergeDir "$pp/Wondershare/" "$pp/Applications/Other" || return
	$rm "$pd/Wondershare PDFelement.lnk" || return
}

#################################################
# performance
#################################################

PerformanceAllInstall() { i bench Geekbench glances gtop stui SystemToolkit && pkg bonnie++ gnome-system-monitor hardinfo stacer || return; }
GlancesInstall() { run --python-global "glances"; }
SystemtoolkitInstall() { run --name "System Toolkit" --store "1234854699" && run "platform/mac/System Toolkit/|Helper.dmg"; }

BenchInstall()
{
	header "bench" # https://github.com/Gabriel439/bench

	if IsPlatform mac && [[ ! $force ]]; then package bench
	elif IsPlatform arm && [[ ! $force ]]; then run --executable "shareware/bench" # compiled from source
	elif IsPlatformAll debian,brew && [[ ! $force ]]; then brew install bench
	else run --haskell "bench"
	fi
}

GeekbenchInstall()
{
	header "Geekbench" # https://www.geekbench.com/
	local v="5.2.3"
	run "other/Geekbench/Geekbench-$v-WindowsSetup.exe|Geekbench-$v-Mac.zip|Geekbench-$v-Linux.tar.gz" --dest "/usr/local/bin" --elevate || return
}

GeekbenchFinalWin()
{
	$ren "$up/Geekbench 5/Geekbench 5.lnk" "$pp/Applications/Geekbench.lnk" || return
	$rmd "$up/Geekbench 5" || return
}

StuiInstall()
{
	local v="1.1.3"

	# version check
	InPath s-tui && [[ "$(s-tui --version | head -1 | cut -d" " -f2)" == "$v" && ! $force ]] && return

	# install
	run --python-global s-tui || return
}

#
# Python
#

PythonAllInstall() { i python python3.10 python3.11 PythonAsdf PythonDeadsnakes PythonGlobal PythonLocal PythonTextUtilities pip pipx; }
PythonTextUtilitiesInstall() { i cowsay figlet fortune lolcat; }
Python3.10Install() { pythonInstallVersion "3.10" "3.10.9"; }
Python3.11Install() { pythonInstallVersion "3.11" "3.11.1"; }

PythonInstall()
{
	header "Python 3"
	IsPlatform qnap && { run --store "QPython39"; return; }
	pkg python3 || return
}

PythonFinalWin()
{
	if [[ ! -d ~/.cache || ! -d ~/.pip ]]; then
		makeDir ~/.cache ~/.pip || return
		$hide ~/.cache ~/.pip || return
	fi

	mergeDir "$pp/Python 3.7" "$pp/Development/other" || return
	mergeDir "$pp/Python 3.9" "$pp/Development/other" || return
	mergeDir "$pp/Python 3.10" "$pp/Development/other" || return
}

PythonAsdfInstall()
{
	header "Python (asdf)" # https://github.com/danhper/asdf-python

	# dependencies
	i --no-header --no-prompt asdf || return
	case "$PLATFORM_OS" in
		mac) pkg openssl readline sqlite3 xz zlib || return;;
		linux|win) pkg make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev || return;;
	esac

	# install plugin
	! asdf plugin list | grep -q python && { asdf plugin add python || return; }

	# install latest python
	asdf install python latest || return
	asdf global python "$(asdf latest python)" || return
}

PythonDeadsnakesInstall() 
{
	header "Python Deadsnakes Repository" # https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
	[[ ! $force && -f "/etc/apt/sources.list.d/deadsnakes-ubuntu-ppa-focal.list" ]] && return
	sudo add-apt-repository --yes "ppa:deadsnakes/ppa" || return
}

PythonGlobalInstall()
{
	header "Python Global"

	# install python
	! InPath python3 && { i --no-header --no-prompt python || return; }

	# install pip and pipx in the root home directory
	local dir; dir="$(pythonGetGlobalBin)" || return
	sudo bash -c "$(cat <<-EOF
		export PATH="$BIN:$dir:\$PATH"
		[[ ! -f "$dir/pip" || "$force" ]] && { inst --force --no-prompt --no-header pip ${globalArgs[@]} || exit; }
		[[ ! -f "$dir/pipx" || "$force" ]] && { inst --force --no-prompt --no-header pipx ${globalArgs[@]} || exit; }	
		exit 0
		EOF
	)"
}

PythonLocalInstall() { header "Python Local"; i --no-header --no-prompt python pip pipx; }

# PipInstall - pip is installed locally so we can upgrade it without impacting global packages
PipInstall()
{
	header "pip (Python Package Manager)" # https://packaging.python.org/tutorials/installing-packages/

	# validate
	! InPath python3 && { ScriptErr "python3 is not installed"; return 1; }

	# cleanup - remove Debian package manager pip if installed
	IsPlatform debian && PackageInstalled "python3-pip" && { packageu python3-pip || return; } 

	# return if a local pip is installed
	pythonCheckLocalPip && return

	# use ensurepip on mac - ensurepip is not available on Debian's python3 package
	IsPlatform mac && { python3 -m ensurepip --user --default-pip || return; }

	# try installing local pip from the global version
	InPath pip3 && { pip3 install pip --upgrade --user || return; }

	# try get-pip	
	! pythonCheckLocalPip && { curl -s "https://bootstrap.pypa.io/get-pip.py" | python3 - --user || return; }

	pythonCheckLocalPip	
}

PipxInstall()
{
	header "pipx" # https://pypi.org/project/pipx/

	InPath pipx && [[ ! $force ]] && return

	# validate
	! InPath python3 && { ScriptErr "python3 is not installed"; return 1; }
	! pythonCheckLocalPip && { ScriptErr "pip3 is not installed"; return 1; }

	# dependencies
	IsPlatform debian && { pkg python3-venv || return; }

	# pipx
	python3 -m pip install --user pipx || return

	# update path
	source "$HOME/.bashrc"
}

# Python helper

# PythonBuild VERSION
PythonBuild()
{
	local version="$1"

	# build dependencies
	package build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev || return

	# download
	cd $CODE || return
	wget "https://www.python.org/ftp/python/$version/Python-$version.tgz" || return
	tar -xzvf "Python-$version.tgz"  || return
	rm "Python-$version.tgz" || return

	# compile
	cd "Python-$version" || return
	./configure --enable-optimizations || return
	sudo make altinstall || return
}

# pythonCheckGlobal - return true if python is installed in the root home directory
pythonCheckGlobal()
{
	IsPlatform mac && { pythonCheckLocal; return; } # mac uses pip and pipx from user directory
	InPath python3 && pythonCheckGlobalPip && pythonCheckGlobalPipx && return
	i --no-header PythonGlobal
}

pythonCheckGlobalPip()
{
	local bin; bin="$(pythonGetGlobalBin)" || return
	[[ -f "$bin/pip3" ]]
}

pythonCheckGlobalPipx()
{
	local bin; bin="$(pythonGetGlobalBin)" || return
	[[ -f "$bin/pipx" ]]
}

# pythonCheckLocal - return true if python is installed in the users home directory
pythonCheckLocal()
{
	InPath python3 && pythonCheckLocalPip && pythonCheckLocalPipx && return
	i --no-header PythonLocal
}

pythonCheckLocalPip()
{
	local bin; bin="$(pythonGetLocalBin)" || return
	[[ -f "$bin/pip3" ]]
}

pythonCheckLocalPipx()
{
	local bin; bin="$(pythonGetLocalBin)" || return
	[[ -f "$bin/pipx" ]]
}

pythonGetGlobalBin()
{
	local base; base="$(sudoc python3 -m site --user-base)" || return
	echo "$base/bin"
}

pythonGetLocalBin()
{
	local base; base="$(python3 -m site --user-base)" || return
	echo "$base/bin"
}

# PythonInstall VERSION_BUILD VERSION_DEADSNAKES
pythonInstallVersion()
{
	local version="$1" versionBuild="$2"
	header "Python $version"

	# check if installed
	[[ ! $force ]] && InPath "python$version" && return

	# install
	if IsPlatform mac; then
		brew install python@$version && brew link --overwrite python@3.10
	elif IsPlatformAll arm,32; then
		PythonBuild "$versionBuild"
	elif IsPlatform debian; then
		i --no-header --no-prompt PythonDeadsnakes && package python$version
	else
		ScriptErr "cannot install Python $version"
	fi
}

#################################################
# Raspberry Pi
#################################################

PiAllInstall() { i PiDevAll PiHardwareAll PiUtilities BalenaEtcher PiDiskImager PiFirmware PiOverclock PiReporter PiUps RpiBoot; }
PiDevAllInstall() { pkg thonny; } # Python development
PiHardwareAllInstall() { i PiGpio PiI2c PiOneWire PiSpi PiWifi; }
PiUtilitiesInstall() { i PiConfig PiPinout; }
PiFinalWin() { mergeDir "$up/Raspberry Pi" "$up/Applications/Other"; }

PiGpioInstall() { InPath gpio && return; pkg wiringpi && GroupAddUser "gpio"; }
PiPinoutInstall() { InPath pinout && return; pkg python3-gpiozero; }

piConfigCheck() { InPath raspi-config && return; i --no-header PiConfig; }

PiConfigInstall()
{
	header "raspi-config"

	[[ ! $force ]] && InPath raspi-config && return
	local file="raspi-config_20230214_all.deb" # https://github.com/EmilGus/install_raspi-config/blob/master/install.sh
	wget "https://archive.raspberrypi.org/debian/pool/main/r/raspi-config/$file" -P "/tmp"
  package libnewt0.52 whiptail parted triggerhappy lua5.1 alsa-utils && sudo apt-get install -fy && sudo dpkg -i "/tmp/$file" && rm -f "/tmp/$file"
}

PiCoreInstall()
{
	header "Raspberry Pi Core"
 	i BalenaEtcher PiDiskImager || return;
}

PiDiskImagerInstall()
{
	header "Raspberry Pi Disk Imager" # https://www.raspberrypi.org/software/
	run "platform/linux/Raspberry Pi/imager/imager_1.6.2.exe|imager_1.6.2.dmg|imager_1.6.2_amd64.deb" || return
}

PiDiskImagerFinalWin() { PiFinalWin; }

PiFirmwareInstall()
{
	header "Raspberry Pi Firmware"

	# Rasperry Pi OS
	if IsPlatform pi; then
		package rpi-eeprom rpi-eeprom-images; return
	fi

	# base firmware package
	package rpi-eeprom || return

	# firmware repository
	local programDir="/opt/rpi-eeprom"
	[[ ! -d "$programDir" ]] && { sudo git clone "https://github.com/raspberrypi/rpi-eeprom" "$programDir" || return; }
	cd "$programDir" || return
	sudo git pull || return

	# link firmware directory to repository firmware
	local firmwareDir="/lib/firmware/raspberrypi/bootloader"
	if [[ ! -L "$firmwareDir" ]]; then
		[[ -d "$firmwareDir" ]] && { sudo mv "$firmwareDir" "$firmwareDir.hold" || return; }
		sudo ln -s "$programDir/firmware" "$firmwareDir" || return
	fi

	# change from ciritical to stable firmware channel
	local file="/etc/default/rpi-eeprom-update"
	if ! grep -q "FIRMWARE_RELEASE_STATUS=\"stable\"" "$file"; then
		sudo sed -i "s/^FIRMWARE_RELEASE_STATUS=.*/FIRMWARE_RELEASE_STATUS=\"stable\"/" "$file" || return
	fi

	return 0
}

PiI2cInstall()
{
	header "I2C Interface"
	piConfigCheck || return
	sudo raspi-config nonint do_i2c 0 || return # enable I2C
	GroupAddUser "i2c" || return
	package i2c-tools || return
}

PiOneWireInstall()
{
	header "Raspberry Pi 1-Wire  Interface"
	piConfigCheck || return
	sudo raspi-config nonint do_onewire 0 # enable 1-Wire
}

PiOverclockInstall()
{
	local file="/boot/firmware/config.txt"
	
	! IsPlatform ubuntu && return

	# return if overclocked already	
	grep -q "# overclocking" "$file" && return

	# backup
	sudoc bak "$file" || return

	# update
	cat <<-EOF | sudo ${G}tee -a "$file"
	
		# overclocking
		over_voltage=4
		arm_freq=1800
	EOF
}

PiReporterInstall()
{
	header "RPi Reporter MQTT2HA Daemon" # https://github.com/ironsheep/RPi-Reporter-MQTT2HA-Daemon

	# install dependencies
	pythonCheckLocal || return
	package libraspberrypi-bin || return # vcgencmd
	package python3-tzlocal python3-sdnotify python3-colorama python3-unidecode python3-paho-mqtt || return

	# install image 
	local dir="/opt/RPi-Reporter-MQTT2HA-Daemon"
	[[ ! -d "$dir" ]] && { sudo git clone "https://github.com/ironsheep/RPi-Reporter-MQTT2HA-Daemon.git" "$dir" || return; }
	cd "$dir" || return
	sudo git pull || return
	sudo pip3 install -r "requirements.txt" || return

	# configure
	local host="$(ConfigGet "mqttServer").$(ConfigGet "domain")"
	local config="/opt/RPi-Reporter-MQTT2HA-Daemon/config.ini"
	[[ ! -f "$config" ]] && { sudo cp "/opt/RPi-Reporter-MQTT2HA-Daemon/config.ini.dist" "$config" || return; }
	sudo sed -i "s/^#hostname = localhost$/hostname = $host/" "/opt/RPi-Reporter-MQTT2HA-Daemon/config.ini" || return
	GroupAddUser "video" "daemon" || return

	# service
	if ! service exists "isp-rpi-reporter.service"; then
		sudo ln -s "/opt/RPi-Reporter-MQTT2HA-Daemon/isp-rpi-reporter.service" "/etc/systemd/system/isp-rpi-reporter.service" || return
		service refresh || return
	fi
	serviceAutoStart "isp-rpi-reporter" || return
}

PiSpiInstall()
{
	header "Raspberry Pi SPI Interface"
	piConfigCheck || return
	sudo raspi-config nonint do_spi 0 || return # enable SPI
	GroupAddUser "spi" || return
}

PiSwapInstall()
{
	header "Raspberry Pi Swap Space"
	grep -q "CONF_SWAPSIZE=4096" "/etc/dphys-swapfile" && return

	local clip; clip="CONF_SWAPSIZE=4096"
	echo -e "- paste:\n$clip"; clipw "$clip" || pause

	sudoedit "/etc/dphys-swapfile" || return
	sudo "/etc/init.d/dphys-swapfile" stop || return
	sudo "/etc/init.d/dphys-swapfile" start || return
	free -m || return
}

PiUpsInstall()
{
	i --no-header PiI2c || return
	pythonCheckLocal || return
	package make || return
	pip install smbus2 || return
	pip install pi-ina219 || return
	GitHelper clone https://github.com/geeekpi/upsplus.git || return
	"$CODE/upsplus/install.sh"
}

PiWifiInstall()
{
	header "Raspberry Pi Wi-Fi"

	piConfigCheck || return

	if (( ${#otherArgs[@]} > 0 )); then
		sudo raspi-config nonint do_wifi_ssid_passphrase "${otherArgs[@]}"
	else
		sudo raspi-config do_wifi_ssid_passphrase
	fi
}

# RPI Boot - makes Compute Module eMMC drive mountable
RpiBootInstall()
{
	header "Rasberry Pi USB Boot" 

	if IsPlatform win; then
		run "platform/linux/Raspberry Pi/rpiboot/rpiboot_setup.exe" || return # https://github.com/raspberrypi/usbboot/raw/master/win32/rpiboot_setup.exe
		elevate "$P32/Raspberry Pi/rpiboot.exe" || return
		return
	elif IsPlatform debian; then
		package libusb-1.0-0-dev || return
	else
		package libusb || return
	fi

	cd $CODE || return
	git clone --depth=1 "https://github.com/raspberrypi/usbboot" || return
	cd usbboot && make && sudo ./rpiboot
}

RpiBootFinalWin() { PiFinalWin; }

#################################################
# Remote Desktop
#################################################

RemoteDesktopAllInstall() { i AppleRemoteDesktop JumpDesktop MicrosoftRemoteDesktop NoMachine TigerVnc; }
AppleRemoteDesktopInstall() { run --name "Remote Desktop" "409907375" || return; }
JumpDesktopInstall() { run --name "Jump Desktop"  "network/JumpDesktop/JumpDesktop.exe|JumpDesktopMac.zip"; } # https://app.jumpdesktop.com/dashboard
JumpDesktopFinalWin() {	makeDir "$oo/Jump Desktop" && $mv "$pp/Jump Desktop.lnk" "$oo/Jump Desktop" && $mv "$pp/Jump Desktop Connect.lnk" "$oo/Jump Desktop"; }
MicrosoftRemoteDesktopInstall() { run --name "Microsoft Remote Desktop" "1295203466"; }
NoMachineInstall() { local v="8.2.3"; run --header "NoMachine" "shareware/NoMachine/nomachine_${v}_4_x64.exe|nomachine_${v}_12.dmg|nomachine_${v}_4_amd64.deb"; } # https://www.nomachine.com/download
NoMachineFinalWin() { $rm "$pd/NoMachine.lnk" && mergeDir "$pp/NoMachine" "$oo" && moveAppData "NoMachine" || return; }

TigerVncInstall()
{
	header "TigerVNC" # https://github.com/TigerVNC/tigervnc/releases
	echot "- uncheck all Server configuration options"
	run "shareware/TigerVNC/tigervnc64-1.8.0.exe"  || return
}

TigerVncFinalWin() { mergeDir --rename "$pp/TigerVNC 64-bit" "$oo/TigerVNC"; }

TurboVncInstall()
{
	header "TurboVNC" # https://sourceforge.net/projects/turbovnc/files/
	local v="2.2.6"
	run "shareware/TurboVNC/TurboVNC-$v-x64.exe|TurboVNC-$v.dmg|turbovnc_$v_i386.deb"  || return
}

TurboVncFinalWin() { mergeDir --rename "$pp/TurboVNC 64-bit" "$oo/TurboVNC" || return; }

#################################################
# Ruby
#################################################

rubyCheck() { InPath ruby && return 0; i --no-header ruby || return; }
rvmInstalled() { [[ -d "$HOME/.rvm" ]]; }

RubyInstall()
{
	header "Ruby"

	# install
	if IsPlatform mac; then
		i --no-header RubyAsdf || return
	elif ! rvmInstalled && IsPlatform pi; then # rvm does not include arm binaries and compilation takes a long time
		i --no-header RubyPackage || return
	else
		i --no-header RubyRvm || return
	fi

	# configure
	makeDir ~/.gem || return
	MakeLink --symbolic --hide "$UBIN/.gemrc" "$HOME/.gemrc" || return

	return 0
}

RubyAsdfInstall()
{
	i --no-header asdf || return

	# install Ruby plugin
	! asdf plugin list | grep -q ruby && { asdf plugin add ruby || return; }

	# install latest Ruby
	asdf install ruby latest || return
	asdf global ruby "$(asdf latest ruby)" || return
}

RubyRvmInstall()
{
	header "Ruby (rvm)" # https://rvm.io/rvm/install

	# rvm
	if ! rvmInstalled; then

		# install
		if IsPlatform ubuntu; then
			sudo apt-add-repository -y ppa:rael-gc/rvm || return
			PackageUpdate || return
			pkg rvm || return
		else
			gpg --keyserver http://ipv4.pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB || return
			curl -sSL https://get.rvm.io | bash -s stable || return
			
		fi

		# group
		GroupAddUser "rvm" || return

		# add rvm to path in current shell
		SourceIfExists "$HOME/.rvm/scripts/rvm" || return

	fi

	# ruby
	local version="3.0"
	if ! InPath ruby || ! ruby --version | grep "$version" >& /dev/null; then
		rvm install "$version" || return
		. "$HOME/.rvm/scripts/rvm" || return # add ruby and gem to the path in current shell
		rvm use --default "$version" || return
	fi

	return 0
}

RubyPackageInstall()
{
	header "Ruby (package)"
	gccCheck || return

	# ruby
	! InPath ruby && { pkg ruby || return; }

	# development
	if [[ ! -f /usr/include/ruby-2.5.0/ruby.h ]]; then
		local devPackage="ruby$(ruby -e 'puts RUBY_VERSION[/\d+\.\d+/]')-dev"
		pkg "$devPackage" || return
	fi

	# SSL libraries
	IsPlatform debian && [[ ! -d /usr/include/openssl ]] && { pkg libssl-dev || return; }

	return 0
}

#################################################
# Rust
#################################################

rustCheck() { InPath cargo && return 0; i --no-header rust || return; }

RustInstall()
{
	header "Rust"
	curl --proto '=https' --tlsv1.2 -sSf "https://sh.rustup.rs" | bash -s -- --no-modify-path -y || return
	SourceIfExists "$HOME/.cargo/env" || return
}

#################################################
# Scheduling
#################################################

SchedulingAllInstall() { i cron CronLog; }

CronInstall()
{
	pkg at anacron incron || return
	! sudoc grep --quiet "^$USER$" "/etc/incron.allow" && { echo "$USER" | sudo ${G}tee --append "/etc/incron.allow" || return; }
	i CronLog || return
}

CronLogInstall()
{
	local f="/etc/rsyslog.d/50-default.conf"

	if [[ -f "$f" ]] && grep -q "#cron\.\*" "$f"; then
		sudo sed -i "s/^#cron\.\**/cron\.\*/" "$f" || return
		sudoc systemctl restart rsyslog --no-block || return
	fi

	return 0
}

#################################################
# Server
#################################################

ServerAllInstall() { i ApacheAll GitServer NginxAll VpnServer LoadBalancer; }
LoadBalancerInstall() { i ConsulTemplateService keepalived nginx && hashiRegisterApp "lb"; }
VpnServerInstall() { i PiVPN && hashiApp "wire-guard" "wg-quick@wg0"; }

#
# Apache
#

ApacheAllInstall() { i apache ApachePhp ApacheDocker ApacheDockerConfig; }
ApachePhpInstall() { header "Apache Web Server with PHP" && apacheCheck && package php libapache2-mod-php && service restart apache2 && httpShow "80"; }

apacheCheck() { apache IsInstalled && return; i --no-header apache; }

ApacheInstall()
{
	run --header "Apache Web Server" --package "apache2" || return

	# modules
	sudoc a2enmod headers || return

	# configure
	local dir="$(apache dir conf)" file="$dir/envvars"
	[[ -f "$file" ]] && ! grep --quiet "^export HOSTNAME" "$file" && { echo 'export HOSTNAME=`uname -n`' | sudo ${G}tee --append "$file" || return; }
	
	# restart service
	service restart apache2 || return

	# finish
	[[ $noHeader ]] && return
	httpShow "80"
}

# ApacheDockerInstall - install Apache in a Docker container
ApacheDockerInstall()
{
	header "Apache Web Server (Docker Container)"
	apache deploy --host=localhost || return
	run --no-header --docker "apache-web.yml" --name "apache-web" || return
	httpShow "180" || return; 
}

# ApacheDockerConfigInstall - install Docker configuration for Nomad deployment
ApacheDockerConfigInstall()
{
	header "Apache Web Server (Docker Configuration)"
	apache deploy -H=localhost && hashiRegisterApp "apache-web"; 
}

#
# Git
#

GitServerInstall()
{
	header "Git Server"
	i --no-header AppDir || return

	local gitDir="$ADATA/git"

	# create git directory
	[[ ! -d "$gitDir" ]] && { sudoc mkdir "$gitDir" || return; }
	makeLinkSudo --symbolic "$gitDir" "/git" || return
	sudoc chmod o+rwx "/git" || return

	# create test repository
	[[ ! -d "/git/test" ]] && { git init --bare /git/test || return; }

	# register the application
	hashiRegisterApp "git"
}

#
# Nginx
#

NginxAllInstall() { i NginxProxyManagerDocker NginxProxyManagerNomad; }
NginxProxyManagerNomadInstall() { run --header "Nginx Proxy Manager (Nomad Job)" --nomad "nginx-proxy-manager.hcl" && nomadHttpShow "nginx-proxy-manager" "81"; }

NginxProxyManagerDockerInstall()
{
	header "Nging Proxy Manager"

	# create passwords 
	dockerPasswordMake "nginx-proxy-manager" "mysql_pwd" || return
	dockerPasswordMake "nginx-proxy-manager" "db_root_pwd" || return

	# install
	run --docker "nginx-proxy-manager.yml" -- --compose || return

	# show the configuration page
	httpShow "81"
}

#################################################
# Shell
#################################################

BashInstall() { run --name="Bourne Again Shell" --package bash; }

BashProfile()
{
	# login shell
	IsPlatform entware && { AddLoginShell "/opt/bin/bash" || return; }

	# profile
	local file="/etc/bash.bashrc"
	local line='[[ -f "/usr/local/data/bin/bash.bashrc" ]] && . "/usr/local/data/bin/bash.bashrc"'
	local after="# this file has to be sourced in"
	local before='# If not running interactively, don'\''t do anything'

	IsPlatform mac && { file="/etc/bashrc"; after="# System-wide .bashrc file" before="if [ -z \"$PS1\" ]; then"; }
	IsPlatform dsm,qnap && { file="/opt/etc/profile"; before="# Please note"; }

	[[ ! -f "$file" ]] && { ScriptErr "'$file' does not exist"; return 1; }

	# try and add the line automatically
	if ! grep -q "$line" "$file" && [[ $after ]]; then
		sudo ${G}sed -ie '/^'"$after"'/a \\n'"$line"'' "$file" || return
	fi

	# add the line manually
	if ! grep -q "$line" "$file"; then
		echo "$line"; clipw "$line"
		echo "- paste above line before \"$before\""
		pause
		sudoedit "$file" || return
	fi
}

ZshInstall() { run --name="Z shell" --package zsh; }

ZshProfile()
{
	# .oh-my-zsh profile
	[[ $force || ! -d "$HOME/.oh-my-zsh" ]] && { ZshHelper profile restore default "${globalArgs[@]}" || return; }

	# permissions
	local dir="/usr/local/share/zsh"
	[[ -d "$dir" ]] && { sudoc chmod go-w "$dir" || return; }
	[[ -d "$dir/site-functions" ]] && { sudoc chmod go-w "$dir/site-functions" || return; }

	# profile
	local file="/etc/zsh/zshenv"
	IsPlatform mac && file="/etc/zprofile"
	IsPlatform entware && file="/opt/etc/zshenv"
	makeFileSudo "$file" || return

	local line='[[ -f "/usr/local/data/bin/bash.bashrc" ]] && . "/usr/local/data/bin/bash.bashrc"'
	! grep --quiet "$line" "$file" && { echo "$line" | sudo ${G}tee --append "$file" || return; }
	sudoc chmod +x "$file" || return

	# login shell
	IsPlatform entware && { AddLoginShell "/opt/bin/zsh" || return; }
	SetLoginShell zsh || return
}

#################################################
# Security
#################################################

SecurityAllInstall() { i 1Password 1PasswordCli AxCrypt certbot cfssl CredentialStore Dashlane GnomeKeyring LastPass pass pGina SystemUser VeraCrypt YubiKeyManager; }

SecurityCoreInstall() 
{
	[[ ! $force ]] && ! UpdateNeeded "SecurityCore" && return
	IsPlatformAll physical,win && { echo "Configure Windows Hello..."; password gui || return; }
	UpdateDone "SecurityCore"	
}

DashLaneInstall() { run --header "Dashlane" "Dashlane/Dashlane/Inst.exe"; } # https://www.dashlane.com/download#downloaded
DashLaneFinalWin() { mergeDir "$up/DashLane" "$oo" && $rm "$ud/Dashlane.lnk"; }
YubiKeyManagerInstall() { local v="1.2.5"; local p="yubikey-manager-qt-$v"; run --header "YubiKey Manager" "hardware/Yubico/YubiKey Manager/$p-win64.exe|$p-mac.pkg|$p-linux.AppImage"; } # https://www.yubico.com/support/download/yubikey-manager/

1PasswordInstall()
{
	local v="8.9.7.139122"; IsPlatform mac && v="8.9.13" # https://1password.com/downloads/
	run --header "1Password" "other/1Password/setup/1PasswordSetup-latest.exe|1Password.zip|1password-latest.deb" --copy-local --version="$v"
}

1PasswordCliInstall()
{
	header "1Password CLI" # https://app-updates.agilebits.com/product_history/CLI2

	if IsPlatform mac; then
		run "other/1Password/cli/|op_apple_universal_v2.7.0.pkg" || return
	elif ! IsPlatformAll arm,32; then
		run --name "op" --executable "other/1Password/cli" --no-header || return
	fi
}

1PasswordRegister() { register "1Password"; }

1PasswordFinalWin()
{
	$mv "$up/1Password.lnk" "$up/Applications" || return
	registryDo 32 delete "urun/1Password" || return	# "C:\Users\jjbutare\AppData\Local\1Password\app\8\1Password.exe" --silent
}

AxCryptInstall() { run --name "AxCrypt" "AxCrypt/setup/AxCrypt-2.1.1573.0-Setup.exe|AxCrypt-Mac-2.2.578.0.pkg"; } # https://www.axcrypt.net/download/

AxCryptFinalWin()
{
	mergeDir "$pp/AxCrypt" "$oo" || return
	moveAppData "My AxCrypt" "AxCrypt" || return
	makeLink --merge --hide "$uhome/DropBox/data/AxCrypt" "$uhome/DropBox/My AxCrypt" || return
	makeLink --merge --hide "$uhome/OneDrive/data/AxCrypt" "$uhome/OneDrive/My AxCrypt" || return
}

CertbotInstall()
{ 
	run --name "certbot" --snap "certbot" -- --classic || return
	sudo snap set certbot trust-plugin-with-root=ok || return
	sudo snap install certbot-dns-cloudflare || return
	sudo ln -s /snap/bin/certbot /usr/bin/certbot || return
}

CfsslInstall()
{
	header "CloudFlare SSL"

	IsPlatform mac && { pkg cfssl; return; }

	pushd "/tmp" > /dev/null || return

	wget -q --show-progress --https-only --timestamping \
		"https://pkg.cfssl.org/R1.2/cfssl_linux-amd64" \
		"https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64"

	chmod +x "cfssl"* || return

	sudoc mv "cfssl_linux-amd64" "/usr/local/bin/cfssl" || return
	sudoc mv "cfssljson_linux-amd64" "/usr/local/bin/cfssljson" || return

	popd > /dev/null || return
}

CredentialStoreInstall()
{	
	header "Credential Store"

	# install fd - used by credential script
	i --no-header fd || return

	# tools
	pkg pwgen || return

	# Debian - use the gnome-keyring (encryption) and secret-tool (command line)
	IsPlatform debian && ! IsPlatform wsl1 && { i --no-header GnomeKeyring || return; }

	# other platforms - use pass
	! IsPlatform mac,debian,win && { i --no-header pass || return; }

	# add passwords to the credential store
	unset CREDENTIAL_MANAGER # ensure the new credential manager is detected	
	password store set || return

	return 0
}

GnomeKeyringInstall()
{
	header "Secret Tool"
	i --no-header xClient || return
	! InPath secret-tool && { pkg gnome-keyring libsecret-tools seahorse || return; }
	! InPath lssecret && { run --executable "platform/linux/lssecret" || return; } # https://gitlab.com/GrantMoyer/lssecret - requires libsecret-1-dev
	! InPath secret-check && { run --executable "platform/linux/secret-tools/secret-check"; }
	! InPath secret-lock && { run --executable "platform/linux/secret-tools/secret-lock"; }
	! InPath secret-unlock && { run --executable "platform/linux/secret-tools/secret-unlock"; }
	return 0	
}

KeybaseInstall()
{
	run --name "Keybase" "other/Keybase/keybase_setup_amd64.msi" || return
}

KeybaseFinalWin()
{
	$mv "$up/Keybase.lnk" "$up/Applications" || return
}

LastPassInstall()
{
	header "LastPass" # https://lastpass.com/misc_download2.php

	IsPlatform win && { run --store "9WZDNCRFJ3QK" || return; }
	IsPlatform linux && { package lastpass-cli || return; }

	return 0
}

PassInstall()
{
	header "pass"
	i --no-header gpg || return
	pkg pass || return;

	if [[ ! -d "$HOME/.password-store" ]]; then
		local id; id="$(gpg --list-keys | head -4 | tail -1 | RemoveSpace)" || return
		pass init "$id" || return
		credential test set --manager=pass || return
	fi
}

pGinaInstall()
{
	IsInDomain && return 0

	header "pGina" # http://pgina.org/download.html
	run "other/Microsoft/Visual Studio/redistributable/vcredist_x86.exe" || return
	run "other/Microsoft/Visual Studio/redistributable/vcredist_x64.exe" || return
	run "shareware/pGina/setup/pGinaSetup-3.1.8.0.exe" /silent || return
}

pGinaProfile() { pGina profile restore default; }
pGinaFinalWin() { mergeDir "$pp/pGina" "$oo"; }

SystemUserInstall()
{
	header "System User"

	local user; user="$(ConfigGet "systemUser")" || return

	# validate user
	[[ ! $user ]] && { ScriptErr "the system user is not specified in configuration."; return 0; }

	# add user and set password
	if ! UserExists "$user"; then
		sudoc useradd --create-home --system "$user" || return
		password linux --user "$user" --password "$(credential get system default --quiet --fallback)" || return
	fi

	# do not require sudo password
	local file="/etc/sudoers.d/020_$user-nopasswd"
	if ! sudoc ls "$file" >& /dev/null; then 
		echo "$user ALL=(ALL) NOPASSWD: ALL" | sudo ${G}tee "/etc/sudoers.d/020_$user-nopasswd" || return
	fi
	
	# SSH permission
	if [[ ! -d "$USERS/$user/.ssh" ]]; then
		sudoc cp -r "$HOME/.ssh" "$USERS/$user/.ssh" || return
		SshHelper permission "wsystem" || return
	fi

	return 0
}

VeraCryptInstall()
{
	header "VeraCrypt"

	# check if installed
	local v="1.25.9" # https://www.veracrypt.fr/en/Downloads.html	
	VeraCrypt IsInstalled && [[ ! $force && "$(VeraCrypt version)" == "$v" ]] && return

	# install
	local architecture="amd64"; IsPlatform arm && architecture="arm64"
	local setup="shareware/VeraCrypt/setup"

	if IsPlatform mac,win; then
		run "$setup/VeraCrypt Setup $v.exe|VeraCrypt_$v.dmg" -- /quiet || return

	elif IsPlatform ubuntu; then
		run "$setup/veracrypt-$version-Update7-Ubuntu-$(os release)-$architecture.deb" || return
		run "$setup/veracrypt-console-$version-Update7-Ubuntu-$(os release)-$architecture.deb" || return

	elif IsPlatform pi; then
		run "$setup/veracrypt-$version-Debian-11-armhf.deb" || return
		run "$setup/veracrypt-console-$version-Debian-11-armhf.deb" || return

	fi
}

VeraCryptProfile() { makeDir "$UDATA/app/VeraCrypt" && VeraCrypt $noPrompt profile restore default; }
VeraCryptFinalWin() { mergeDir "$pp/VeraCrypt" "$ao" && $rm "$pd/VeraCrypt.lnk"; }

#################################################
# SSH
#################################################

SshAllInstall() { i passh sshClient sshServer sshFs WinScp; }

passhInstall() { InPath passh && return; run --name "passh" --executable "shareware/passh/image"; } # https://github.com/clarkwang/passh

SshCoreInstall()
{
	i SshClient SshServer || return
	! IsPlatform mac && { i SshFs || return; } # macOS FUSE installation is cumbersome
	return 0
}

SshServerInstall()
{
	! InPath sshd && return
	header "SSH Server" && i SshServerHostKeys && RunPlatform sshServer && i SshServerBorg SshServerCredential SshServerHashi
}

SshServerBorgInstall() { echo 'AcceptEnv BORG_*' | sudo ${G}tee "/etc/ssh/sshd_config.d/borg.conf" > /dev/null; }
SshServerCredentialInstall() { echo 'AcceptEnv CREDENTIAL_*' | sudo ${G}tee "/etc/ssh/sshd_config.d/credential.conf" > /dev/null; }
SshServerHashiInstall() { echo 'AcceptEnv CONSUL_* NOMAD_* VAULT_*' | sudo ${G}tee "/etc/ssh/sshd_config.d/hashi.conf" > /dev/null; }
SshServerHostKeysInstall() { SshHelper regenerate $noPrompt "${globalArgs[@]}"; }

sshServerEntware()
{
	package openssh-server || return
	sudo adduser sshd --disabled-password || return
	sudo "/opt/bin/ssh-keygen" -A || return
	sudo "/opt/etc/init.d/S40sshd" start || return
}

sshServerUbuntu()
{
	# fix slow ssh login at "pledge: network", test with ssh -vvv HOST
	sudo sed -i "s/^session\s*optional\s*pam_motd.so\s*motd=\/run\/motd.dynamic$/#session    optional     pam_motd.so motd=\/run\/motd.dynamic/" "/etc/pam.d/sshd"  || return
}

sshServerWsl()
{
	# install
	! InPath sshd && { pkg openssh-server || return; }
	service start ssh || return

	# port forwarding
	if IsPlatform wsl2; then
		elevate netsh interface portproxy delete v4tov4 listenport=22 listenaddress=0.0.0.0 >& /dev/null
		elevate netsh.exe interface portproxy add v4tov4 listenport=22 listenaddress=0.0.0.0 connectport=22 connectaddress=$(GetIpAddress)
	fi

	# service permission
	if ! sudo grep "$USER" /etc/sudoers >& /dev/null; then
		echo "$USER ALL = (root) NOPASSWD: /usr/sbin/sshd -D" | sudo ${G}tee -a /etc/sudoers || return
	fi

	return 0
}

SshClientInstall()
{
	header "SSH Client"
	makeDir ~/.ssh && $hide ~/.ssh || return
	i passh sshClientPermission || return
	RunPlatform sshClient || return
}

SshClientPermissionInstall()
{
	[[ ! -d ~/.ssh ]] && return

	sudoc chown "$USER" ~/.ssh/* || return
	! IsPlatform mac && { chgrp "$USER" ~/.ssh/* || return; }
	chmod 700 ~/.ssh && sudo chmod 600 ~/.ssh/* && $hide ~/.ssh
}

sshClientWsl()
{
	# SSH key for Windows clients
	[[ ! -d "$WIN_HOME/.ssh" ]] && { mkdir "$WIN_HOME/.ssh" || return; }
	cp ~/.ssh/id_ed25519* "$WIN_HOME/.ssh" || return
}

sshClientMac()
{
	if ! grep "XAuthLocation /opt/X11/bin/xauth" /etc/ssh/ssh_config  >& /dev/null; then
		echo "Configuring SSH authentication..."
		echo "XAuthLocation /opt/X11/bin/xauth" | sudo ${G}tee -a /etc/ssh/ssh_config
	fi

	return 0
}

SshFsInstall()
{
	if IsPlatform debian; then
		pkg sshfs && sudo sed -i 's/^#user_allow_other$/user_allow_other/' "/etc/fuse.conf"

	elif IsPlatform entware; then
		pkg sshfs && sudo sed -i 's/^#user_allow_other$/user_allow_other/' "/opt/etc/fuse.conf" || return

	elif IsPlatformAll mac,arm; then
		i --no-header fuse || return
		run --executable "shareware/SSHFS/image" || return # https://www.reddit.com/r/macapps/comments/lea865/how_to_install_sshfs_on_big_sur/		

	elif IsPlatform mac; then
		i --no-header fuse || return
		run "shareware/SSHFS/setupsshfs-2.5.0.pkg" || return # https://github.com/osxfuse/sshfs/releases

	fi
}

WinScpInstall() { run --header "WinSCP" "shareware/WinSCP/WinSCP-5.19.6-Setup.exe"; } # https://winscp.net/eng/index.php
WinScpProfile() { winscp $noPrompt profile restore default; }
WinScpFinalWin() { $mv "$pp/WinSCP.lnk" "$pp/Operating System" && $rm "$pd/WinSCP.lnk"; }

#################################################
# Surveillance
#################################################

SurveillanceAllInstall() { i AmcrestCamera qvr SurveillanceStation; }

AmcrestCameraInstall()
{
	header "Amcrest Camera"

	# https://support.amcrest.com/hc/en-us/categories/201939038-All-Downloads
	run "hardware/Amcrest/setup/Amcrest_ConfigTool_Eng_V3.20.10.T.180715.exe|Amcrest IP Config.zip" "" --elevate || return
	IsPlatform win && { run "hardware/Amcrest/setup/P2PSurveillance_3.01.001.0.exe" --elevate || return; } # browser plugin
	run "hardware/Amcrest/setup/Amcrest+Surveillance+Pro+Setup+V1.14.1.R.20161018.exe|Amcrest_Surveillance_Pro_Mac.bz2" --elevate || return
}

AmcrestCameraFinalWin()
{
	makeDir "$pp/Surveillance/Other" || return
	mv "$pd/Amcrest IP Config.lnk" "$pp/Surveillance" || return
	mv "$pd/Amcrest Surveillance Pro.lnk" "$pp/Surveillance" || return
	$rmd "$pp/Amcrest IP Config" || return
	$rmd "$pp/Amcrest Surveillance Pro" || return
}

QnapQvrInstall()
{
	header "QVR (QNAP Video Recorder)" # https://www.qnap.com/en/download?model=tvs-471&category=firmware
	run "hardware/QNAP/QVR/QVRProClient.exe|QVRMacClient-2.2.1-170221.dmg" || return
}

QnapQvrFinalWin()
{
	mergeDir "$pp/QNAP" "$pp/Surveillance/Other" || return
	$mv "$ud/QVR Pro Client.lnk" "$pp/Surveillance/Other/QNAP/QVR Pro Client" || return
}

SurveillanceStationInstall()
{
	header "Surveillance Station" # https://www.synology.com/en-us/support/download/DS216+II?item_filter= x#utilities
	local v="Synology Surveillance Station Client-2.0.2-2406"
	run "hardware/Synology/Surveillance Station/$v_x64.exe|$v.dmg" || return
}

SurveillanceStationFinalWin()
{
	mergeDir "$pp/Synology" "$pp/Surveillance/Other" || return
	$rm "$pd/Live View.lnk" || return
	$rm "$pd/Synology Surveillance Station Client.lnk" || return
	$rm "$pd/Timeline.lnk" || return
}

#################################################
# Terminals
#################################################

TerminalAllInstall() { i iTerm terminator tmux WindowsTerminal; }

iTermInstall()
{
	header "iTerm" # https://iterm2.com/downloads.html
	local v="3.4.19"

	# check if installed
	[[ -d "/Applications/iTerm.app" && ! $force && "$(AppVersion iTerm)" == "$v" ]] && return

	# install
	run "platform/mac/iTerm2/iTerm2-${v//./_}.zip" || return

	# shell intergration
	if ask "Do you want to install iTerm shell integration"; then # https://iterm2.com/documentation-shell-integration.html
		curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
	fi

	# dock
	! dockutil --find "iTerm" >& /dev/null && { dockutil --add "/Applications/iTerm.app" || return; }

	# preferences
	local clip; clip="$udata/profile/default"; clipw "$clip"
	echo "- Preferences, General, Preferences, check Load preferences from a custom folder, Browse, $clip"
	macAppOpen iTerm || return
}

TerminatorInstall() { run --package terminator; }
TerminatorProfile() { TerminatorHelper $noPrompt profile restore default; }

TmuxInstall() { run --package "tmux"; }

TmuxProfile()
{
	# https://github.com/gpakosz/.tmux
	[[ ! -d "$HOME/.tmux" ]] && { git clone "https://github.com/gpakosz/.tmux.git" "$HOME/.tmux" || return; }
	ln -s -f ".tmux/.tmux.conf" "$HOME" && ln -s -f "$UBIN/.tmux.conf.local" "$HOME"
}

WindowsTerminalInstall()
{
	header "Windows Terminal" # https://github.com/microsoft/terminal/releases
	local wtVersion wtSuffix; ScriptEval WindowsTerminal config || return

	# installation check	
	[[ -d "$wtDir" && ! $force ]] && return

	# remove non-preview version
	[[ "$installType" == "beta" ]] && canElevate && powershell 'Get-AppxPackage Microsoft.WindowsTerminal | Remove-AppxPackage'

	# install
	if [[ "$installType" == @(|local) ]] && CanElevate; then
		run "other/Microsoft/Windows/terminal/Microsoft.WindowsTerminalPreview_Win11_${wtVersion}_${wtSuffix}.msixbundle" || return
	else
		run --store "9N8G5RFZ9XK3" || return
	fi
}

WindowsTerminalHelp()
{
	echot "- Settings, Startup
	- Default profile=$(wsl get name)
	- Startup, Default terminal application=Windows Terminal Preview"
}

WindowsTerminalFinalWin() { WindowsTerminal config set "${globalArgs[@]}"; }
WindowsTerminalProfile() { WindowsTerminal profile restore default "${globalArgs[@]}"; }

#################################################
# Text Editor
#################################################

TextEditorAllInstall() { i bear geany micro notepadpp obsidian sublime VisualStduioCode; }

TextEditorCoreInstall()
{
	header "Text Editor Core"
	if isInstallable sublime; then
		i sublime
	else
		i geany
	fi
}

BearInstall() { run --name "Bear" "1091189122"; }

GeanyInstall() { run --package "geany" && pkg gnome-icon-theme; }
GeanyProfile() { GeanyHelper $noPrompt profile restore default && SetTextEditor; }

MicroInstall() { MicroHelper install; }

MicroProfile()
{
	MicroHelper $noPrompt profile restore default || return

	if InPath update-alternatives; then
		sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/micro 50
		sudo update-alternatives --set editor /usr/local/bin/micro || return
	fi

	SetTextEditor || return
}

NotepadPpInstall()
{
	header "Notepad++"

	# http://notepad-plus-plus.org/download/
	run "shareware/Notepad++/setup/npp.7.8.7.Installer.x64.exe" --elevate || return

	findFile "shareware/Notepad++" || return

	ask "Update plugins" && { RunScript --elevate $verbose -- rsync -vr --delete "\"$file/setup/plugins\"" "\"$P/Notepad++\"" || return; }
	return 0
}

NotepadPpProfile() { notepadpp profile restore default; }
NotepadPpFinalWin() {	$mv "$pp/Notepad++.lnk" "$pp/Applications" && $rmd "$pp/Notepad++" && $rm "$pd/Notepad++.lnk"; }

ObsidianInstall()
{
	local v="0.15.9" # https://obsidian.md/download
	local architecture; IsPlatform arm64 && architecture="-arm64"
	run --header "Obsidian" "shareware/obsidian/VObsidian.$version|.exe|-universal.dmg|deb" || return
}

SublimeInstall()
{
	header "Sublime Text Editor"
	local v="4143" 						# https://www.sublimetext.com/download
	local versionBeta="4131" 	# https://www.sublimetext.com/dev
	local alternate; [[ "$installType" == "alternate" ]] && alternate="--alternate"
	local args=(); IsPlatform win && args+=('/VERYSILENT' '/TASKS="contextentry"')
	IsPlatform linux && [[ ! $installType ]] && installType="package" # Linux defaults to package

	# check if installed
	[[ "$installType" == "beta" ]] && v="$versionBeta"
	sublime IsInstalled && [[ ! $force && "$(sublime $alternate version)" == "$v" ]] && return

	# install	
	if [[ "$installType" == @(|beta|local) ]]; then
		local file="other/Sublime/setup/sublime_text_build_${v}_x64$(getElevate "_setup.exe" ".zip")|sublime_text_build_${v}_mac.zip|sublime-text_build-${v}_$(getArch "amd64" "arm64").deb"
		if CanElevate; then run "$file" --elevate -- "${args[@]}" || return
		else run "$file" --dest "$UADATA/Sublime Text" --copy-local || return
		fi
	elif IsPlatform debian && [[ "$installType" == @(|alternate|package) ]]; then sublimePackage || return
	else couldNotLocate
	fi
}

sublimePackage()
{
	# add package source - https://www.sublimetext.com/docs/linux_repositories.html
	if [[ ! -f "/etc/apt/sources.list.d/sublime-text.list" ]]; then
		wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - || return
  	echo "deb https://download.sublimetext.com/ apt/stable/" | sudo ${G}tee /etc/apt/sources.list.d/sublime-text.list || return
  	PackageUpdate || return
	fi

	# install package
	run --package sublime-text --no-header || return
}

SublimeProfile() { sublime $noPrompt profile restore default && SetTextEditor; }
SublimeRegister() { register "sublime"; }
SublimeFinalMac() { sudoc MakeLink "$P/Sublime Text.app/Contents/SharedSupport/bin/subl" "/usr/local/bin/subl"; }

SublimeDownload()
{
	header "Sublime Download"

	# change to the install location
	local file; findFile "other/Sublime/setup" || return; cd "$file" || return

	# get version
	local url="https://www.sublimetext.com/download"
	local v="$(curl --silent --location "$url" | grep "Version" | ${G}grep -oP '(?=Build ).*' | cut -d" " -f2 | cut -d"<" -f1)"
	[[ ! $v ]] && { ScriptErr "unable to get the current Sublime version from '$url'"; return 1; }

	# check version
	[[ -f "version.txt" && "$(cat "version.txt")" == "$v" && ! $force ]] && return

	# store version
	echo "$v" > "version.txt" || return

	# download
	local baseUrl="https://download.sublimetext.com/sublime_text_build_${v}_"
	local baseUrlDeb="https://download.sublimetext.com/sublime-text_build-${v}_"
	local suffix suffixes=("arm64.deb" "mac.zip" "x64_setup.exe" "x64.zip" "amd64.deb")
	for suffix in "${suffixes[@]}"; do
		local url="$baseUrl$suffix"; [[ "$url" =~ .deb$ ]] && url="$baseUrlDeb$suffix"
		file="$(GetFileName "$url")"
		[[ -f "$file" ]] && { rm "$file" || return; }
		hilight "Downloading '$file'..."
		curl -L "$url" --output "$file" || return
		echo
	done

	# show version
	echo "Downloaded Sublime version $v"
}

SublimeFinalWin()
{
	! CanElevate && { $makeShortcut "$UADATA/Sublime Text/subl.exe" "$up/Applications/Sublime Text"; return; }
	registry delete "HKEY_CLASSES_ROOT/Applications/sublime_text.exe/" # enable Windows Open With
	$mv "$pp/Sublime Text.lnk" "$pp/Applications" || return
}

VisualStudioCodeInstall()
{
	header "Visual Studio Code"; local v="1.76.2" # https://code.visualstudio.com/#alt-downloads
	local args=(); IsPlatform mac && args+=(--dest "$HOME/Applications")
	run "other/Microsoft/Visual Studio/code/VSCodeUserSetup-$(getArch "x64" "arm64")-$v.exe|VSCode-darwin-universal-$v.zip|code_$v_$(getArch "amd64" "arm64" "armhf").deb" "${args[@]}" --copy-local || return

	# SSH Agent
	if IsPlatform win && ! service running ssh-agent; then		
		if CanElevate; then
			serviceAutoStart ssh-agent || return
		else
			service ui || return
			pause "Enable and start the OpenSSH Authetnication Agent, then press any key to continue..."
		fi
		[[ ! -d "$WIN_HOME/.ssh" ]] && { cp -rp ~/.ssh "$WIN_HOME/.ssh" || return; }
		ssh-add.exe
	fi

	# Python
	i PythonFinal || return	
}

VisualStudioCodeDownload()
{
	header "Visual Studio Code Download" # https://code.visualstudio.com/#alt-downloads

	# change to the install location
	findFile "other/Microsoft/Visual Studio/code" || return; cd "$file" || return
	
	# get version
	local url="https://code.visualstudio.com/sha/download?build=stable&os=" os="win32-x64"
	local v; v="$(curl --silent -H -L "$url$os" | cut -d- -f3 | RemoveEnd ".exe")" || return
	[[ ! $v ]] && { ScriptErr "unable to get the current Visual Studio Code version from '$url$os'"; return 1; }

	# check version
	[[ -f "version.txt" && "$(cat "version.txt")" == "$v" && ! $force ]] && return

	# store version
	echo "$v" > "version.txt" || return

	# download
	local oses=("darwin-universal" "linux-deb-arm64" "linux-deb-x64" "win32-x64-user" "win32-x64" "win32-arm64-user" "win32-arm64")
	for os in "${oses[@]}"; do

		local file; file="$(curl --silent -H -L "$url$os" |& grep "Found." | GetFileName)" || { ScriptErr "unable to download '$url$os'"; return 1; }
		[[ "$file" =~ .deb$ ]] && file="code_${v}_$(echo "$file" |  cut -d_ -f3)" # remove serial number, i.e. code_1.76.2-1678817801_amd64.deb -> code_1.76.2_amd64.deb
		[[ "$file" == "VSCode-darwin-universal.zip" ]] && file="VSCode-darwin-universal-$v.zip"

		hilight "Downloading '$file'..."
		curl -L "$url$os" --output "$file" || return
		echo .
	done

	# show version
	echo "Downloaded Visual Studio Code version $v"
}

VisualStudioCodeFinalWin() 
{
	mergeDir "$pp/Visual Studio Code" "$pp/Development/other" || return
	mergeDir "$up/Visual Studio Code" "$up/Development/other" || return
	$hide "$WIN_HOME/.vscode" || return	
}

#################################################
# Time
#################################################

TimeAllInstall() { i chrony chronyServer timezone && pkg ntpdate tty-clock; }
TimeCoreInstall() { i chrony && pkg ntpdate tty-clock; }

ChronyInstall() # time syncronization / NTP replacement
{
	service exists systemd-timesyncd && return

	header "Chrony"

	if IsPlatform mac; then
		run "other/Chrony/chronycontrol-1.4.8.zip" || return # https://www.whatroute.net/chronycontrol.html#download
		sleep 2; macAppOpen "ChronyControl" || return
	else
		pkg chrony ntpdate || return
	fi
}

ChronyServerInstall()
{
	header "Chrony Server"
	pkg chrony || return
	grep -q "^allow" "/etc/chrony/chrony.conf" && return
	echo "allow" | sudo ${G}tee -a "/etc/chrony/chrony.conf" || return
	service restart chrony || return
}

TimezoneInstall() { header "Timezone"; local timezone="$(ConfigGet "timezone")"; RunPlatform timezone; }
timezoneMessage() { hilight "Setting the timezone to '$timezone'..."; }

timezoneDebian()
{
	{ [[ ! $timezone ]] || IsPlatform win; } && return
	[[ ! $force ]] && cat "/etc/timezone" |& grep "$timezone" > /dev/null && return

	timezoneMessage
	DEBIAN_FRONTEND=noninteractive sudoc apt install -y tzdata || return
	[[ ! -f "/usr/share/zoneinfo/$timezone" ]] && return
	sudo ln -snf "/usr/share/zoneinfo/$timezone" "/etc/localtime" || return
	echo "$timezone" | sudo ${G}tee "/etc/timezone" || return
	sudo dpkg-reconfigure -f noninteractive tzdata || return
}

timezonePi()
{
	[[ ! $timezone ]] && return
	[[ ! $force ]] && cat /etc/timezone | grep -q "$timezone" && return

	timezoneMessage; sudo raspi-config nonint do_change_timezone "$timezone"
}

timezoneWin()
{
 	timezone="$(ConfigGet "timezoneWin")"; [[ ! $timezone ]] && return
 	[[ ! $force ]] && [[ $(tzutil.exe /g) == "$timezone" ]] && return
 	
  timezoneMessage; tzutil.exe /s "$timezone"
}

#################################################
# Travel
#################################################

TravelAllInstall() { i garmin sena; }

GarminInstall()
{
	header "Garmin"
	run "hardware/Garmin/setup/GarminExpress.exe|GarminExpress.dmg" || return # GPS - https://www.garmin.com/en-US/software/express/
	run "hardware/Garmin/setup/BaseCamp_474.exe|BaseCampforMac_4812.dmg" || return # GPS - https://www.garmin.com/en-US/shop/downloads/basecamp
	IsPlatform win && { run "hardware/Garmin/setup/inReach Sync en-US 474776.exe" || return; } # satellite - https://inreach.garmin.com/Sync
	return 0
}

GarminFinalWin()
{
	mergeDir "$pp/Garmin" "$pp/Travel/Other" || return
	$rm "$pd/Garmin Express.lnk"
	$rm "$pd/inReach Sync.lnk"
	moveAppData "My Garmin" "Garmin" || return
	registry delete "urun/GarminExpressTrayApp" # "C:\Program Files (x86)\Garmin\Express Tray\ExpressTray.exe"
}

SenaInstall()
{
	header "Sena" # https://www.sena.com/software/#device-manager
	run "hardware/Sena/setup/SenaBluetoothDeviceManagerForWindows-v3.8.2-setup_x64.exe|SENABluetoothDeviceManagerForMAC-v3.7.pkg" || return
}

SenaFinalWin()
{
	mergeDir "$up/Sena Technologies" "$pp/Travel/Other" || return
	$rm "$ud/SenaBluetoothDeviceManager.lnk"
}

#################################################
# utility - CLI
#################################################

UtilityCliAllInstall() { i bat broot cheat choose colorls duf dust exa fd fzf magic unison UupDump; }
CheatInstall() { run --name "cheat" --version "4.2.3" --executable "shareware/cheat"; } # https://github.com/cheat/cheat/releases
ColorlsInstall() {  run --name "colorls" --ruby "colorls"; }
ExaInstall() { run --name "exa" --executable "shareware/exa/image"; } # https://github.com/ogham/exa/releases
MagicInstall() { cd "$HOME" && file -C -m "$HOME/.magic"; } # compile the magic file
UnisonInstall() { run --name "unison" --executable "shareware/unison/bin/"; } # https://github.com/bcpierce00/unison/releases
UupDumpInstall() { sudo apt-get install aria2 cabextract wimtools chntpw genisoimage; }

BatInstall()
{
	run --package bat || return # https://github.com/sharkdp/bat
	IsPlatform debian && ! InPath bat && { sudo ln -s "/usr/bin/batcat" "/usr/local/bin/bat" || return; }
	return 0
}

BrootInstall()
{
	header "broot"; local v="1.9.4" # https://dystroy.org/broot/install/#from-precompiled-binaries

	# check if installed
	InPath broot && [[ "$(broot --version)" == "broot $v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then brew install broot
	elif { IsPlatformAll arm,32 || IsPlatform x86; } && [[ "$installType" == @(|local) ]]; then run --executable "shareware/broot"
	elif [[ "$installType" == @(|compile) ]]; then run --rust "broot"
	else couldNotLocate
	fi

	# configure
	profile --app broot --method "$HOME/.config/broot" --files '*' restore default $noPrompt
}

ChooseInstall()
{
	header "choose"; local v="1.3.3" # https://github.com/theryangeary/choose

	# check if installed
	InPath choose && [[ "$(choose --version)" == "choose $v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then brew install choose-rust
	elif IsPlatform debian && [[ "$installType" == @(|local) ]]; then run --executable "shareware/choose" --no-header # built from source
	elif [[ "$installType" == @(|compile) ]]; then run --rust "choose"
	else couldNotLocate
	fi
}

DogInstall()
{
	header "dog"; local v='v0.2.0-pre [721440b] built on 2022-03-30 (pre-release!)' # https://github.com/ogham/dog

	# version check
	InPath dog && [[ "$(dog --version | head -2 | tail -1)" == "$v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then brew install dog
	elif IsPlatform debian && [[ "$installType" == @(|local) ]]; then run --executable "shareware/dog" --no-header # built from source
	elif [[ "$installType" == @(|compile) ]]; then GitClone "https://github.com/ogham/dog" && cargo build --release && sudo cp "target/release/dog" "/usr/local/bin"
	else couldNotLocate
	fi
}

DufInstall()
{
	header "duf"; local v="duf 0.8.1 (3c55411)"

	# check if installed
	InPath duf && [[ "$(duf --version)" == "$v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then pkg duf
	elif [[ "$installType" == @(|local) ]]; then run --executable "shareware/duf" --no-header # https://github.com/muesli/duf/releases
	else couldNotLocate
	fi
}

DustInstall()
{
	header "dust (du + rust)"; local v="0.8.0" # https://github.com/bootandy/dust/releases
	
	# check if installed
	InPath dust && [[ "$(dust --version)" == "Dust $v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then pkg dust
	elif IsPlatform arm,x86 && [[ "$installType" == @(|local) ]]; then run --executable "shareware/dust" --no-header 
	elif IsPlatformAll debian,brew && [[ "$installType" == @(|package) ]]; then brew tap tgotwig/linux-dust && brew install dust
	elif IsPlatformAll debian,x64 && [[ "$installType" == @(|package) ]]; then run "shareware/fd/fd_${v}_amd64.deb"
	elif [[ "$installType" == @(|compile) ]]; then run --rust "du-dust"
	else couldNotLocate
	fi
}

FdInstall()
{
	header "fd"; local v="8.3.2" # https://github.com/sharkdp/fd/releases

	# check if installed
	InPath fd && [[ "$(fd --version)" == "fd $v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then pkg fd
	elif IsPlatform arm,x86 && [[ "$installType" == @(|local) ]]; then run --executable "shareware/fd" --no-header
	elif IsPlatform debian && [[ "$installType" == @(|package) ]]; then run "shareware/fd/fd_${v}_$(getArch "amd64" "arm64" "armhf").deb" --no-header # has superfluous package dependencies
	elif [[ "$installType" == @(|compile) ]]; then run --rust "fd-find"
	else couldNotLocate
	fi
}

FzfInstall()
{
	header "fzf (Fuzzy Search)"

	# https://github.com/junegunn/fzf
	if [[ ! -d ~/.fzf ]]; then

		# download
		git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf || return

		# install - do not update shell configuration files, assume ~/fzf.SHELL is sourced
		sudo ~/.fzf/install --no-update-rc --completion --key-bindings || return

	fi

	printf "links..."
	local dest="/usr/local/bin" files=(fzf fzf-tmux)
	for file in "${files[@]}"; do
		printf "."
		[[ ! -e "$dest/$file" ]] && { sudo ln -s "$HOME/.fzf/bin/$file" "$dest/$file" || return; }
	done
	echo "done"
}

McFlyInstall()
{
	header "McFly"; local v="0.6.0" # https://github.com/cantino/mcfly

	# check if installed
	InPath mcfly && [[ "$(mcfly --version)" == "McFly $v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then pkg mcfly || return
	elif IsPlatform debian && [[ "$installType" == @(|local) ]]; then run --no-header --executable "shareware/mcfly" || return # compiled from source
	elif [[ "$installType" == @(|compile) ]]; then run --rust "mcfly" || return
	else couldNotLocate
	fi

	# initial history read
	{ mcfly init bash && mcfly init zsh; } > /dev/null
}

RipgrepInstall()
{
	header "ripgrep (rg)"; local v="13.0.0" # https://github.com/BurntSushi/ripgrep/releases

	# version check
	InPath rg && [[ "$(rg --version | head -1 | cut -d" " -f 2)" == "$v" && ! $force ]] && return

	# install
	if IsPlatform mac && [[ "$installType" == @(|package) ]]; then brew install ripgrep
	elif IsPlatform arm,debian && [[ "$installType" == @(|local) ]]; then run --name="rg" --executable "shareware/ripgrep" --no-header # compiled from source
	elif IsPlatformAll debian,64 && [[ "$installType" == @(|package) ]]; then run "shareware/ripgrep/ripgrep_13.0.0_amd64.deb"
	elif [[ "$installType" == @(|compile) ]]; then run --rust "ripgrep"
	else couldNotLocate
	fi
}

#################################################
# utility - CLI - text
#################################################

UtilityCliTextInstall() { i cowsay figlet fortune fx jq lolcat; }
CowsayInstall() {  InPath cowsay && return; run --python-global "cowsay"; }
FigletInstall() {  InPath pyfiglet && return; run --python-global "pyfiglet"; }
FortuneInstall() { InPath fortune && return; run --python-global "fortune-lite"; }
FxInstall() {	run --node fx; }
LolcatInstall() {  InPath lolcat && return; run --python-global "lolcat"; }
JqInstall() { run --header "jq" --package "jq"; }

#################################################
# utility - GUI
#################################################

UtilityGuiAllInstall() { i 7Zip alfred AltTab AltTabTerminator aptivate AutoHotKey bartender BetterTouuchTool CloseAllWIndows DreamAquarium EdgeDeflector flux greenshot KarabinerElements Lingon LinkShellExtension fuse RightClickEnhancer shottr SoundSource TaskLayout TidyTabs wallpaper; }
AlfredInstall() { run --header "Alfred" "platform/mac/Alfred/setup/Alfred_5.0.6_2110.dmg"; } # https://www.alfredapp.com/
AlfredRegister() { register "alfred"; }
AltTabInstall() { run "platform/mac/AltTab/AltTab-6.53.1.zip"; } # https://alt-tab-macos.netlify.app/
AltTabProfile() { AltTab profile restore default; }
AmphetamineInstall() {  run --name "Amphetamine" "937984704" && run --no-header "platform/mac/Amphetamine/Amphetamine Enhancer.dmg" && open -a "Amphetamine Enhancer"; } # https://github.com/x74353/Amphetamine-Enhancer
BartenderInstall() { run --header "Bartender" "platform/mac/Bartender/Bartender 4.dmg"; } # https://www.macbartender.com/
BartenderProfile() { bartender profile restore default; }
BatteriesInstall() { run --header "Batteries" "platform/mac/Batteries/Batteries.dmg"; } # https://www.fadel.io/batteries
Calendar366Install() { run --name "Calendar 366" --store "1265895169"; }
LingonInstall() { run --name "Lingon" "platform/mac/LingonX7/LingonX7.zip"; } # https://www.peterborgapps.com/lingon/
ShottrInstall() { run --header "shottr" "platform/mac/shottr/Shottr-1.5.4.dmg"; } # https://shottr.cc/
SoundSourceInstall() { run --header "Sound Source" "platform/mac/Rogue Amoeba/SoundSource.zip"; } # https://rogueamoeba.com/soundsource/

7ZipInstall()
{
	header "7-Zip"

	# debian, mac
	IsPlatform debian && { pkg p7zip-full || return; }
	IsPlatform mac && { pkg p7zip || return; }

	# Windows - http://www.7-zip.org/download.html
	! IsPlatform win && return;
 	local v="22.1.0.0" vPowerShell="22.01" vInstall="2201" file="$P/7-Zip/7z.exe" 
	[[ -f "$file" && "$(AppVersion "$file")" == @($v|$vPowerShell) && ! $force ]] && return
	run "shareware/7-Zip/setup/7z${vInstall}-$(getArch "x64" "arm64").$(getArch "msi" "exe")" --copy-local || return
}
	

7ZipFinalWin()
{
	! CanElevate && return
	$cp "$P/7-zip/7-zip.chm" "$PLATFORM_PATH" || return
	$cp "$P/7-zip/7z.exe" "$P/7-zip/7z.dll" "$PLATFORM_PATH" || return
	mergeDir "$pp/7-Zip" "$ao" || return
}

AltTabTerminatorInstall() { run --header "Alt-Tab Terminator" "platform/win/NTwind/AltTabTer_4.8-setup.exe" --elevate; } # https://www.ntwind.com/software/alttabter.html

AltTabTerminatorHelp()
{
	echot "\
Settings...
- Uncheck Autostart on Windows startup
- Hamburger, check Replace Alt-Tab, uncheck Replace Win-Tab"
	app AltTabTerminator || return
}

AltTabTerminatorFinalWin()
{
	mergeDir "$pp/Alt-Tab Terminator" "$oo" || return
	$rm "$pd/Alt-Tab Terminator.lnk" || return
	registry delete "urun/Alt-Tab Terminator" # "C:\Program Files\Alt-Tab Terminator\AltTabTer64.exe" /startup
}

ApptivateInstall() { run --header "Apptivate" run "platform/mac/Apptivate/Apptivate.app.zip"; } # http://www.apptivateapp.com

ApptivateHelp()
{
	echot "Add Item...
- iTerm, ctrl-cmd-3
- Firefox, ctrl-cmd-a
- Standard Notes, ctrl-cmd-n
- Sublime Text, ctrl-cmd-t"
}

AptivateProfile() { macAppOpen Apptivate; }

AutoHotKeyInstall()
{
	header "AutoHotKey" # https://www.autohotkey.com/ https://www.autohotkey.com/download/2.0/?C=M;O=D
	local v="2.0.2"; local vCheck="${v}.0"
	local file="shareware/AutoHotKey/image/AutoHotkey_$v.zip"

	# version check
	AutoHotKey IsInstalled && [[ "$(AutoHotKey version)" == "$vCheck" && ! $force ]] && return

	# install	
	local dest; dest="$(getElevate "AutoHotKey" "$UADATA/AutoHotKey")" || return
	local elevate; elevate="$(getElevate "--elevate")" || return
	AutoHotKey close && run "$file" --dest "$dest" "$elevate" --copy-local && AutoHotKey startup
}

BetterTouchToolInstall() { run --header "BetterTouchTool" "platform/mac/BetterTouchTool/setup/BetterTouchTool.zip"; } # https://folivora.ai/

BetterTouchToolHelp()
{
	! findFile "platform/mac/BetterTouchTool/other/$USER.bettertouchtool" && return
	clipw "$file" || return
	echot "- BetterTouchTool, Import License, cmd-shift-g, cmd-v, Open" || return
}

BetterTouchToolProfile() { BetterTouchTool profile restore default && 	sleep 1; macAppOpen "BetterTouchTool"; }

CloseAllWindowsInstall() { run --header "Close All Windows" "platform/win/NTwind/CloseAll_4.8-setup.exe" --elevate; } # https://www.ntwind.com/software/closeall.html
CloseAllWindowsFinalWin() { mergeDir "$pp/CloseAll" "$oo" && $rm "$pd/CloseAll.lnk"; }

DreamAquariumInstall() { run --header "Dream Aquarium" "other/Dream Aquarium/DreamAquariumXP.exe|DreamAquarium_1.296.18.dmg"; } # https://www.dreamaquarium.com/
DreamAquariumFinalWin() { mergeDir "$pp/Dream Aquarium" "$ao" && $rm "$pd/Dream Aquarium.lnk"; }

EdgeDeflectorInstall() { run --header "EdgeDeflector" "shareware/other/EdgeDeflector_install.exe" --elevate --copy-local; } # https://github.com/da2x/EdgeDeflector/releases, copy local to avoid the unknown zone prompt

FluxInstall() { run --name "f.lux" "shareware/f.lux/flux-setup.exe|Flux.zip"; } # http://justgetflux.com/

FluxHelp()
{
	echot "\
- Location: Search
- Transition: Slow
- check Start F.lux at Login"
}

FluxFinalMac() { start "/Applications/Flux.app"; }

FluxFinalWin()
{
	mergeDir "$up/Flux" "$up/Operating System/Other" || return
	registry delete "urun/f.lux" # "C:\Users\jjbutare\AppData\Local\FluxSoftware\Flux\flux.exe" /noshow
}

GreenshotInstall()
{
	header "Greenshot" # http://getgreenshot.org/downloads/
	if IsPlatform win; then
		run "shareware/Greenshot/Greenshot-INSTALLER-1.2.10.6-RELEASE.exe" /silent || return
	elif IsPlatform mac; then
		run --store "1103915944" || return
	fi
}

GreenshotHelp()
{
	echot "\
- Screenshot Destination=Clipboard
- Auto Destinations, check Always copy to clipboard"
}

GreenshotFinalWin()
{
	mergeDir "$pp/GreenShot" "$oo" || return
	registry delete "run/Greenshot" # C:\Program Files\Greenshot\Greenshot.exe
}

KarabinerElementsInstall()
{
	local v="14.6.0" # https://pqrs.org/osx/karabiner/
	run --name "Karabiner-Elements" "platform/mac/Karabiner-Elements/Karabiner-Elements-$v.dmg" --version=$v || return
}

KarabinerElementsHelp()
{
	echot "\
- Preferences..., Function keys, check Use all F1, F2, etc. keys as standard function keys"
}

KarabinerElementsProfile() { karabiner profile restore default && macAppOpen Karabiner-Elements; }

HiddenStartInstall() { run --header "Hidden Start" "platform/win/NTwind/Hstart_4.9-setup.exe" --elevate; } # https://www.ntwind.com/software/hstart.html

HiddenStartFinalWin()
{
	mergeDir "$pp/Hidden Start" "$oo" || return
	rmSudo "$pd/Hidden Start.lnk" || return

	local d="$P/Hidden Start/"
	cp "$d/HstartUI.exe" "$d/hstart"* "$PLATFORM_PATH" || return

	i HiddenStartConfigure || return
}

isHiddenStartConfigued() { schtasks.exe | grep HstartUAC-x64 >& /dev/null; }

HiddenStartConfigureInstall()
{
	header "Hidden Start Configuration"

	if [[ $force ]] || ! isHiddenStartConfigued; then
		start --wait hstart64.exe /nouac /wait ""cmd" /c echo Hidden Start 64 scheduled task is setup"
		! isHiddenStartConfigued && { EchoErr "inst: unable to add the Hidden Start scheduled task"; return 1; }
	fi

	if [[ $force || ! "$(registry 32 get "HKLM/SOFTWARE/Alexander Avdonin/Hidden Start/RegName")" ]]; then
		registry import "$setupFiles/HiddenStart.reg" || return
	fi

	return 0
}

LinkShellExtension()
{
	header "Link Shell Extension" # http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.htm
	run "platform/win/Link Shell Extension/HardLinkShellExt_X64.exe" || return
	mergeDir "$up/Link Shell Extension" "$oo" || return
}

fuseInstall()
{
	header "FUSE"

	if IsPlatform debian; then
		pkg fuse || return # https://www.kernel.org/doc/html/latest/filesystems/fuse.html
	elif IsPlatform mac; then	 # requires GUI installer to properly install system extensions
		useGui="true" run "shareware/Fuse/macfuse-4.4.0.dmg" || return # https://osxfuse.github.io/
	fi
}

RightClickEnhancerInstall() { run --header "Right Click Enhancer" "platform/win/RBSoft/Right Click Enhancer/Right.Click.Enhancer.Professional.Setup.exe" --elevate; } # https://rbsoft.org/downloads/right-click-enhancer/

RightClickEnhancerHelp()
{
	echot "\
Setup
- Registration, Registration
- Right Click Editor, Action, Install Customize this Menu
Definitions
- normal entries - static entries, normally no submenus or icons
- shell extensions - dynamic entries (from a DLL) , typically shown with an icon
Instructions
- shift-right-click - view hidden items
- shift-right-click, Customize this Menu - customize the right click menu which
  shows all normal and shell extensions fo the selected object together
- Right Click Editor, click top-left picture to toggle between normal entries and shell extensions
- EPP is Windows Defender, mscore (.NET programs)"
}

RightClickEnhancerFinalWin() { mergeDir "$up/Right Click Enhancer Professional" "$oo" && $rm "$ud/Right Click Enhancer Professional.lnk"; }

TaskLayoutInstall()
{
	header "TaskLayout" # http://www.systemgoods.com/
	run "platform/win/SystemGoods/TaskLayout-v0.7.0.5-Installer.exe" || return
}

TidyTabsInstall()
{
	local v="1.20.0" # https://www.nurgo-software.com/pricing/tidytabs
	run --name "TidyTabs" "platform/win/NURGO/TidyTabs.msi" --version=$v --elevate
}

TidyTabsRegister() { register "TidyTabs"; }
TidyTabsProfile() { TidyTabs profile restore default; }

TidyTabsFinalWin()
{
	mergeDir "$pp/TidyTabs" "$oo" || return
	$rm "$up/TidyTabs.lnk" || return
	registry delete "urun/TidyTabs" || return; # C:\Program Files (x86)\TidyTabs\TidyTabs.Daemon.exe
}

# wallpaper
wallpaperInstall() { RunPlatform wallpaper; }
wallpaperWin() { i Wallpaper4k; }
wallpaperMac() { i WallpaperWizard; }

Wallpaper4kInstall() { run --name "Wallpaper 4K" --store "9PMS2CJBHCKJ"; }
WallpaperWizardInstall() { run --name "Wallpaper Wizard" "1266674560"; }

#################################################
# video
#################################################

VideoAllInstall() { i vlc; }

VlcInstall()
{
	header "VLC Media Player" # https://www.videolan.org/vlc/
	run "shareware/VideoLAN/vlc-3.0.4-win64.exe" || return
}

VlcFinalWin()
{
	mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
	$rm "$pd/VLC media player.lnk" || return
}

#################################################
# virtualization
#################################################

VmAllInstall() { i docker hyperv ParallelsDesktop portainer VirtualBox VmwareWorkstation; }

VmCoreInstall() { RunPlatform vm || return; }
vmWin() { i VmwareWorkstation || return; }
vmMac() { i ParallelsDesktop || return; }

PortainerInstall() { run --name "Portainer" --docker "https://downloads.portainer.io/portainer-agent-stack.yml" && httpsShow "9443"; }
ProxmoxWinToolsInstall() { run --header "Proxmox" "shareware/Proxmox/drivers/virtio-win-gt-x64.msi"; }
ProxmoxWinToolsHelp() { echot "- shutdown, Hardware, Network Device, Model=VirtIO"; }

dockerCheck() { InPath docker && return 0; i --no-header docker || return; }

DockerInstall()
{
	header "Docker" # https://docs.docker.com/desktop/release-notes/

	# install Docker Desktop
	if IsPlatform mac,win; then
		local version="4.17.0"
		run --name "Docker" --no-header "shareware/Docker/setup/Docker Desktop Installer.exe|Docker_$(os architecture).dmg" --version=$version --copy-local || return
		IsPlatform mac && { start "Docker.app" || return; }
		[[ $ran ]] && pause
	fi

	# install
	if ! IsPlatform mac && { ! InPath docker || [[ $force ]]; }; then

		if IsPlatform pi; then
			curl -sSL get.docker.com | sh  || return
		
		elif IsPlatform ubuntu && ! grep "download.docker.com" "/etc/apt/sources.list" >& /dev/null; then # https://docs.docker.com/engine/install/ubuntu/
			package ca-certificates curl gnupg lsb-release || return
			curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | sudoc apt-key add - || return
			sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" || return
	  	PackageUpdate || return
		fi

		# packages
		pkg docker-ce docker-ce-cli containerd.io docker-compose-plugin || return
		
		# service
		serviceAutoStart docker || return

		# group
		GroupAddUser "docker" || return

		#	other  applications
		i ConsulDocker || return

	fi

	# test - does not require sudo after logout/login
	docker run "hello-world"

	# create the user-network
	! docker network ls | grep --quiet user-network && { sudoc docker network create "user-network" || return; }

	return 0
}

DockerDownload()
{
	header "Docker Download"

	# find the install ocation
	findFile "shareware/Docker/setup" || return; cd "$file" || return

	# download
	local prefix="https://desktop.docker.com"
	local url urls=("$prefix/mac/main/amd64/Docker.dmg" "$prefix/mac/main/arm64/Docker.dmg" "$prefix/win/main/amd64/Docker%20Desktop%20Installer.exe")
	for url in "${urls[@]}"; do

		# identify the file name
		if [[ "$url" =~ win ]]; then file="Docker Desktop Installer.exe"
		elif [[ "$url" =~ mac && "$url" =~ amd64 ]]; then file="docker_x86.dmg"
		elif [[ "$url" =~ mac && "$url" =~ arm64 ]]; then file="docker_arm.dmg"
		else ScriptErr "could not identify file name for url `$url`"; return
		fi

		# download		
		hilight "Downloading '$file'..."
		[[ -f "$file" ]] && { rm "$file" || return; }
		curl -L "$url" --output "$file" || return
		echo .
	done
}

DockerFinalWin()
{
	$mv "$ud/Docker Desktop.lnk" "$pp/Operating System" || return
	$hide "$WIN_HOME/.docker" || return
	[[ -d "$up/docker-desktop" ]] && { rmdir "$up/docker-desktop" || return; }
	[[ -d "$up/docker-desktop-data" ]] && { rmdir "$up/docker-desktop-data" || return; }
	registry delete "urun/Docker Desktop" || return # C:\Program Files\Docker\Docker\Docker Desktop.exe -Autostart
}

DockerHelpMac()
{
	[[ ! -d "$DATA/appdata2" ]] && return
	local clip; clip="$DATA/appdata2"; clipw "$clip"
	echot "- Settings, Resources, Advanced, Disk image location, Browse, ctrl-shift-g, paste ($clip), Apply & Restart"
}

DockerHelpWin()
{
	echot "- Settings, Resources, WSL integration, select all"
}

DockerComposeInstall() 
{
	IsPlatformAll PiKernel,ubuntu && { pkg make; }
	run --python-global "docker-compose"
}

# dockerPasswordMake PROGRAM NAME [DEST]($SRV) - make a password for a container 
dockerPasswordMake()
{
	local p="$1" name="$2" dest="${3:-$SRV}"; shift 3
	local dir="$dest/$p/.secrets"
	local file="$dir/$name.txt"

	[[ -f "$file" && ! $force ]] && return
	makeDir --sudo "$dir" || return
	pwgen 14 1 | sudo ${G}tee "$file" > /dev/null || return
}

HypervInstall()
{
	header "Hyper-V"
	RunScript --elevate --no-hide "${globalArgs[@]}" -- cmd.exe /c DISM /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V || return
	RunScript --elevate powershell Set-VMHost -EnableEnhancedSessionMode \$true || return # USB
}

HypervHelp()
{
	local data="$DATA/appdataw/Hyper-V"; makeDir "$data" || return
	local clip; clip="$(utw "$data")"; clipw "$clip"
	echot "- Hyper-V Manager, $HOSTNAME, Hyper-V Settings...
	- Virtual Hard Disks=<paste> ($clip\Virtual Hard Disks
	- Virtual Machines=<paste> ($clip)"
	hyperv gui || return
}

HypervFinalWin() { mergeDir "$pp/Administrative Tools" "$pp/Operating System"; }

HypervLinuxToolsInstall()
{
	{ IsPlatform win || ! IsHypervVm || ! IsPlatform Ubuntu; } && return

	# https://medium.com/@francescotonini/how-to-install-ubuntu-20-04-on-hyper-v-with-enhanced-session-b20a269a5fa7
	# wget https://raw.githubusercontent.com/Microsoft/linux-vm-tools/master/ubuntu/18.04/install.sh

	pkg linux-tools-virtual linux-cloud-tools-virtual xrdp || return
	sudo systemctl stop xrdp || return
	sudo systemctl stop xrdp-sesman || return

	local f="/etc/xrdp/xrdp.ini"
	#sudo sed -i_orig -e 's/use_vsock=false/use_vsock=true/g' "$f" || return # does not work in Ubuntu 20.04
	sudo sed -i_orig -e 's/^port=3389$/port=vsock:\/\/-1:3389/g' "$f" || return
	sudo sed -i_orig -e 's/security_layer=negotiate/security_layer=rdp/g' "$f" || return
	sudo sed -i_orig -e 's/crypt_level=high/crypt_level=none/g' "$f" || return
	sudo sed -i_orig -e 's/bitmap_compression=true/bitmap_compression=false/g' "$f" || return # fast when local

	[[ ! -e /etc/xrdp/startubuntu.sh ]] && { echo "#!/bin/sh
export GNOME_SHELL_SESSION_MODE=ubuntu
export XDG_CURRENT_DESKTOP=ubuntu:GNOME
exec /etc/xrdp/startwm.sh" | sudo ${G}tee /etc/xrdp/startubuntu.sh || return; }

	sudo chmod a+x "/etc/xrdp/startubuntu.sh" || return

	sudo sed -i_orig -e 's/startwm/startubuntu/g' "/etc/xrdp/sesman.ini"  || return # setup the ubuntu session
	sudo sed -i -e 's/FuseMountName=thinclient_drives/FuseMountName=shared-drives/g' "/etc/xrdp/sesman.ini"  || return # rename the redirected drives to 'shared-drives'
	sudo sed -i_orig -e 's/allowed_users=console/allowed_users=anybody/g' "/etc/X11/Xwrapper.config" || return

	# Blacklist the vmw module
	[[ ! -e /etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf ]] &&
		{ echo "blacklist vmw_vsock_vmci_transport" | sudo ${G}tee -a "/etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf" || return; }

	#Ensure hv_sock gets loaded
	[[ ! -e /etc/modules-load.d/hv_sock.conf ]] && echo "hv_sock" | sudo ${G}tee "/etc/modules-load.d/hv_sock.conf"

	# Configure the policy xrdp session
	local file="/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla"
	if [[ ! -f "$file" || $force ]]; then
		cat <<-EOF | sudo ${G}tee -a "$file" > /dev/null || return
			[Allow Colord all Users]
			Identity=unix-user:*
			Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
			ResultAny=no
			ResultInactive=no
			ResultActive=yes
		EOF
	fi

	# reconfigure the service
	service refresh || return
	service start xrdp || return
}

ParallelsDesktopInstall()
{
	header "Parallels Desktop"

	# http://www.parallels.com/downloads/desktop/
	run "platform/mac/Parallels Desktop/setup/Install Parallels Desktop.dmg" || return
	$rm "$la\com.parallels.mobile.prl_deskctl_agent.launchagent.plist" || return
	$rm "$ula\com.parallels.mobile.startgui.launchagent.plist" || return
}

ParallelsDesktopHelp()
{
	echot "\
- Preferences
	- Shortcuts
		- System Shortcuts, Send system shortcuts=Always
		- Profile=Windows Custom - based on Windows, uncheck all
		add cmd-down=Ctrl+End cmd-up=Ctrl+Home ctrl-option-right=Win+Right
		ctrl-option-left=Win+Left
- Virtual Machine, Configure...
	- Options
		- Startup and Shutdown, On VM Shutdown=Close Window
		- Applications
			- check Show Dock icons in Coherence only
			- uncheck Dock icons bounce to alert
		- Full Screen, check Use all displays in full screen
	- Hardware
		- Mouse & Keyboard, uncheck Mouse pointer sticks at window edges
		- Network 1, Type=Bridge, Default adapter
	- Security, check Do not back up virtual machine"
}

VirtualBoxInstall()
{
	header "VirtualBox" # https://www.virtualbox.org/wiki/Downloads
	local v="6.1.10-138449"
	run "shareware/VirtualBox/setup/VirtualBox-$v-Win.exe|VirtualBox-$v-OSX.dmg|virtualbox-$v~Ubuntu~bionic_amd64.deb" || return
	run "shareware/VirtualBox/extension/Oracle_VM_VirtualBox_Extension_Pack-6.1.10.vbox-extpack" || return

	local data="$ADATA/VirtualBox"; IsPlatform win && data="$DATA/appdataw/VirtualBox"
	makeDir "$data" || return

	local clip; clip="$(utw "$data")"; clipw "$clip"
	echot "- File, Preferences..., General, Default Machine Folder=<paste> ($clip)"
}

VirualBoxFinalWin()
{
	mergeDir "$pp/Oracle VM VirtualBox" "$oo" || return
	$rm "$pd/Oracle VM VirtualBox.lnk" || return
	$hide "$WIN_HOME/.VirtualBox" || return
	$rm "$WIN_HOME/VirtualBox VMs" || return
}

VmwareFusionInstall() {	run --header "VMware Fusion" "other/VMware/fusion/|VMware-Fusion-13.0.0-20802013_universal.dmg"; } # https://www.vmware.com/products/fusion/fusion-evaluation.html.html

VmwareWorkstationInstall()
{
	header "VMware Workstation" # https://my.vmware.com/group/vmware/downloads#tab1
	run "other/VMware/workstation/VMware-workstation-full-15.5.6-16341506.exe||VMware-Workstation-Full-15.5.6-16341506.x86_64.bundle" --elevate || return

	local data="$ADATA/VMware"; IsPlatform win && data="$DATA/appdataw/VMware"
	makeDir "$data" || return

	if IsPlatform win; then
		mergeDir "$pp/VMware" "$oo" || return
		$rm "$pd/VMware Workstation Pro.lnk" || return

		# enable guest NAT ping - allow echo replies (ICMP type and code 0)
		$firewall rule add "VMware NAT Echo Reply" dir=in action=allow enable=yes profile=private,domain localip=any remoteip=any protocol=icmpv4:0,0 interfacetype=any edge=yes || return
	fi

	local clip; clip="$(utw "$data")"; clipw "$clip"
	echot "\
- Edit, Preferences...
  - Workspace, Default location for virtual machines=$clip
  - Hotkeys, select Ctrl and Win only
  - Display
    - uncheck Autofit Window
    - check Autofit guest
    - uncheck Show toolbar edge when unpinned in full screen
  - Updates, check Automatically update VMware Tools on a virtual machine"
	vmware start || return
}

VmwareLinuxToolsInstall()
{
	{ IsPlatform win || ! IsVmwareVm; } && return

	if os IsServer; then
		pkg open-vm-tools || return
	else
		pkg open-vm-tools-desktop || return
	fi

	return 0
}

#################################################
# Window Layout
#################################################

WindowLayoutAllInstall() { i AquaSnap MaxTo moom Mosaico Rectangle UltraMon WinSplit; }

AquaSnapInstall() { run --header "AquaSnap" "platform/win/NURGO/AquaSnap.msi" --elevate; } # https://www.nurgo-software.com/pricing/aquasnap
AquaSnapProfile() { AquaSnap $noPrompt profile restore default; }
AquaSnapFinalWin() { mergeDir "$pp/Digital Creations AS" "$oo" && registry delete "urun/AquaSnap"; } # C:\Program Files (x86)\AquaSnap\AquaSnap.Daemon.exe
RectangleInstall() { run --name "Rectangle" "platform/mac/Rectangle/Rectangle Pro 2.7.7.dmg"; } # https://rectangleapp.com/
RectangleHelp() { echot "Settings, check Sync configuration over iCloud"; }
RectangleProfile() { rectangle profile restore default; }
RectangleRegister() { register "rectangle"; }
UltraMonInstall() { run --name "UltraMon" "platform/win/UltraMon/UltraMon_3.4.1_en_x64.msi"; } # https://www.realtimesoft.com/ultramon/download.asp
UltraMonFinalWin() { $mv "$pp/UltraMon.lnk" "$pp/Applications" && $rm "$pp/Startup/UltraMon.lnk"; }
UltraMonProfile() { profile restore default --app "UltraMon" --method "$UADATA/../Roaming/Realtime Soft/UltraMon" --files '*' $noPrompt; }
WinSplitInstall() { run --name "WinSplit" "shareware/WinSplit Revolution/image.zip" --dest "$P32/WinSplit Revolution" && WinSplit startup; }

MaxToInstall()
{
	local v="2.2.1.772" # https://maxto.net/
	run --name="MaxTo" "platform/win/Digital Creations AS/Maxto/MaxToSetup-$(echo "$v" | cut -d. -f1-3).exe" --elevate --version=$v || return
	waitForInstallWin "$up/Digital Creations AS"
}

MaxToProfile() { MaxTo $noPrompt profile restore default; }
MaxToRegister() { register "MaxTo"; }
MaxToFinalWin() {	mergeDir "$up/Digital Creations AS" "$up/Applications/Other" && $rm "$ud/MaxTo.lnk"; }

MoomInstall() { run --name "Moom" "419330170"; }

MoomHelp()
{
	echot "\
- General
  - check Launch automatically on logon
  - uncheck Show preferences on launch
  - Run faceless application
- Mouse
	- Delay=None
	- check Enable full screen grid with 4x2 cells"
}

MosaicoInstall() { run --name "Mosaico" "Soulid Studio/Mosaico/setup/Mosaico Setup v1.9.0.0.exe"; } # http://www.soulidstudio.com/download/

MosaicoFinalWin()
{
	registry delete "urun/Mosaico" || return # C:\Program Files (x86)\Mosaico\mosaico.exe
	mergeDir "$pp/Mosaico" "$oo" || return
}

MosaicoHelp()
{
	echot "\
- Try Mosaico for Free!
- unselect Auto Place
- Settings
	- uncheck Always on top of other windows
	- uncheck Display info message when reduced to system tray
	- check Start minimized to system tray
	- uncheck Start with "auto place" turned on
	- uncheck Tabify when not active
	- Show quick guide at startup"
	mosaico start
}

#################################################
# Windows
#################################################

WinInstall() # called by bootstrap
{
	header "Windows Setup"
	i WinPath || return
	! CanElevate && return
	i SystemInternals || return # run first to minimize prompts
	i WinApps WinPermissions WinDirectories WinFonts WinConsole WinConfiguration WslConfig OneDrive || return
}

WinAppsInstall()
{
	header "Windows Applications"
	[[ ! $force ]] && ! UpdateNeeded "WinApps" && return

	# find the applications for the current build
	findFile "other/Microsoft/Windows/setup" || return
	local build; build="$(os build)" || return
	local dir="$file/$build/apps"
	[[ ! -d "$dir" ]] && return

	# copy applications
	local dest="/mnt/c/temp"
	mkdir --parents "$dest" || return
	CopyDir  "$dir" "$dest/apps" --no-metadata --rsync || return # metadata is not needed and errors out on initial install

	# install the applications
	cd "$dest/apps" || return
	local file
	for file in *; do
		[[ "$(GetFileExtension "$file")" == @(bat) ]] && continue
		RunLog RunScript --elevate --no-hide -- cmd.exe /c dism.exe /Online /add-provisionedappxpackage /packagepath:$file /SkipLicense # some packages error out on re-install
	done

	# cleanup
	cd ~; rm -fr "$dest/apps"

	UpdateDone "WinApps"
}

WinConfigurationInstall()
{
	header "Windows Configuration"

	echo "Cleanup files..."
	$hide "$WIN_ROOT/PerfLogs" || return
	$hide "$WIN_ROOT/Windows.old" || return
	$rm "$WIN_HOME\Documents\My Music" || return
	$rm "$WIN_HOME\Documents\My Pictures" || return
	$rm "$WIN_HOME\Documents\My Videos" || return
	$rm "$WIN_HOME\My Music" || return
	$rm "$WIN_HOME\My Pictures" || return
	$rm "$WIN_HOME\My Videos" || return

	echo "Cleaning startup programs..."
	registry 32 delete "run/NetFxUpdate_v1.1.4322" # "C:\Windows\Microsoft.NET\Framework\v1.1.4322\netfxupdate.exe" 1 v1.1.4322 GAC + NI NID, https://superuser.com/questions/137508/ngen-exe-is-constantly-using-cpu
	registry delete "run/SecurityHealth" # %windir%\system32\SecurityHealthSystray.exe

	echo "Configuring..."
	powershell.exe Set-ExecutionPolicy RemoteSigned || return
	registry import "$setupFiles/Windows Setup.reg" || return
	numlock boot off || return
	netsh.exe advfirewall firewall set rule group="Network Discovery" new enable=Yes || return
	netsh.exe advfirewall firewall set rule group="Core Networking Diagnostics" new enable=Yes || return # Windows 11 only?

	echo "Configuring the desktop..."
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/HideDesktopIcons/NewStartPanel/{645FF040-5081-101B-9F08-00AA002F954E}" REG_DWORD 1 || return # hide recycle bin

	echo "Configure file sharing..."
	$firewall group enable "File and Printer Sharing" || return
 	registry set "HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Policies/system/LocalAccountTokenFilterPolicy" REG_DWORD 1 || return # Enable remote administrator access to protected file shares (admin$, c$...)

	echo "Configure remote desktop..."
 	registry set "HKLM/SYSTEM/CurrentControlSet/Control/Terminal Server/fDenyTSConnections" REG_DWORD 0 || return
	netsh.exe advfirewall firewall set rule group="Remote Desktop" new enable=yes; # sets for all profiles

	echo "Configuring the task area..."
	registry set "HKCU/Control Panel/Bluetooth/Notification Area Icon" REG_DWORD 0 || return # hide Bluetooth Devices

	echo 'Configuring the theme...'
	registry set 'HKCU/SOFTWARE/Microsoft/Windows/DWM/ColorPrevalence' REG_DWORD 1 || return # Show Accent Color on Title Bars and Window Borders

 	echo "Configuring Windows Update..."
	registry set "HKLM/SOFTWARE/Policies/Microsoft/Windows/WindowsUpdate/AU/AllowMUUpdateService" REG_DWORD 1 || return # enable Microsoft update

	echo "Configure snap assist..."
 	registry set "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Advanced/SnapAssist" REG_DWORD 0 || return # When I snap a Window, show what I can snap next to it

 	echo "Configuring face logon..."
 	registry set "HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Authentication/LogonUI/FaceLogon/$(GetSid)/AutoDismissOn" REG_DWORD 1

	echo "Disabling AutoPlay..."
	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/AutoplayHandlers/DisableAutoplay' REG_DWORD 1 || return

	echo "Disabling start menu web search suggestions..."
	registry set 'HKCU/SOFTWARE/Policies/Microsoft/Windows/Explorer/DisableSearchBoxSuggestions' REG_DWORD 1 || return

	echo "Removing startup applications..."
	i EdgeFinal || return	
	
	echo "Configuring printers..."
	local printer='cscript.exe C:\Windows\System32\Printing_Admin_Scripts\en-US\prnmngr.vbs'
 	$printer -d -p Fax >& /dev/null
 	$printer -d -p "Microsoft XPS Document Writer" >& /dev/null
 	$printer -d -p "OneNote (Desktop)" >& /dev/null
 	$printer -d -p "OneNote for Windows 10" >& /dev/null

	if IsVm; then
		echo "Configuring power settings for a virtual machine..."
		powercfg.exe /change standby-timeout-ac 0
		powercfg.exe /change monitor-timeout-ac 0
		powercfg.exe /hibernate off
	fi

	echo "Coniguring network settings..."
	IsHypervVm && { powershell.exe Set-DnsClientGlobalSetting -SuffixSearchList "$(ConfigGet "domain")" || return; } # Hyper-V clients do not get the DNS suffix from the DHCP server

	echo "Coniguring network adapters..."
	network adapter name "Bluetooth Network Connection" "bluetooth" >& /dev/null
	network adapter name "Ethernet0" "wired1" >& /dev/null
	network adapter name "Ethernet1" "wired2" >& /dev/null
	network adapter name "Ethernet2" "wired3" >& /dev/null
	network adapter name "Ethernet3" "wired4" >& /dev/null
	network adapter name "Wi-Fi" "wifi" >& /dev/null

	local workgroup="$(ConfigGet "workgroup")"
	if [[ $workgroup ]] && askp "Configure network for $workgroup"; then
		network workgroup set "$workgroup" || return
		[[ $(network profile list | wc -l) == 1 ]] && { network profile set "$(ProperCase "$workgroup")" || return; }
	fi
	
 	if askp "Configure taskbar icons"; then
 		registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/TaskbarMn' REG_DWORD 0 || return # chat
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/ShowCortanaButton' REG_DWORD 0 || return
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/ShowTaskViewButton' REG_DWORD 0 || return
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Search/SearchboxTaskbarMode' REG_DWORD 0 || return
	 	taskbar reset --no-prompt || return
	fi

	# host specific
	case "$HOSTNAME" in
		oversoul) service demand sysmain;; # superfetch (sysmain) causes slugishness on oversoul
	esac

	return 0
}

WinConsoleInstall()
{
	header "Windows Console"

	local key="HKCU/Console"
	registry set "$key/ColorTable01" REG_DWORD 0 || return
	registry set "$key/ColorTable11" REG_DWORD 16776960 || return
	registry set "$key/ColorTable15" REG_DWORD 16777215 || return
	registry set "$key/FaceName" REG_SZ "Lucida Console" || return
	registry set "$key/FontFamily" REG_DWORD 54 || return
	registry set "$key/FontSize" REG_DWORD 1048586 || return
	registry set "$key/FontWeight" REG_DWORD 400 || return
	registry set "$key/QuickEdit" REG_DWORD 1 || return
	registry set "$key/QuickEditMode" REG_DWORD 1 || return
	registry set "$key/ScreenBufferSize" REG_DWORD 19660900 || return
	registry set "$key/ScreenColors" REG_DWORD 7 || return
	registry set "$key/WindowSize" REG_DWORD 2621540 || return # 2621540=100x40 3276964=164x50
}

WinDirectoriesInstall()
{
	header "Windows Directories"

	# other
	makeDir "$WIN_ROOT/temp" || return
	MakeLink --symbolic "$WIN_ROOT/Users/Public" "$PUB" || return

	# public programs
	makeDir "$pp/Applications/Other" || return
	makeDir "$pp/Development/Other" || return
	makeDir "$pp/Development/DotNet/Other" || return
	makeDir "$pp/Game/Other" || return
	makeDir "$pp/Media/Other" || return
	makeDir "$pp/Operating System/Other" || return
	makeDir "$pp/Surveillance/Other" || return

	# user programs
	makeDir "$up/Applications/Other" || return

	# user directories
	makeDir "$WIN_HOME/$(GetFileName "$CODE")" || return
}

WinFontsInstall()
{
	header "Windows Fonts"

	windowsFont "MesloLGS NF" || return

	# Add Windows fonts to Ubuntu configuration
	local file="/etc/fonts/local.conf"
	if [[ ! -f "$file" ]]; then
		cat <<-EOF | sudo ${G}tee -a "$file"
			<?xml version="1.0"?>
			<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
			<fontconfig>
			    <dir>/mnt/c/Windows/Fonts</dir>
			</fontconfig>
		EOF
	fi

	return 0
}

windowsFont()
{
	# copy font
	for file in "$@" "${otherArgs[@]}"; do
		findFile "fonts/$file" || return
		CopyDir "$file" "/tmp/fonts/" || return # fontreg.exe fails on network share in wsl 2
	done

	# install font
	pushd "/tmp/fonts" > /dev/null || return

	if CanElevate; then
		FontReg.exe /copy || return
	else
		echo "Right click, Install"
		explore .; pause
	fi

 # requires elevation
	rm -fr "/tmp/fonts" >& /dev/null

	return 0
}

WinIconsInstall()
{
	! IsPlatform win && return

	header "Windows Icons"

	mergeDir "$up/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$pp/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$up/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$up/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$pp/IIS" "$pp/Development/Other/IIS" || return
	mergeDir "$pp/Windows PowerShell" "$oo/PowerShell" --rename || return
	mergeDir "$up/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/Applications/Accessories/System Tools" "$pp/Operating System" || return

	$mv "$pp/Microsoft Edge.lnk" "$pp/Applications" || return
	$mv "$pp/OneDrive.lnk" "$up/Applications" || return
	$mv "$up/File Explorer.lnk" "$pp/Operating System" || return

	$rm "$up/Administrative Tools.lnk" || return
	$rm "$pd/Microsoft Edge.lnk" || return
	$rm "$ud/Microsoft Edge.lnk" || return
	$rm "$up/Microsoft Edge.lnk" || return
	$rm "$up/OneDrive.lnk" || return
	$rm "$ud/bootstrap.cmd" || return
	$rm "$up/Startup/bootstrap.cmd" || return

	$rmd "$pp/Maintenance" || return
	$rmd "$up/Maintenance" || return
	$rmd "$up/Windows PowerShell" || return

	$hide "$WIN_HOME/Sti_Trace.log" || return
	$hideAndSystem "$pp/Applications/Accessories/Desktop.ini" || return
	$hideAndSystem "$pp/Applications/Accessories/Accessibility/Desktop.ini" || return
}

WinPathInstall()
{
	header "Windows Path"
	IsPlatform arm && { SetVar --system --path PATH "$(GetFullPath "$DATA/platform/win_arm")" || return; }
	SetVar --system --path PATH "$PLATFORM_PATH"
}

WinPermissionsInstall()
{
	header "Windows Permissions"
	GrantFullPermission "$psm" || return
	GrantFullPermission "$pd" || return
}

# winPathFix - ensure the win directory is in the path path if needed until we update the Windows path and reboot
winPathCheck() { CanElevate && RunProcess.exe --elevate cmd.exe --window-style hidden /c dir >& /dev/null; }
winPathFix() { ! IsPlatform win && return; winPathCheck && return; export PATH="/mnt/c/Users/Public/data/appdata/win:$PATH" WSLENV="PATH/l"; }

# winInfDriver FILE - install the specified INF driver file
winInfDriver()
{
	local infFile="$1"

	# find the executable location
	local file; findFile "$infFile" || return # sets file variable
	local dir="$(GetFilePath "$file")"
	local tmpDir; tmpDir="$(copyLocal "$dir")" || return
	RunScript --functions --elevate --no-hide "${globalArgs[@]}" -- start cmd.exe /c pnputil -i -a "$tmpDir/$(GetFileName "$infFile")" # ignore errors (re-install causes error)
	rm "$tmpDir" >& /dev/null
	return 0 # 
}

#################################################
# X Windows
#################################################

xClientInstall() # 140MB
{
	header "X Client"
	pkg xauth dbus-x11 wmctrl x11-utils xclip || return # xauth enables ssh X11 forwarding
}

xServerInstall() { header "X Server" && RunPlatform xServer; }
xServerMac() { i xQuartz; }
xServerWin() { i X410; }

vcxsrvInstall()
{
	# https://sourceforge.net/projects/vcxsrv/
	run "platform/linux/X Windows/VcXsrv/vcxsrv-64.1.20.1.4.installer.exe" --pause || return

	mergeDir "$pp/VcXsrv" "$oo" || return
}

X410Install()
{	
	[[ -f "$UADATA/Microsoft/WindowsApps/x410.exe" && ! $force ]] && return
	run --name "X410" --store "9NLP712ZMN9Q" && wsl wslg disable; 
}

X410Help()
{
echot "\
- Server Mode, check DPI scaling=Default
- Access Control, check Allow full public access
- VSOCK, check Hyper-V and WSL2"
}

xMingInstall()
{
	# http://www.straightrunning.com/XmingNotes/ http://www.straightrunning.com/candidate/
	run "platform/linux/X Windows/Xming/rel_x64_Xming-7-7-0-54-setup.exe" || return
}

xMingFinalWin()
{
	mergeDir "$pp/Xming" "$oo" || return
	$rm "$pd/XLaunch.lnk" || return
	$hide "$WIN_HOME/Xdefaults" || return
}

xpraInstall() # 332MB (Linux)
{
	# https://github.com/Xpra-org/xpra/wiki/Download
	if IsPlatform mac,win && [[ $force || ! -d "$P/Xpra" ]]; then
		run "platform/linux/X Windows/Xpra/setup/Xpra-x86_64.msi|Xpra-x86_64.pkg" || return
	fi

	if IsPlatform win; then

		# install fonts
		windowsFont "other/urw-bookman-l-light.ttf" "DejaVu Serif/DejaVuSerif.ttf" || return

		# disable sound forwarding -  https://www.xpra.org/trac/wiki/Sound
		local file="$UADATA/../Roaming/Xpra/xpra.conf" line="speaker = off"
		[[ -f "$file" ]] && ! grep -q "$line" "$file" && { echo "$line" >> "$file" || return; }

		# icons
		mergeDir "$pp/Xpra" "$oo" || return

		# use newer plink in $WIN
		[[ -f "$P/Xpra/Plink.exe" ]] && { RunScript --elevate rm "$P/Xpra/Plink.exe" || return; }

		# do not use Xpra server on Windows
		return 0
	fi

	if IsPlatform mac; then
		local file="$HOME/Library/Application Support/Xpra/xpra.conf"
		local line="ssh = ssh -Y"
		! grep -q "^${line}$" "$file" && { echo "$line" >> "$file" || return; }

		return 0
	fi

	# http://www.xpra.org/trac/wiki/Download#Linux
	if IsPlatform debian,ubuntu && ! InPath xpra; then
		pkg apt-transport-https || return
		wget -q "https://xpra.org/gpg.asc" -O- | sudo apt-key add - || return
		sudo add-apt-repository "deb https://xpra.org/ $(os CodeName) main"
		PackageUpdate || return
		pkg "xpra" || return
	fi

	# enable X sessions (configure DISPLAY and D-Bus) 
	local file="/etc/xpra/conf.d/60_server.conf" line="start = \/etc\/X11\/Xsession true"
	sudoc sed -i "s/^#${line}\$/${line}/" "$file" || return

	# disable XPRA D-Bus (causes D-Bus timeouts)
	local file="/etc/xpra/conf.d/60_server.conf" line="dbus-launch ="
	sudoc sed -i "s/^\(${line}.*\)/# \1/g" "$file" || return # comment all dbus-launch lines
	sudoc sed -i "s/^# ${line}\$/${line}/" "$file" || return # uncomment the line to disable D-Bus

	# disable sound forwarding - https://www.xpra.org/trac/wiki/Sound
	local file="/etc/xpra/conf.d/20_sound.conf"
	sudoc sed -i "s/^speaker = on\$/speaker = off/" "$file" || return

	return 0
}

xQuartzInstall() { run "platform/linux/X Windows/XQuartz/XQuartz-2.8.5.pkg"; } # https://www.xquartz.org/releases/index.html

xQuartzHelp()
{
	echot "- Settings, Security, check Allow connections from network clients"
	xserver start || return
}

xWslInstall()
{ 
	if [[ ! $force ]] && UpdateNeeded "WslUpdate"; then
		elevate wsl update || return
		UpdateDone "WslUpdate" || return
	fi

	return 0
}

#################################################
# other
#################################################

OtherAllInstall() { i discord loom miro slack stamps; }

DiscordInstall()
{
	header "Discord" # https://discordapp.com/download
	run "other/Discord/DiscordSetup.exe|Discord.dmg|discord-0.0.9.deb" || return
}

DiscordFinalWin()
{
	mergeDir "$up/Discord Inc" "$up/Applications/Other" || return
	$rm "$ud/Discord.lnk" || return
	registry delete "urun/Discord" # C:\Users\jjbutare\AppData\Local\Discord\app-0.0.305\Discord.exe --start-minimized
}

HostnameInstall()
{	
	# Docker hostname must be set in the containers config.vs.json
	IsDocker && return
	
	# return if needed
	[[ ! $force ]] && ! UpdateNeeded "HostnameChanged" && return

	header "Hostname"

	os name set # use return values
	case $? in

		# name changed
		0) 
			UpdateDone "HostnameChanged" || return
			rebootNeeded="true"
			hostname="$(UpdateGet "hostname")" || return
			;;

		# name unchanged
		1) UpdateDone "HostnameChanged"; return;;

		# error
		*) return 1;;

	esac
}

LoomInstall() { local v="0.158.3"; run --header "Loom" "other/Loom/Loom Setup $v.exe|Loom-$v$(getArch "" "-arm64").dmg" --copy-local; } # https://www.loom.com/download
LoomHelp() { echot "- ..., Preferences, Account, uncheck Launch at startup"; }

LoomFinalWin()
{ 
	$rm "$ud/Loom.lnk" || return
	$mv "$up/Loom.lnk" "$up/Applications" || return
	registry delete "urun/electron.app.Loom" || return	# C:\Users\jjbutare\AppData\Local\Programs\Loom\Loom.exe --process-start-args "--loomHidden"
}

MiroInstall()
{
	header "Miro" # https://miro.com/apps/
	local suffix; IsPlatformAll mac,x86 && suffix="_x86"
	run "other/Miro/Miro.exe|Miro$suffix.dmg" || return
}

SlackInstall() { v="4.29.149"; run --header "Slack" "other/Slack/SlackSetup.$(getElevate "msi" "exe")|Slack-$v-macOS.dmg|slack-desktop-$v-amd64.deb" --copy-local; } # https://slack.com/download
SlackFinalWin() {	mergeDir "$up/Slack Technologies Inc" "$up/Applications/Other" && $rm "$ud/Slack.lnk" && registry 32 delete "urun/com.squirrel.slack.slack"; }

DiscordFinalWin()
{
	mergeDir "$up/Discord Inc" "$up/Applications/Other" || return
	$rm "$ud/Discord.lnk" || return
	registry delete "urun/Discord" # C:\Users\jjbutare\AppData\Local\Discord\app-0.0.305\Discord.exe --start-minimized
}

StampsInstall() { run --name "Stamps.com" "other/stamps/Stamps.com.Connect.exe" --elevate; }

StampsFinalWin()
{
	registry 32 delete "run/Stamps.com" # C:\Program Files (x86)\Stamps.com Connect\StampsPlugin.exe a
	mergeDir "$pp/Stamps.com Connect" "$pp/Applications/Other" || return
	$rm "$pd/Launch Stamps.com Connect.lnk" || return
}

ScriptRun "$@"
