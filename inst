#!/usr/bin/env bash
. function.sh || exit

debian=( chroot geany gnupg mDns pass terminator )
mac=( apptivate bartender CarrotWeather DayOne iTerm karabiner LiveDesktop Magnet pcalc rectagle spark speedtest WallpaperWizard XQuartz yoink )
win=( ahk AutoHotKey AltTabTerminator AquaSnap CloseAllWindows DiskImager EdgeDeflector FileLocatorPro HiddenStart Ninite npp Notepadpp RightClickEnhancer SevenZip TidyTabs UltraMon vcxsrv WinScp xMing AjaSystemTest BlueStacks CPUZ DiskImager IntelExtremeTuning LgMonitor NitroPdf PartitionAssistant pGina PowerPanel PowerrToys QuickBooks stamps TaskLayout Todoist Wallpaper4k )
macWin=( CanonCamera CleanMy Cricut deezer Domotz DuetDisplay GreenShot JumpDesktop LastPass LogitechOptions notion office origin PdfElement QnapExternalRaidManager qvr sonos zoom )
macUbuntuWin=( BalenaEtcher bc BeyondCompare Dropbox JumpCloud StandardNotes steam sublime SublimeMerge TeamViewer )
macDebianWin=( colorls CredentialStore firefox fzf NetworkUtilities PackageManagement skype tmux xServer )

main() { init && args "$@" && installApps "${apps[@]}"; }

init() 
{
	ScriptEval HostFindInfo --detail || return
	. "$(ScriptDir)/bootstrap-config.sh" || return

	# commands
	askP() { [[ $noPrompt ]] && { echo "$1..."; return; }; ask "$1"; }
	makeDir() { ${G}mkdir --parents "$1"; }
	makeDirSudo() { [[ -d "$1" ]] && return; sudo ${G}mkdir --parents "$1"; }
	makeFileSudo() { local file=$"1" dir="$(GetFilePath "$1")"; makeDirSudo "$dir" || return; [[ ! -f "$dir" ]] && { sudo touch "$file" || return; }; }
	makeLink() { MakeLink --suppress $quiet $noPrompt "$@"; }
	mergeDir() { MergeDir --parents --suppress "$@"; }
	mvSudo() { [[ ! -e "$1" ]] && return; sudo mv "$1" "$2"; }
	rmSudo() { [[ ! -f "$1" ]] && return; sudo ${G}rm -f "$1"; }
	
	cp="FileCommand cp"
	cpDir="CopyDir --recursive"
	firewall="firewall --suppress"
	hide="FileHide"
	hideAndSystem="FileHideAndSystem"
	makeShortcut="MakeShortcut"
	mv="FileCommand mv"
	registry="registry"
	ren="FileCommand ren"
	rm="${G}rm -f"
	rmd="${G}rm -fr"
	sudo="sudo"

	# variables	
	oo="$pp/Operating System/Other"
	setupFiles="$_data/setup"

	return 0
}

usage()
{
	echot "\
usage: install cd|install APP*
	Install programs
	-h,  --hint DIR				first directory to search for installation files
	-nr, --no-run					do not find or run the installation program
	-np, --no-prompt	   	suppress interactive prompts
	-p,	 --prompt 				force prompts
	-q,  --quiet					minimize informational messages
	-s,  --select					select the install location
	-v,  --verbose				verbose logging"
	exit $1
}

args()
{
	unset apps forcePrompt hint noPrompt noRun quiet select verbose verboseInstaller

	while (( $# != 0 )); do
		case "$1" in "") : ;;
			--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			--hint|-h) hint=( --hint "$2" ); export INSTALL_DIR="$2"; shift;;
			--no-prompt|-np) noPrompt="--no-prompt";;
			--no-run|-nr) noRun="--no-run";;
			--prompt|-p) forcePrompt="--prompt";;
			--quiet|-q) quiet="--quiet";;
			--select|-s) select="--select";;
			--verbose|-v) verbose="--verbose" verboseInstaller="-verbose";;
			*) IsOption "$1" && UnknownOption "$1" || apps+=( "$1" );;		
		esac
		shift
	done

	options=( $noPrompt $noRun $forcePrompt $quiet $verbose ) 

	return 0
}

i() {	installApps "$@"; }
installApps()
{
	local prompt; 

	( [[ $forcePrompt ]] || (( $# > 1 )) ) && prompt="true"
	[[ $noPrompt ]] && prompt=

	while (($# != 0 )); do
		app="$1"; shift

		if ! isInstallable "$app"; then
			[[ ! $quiet ]] && echo "$app is not installable on $(PlatformDescription)"
			continue
		fi

		if [[ ! $prompt ]] || ask "\nInstall $app"; then
			installFunction="$(getInstallFunction)" || { EchoErr "inst: $app installation does not exist"; return 1; }
			$installFunction || return 1
		fi
	done
	return 0
}

getInstallFunction()
{
	declare -f | egrep -i "^${app} \(\) $|^${app}Install \(\) $" | sed "s/ () //" # Similar to GetFunction
	return ${PIPESTATUS[1]}
}

findCompareProgram()
{
	args="" name="" program=""	
	BeyondCompare IsInstalled && { name="bc" program="BeyondCompare"; return; }
	InPath meld && { name="meld" program="meld"; return; }
	InPath kompare && { name="kompare" program="kompare"; return; }
	return 1
}

findEditorProgram()
{
	args="" program=""
	sublime IsInstalled && { program="sublime" args="-w"; return; }
	program="$(GetTextEditor)"
}

findFile()
{
	local pattern; file="$1"

	(isMacStoreId "$file" || IsUrl "$file" ) && return 0

	if IsWild "$file"; then
		GetFileName "$file" pattern || return
		GetFilePath "$file" file || return
	fi

	if ! ScriptEval FindInstallFile $select --suppress --eval "${hint[@]}" "$file"; then
		EchoErr "inst: could not locate ${1:-the installation directory}"
		return 1
	fi

	hint=( --hint "$InstallDir" ); export INSTALL_DIR="$InstallDir"
	[[ $pattern ]] && { selectFile "$file" "$pattern" || return; }
	return 0
}

isInstallable()
{
	if IsInArray "$1" win; then IsPlatform win
	elif IsInArray "$1" mac; then IsPlatform mac
	elif IsInArray "$1" macWin; then IsPlatform mac,win
	elif IsInArray "$1" macUbuntuWin; then IsPlatform mac,ubuntu,win
	elif IsInArray "$1" macDebianWin; then IsPlatform mac,debian,win
	else true
	fi
}

run() # run EXE [OPTIONS...]
{
	local p="$1"; shift; [[ ! $p ]] && return

	if [[ "$1" == @(-p|--platform) ]]; then
		local prefix="$p"

		shift

		case "$PLATFORM" in win) p="$1";; mac) p="$2";; linux) p="$3";; esac
		[[ ! $p ]] && return 0 # return if a program was not specified for the platform

		p="$prefix$p"
		shift; shift; shift;
	fi
	
	[[ $noRun ]] && return;

	isMacStoreId "$p" && { storeInstall "$p"; return; }
	findFile "$p" || { ask "Continue the installation"; return; }
	runProgram "$file" "$@" || return
}

runPause()
{
	[[ $pause ]] && pause "When the installation has finished press any key..."
	return 0
}

runPrompt()
{
	local desc="$1"
	[[ $noPrompt ]] && { echo "Runing $desc..."; return 0; }
	ask "Do you want to run $desc"
}

runProgram() {
	local p="$1" copyLocal elevate pause; shift

	[[ "$1" == @(--copy-local) ]] && { copyLocal="true"; shift; }
	[[ "$1" == @(--elevate) ]] && { elevate="elevate" pause="--pause"; shift; }
	[[ "$1" == @(--no-pause) ]] && { pause=""; shift; }
	[[ "$1" == @(--pause) ]] && { pause="--pause"; shift; }

	local pDesc pParts; StringToArray "$p" "/" pParts
	[[ ! $pDesc ]] && { pDesc="$(IFS=/; echo "${pParts[*]: -3}")"; }
	[[ ! $pDesc ]] && pDesc="$p"

	if [[ $copyLocal ]]; then
		local t="$(PlatformTmp)"
		cp "$p" "$t" > /dev/null
		p="$t/$(GetFileName "$p")"
	fi

	runPrompt "$pDesc" || return 0

	local pExt; GetFileExtension "$p" pExt

 	[[ "$pExt" == @(air|iso|msu|vsix|xpi) ]] && pause="--pause"

 	[[ "$PLATFORM" == "win" ]] && export SEE_MASK_NOZONECHECKS=1 # disable Open File Secirity Warning

	case "$pExt" in
		app) start "$p" "$@";;
		AppImage) runAppImage "$p" "$@" || return;;
		appx|bat|cmd) cmd.exe /c "$(utw "$p")" "$@" || return;;
		deb) packages gdebi || return; sudo gdebi "$p" "$@";;
		dmg) runDmg "$p" "$@" || return;;
		inf) elevate --wait pnputil.exe -i -a "$p" "$@";;
		iso|img) iso mount "$p"; echo "If needed run the setup program manually..."; pause="--pause";;
		msi) msiexec.exe /quiet /qb /norestart /i "$(utw "$p")" "$@";;
		pkg) sudo installer $verboseInstaller -pkg "$p" -target /Applications;;
		7z|bz2|gz|tar|xpi|zip|ear|jar|war) 
			IsPlatform win && { elevate="--elevate" pause="--pause"; } || elevate=""
			InstallAppFromZip $elevate "$p" "$@" || return;;
		*) $elevate "$p" "$@" || return;;
	esac
	
	runPause || return
	
	case "$pExt" in
		iso) iso dismount "$p" || return
	esac	
}

runAppImage()
{
	local p="$1"; shift
	local appName="$(GetFileNameWithoutExtension "$p")"
	local app="$P/$(GetFileName "$p")"

	if [[ -f "$app" ]] && ask "Do you want to delete the existing installation in \"$appName\"" -dr n; then
		rmSudo "$app" || return
	fi

	if [[ ! -f "$app" ]]; then
		echo "Installing....$app"
		sudo pcp "$p" "$P" || { cat ~/.gcp/journal; return; }
	fi

	sudo chmod ugo+x "$app" || return

	echo "Configuring $appName..."
	start "$app" || return

	pause="--pause"
	return 0
}

runDmg()
{
	local result

	runDmgWorker "$@"; result=$?
	hdiutil detach /Volumes/install -quiet || return

	return $result
}

runDmgWorker()
{
	local p="$1"; shift

	if ! hdiutil mount "$p" -mountpoint /Volumes/install -quiet; then
		EchoErr "inst: unable to mount \"$p\""
		hdiutil mount "$p" -mountpoint /Volumes/install
		return 1
	fi

	if [[ -f "/Volumes/install/Install.mpkg" ]]; then
		sudo installer $verboseInstaller -pkg "/Volumes/install/Install.mpkg" -target /Applications
	elif [[ -f "/Volumes/install/Install.app" ]]; then
		start "/Volumes/install/Install.app"
	elif ls /Volumes/install/*.pkg >& /dev/null; then
		sudo installer $verboseInstaller -pkg /Volumes/install/*.pkg -target /Applications
	else
		shopt -s nullglob; local app=(/Volumes/install/*.app);  

		[[ ! "$app" ]] && { EchoErr "inst: \"$p\" does not contain an application"; return 1; }
		local dir; GetFileName "$app" dir || return
		[[ -d "$P/$dir" ]] && { echo "$dir is already installed"; return 0; }
		sudo acp --recursive --progress-bar "$app" "$P"
	fi

	echo "Updating Spotlight..."
	mdimport "/Applications/$dir" || return
}

selectFile() # DIR PATTERN
{
	local dir="$1" pattern="$2" result items

	pushd "$dir" > /dev/null || return
	
	for f in $pattern; do items+=( "$f" "" ); done

	result=$(dialog --stdout --backtitle "Select File" \
  	--menu "Choose file to install:" $(($LINES-5)) 50 $(($LINES)) "${items[@]}")
	clear

	[[ ! $result ]] && { EchoErr "inst: a file was not selected"; return 1; }

	file="$dir/$result"
	popd > /dev/null
}

storeInstall()
{
	local name id

	! IsPlatform mac,win && return

	(( $# == 2 )) && { name="$1" id="$2"; }
	(( $# == 1 )) && { id="$1"; }

	if [[ $name ]]; then
		printf "**************************************************\n* $name\n**************************************************\n"
		runPrompt "$name" || return 0
	fi

	case "$PLATFORM" in 
		mac) mas open $id;;
		win) start RunProcess.exe ms-windows-store://pdp/?ProductId=$id;;
	esac
	
	runPause || return
}

isMacStoreId() { IsPlatform mac && IsInteger "$1"; }
macAppConfigure() { askP "Configure $1" && { macAppOpen "$1" || return; }; return 0; }
macAppOpen() { open -a "$1" || return; pause; }

#
# bootstrap - initial setup on a fresh operating system
#

bootstrap()
{
	printf "**************************************************\n* Bootstrap\n**************************************************\n"	
	bootstrapCommon || return
	RunPlatform bootstrap || return
	i bash ssh zsh || return
}

bootstrapCommon()
{
	printf "files..."
	files=( .bash_history .hushlogin .lesshst .z )
	for file in "${files[@]}"; do
		printf "."
		touch "$HOME/$file" || return
	done

	printf "directories..."
	files=( $HOME/.config  $CODE/test )
	for dir in "${files[@]}"; do
		printf "."; makeDir "$dir" || return
	done

	files=( "$PUB" )
	for dir in "${files[@]}"; do
		printf "."; makeDirSudo "$dir" || return
	done

	printf "links..."
	local files=(.bashrc .bash_logout .bash_profile .dialogrc .gitconfig .gitignore .inputrc .kdiff3rc .lessfilter .magic .minttyrc .p10k.zsh .tmux.conf .Xresources .zshrc)
	for file in "${files[@]}"; do
		printf "."; makeLink --symbolic --hide "$UBIN/$file" "$HOME/$file" || return
	done

	for dir in $(ls $UBIN/.config); do
		printf "."; makeLink --symbolic "$UBIN/.config/$dir" "$HOME/.config/$dir" || return
	done

	if [[ ! -f /etc/ethers ]]; then
		printf "."; sudo ${G}ln --symbolic "$DATA/setup/ethers" "/etc/ethers" || return
	fi

	echo "done"
}

bootstrapDebianMac() # debian|mac
{
	printf "**************************************************\n* Bootstrap Mac OS and Debian \n**************************************************\n"
	packages unzip zip curl htop less || return
}

bootstrapDebian() 
{
	printf "**************************************************\n* Bootstrap Debian\n**************************************************\n"

	# prevent prompting for keyboard during later installs
	sudo DEBIAN_FRONTEND=noninteractive apt-get install -y keyboard-configuration || return

	if ! IsPlatform win; then
		IsHypervVm && { i HypervLinuxTools || return; }
		IsVmwareVm && { i VmwareLinuxTools || return; }
	fi

	if ! InPath smbget ; then
		echo "Installing packages..."
		package libdbus-glib-1-dev sharutils || return																# other
		package avahi-daemon dnsutils net-tools wakeonlan || return										# network	
		PackageNoPrompt smbclient || return
	fi

	i DebianSetup || return
}

bootstrapEntware() 
{
	printf "**************************************************\n* Bootstrap Entware\n**************************************************\n"

	if ! InPath lynx > /dev/null; then
		printf "\nInstalling core packages..."
		package coreutils-expand coreutils-head coreutils-sort || return		# core utilities
		package dialog man-pages tmux unzip || return												# other
		package file hdparm ncdu || return																	# file
		package atop htop iperf3 lscpu nethogs || return										# monitoring
		package etherwake ncat openssh-client-utils || return 							# network, fping is not functional
		package lynx || return																							# web
	fi

	sudo chmod ugo+r /opt/etc/man_db.conf || return
	sudo chmod u+s /bin/ping || return
 	sudo chmod u+s /bin/mount.cifs || return
	sudo chmod +s /sbin/shutdown || return

	# mute mount.cifs "sh: /bin/systemd-ask-password: No such file or directory" error
	local file="/bin/systemd-ask-password"
	makeFileSudo "$file" || return; sudo chmod +x "$file" || return
}

bootstrapMac()
{
	printf "**************************************************\n* Bootstrap Mac\n**************************************************\n"

	packages cask dockutil duti fontconfig mas wakeonlan wget || return
	! InPath gfind && { package findutils || return; }

	if [[ ! -f "/etc/paths.d/wiggin" ]]; then
		sudo bash -c 'echo "/usr/local/data/bin
/usr/local/data/platform/mac
/usr/local/sbin" > /etc/paths.d/wiggin' || return;
	fi

	i MacSetup || return
}

bootstrapQnap()
{
	printf "**************************************************\n* Bootstrap QNAP\n**************************************************\n"

	pacakge iotop || return

	# autorun
	clipw "mkdir /usr/etc/sudoers.d
echo \"$USER ALL=(ALL) ALL\" > /usr/etc/sudoers.d/$USER

sudo ln -s /share/Public/documents/data /usr/local/data"
	echo "- paste at the end of the file"

	qnap autorun || return

	return 0
}

bootstrapRock()
{
	printf "**************************************************\n* Bootstrap Rock Pi\n**************************************************\n"

	# https://wiki.radxa.com/Rockpi4/Ubuntu#
	echo "Changing password for rock."; sudo passwd rock || return

	local f="/etc/apt/sources.list.d/apt-radxa-com.list"

	if [[ ! -f "$f" ]]; then
		echo "Adding radxa package source..."
		export DISTRO=bionic-stable
		echo "deb http://apt.radxa.com/$DISTRO/ ${DISTRO%-*} main" | sudo tee -a /etc/apt/sources.list.d/apt-radxa-com.list || return
		wget -O - apt.radxa.com/$DISTRO/public.key | sudo apt-key add - || return
		sudo apt-get update && sudo apt-get upgrade || return
	fi
	
	sudo apt-get install rockchip-overlay rockchip-fstab || return
	sudo apt-get install -y rockpi4b-rk-u-boot-latest || return
	sudo apt-get install linux-base || return
	sudo apt-get install linux-4.4-latest || return
}

bootstrapRaspbian()
{
	printf "**************************************************\n* Bootstrap Raspberry Pi OS\n**************************************************\n"

	local locale="en_US.UTF-8" timezone="US/Mountain"

	sudo raspi-config nonint do_net_names 0 || return # enable predictable network names
	sudo raspi-config nonint do_wifi_country US # fails in chroot

	! cat /etc/timezone | grep "$timezone" >& /dev/null && { sudo raspi-config nonint do_change_timezone "$timezone" || return; }
	! cat /etc/default/locale | grep "$locale" >& /dev/null && { sudo raspi-config nonint do_change_locale en_US.UTF-8 || return; }
	[[ -f /run/sshwarn ]] && { echo "Changing password for pi."; sudo passwd pi || return; }
	
	return 0
}

bootstrapUbuntu()
{
	printf "**************************************************\n* Bootstrap Ubuntu\n**************************************************\n"

	IsPlatform win && return # Ubuntu setup is not applicable for Windows

	[[ -f gsettings ]] && { gsettings set org.gnome.desktop.session idle-delay 0 || return; } # do not blank screen

	echo "Updating file permissions..."
	chmod ugo+x "$BIN/"* || return

	if [[ ! -L /etc/localtime ]]; then
		echo "Updating timezone..."
		sudo mv /etc/localtime /etc/localtime.old || return
		sudo ln -s /usr/share/zoneinfo/America/Denver /etc/localtime || return
	fi

	return 0
}

bootstrapWsl()
{
	printf "**************************************************\n* Bootstrap WSL\n**************************************************\n"

	wsl SetDefaultUser || return
	$registry set "run/startup" REG_SZ 'c:\\Windows\\System32\\wsl.exe /usr/local/data/bin/RunScript startup' || return
}

bootstrapWin()
{
	printf "**************************************************\n* Bootstrap Windows\n**************************************************\n"

	makeLink --symbolic "$WIN_HOME/Desktop" "$HOME/Desktop" || return
	makeLink --symbolic "$WIN_HOME/Downloads" "$HOME/Downloads" || return

	# install HiddenStart and System Internals first to minimize prompts (assume this is done if Sublime is installed)
	! IsInstalled sublime && { i HiddenStartFinal SystemInternals WindowsSetup || return; }
}

#
# core programs
#

appCore()
{
	printf "**************************************************\n* Core Applications\n**************************************************\n"

	i AppInitial || return
	RunPlatform app || return
	i AppHostHardwareCore AppHostCore || return
}

appInitial() { i firefox sublime BeyondCompare || return; }
appMac() { i iTerm karabiner rectangle utilities || return; }
appWin() { i AutoHotKey AquaSnap EdgeDeflector WindowsTerminal || return; }
appPhysical() { i ninite JumpCloud zoom || return; }

appDebian()
{ 
	i PackageManagement xServer xClient CredentialStore terminator utilities || return
	
	if IsPlatform mac,ubuntu,win; then
		i colorls || return # slow on embedded systems such as Raspberry Pi
	else
		packages gedit gnome-system-monitor meld nautilus || return
		i geany || return
	fi
}

UtilitiesInstall()
{
	PackagesExclude git || return
	PackagesExclude hdparm inotify-tools ncdu || return																		# file
	PackagesExclude atop bonnie++ glances iotop iperf3 lscpu nethogs pv || return					# monitoring
	PackagesExclude fping mosh nmap traceroute || return																	# network
	PackagesExclude screen squidclient  || return																					# terminal
	PackagesExclude colordiff cowsay figlet fortune lolcat || return											# text	
	PackagesExclude ncdu virt-what || return
}

appRaspbian() 
{ 
	! InPath gpio && { package wiringpi || return; }
	! groups $USER | grep gpio >& /dev/null && { sudo adduser $USER gpio || return; }
}

appHostHardwareCore()
{
	local pc="IntelDriverUpdate nVidiaGeForceExperience LogitechOptions" mac="LogitechOptions"

	case "$HOSTNAME" in
		jane|pants) i $mac || return;;
		oversoul) i hp9020 $pc || return;;
		rosie) i MsiMotherboard $pc || return;;
		ultron) i $pc || return;;
	esac
}

appHostCore()
{
	local common="CleanMy Dropbox GreenShot notion office thunderbird"
	local commonMac="bartender pcalc spark speedtest WallpaperWizard"
	local commonPc="Wallpaper4k"

	case "$HOSTNAME" in
		jane|pants|rosie) i $common $commonMac || return;; 
		micro|ultron) i $common $commonPc || return;; 
		oversoul) i $common $commonPc dymo Quicken UltraMon || return;;
		pi1|pi2) i nodejs homebridge domotz UnifiController || return;;
	esac

	return 0
}

devCore()
{
	printf "**************************************************\n* Development Core\n**************************************************\n"

	if IsPlatform win; then
		makeLink --merge "$WIN_HOME/source" "$CODE" || return
		$makeShortcut "$CODE" "$pp/Development/Code" || return
	fi

	i GitCore VisualStudioCode JetBrains devDotNetCore devJavaCore devSqlCore devWebCore || return
}

devSqlCore()
{
	i iis SqlServerManagementStudio SqlPrompt SqlServer || return
}

devWebCore()
{
	printf "**************************************************\n* Web Development Core\n**************************************************\n"
	i nodejs || return
	gem install compass || return	
	npm install -g yo bower grunt grunt-cli || return
}

mediaCore()
{
	printf "**************************************************\n* Media Core\n**************************************************\n"
	i MediaBookCore MediaCameraCore MediaImageCore MediaMusicCore MediaVideoCore || return
}

mediaBookCore() { i calibre calibre2opds kindle; }
mediaCameraCore() { i CanonCamera; }
mediaImageCore() { i picasa FastStoneImageViewer IrfanView; }
mediaMusicCore() { i deezer iTunes MusicBee plex tidal sonos; }
mediaVideoCore() { i vlc; }

piCore()
{
	printf "**************************************************\n* Raspberry Pi Core\n**************************************************\n"
 	i BalenaEtcher DiskImager || return;
}

surveillanceCore()
{
	printf "**************************************************\n* Surveillance Core\n**************************************************\n"
	i AmcrestCamera qvr SurveillanceStation || return	
}

travelCore()
{
	printf "**************************************************\n* Travel Core\n**************************************************\n"
	i garmin sena GoPro dji
}

utilityCore()
{
	printf "**************************************************\n* Utility Core\n**************************************************\n"
 	RunPlatform utility || return
 	i UtilityDiskCore UtilityEncryptionCore UtilityHardwareCore UtilityNetworkCore || return
}

utilityWin() { i RightClickEnhancer || return; }
utilityDiskCore() { i CleanMy DiskImager diskInventortyX LinkShellExtension ParagonExtFs PartitionAssistant TeraCopy ToDoBackup TrueImage; }
utilityEncryptionCore() { i AxCrypt; }
utilityHardwareCore() { i BrotherPrinter DasKeyboard DoxieGo dymo EpsonScan LabelMaker LgMonitor LogitechOptions EpsonScan PowerPanel; }
utilityNetworkCore() { i GlassWire NordVpn TigerVnc tribler; }

vmCore() { RunPlatform vm || return; }
vmWin() { i VmwareWorkstation || return; }
vmMac() { i ParallelsDesktop || return; }

#
# SSH Programs
# 

ssh()
{
	printf "**************************************************\n* SSH\n**************************************************\n"
	makeDir ~/.ssh && $hide ~/.ssh || return
	SshPermission || return
	RunPlatform Ssh || return
}

SshPermission()
{
	[[ ! -d ~/.ssh ]] && return

	sudo chown $USER ~/.ssh/* || return
	IsPlatform wsl && { chgrp $USER ~/.ssh/* || return; }

	chmod 700 ~/.ssh || return
	$hide ~/.ssh || return

	[[ -f ~/.ssh/config ]] && { sudo chmod 700 ~/.ssh/config || return; }
	[[ -f ~/.ssh//authorized_keys ]] && { chmod 700 ~/.ssh/authorized_keys || return; }
	[[ -f ~/.ssh/id_rsa ]] && { chmod 700 ~/.ssh/id_rsa || return; }
	[[ -f ~/.ssh/id_ed25519 ]] && { chmod 700 ~/.ssh/id_ed25519 || return; }

	return 0
}

SshWsl()
{
	if ! sudo grep $USER /etc/sudoers >& /dev/null; then
		echo "$USER ALL = (root) NOPASSWD: /usr/sbin/sshd -D" | sudo tee -a /etc/sudoers || return
	fi

	! InPath sshd && { package openssh-server || return; }
	/usr/sbin/service ssh status | grep "not running" >& /dev/null && { sudo service ssh start || return; }

	return 0
}

SshMac()
{
	if ! grep "XAuthLocation /opt/X11/bin/xauth" /etc/ssh/ssh_config  >& /dev/null; then
		echo "Configuring SSH authentication..."
		echo "XAuthLocation /opt/X11/bin/xauth" | sudo tee -a /etc/ssh/ssh_config
	fi

	return 0
}

WinScpInstall()
{
	printf "**************************************************\n* WiNSCP \n**************************************************\n"

	# https://winscp.net/eng/index.php
	run "shareware/WinSCP/WinSCP-5.15.4-Setup.exe" || return

	$mv "$pp/WinSCP.lnk" "$pp/Operating System" || return
	$rm "$pd/WinSCP.lnk" || return

	clipw "$(utw "$udata/replicate/WinSCP.ini")"
	echot "\
- Tools, Preferences, Storage=Custom INI file=<paste>"
	"$P32/WinSCP/WinSCP.exe"
	pause
}

#
# Debian Setup
#

DebianSetup()
{
	printf "**************************************************\n* Debian Setup\n**************************************************\n"
	i DebianDns DebianFileSharing DebianFonts DebianPolicies DebianProxyServer || return
	DbusSetup || return
}

DebianDns()
{
	# Windows does not uses systemd for DNS, chroot gets resolv.conf from host
	{ IsPlatform chroot,win || ! InPath systemd-resolve; } && return 0 

	# return if the FQDN and the short non-qualified name resolves
	IsAvailable "router.$domain" && IsAvailable "router" && return

	sudo systemd-resolve -i eth0 --set-domain="$domain"
}

DebianFileSharing()
{
	IsPlatform win && egrep -i "$USER" "/etc/samba/smb.conf" >& /dev/null && return

	! InPath smbpasswd && { package samba || return; }
	sudo smbpasswd -a $USER || return
	
	echo "[root]
path = /
valid users = $USER
read only = no" | sudo tee -a /etc/samba/smb.conf || return

	sudo service smbd restart || return
}

DebianFonts()
{
	local dir="/usr/local/fonts"

	! InPath fc-cache && { package fontconfig || return; }
	
	[[ ! -d "$dir" ]] && dir="/usr/share/fonts"
	[[ ! -d "$dir" ]] && { EchoErr "DebianFonts: could not locate the fonts directory."; return 1; }
	
	findFile "fonts/MesloLGS NF" || return
	sudo cp "$file/"*.ttf "$dir" || return
	fc-cache -fv || return
}

DebianPolicies()
{
	local dir="/etc/polkit-1/localauthority/50-local.d" file

	! { InPath systemctl && systemctl >& /dev/null && sudo ls "$dir" >& /dev/null; } && return

	# reboot
	file="$dir/allow_shutdown_suspend.pkla"
	if ! sudo ls "$file" >& /dev/null; then
		echo "[Shutdown or suspend without a password]
Identity=unix-user:$USER
Action=org.freedesktop.login1.halt-multiple-sessions;org.freedesktop.login1.reboot-multiple-sessions;org.freedesktop.login1.set-wall-message;org.freedesktop.login1.halt;org.freedesktop.login1.power-off;org.freedesktop.login1.reboot;org.freedesktop.login1.suspend
ResultAny=yes" | sudo tee "$file"
	fi

	return 0
}

DebianProxyServer()
{
	if ! sudo grep "HTTP_PROXY" /etc/sudoers >& /dev/null; then
		echo 'Defaults env_keep += "ftp_proxy http_proxy https_proxy no_proxy FTP_PROXY HTTP_PROXY HTTPS_PROXY NO_PROXY"' | sudo tee -a /etc/sudoers || return
	fi

	return 0
}

#
# Mac Setup
#

MacSetup()
{
	printf "**************************************************\n* Mac Setup\n**************************************************\n"
	i MacConfigure MacFonts MacDockCleanup MacAppCleanup || return
}

MacConfigure()
{
	echo "Configuring dock..."

	defaults write com.apple.dock orientation -string bottom || return 	# bottom|left|right
	defaults write com.apple.dock mineffect -string scale || return 		# genie|scale
	defaults write com.apple.dock tilesize -integer 40 || return
	defaults write com.apple.dock magnification -bool FALSE || return		# largesize is magnification size
	defaults write com.apple.dock minimize-to-application -bool TRUE || return
	defaults write com.apple.dock launchanim -bool FALSE || return			# Animate opening applications
	defaults write com.apple.dock autohide -bool FALSE || return
	defaults write com.apple.dock show-process-indicators -bool TRUE || return
	defaults write com.apple.dock show-recents -bool TRUE || return
	defaults write com.apple.dock NSTableViewDefaultSizeMode -integer 3 || return # General, Sidebar icon size=Large
	RestartDock || return

	defaults write com.apple.finder QuitMenuItem -bool true || return
	defaults write com.apple.finder WarnOnEmptyTrash -bool false || return
	RestartFinder || return
}

MacDockCleanup()
{
	local args=() apps=( Launchpad Mail FaceTime Maps Photos Contacts Calendar Reminders Notes Music Podcasts TV News "App Store" "System Preferences" )

	for app in "${apps[@]}"; do
		args+=( --remove "$app" )
	done

	dockutil "${args[@]}" || return
}

MacFonts()
{
	findFile "fonts/MesloLGS NF/$PLATFORM" || return
	sudo cp "$file/"* "/Library/Fonts" || return
	fc-cache -fv || return
}

MacAppCleanup()
{
	#echo "Removing applications..."
	#mas uninstall N
	:
}

#
# Windows Setup
#

WindowsSetup()
{
	! IsElevated && { elevate RunScript --pause-error inst WindowsSetup "${options[@]}"; pause; return; }
	i WindowsPath WindowsPermissions WindowsDirs WindowsIcons WindowsConfiguration OneDrive || return
}

WindowsPath() { SetVar --system --path PATH "$DATA/platform/$PLATFORM" || return; }

WindowsPermissions()
{
	! IsElevated && { elevate RunScript --pause-error inst WindowsPermissions "${options[@]}"; pause; return; }
	GrantFullPermission "$psm" || return
	GrantFullPermission "$pd" || return
}

WindowsDirs()
{
	makeDir "$WIN_ROOT/temp" || return
	
	makeDir "$pp/Applications/Other" || return
	makeDir "$pp/Development/Other" || return
	makeDir "$pp/Game/Other" || return
	makeDir "$pp/Media/Other" || return
	makeDir "$pp/Operating System/Other" || return
	makeDir "$pp/Surveillance/Other" || return

	makeDir "$up/Applications/Other" || return
	makeDir "$up/Development/Other" || return

	makeDir "$udata/app" || return

}

WindowsIcons()
{
	echo "Updating icons..."

	$makeShortcut "wsl.exe" "$pp/Operating System/bash" "" "$(utw "$DATA/icons/Command Prompt.ico")" || return

	mergeDir "$up/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$pp/Accessibility" "$pp/Applications/Accessories" || return
	mergeDir "$up/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Accessories" "$pp/Applications" || return
	mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$up/Administrative Tools" "$pp/Operating System" || return
	mergeDir "$pp/IIS" "$pp/Development/Other/IIS" || return
	mergeDir "$up/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/System Tools" "$pp/Operating System" || return
	mergeDir "$pp/Applications/Accessories/System Tools" "$pp/Operating System" || return
	mergeDir --rename "$pp/Microsoft Silverlight" "$oo/Silverlight" || return

	mvSudo "$pd/Mac Files.lnk" "$pp/Operating System" >& /dev/null
	$mv "$pp/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Microsoft Edge.lnk" "$pp/Applications" || return
	$mv "$pp/OneDrive.lnk" "$up/Applications" || return

	$rm "$pd/Microsoft Edge.lnk" || return
	$rm "$up/Microsoft Edge.lnk" || return
	$rm "$up/OneDrive.lnk" || return

	$rmd "$udoc/Fax"
	$rmd "$pp/Bluetooth Devices" || return
	$rmd "$up/Maintenance" || return
	$rmd "$WIN_HOME/3D Objects" || return

	$hideAndSystem "$pp/Applications/Accessories/Desktop.ini" || return
	$hideAndSystem "$pp/Applications/Accessories/Accessibility/Desktop.ini" || return

	# PowerShell
	mergeDir --rename "$up/Windows PowerShell" "$oo/PowerShell" || return
	mergeDir --rename "$pp/Windows PowerShell" "$oo/PowerShell" || return
	$hideAndSystem "$oo/PowerShell/desktop.ini" || return

	# 3rd party
	mergeDir "$pp/ICEpower" "$oo" || return	# Asus ZenBook laptop
}

WindowsConfiguration()
{
	WindowsFonts || return
	WindowsConsole || return

	echo "Cleaning file system..."
	$hide "$WIN_ROOT/PerfLogs" || return
	$hide "$WIN_ROOT/Windows.old" || return
	$rm "$WIN_HOME\Documents\My Music" || return
	$rm "$WIN_HOME\Documents\My Pictures" || return
	$rm "$WIN_HOME\Documents\My Videos" || return
	$rm "$WIN_HOME\My Music" || return
	$rm "$WIN_HOME\My Pictures" || return
	$rm "$WIN_HOME\My Videos" || return

	echo "Cleaning startup programs..."
	$registry 32 delete "run/NetFxUpdate_v1.1.4322" # "C:\Windows\Microsoft.NET\Framework\v1.1.4322\netfxupdate.exe" 1 v1.1.4322 GAC + NI NID, https://superuser.com/questions/137508/ngen-exe-is-constantly-using-cpu
	$registry delete "run/SecurityHealth" # %windir%\system32\SecurityHealthSystray.exe

	echo "Configuring..."
	powershell.exe Set-ExecutionPolicy RemoteSigned || return
	registry import "$setupFiles/Windows Setup.reg" || return
	numlock boot off || return
	netsh.exe advfirewall firewall set rule group="Network Discovery" new enable=Yes || return

	echo "Moving taskbar to the left side of the screen..."
	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/StuckRects3/Settings' REG_BINARY 30000000FEFFFFFF02000000000000004E0000003200000000000000000000004E000000380400007800000001000000
	
	echo "Enabling VPN to server behind NAT..." 
 	registry set "HKLM/SYSTEM/CurrentControlSet/Services/PolicyAgent/AssumeUDPEncapsulationContextOnSendRule" REG_DWORD 2 || return

	echo "Enabling remote desktop connections..." 
 	registry set "HKLM/SYSTEM/CurrentControlSet/Control/Terminal Server/fDenyTSConnections" REG_DWORD 0 || return

	echo "Configure file sharing..."
	$firewall group enable "File and Printer Sharing" || return
 	registry set "HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Policies/system/LocalAccountTokenFilterPolicy" REG_DWORD 1 || return # Enable remote administrator access to protected file shares (admin$, c$...)

	echo "Configure remote desktop..."
	netsh.exe advfirewall firewall set rule group="Remote Desktop" new enable=yes; # sets for all profiles

	echo "Hiding the recycle bin from the desktop..." 
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/HideDesktopIcons/NewStartPanel/{645FF040-5081-101B-9F08-00AA002F954E}" REG_DWORD 1 || return

	echo "Hiding the Bluetooth Devices icon in the task area..." 
	registry set "HKCU/Control Panel/Bluetooth/Notification Area Icon" REG_DWORD 0 || return

	echo "Showing taskbar on main display only..."
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/MMTaskbarEnabled" REG_DWORD 0 || return

	echo "Disable snap assist..."
 	registry set "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Advanced/SnapAssist" REG_DWORD 0 || return

	echo "Disabling Explorer recent files and folders..."
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/ShowFrequent" REG_DWORD 0 || return
 	registry set "HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/ShowRecent" REG_DWORD 0 || return

	echo 'Configuring theme...'
	registry set 'HKCU/SOFTWARE/Microsoft/Windows/DWM/ColorPrevalence' REG_DWORD 1 || return # Show Accent Color on Title Bars and Window Borders

	echo "Disabling AutoPlay..."
	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/AutoplayHandlers/DisableAutoplay' REG_DWORD 1 || return

	echo "Configuring printers..."
	local p='cscript.exe C:\Windows\System32\Printing_Admin_Scripts\en-US\prnmngr.vbs'
 	$p -d -p Fax >& /dev/null
 	$p -d -p "Microsoft XPS Document Writer" >& /dev/null 
 	$p -d -p "OneNote (Desktop)" >& /dev/null 
 	$p -d -p "OneNote for Windows 10" >& /dev/null 

	if IsVm; then
		echo "Configuring power settings for a virtual machine..."
		powercfg.exe /change standby-timeout-ac 0
		powercfg.exe /change monitor-timeout-ac 0
	fi

	echo "Coniguring network adapters..."
	network AdapterName Ethernet0 wired0 >& /dev/null
	network AdapterName "Bluetooth Network Connection" bluetooth >& /dev/null

	if [[ $workgroup ]] && askP "Configure network for $workgroup"; then
		network WorkgroupSet "$workgroup" || return
		[[ $(network ProfileList | wc -l) == 1 ]] && { network ProfileSet "$(ProperCase "$workgroup")" || return; }
	fi

 	if askP "Configure taskbar icons"; then
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/ShowCortanaButton' REG_DWORD 0 || return
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Explorer/Advanced/ShowTaskViewButton' REG_DWORD 0 || return
	 	registry set 'HKCU/Software/Microsoft/Windows/CurrentVersion/Search/SearchboxTaskbarMode' REG_DWORD 0 || return
	 	taskbar reset --no-prompt --no-restart || return
	fi	

	# enable change - move taskbar to left side
	ProcessKill explorer && start explorer
	
	return 0
}

WindowsFonts()
{
	! IsElevated && { elevate RunScript --pause-error inst WindowsFonts "${options[@]}"; pause; return; }

	findFile "fonts/MesloLGS NF" || return
	pushd "$file" >& /dev/null || return
	fontreg.exe /copy || return # requires elevation
	popd  >& /dev/null || return

	local file="/etc/fonts/local.conf"
	if [[ ! -f "$file" ]]; then
		cat << EOF | sudo tee -a "$file"
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <dir>/mnt/c/Windows/Fonts</dir>
</fontconfig>
EOF
	fi

	return 0
}

WindowsConsole()
{
	local key="HKCU/Console"
	$registry set "$key/ColorTable01" REG_DWORD 0 || return
	$registry set "$key/ColorTable11" REG_DWORD 16776960 || return
	$registry set "$key/ColorTable15" REG_DWORD 16777215 || return
	$registry set "$key/FaceName" REG_SZ "Lucida Console" || return
	$registry set "$key/FontFamily" REG_DWORD 54 || return
	$registry set "$key/FontSize" REG_DWORD 1048586 || return
	$registry set "$key/FontWeight" REG_DWORD 400 || return
	$registry set "$key/QuickEdit" REG_DWORD 1 || return
	$registry set "$key/QuickEditMode" REG_DWORD 1 || return
	$registry set "$key/ScreenBufferSize" REG_DWORD 19660964 || return
	$registry set "$key/ScreenColors" REG_DWORD 7 || return
	$registry set "$key/WindowSize" REG_DWORD 3276964 || return # 3276964=164x50
}

windowsDownload()
{
	# https://www.microsoft.com/en-us/software-download/windows10/
	local v=1909
	run "other/Microsoft/Windows/setup/$v/MediaCreationTool$v.exe" --elevate || return

	[[ ! -f ~/Downloads/Windows.iso ]] && { EchoErr "Windpows was not downloaded"; return 1; }

	gcp ~/Downloads/Windows.iso "$(GetFilePath "$file")/Windows_$v.iso" || return
}

#
# Browser
#

chromeInstall()
{
	printf "**************************************************\n* Google Chrome Browser\n**************************************************\n"
	echo '- Sign in, Email=NNN, Password=NNN'
	
	# https://www.gtricks.com/chrome/how-to-download-chrome-offline-installer-for-windows-mac-and-linux/
	# https://www.google.com/chrome/?system=true&standalone=1&platform=win64
	# https://www.google.com/chrome/?platform=mac
	# https://www.google.com/chrome/?platform=linux
	run "other/Google/Chrome/setup/" -p "ChromeStandaloneSetup64.exe" "googlechrome.dmg" "google-chrome-stable_current_amd64.deb" --elevate || return

	if [[ "$PLATFORM" == "win" ]]; then
		ChromeIcons || return

	elif [[ "$PLATFORM" == "mac" ]]; then	
		$rm "$la\com.google.keystone.agent.plist" || return
	fi

	echot "- Settings, uncheck Continue running background apps when Google Chrome is closed"
}

chromeIcons()
{
		$mv "$pp/Google Chrome.lnk" "$pp/Applications" || return
		$rm "$up/Google Chrome.lnk" || return
		$rm "$ud/Google Chrome.lnk" || return
		$rm "$pd/Google Chrome.lnk" || return
		$rm "$ud/Chrome App Launcher.lnk" || return
		$rm "$ud/Google Chrome Canary Build.lnk" || return
		mergeDir --rename "$pp/Google Chrome" "$ao/Chrome" || return
		mergeDir --rename "$up/Google Chrome" "$ao/Chrome" || return
		mergeDir "$up/Chrome Apps" "$up/Applications" || return
		mergeDir --rename "$up/Google Chrome Canary Build" "$ao/Chrome Beta" || return
		mergeDir "$up/Chrome Apps" "$up/Applications/Other" || return
}

firefoxInstall()
{
	printf "**************************************************\n* Firefox\n**************************************************\n"

	IsPlatform debian && firefox IsInstalled && ! firefox program | grep "$P" >& /dev/null && { echo "firefox is already install to $(firefox program)"; return; }

	# https://www.mozilla.org/en-US/firefox/all/
	local v="76.0.1"
	if IsPlatform pixel,raspbian; then
		package firefox-esr || return
	else
		run "other/Mozilla/Firefox/" -p "Firefox Setup $v.msi" "Firefox $v.dmg" "firefox-$v.tar.bz2" --elevate || return
	fi

	echot "\
- Options, Sign in to Sync, Sign In...
- LastPass
	- LastPass, Accept, Login, check Remember Password
	- right click LastPass, Manage Extensions, ..., Options, Icons, select grey
- https://duckduckgo.com/, settings, Other Settings, Load Settings, DuckDuckButare"
	pause
	
	if IsPlatform mac; then
		dockutil --add "/Applications/Firefox.app" || return
	elif [[ "$PLATFORM" == "win" ]]; then	
		$mv "$pp/Firefox.lnk" "$pp/Applications" || return
		$rm "$pd/Firefox.lnk" || return
	fi

	firefox profile restore default || return
}

#
# Linux
#

chrootInstall()
{
	printf "**************************************************\n* chroot\n**************************************************\n"
	package debootstrap schroot qemu-user-static || return
	makeDirSudo "/var/chroot" || return
	return 0
}

CredentialStoreInstall()
{
	printf "**************************************************\n* Credential Store\n**************************************************\n"
	
	IsPlatform raspbian,ubuntu && ! InPath secret-tool && { package libsecret-tools || return; }
	! IsPlatform mac,raspbian,ubuntu,win && { i gpg pass || return; }
	! password CheckStore && { password store || return; }
}

fzf()
{
	printf "**************************************************\n* fzf (Fuzzy Search)\n**************************************************\n"

	# https://github.com/junegunn/fzf
	if [[ ! -d ~/.fzf ]]; then
		if findFile "platform/linux/fzf/fzf.image.zip"; then
			unzip "$file" -d ~ || return
		else
			git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf || return
		fi
	fi

	# do not update shell configuration files, assume ~/fzf.SHELL is sourced
	sudo ~/.fzf/install --no-update-rc --completion --key-bindings || return

	printf "links..."
	local dest="/usr/local/bin" files=(fzf fzf-tmux)
	for file in "${files[@]}"; do
		printf "."
		[[ ! -e "$dest/$file" ]] && { sudo ln -s "$HOME/.fzf/bin/$file" "$dest/$file" || return; }
	done
	echo "done"

	return 0
}

GeanyInstall()
{
	printf "**************************************************\n* Geany\n**************************************************\n"
	packages geany || return
	GeanyHelper profile restore default || return
}

GpgInstall()
{
	printf "**************************************************\n* GNU PGP\n**************************************************\n"
	packages gpg || return
	makeLink --symbolic "$UDATA/app/gpg" "$HOME/.gnupg" || return
	chmod go-rwx $UDATA/app/gpg || return
}

NetworkUtilitiesInstall()
{
	printf "**************************************************\n* Network Utilities\n**************************************************\n"
	package lynx nmap || retuirn
}

PackageManagementInstall()
{
	printf "**************************************************\n* Package Management\n**************************************************\n"

	if IsPlatform Ubuntu; then
		local codeName="$(os CodeName)"
		if ! grep "focal universe" "/etc/apt/sources.list" |& egrep -v "^#" >& /dev/null; then
			echo "deb http://us.archive.ubuntu.com/ubuntu/ focal universe" | sudo tee -a "/etc/apt/sources.list" || return
			sudo apt-get update || return
		fi
	fi

	package apt-show-versions debsums wajig || return	
}

PassInstall()
{
	printf "**************************************************\n* pass\n**************************************************\n"
	packages pass;
	makeLink --symbolic "$UDATA/app/pass" "$HOME/.password-store" || return
	chmod go-rwx $UDATA/app/pass || return
}

TmuxInstall()
{
	printf "**************************************************\n* tmux\n**************************************************\n"
	packages tmux tmuxinator || return	
}

#
# Game
#

gameCore()
{
	printf "**************************************************\n* Game Core\n**************************************************\n"
	i BlueStacks EpicGames oculus origin steam uplay gameIcons || return
}

gameIcons()
{
	echo "Moving data folders..."
	makeLink --merge --hide "$udata/app/Shadow of the Tomb Raider" "$udoc/Shadow of the Tomb Raider" || return

	echo "Updating icons..."	
	$mv "$ud/Rockstar Games Launcher.lnk" "$pp/Game" || return
	
	$mv "$ud/The Elder Scrolls V Skyrim VR.url" "$pp/Game" || return
	$mv "$ud/Far Cry 5.url" "$pp/Game" || return	
	$mv "$ud/Fortnite.url" "$pp/Game" || return	
	$mv "$ud/Grand Theft Auto V.url" "$pp/Game" || return	
	$mv "$ud/Half-Life 2 Lost Coast.url" "$pp/Game" || return
	$mv "$ud/Half-Life Alyx.url" "$pp/Game" || return	
	$mv "$ud/Hot Dogs, Horseshoes & Hand Grenades.url" "$pp/Game" || return
	$mv "$ud/Jurassic World Evolution.url" "$pp/Game" || return
	$mv "$ud/Middle-earth Shadow of Mordor.url" "$pp/Game" || return
	$mv "$ud/realMyst Masterpiece Edition.url" "$pp/Game" || return
	$mv "$ud/NBA 2K17.url" "$pp/Game" || return
	$mv "$ud/Ravenfield.url" "$pp/Game" || return
	$mv "$ud/Shadow of the Tomb Raider.url" "$pp/Game" || return
	$mv "$ud/STAR WARS Jedi Fallen Order™.url" "$pp/Game" || return
	$mv "$ud/The Witness.url" "$pp/Game" || return	
	$mv "$ud/Tom Clancy's Rainbow Six Siege.url" "$pp/Game" || return	
}

blueStacksInstall()
{
	printf "**************************************************\n* BlueStacks\n**************************************************\n"

	# https://www.bluestacks.com/
	run "game/BlueStacks/BlueStacksInstaller_4.120.5.1101_native_dd8ed79ebd104260f66cb75de271e11b.exe" || return

	makeDir "$pp/Game/Other/BlueStacks" || return
	$mv "$pp/BlueStacks.lnk" "$pp/Game/Other/BlueStacks" || return
	$mv "$pp/BlueStacks Multi-Instance Manager.lnk" "$pp/Game/Other/BlueStacks" || return
	$rm "$pd/BlueStacks Multi-Instance Manager.lnk" "$pd/BlueStacks.lnk" || return
}

epicGamesInstall()
{
	printf "**************************************************\n* Epic Games\n**************************************************\n"
	run "game/Epic Games/EpicInstaller-7.9.0.msi" || return # https://www.epicgames.com/account/personal#

	echo "Updating icons..."
	$mv "$pp/Epic Games Launcher.lnk" "$pp/Game/Other" || return
	$rm "$pd/Epic Games Launcher.lnk" || return
	GameIcons || return
}

oculus()
{
	printf "**************************************************\n* Oculus\n**************************************************\n"


	# https://www.oculus.com/setup/
	run "game/oculus/" -p "OculusSetup.exe" "mac" "" --elevate || return

	if [[ "$PLATFORM" == "win" ]]; then	
		$mv "$pd/Oculus.lnk" "$pp/Game" || return
		mergeDir "$psm/Oculus" "$pp/Game/Other" || return
		makeLink --merge --hide "$udata/app/Oculus" "$udoc/Oculus Home" || return
	fi

	return 0
}

originInstall()
{
	printf "**************************************************\n* Origin Games\n**************************************************\n"

	# https://www.origin.com/usa/en-us/store/download
	run "game/Origin/" -p "OriginThinSetup.exe" "Origin.dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then
		$registry delete "urun/EADM" # "C:\Program Files (x86)\Origin\Origin.exe" -AutoStart
		mergeDir "$pp/Origin" "$pp/Game/Other" || return
		$rm "$pd/Origin.lnk" || return
	fi

	return 0
}

steamInstall()
{
	printf "**************************************************\n* Steam\n**************************************************\n"
	run "game/Steam/" -p "SteamSetup.exe" "steam.dmg" "steam_latest.deb" --elevate || return # http://store.steampowered.com/about/
	
	if IsPlatform win; then
		$registry delete "urun/Steam" # Steam	Steam Client Bootstrapper	Valve Corporation, c:\program files (x86)\steam\steam.exe
		mergeDir "$up/Steam" "$pp/Game/Other" || return
		mergeDir "$pp/Steam" "$pp/Game/Other" || return
		$rm "$pd/Steam.lnk" || return
		makeLink --merge --hide "$udata/app/Steam VR" "$udoc/steamvr" || return
		GameIcons || return
	fi

	return 0
}

uplayInstall()
{
	printf "**************************************************\n* UPlay (UbiSoft)\n**************************************************\n"
	run "game/Ubisoft/UplayInstaller.exe" || return #

	echo "Updating icons..."
	mergeDir "$up/Ubisoft" "$pp/Game/Other" || return
	$rm "$ud/Uplay.lnk" || return

	echo "Moving data folders..."
	makeLink --merge --hide "$udata/app/Uplay" "$udoc/My Games" || return
}

#
# Git
#

GitCore()
{
	packages git git-extras gitg tig || return
	! IsPlatform chroot,vm && { GitHelper bin || return; }
	return 0
}

gitMac() { i fork SublimeMerge || return; }
gitRaspbian() { packages gitg kompare || return; }
gitUbuntu() { packages gitg SublimeMerge || return; }

gitWin()
{
	i fork || return; 

	# .gitconfig link - for Windows programs, make it a hard link (symbolic links require elevation)
	if [[ ! -f "$WIN_HOME/.gitconfig" ]]; then
		MakeLink --hide --hard $WIN_HOME/Documents/data/bin/.gitconfig $WIN_HOME/.gitconfig || return
	fi

 	# posix permissions do not work well on windows file systems
	IsPlatform win && { sudo git config --system core.filemode false || return; }

	return 0
}

forkInstall()
{
	printf "**************************************************\n* Fork\n**************************************************\n"

	# https://git-fork.com/
	run "git/Fork/" -p "ForkInstaller.exe" "Fork.dmg" "" --pause || return

	if IsPlatform win; then
		mergeDir "$up/Fork" "$up/Development/Other" || return
		$rm "$ud/Fork.lnk" || return

		local forkGit="$LOCALAPPDATA/Fork/gitInstance/2.26.2/bin/git.exe"
		"$forkGit" config --system core.filemode false || return	
	fi

	ForkHelper profile restore default || return
}

geInstall() { gitExtensions; }
gitExtensionsInstall()
{
	printf "**************************************************\n* Git Extensions\n**************************************************\n"
	
	# https://github.com/gitextensions/gitextensions/releases/latest
	run "git/GitExtensions/setup/GitExtensions-3.4.1.9675.msi" || return

	if [[ ! -d "$APPDATA/GitExtensions/GitExtensions" ]]; then
		GitHelper gui || return
		echot "- English, Quit"
		pause
	fi

	local f="$WIN_HOME/.gitconfig.backup"
	[[ -f "$f" ]] && { attrib "$f" -h -s || return; }
	FileTouchAndHide "$WIN_HOME/.gitconfig.backup" || return

	makeDir "$pp/Development/Other/Git" || return
	$mv "$pp/Git Extensions.lnk" "$pp/Development/Other/Git" || return
	$rm -f "$pd/Git Extensions.lnk" || return
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shellex/ContextMenuHandlers/GitExtensions2/" || return
	registry unregister "$P32/GitExtensions/GitExtensionsShellEx64.dll" || return

	GitHelper profile restore default || return
}

gfwInstall() { gitForWindows; }
gitForWindowsInstall()
{
	printf "**************************************************\n* Git for Windows\n**************************************************\n"
	
	# https://git-scm.com/download/win
	# https://github.com/git-for-windows/git/releases/
	run "git/Git for Windows/setup/Git-2.27.0-64-bit.exe" /silent || return 
	
	mergeDir "$pp/Git" "$pp/Development/Other" || return
	mergeDir "$up/Git" "$pp/Development/Other" || return
	$rm "$up/Git for Windows.lnk"	|| return

	# context menus
	registry delete "HKEY_CLASSES_ROOT/Directory/shell/git_gui/"
	registry delete "HKEY_CLASSES_ROOT/Directory/shell/git_shell/"
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shell/git_gui/"
	registry delete "HKEY_CLASSES_ROOT/Directory/Background/shell/git_shell/"
								
	askP 'Configure Git For Windows' && { GitForWindowsConfigure || return; }

	return 0
}

gitForWindowsConfigure()
{
	! IsElevated && { elevate RunScript --pause-error inst GitForWindowsConfigure "${options[@]}"; pause; return; }

	local gw="$P/Git/cmd/git.exe"

	echo "Configuring git for windows..."
	"$gw" config --system http.sslcainfo "$(utw "$P/Git/usr/ssl/certs/ca-bundle.crt")" || return
	"$gw" config --system core.fscache true || return
	"$gw" config --system core.filemode false || return
	"$gw" config --system core.autocrlf false || return
	"$gw" config --system credential.helper wincred || return
}

gitKrakenInstall()
{
	printf "**************************************************\n* Git Kraken\n**************************************************\n"
	run "git/Git Kraken/setup/" -p "GitKrakenSetup.exe" "installGitKraken.dmg" "" || return # https://www.gitkraken.com/download

	echo "Updating icons..."
	$mv "$pp/GitKraken.lnk" "$pp/Development/Other/Git" || return
}

gitHubInstall()
{
	printf "**************************************************\n* GitHub\n**************************************************\n"
	run "git/GitHub/setup/GitHubSetup.exe" || return # https://github-windows.s3.amazonaws.com/GitHubSetup.exe
	pause
	
	echo "Updating icons..."
	mergeDir --rename "$up/GitHub, Inc" "$up/Development/Other/GitHub" || return
	$rm "$ud/GitHub.appref-ms" || return
	$rm "$ud/Git Shell.lnk" || return

	echot "\
- GITHUB ENTERPRISE, GitHub Username or Email=IDSID
- Password=NNN
- GitHub Enterprise URL=https://GitHub.intel.com/
- Full Name=NNNN
- tools, options...
	- default storage directory=c:\Projects
	- SCAN FOR REPOSITORIES
- note: 
	- GitHib is useful for quickly cloning a repository from GitHub
	- clone a repository - click an account on the left channel, right click on the repository, and select Clone To..."
}

gitUpInstall()
{
	pip3 install git-up || return;
	git config --global git-up.rebase.auto false || return
}

gitXInstall()
{
	printf "**************************************************\n* GitX\n**************************************************\n"
	run "git/GitX/GitX-dev.dmg" || return # http://rowanj.github.io/gitx/
}

TortoiseGitInstall()
{
	printf "**************************************************\n* TortoiseGit\n**************************************************\n"
	
	echot "- (optional) Check Registrer link handlers"
	run "shareware/TortoiseGit/setup/TortoiseGit-1.8.7.0-64bit.msi" || return # https://code.google.com/p/tortoisegit/wiki/Download?tm=2

	echo "Updating icons..."
	mergeDir "$pp/TortoiseGit" "$pp/Development/Other"

	findCompareProgram || return; clipw "$(utw "$program")" || return
	echot "\
- General
	- Contect Menu, uncheck all but Clone and Show log
	-Dialogs 1, check Enable Gravatar
- (optional) Diff Viewer (1 place) and Merge Tool (1 place), External=<paste>
- Icon Overlays
	- check Unversioned files mark parent folder as modified
	- Icon Set, Icon Set=Straight"
	GitHelper tgui /command:settings || return
}

#
# Hardware
#

amcrestCameraInstall()
{
	printf "**************************************************\n* Amcrest Camera\n**************************************************\n"

	# https://support.amcrest.com/hc/en-us/categories/201939038-All-Downloads
	run "hardware/Amcrest/setup/" -p "Amcrest_ConfigTool_Eng_V3.20.10.T.180715.exe" "Amcrest IP Config.zip" "" --elevate || return 
	run "hardware/Amcrest/setup/" -p "P2PSurveillance_3.01.001.0.exe" "" "" --elevate || return # browser plugin
	run "hardware/Amcrest/setup/" -p "Amcrest+Surveillance+Pro+Setup+V1.14.1.R.20161018.exe" "Amcrest_Surveillance_Pro_Mac.bz2" "" --elevate || return

	if IsPlatform win; then	
		makeDir "$pp/Surveillance/Other" || return
		mv "$pd/Amcrest IP Config.lnk" "$pp/Surveillance" || return
		mv "$pd/Amcrest Surveillance Pro.lnk" "$pp/Surveillance" || return
		$rmd "$pp/Amcrest IP Config" || return
		$rmd "$pp/Amcrest Surveillance Pro" || return
	fi

	return 0
}

be() { BalenaEtcher; }; etcher() { BalenaEtcher; }
BalenaEtcher() # disc image burner
{
	printf "**************************************************\n* Balena Etcher\n**************************************************\n"

	# https://www.balena.io/etcher/
	local v="1.5.79" 
	run "hardware/Balena/Etcher/" -p "balenaEtcher-Setup-$v.exe" "balenaEtcher-$v.dmg" "balena-etcher-electron-$v-linux-x64.zip" || return

	if IsPlatform win; then
		$mv "$up/balenaEtcher.lnk" "$up/Applications" || return
		$rm "$ud/balenaEtcher.lnk" || return	
	fi

	return 0
}

brotherPrinterInstall()
{
	printf "**************************************************\n* Brother Printer \n**************************************************\n"
	echot "- Connection Type=Wired, check Custom Install
- Select Features=uncheck PC-FAX*"

	# https://support.brother.com/g/b/downloadtop.aspx?c=us&lang=en&prod=mfcl2740dw_us_eu_as
	run "hardware/Brother/MFC-L2740DW/setup/" -p "MFC-L2740DW-inst-C1-US.EXE" "MonoLaserFB14_ULW_TP_110.dmg" --pause || return
	
	if IsPlatform win; then	
		mergeDir "$pp/Brother" "$ao" || return
		$mv "$pd/Brother Creative Center.lnk" "$ao/Brother" || return
		$rm "$pd/Brother Utilities.lnk" || return
		$registry 32 delete "RunOnce/BrUrl" || return # rundll32 url.dll,FileProtocolHandler http://www.brother.com/rd/productreserch/usa/
		$registry 32 delete "RunOnce/OmniJoinURL" || return # C:\Program Files (x86)\Brother\Brmfl14d\OmniJoinTrial.exe /R
		$registry 32 delete "run/BrStsMon00" # C:\Program Files (x86)\Browny02\Brother\BrStMonW.exe /AUTORUN
		$registry 32 delete "run/ControlCenter4" # C:\Program Files (x86)\ControlCenter4\BrCcBoot.exe /autorun
	fi

	return 0
}

canonCameraInstall()
{
	printf "**************************************************\n* Canon Camera\n**************************************************\n"

	# https://www.usa.canon.com/internet/portal/us/home/support/details/cameras/eos-dslr-and-mirrorless-cameras/mirrorless/eos-r?tab=drivers_downloads
	local d="hardware/Canon/EOS R/setup"
	run "$d/EOS Utility v3.12.10." -p "exe" "zip" || return

	if IsPlatform win; then
		mergeDir "$pp/Canon Utilities" "$pp/Media/Other" || return
		$rm "$pd/EOS Utility.lnk" || return
		$rm "$pp/Startup/EOS Utility.lnk" || return # "C:\Program Files (x86)\Canon\EOS Utility\EOS Utility.exe" /AutoStartUp
	fi

	return 0
}

icue() { CorsairUtilityEngine; };
CorsairUtilityEngine()
{
	printf "**************************************************\n* Corsair Utility Engine (CUE)\n**************************************************\n"
	run "hardware/Corsair/Utility Engine/iCUESetup_3.31.81_release.msi" || return # https://www.corsair.com/us/en/downloads

	$mv "$pd/iCUE.lnk" "$pp/Operating System" || return
	$rmd "$psm/Corsair" || return
	$registry 32 delete "run/CORSAIR iCUE Software" # "C:\Program Files (x86)\Corsair\iCUE\iCUE Launcher.exe" --autorun
	service stop CorsairService || return # high CPU
}

cricutInstall()
{
	printf "**************************************************\n* Cricut\n**************************************************\n"

	# https://design-beta2.cricut.com/#/download
	local v="5.2.14" 
	run "hardware/Cricut/Cricut Design Space Install v$v." -p "exe" "mac" "" || return

	if IsPlatform win; then
		$registry delete "run/ErmTray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe 
		mergeDir "$up/Cricut Design Space Beta" "$up/Applications/other" || return
		$mv "$ud/Cricut Design Space.lnk" "$up/Applications" || return 
		$mv "$ud/Cricut Design Space Beta.lnk" "$up/Applications" || return
		$rm "$up/Startup/Cricut Taskbar Application.lnk" || return # "C:\Users\jjbutare\AppData\Roaming\Cricut Design Space\Web\taskbar-application-win32\Release\CricutTaskbarApplication.exe"
	fi

	return 0
}

cpuzInstall()
{
	printf "**************************************************\n* CPU-Z\n**************************************************\n"

	# https://www.cpuid.com/softwares/cpu-z.html
	run "hardware/CPUID/cpu-z_1.92-en.exe" || return

	if IsPlatform win; then
		mergeDir "$pp/CPUID" "$oo" || return
		$rm "$pd/CPUID CPU-Z.lnk" || return
	fi

	return 0
}

dasKeyboardInstall()
{
	printf "**************************************************\n* Das Keyboard\n**************************************************\n"

	# https://www.daskeyboard.io/get-started/
	run "hardware/Das Keyboard/setup/" -p "Das-Keyboard-Q_3.2.4.exe" "q-Desktop.img" || return

	if IsPlatform win; then	
		mergeDir "$pp/Das-Keyboard-Q" "$oo" || return
		$rm "$ud/das-keyboard-q.lnk" || return
		$rmd "$up/GitHub, Inc" || return
		$registry 32 delete "run/Das Keyboard Q" || return # C:\Users\jjbutare\AppData\Local\das-keyboard-q\das-keyboard-q.exe
	fi
}

dji()
{
	printf "**************************************************\n* DJI\n**************************************************\n"

	# https://www.dji.com/mavic/info#downloads
	run "hardware/dji/Assitant/setup/" -p "DJI Assistant 2 1.2.3.exe" "DJI+Assistant+2+1.2.3.pkg" "" || return

	mergeDir --rename "$up/DJI Product" "$pp/Travel/Other/DJI" || return
	mergeDir --rename "$pp/DJI Product" "$pp/Travel/Other/DJI" || return
	$rm "$pd/DJI Assistant 2.lnk" || return
}

doxieGoInstall()
{
	printf "**************************************************\n* Doxie Go\n**************************************************\n"
	run "hardware/Doxie/Go/" -p "DoxieSetup_2.11.3.exe" "Doxie_2.11.3.dmg" "" || return # http://help.getdoxie.com/doxiego/

	echo "Updating icons..."
	$mv "$pd/Doxie.lnk" "$pp/Operating System" || return
	$rmd "$pp/Doxie" || return
}

duetDisplayInstall()
{
	printf "**************************************************\n* Duet Display\n**************************************************\n"

	# https://www.duetdisplay.com/#download
	run "hardware/duet/" -p "DuetSetup-1-8-2-1.exe" "duet-2-3-0-5.zip" "" --elevate || return

	case "$PLATFORM" in

		win) 
			mergeDir "$pp/Duet Display" "$oo" || return
			$rm "$pd/duet.lnk" || return
			$registry 32 delete "run/Duet Display" # C:\Program Files\Kairos\Duet Display\duet.exe
			;;

	esac

	return 0
}

dymoInstall()
{
	printf "**************************************************\n* Dymo Label\n**************************************************\n"

	# http://www.dymo.com/en-US/dymo-user-guides
	run "hardware/DYMO/" -p "DCDSetup1.3.1.exe" "DLS8Setup.8.7.4.dmg" "" --elevate || return 

	if IsPlatform mac; then
		local base="$udata/app/DYMO Label"
		local addressBook="$base/Address Books" label="$base/Labels"

		# ~/Documents/DYMOS Label Software is still re-created on startup
		mergeDir --rename "$udoc/DYMO Label Software" "$base" || return

		defaults write com.dymo.dls DataTrackingFolder -string "~/Documents/data/app/DYMO Label" || return
		defaults write com.dymo.dls AddressBookDirectory -string "$addressBook" || return
		defaults write com.dymo.dls LabelsDirectory -string "$label" || return
		
		defaults write com.dymo.dls LastAddressBookDirectory -string "$addressBook" || return
		defaults write com.dymo.dls LastLabelsDirectory -string "$label" || return
		defaults write com.dymo.dls LastSavedFile -string "" || return

		defaults write com.dymo.dls DefaultReturnAddress -string "John Butare\\n9204 Hagerman Ave., NE\\nAlbuquerque,NM 87109" || return

	elif IsPlatform win; then	
		mergeDir "$pp/DYMO" "$ao" || return
		$rm "$pd/DYMO Connect.lnk" || return

		$registry 32 delete "run/DymoOfficeHelper" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMO.OfficeHelper.exe" /w
		$registry 32 delete "run/DYMOWebApi" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMO.WebApi.Win.Host.exe" /auto
		$registry delete "urun/DYMOConnectLauncher" # "C:\Program Files (x86)\DYMO\DYMO Connect\DYMOConnectLauncher.exe"
	fi

	return 0
}

epsonScanInstall()
{
	printf "**************************************************\n* Epson Scan\n**************************************************\n"

	# https://epson.com/Support/Scanners/Perfection-Series/Epson-Perfection-V100-Photo/s/SPT_B11B184051
	run "hardware/Epson/Perfection V100 Photo/epson13833.exe" || return

	mergeDir "$pp/EPSON Scan" "$oo" || return
	$rm "$pd/EPSON Scan.lnk" || return
}

garminInstall()
{
	printf "**************************************************\n* Garmin\n**************************************************\n"

	run "hardware/Garmin/setup/" -p "GarminExpress.exe" "GarminExpress.dmg" "" || return # GPS - https://www.garmin.com/en-US/software/express/
	run "hardware/Garmin/setup/" -p "BaseCamp_472.exe" "BaseCampforMac_489.dmg" "" || return # GPS - https://www.garmin.com/en-US/shop/downloads/basecamp
	run "hardware/Garmin/setup/" -p "inReach Sync en-US 203366.exe" "" "" || return # satellite - https://inreach.garmin.com/Sync

	mergeDir "$pp/Garmin" "$pp/Travel/Other" || return
	$rm "$pd/Garmin Express.lnk"	
	$rm "$pd/inReach Sync.lnk"	
	makeLink --merge --hide "$udata/app/Garmin" "$udoc/My Garmin" || return
	$registry delete "urun/GarminExpressTrayApp" # "C:\Program Files (x86)\Garmin\Express Tray\ExpressTray.exe"
}

gigabyteMotherboardInstall()
{
	local d="hardware/Gigabyte/utility" a=(--elevate --no-pause)

	printf "**************************************************\n* Gigabyte Motherboard\n**************************************************\n"

	# Designare EX: https://www.gigabyte.com/us/Motherboard/X299-DESIGNARE-EX-rev-10#support-dl
	# RGB Fusion: https://www.gigabyte.com/MicroSite/512/download.html
	# motherboard: https://www.gigabyte.com/us/Support/Utility/Motherboard (advanced search, chipset=Intel X299)
	run "$d/Application Center vB20.0219.1/Setup.exe" "${a[@]}" || return 
	run "$d/RGB Fusion vB20.0430.1/UpdPack.exe" "${a[@]}" || return
	run "$d/Easy Tune vB19.1202.1/setup.exe" "${a[@]}" || return # B20.0214.1
	run "$d/System Information Viewer vB20.0409.1/setup.exe" "${a[@]}" || return # B20.0410.1
	run "$d/AT BIOS vB20.0406.1/setup.exe" "${a[@]}" || return # B20.0422.1
	run "$d/BIOS Setup vB17.0621.1/setup.exe" "${a[@]}" || return
	run "$d/Fast Boot vB17.0619.1/setup.exe" "${a[@]}" || return
	run "$d/V-Tuner vB17.0616.1/setup.exe" "${a[@]}" || return

	$registry delete "run/RtkAudUService" # "C:\WINDOWS\System32\RtkAudUService64.exe" -background
	$registry delete "run/RTHDVCPL" # "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s

	d="$oo/GIGABYTE"
	mergeDir "$pp/GIGABYTE" "$oo" || return

	# Application Center
	$registry 32 delete "RunOnce/PreRun" # C:\Program Files (x86)\GIGABYTE\AppCenter\PreRun.exe
	mv "$d/APP Center/"* "$d" >& /dev/null
	rm -fr "$d/APP Center" || return
	[[ -f "$d/Launch APP Center.lnk" ]] && { mv "$d/Launch APP Center.lnk" "$d/GIGABYTE Application Center.lnk" || return; }

	# System Information Viewer
	mv "$d/SIV/"* "$d" >& /dev/null
	rm -fr "$d/SIV" || return

	# EasyTune
	makeLink --merge --hide "$udata/app/EasyTune" "$udoc/EasyTune" || return
	mv "$d/EasyTune/"* "$d" >& /dev/null
	rm -fr "$d/EasyTune" || return

	# @BIOS
	mv "$d/@BIOS/"* "$d" >& /dev/null
	rm -fr "$d/@BIOS" || return

	# RGB Fusion
	$registry 32 delete "RunOnce/SelLed" # C:\Program Files (x86)\GIGABYTE\RGBFusion\RunLed.exe
	mv "$pp/AORUS/RGBFusion 2.0/"* "$d" >& /dev/null
	rm -fr "$pp/AORUS" || return
	$rm "$pd/RGBFusion 2.0.lnk" || return
	$mv "$d/RGBFusion 2.0.lnk" "$d/RGB Fusion.lnk" || return

	# other
	$makeShortcut "$P32/GIGABYTE/BIOS Setup/BiosSetupConsole.exe" "$d/BIOS Setup" || return
	$makeShortcut "$P32/GIGABYTE/FastBoot/FastBoot.exe" "$d/Fast Boot.lnk" || return
	$makeShortcut "$P32/GIGABYTE/VTuner/vTuner.exe" "$d/VTuner.lnk" || return

	echot "\
Do not update APP Center
- Preferences
	- Update Schedule=Turn off
	- Uncheck Always run on next reboot"
	elevate "$P32/GIGABYTE/AppCenter/RunUpd.exe" || return
}

goProInstall()
{
	printf "**************************************************\n* GoPro\n**************************************************\n"
	
	run "hardware/GoPro/setup/" -p "GoPro_Quik-WinInstaller-2.5.2.633.exe" "" "" || return # https://shop.gopro.com/softwareandapp/quik-%7C-desktop/Quik-Desktop.html#
	run "hardware/GoPro/setup/" -p "FusionStudio_x64_111_2018-02-07.exe" "FusionStudio_Mac_Sierra_111_2018-02-07.dmg" "" || return # https://shop.gopro.com/softwareandapp/gopro-fusion-studio-app/fusion-studio.html

	echo "Updating icons..."
	mergeDir "$pp/GoPro" "$pp/Travel/Other" || return
	mergeDir "$up/GoPro Fusion Studio 1.1" "$pp/Travel/Other/GoPro" || return
	mergeDir "$up/GoPro VR Player 3.0" "$pp/Travel/Other/GoPro" || return
	$rm "$pd/GoPro Quik.lnk" || return
	$rm "$ud/GoPro Fusion Studio 1.1.lnk"	 || return
	$rm "$ud/GoPro VR Player 3.0.lnk"	 || return
}

hp9020Install()
{
	printf "**************************************************\n* HP 9020 Printer\n**************************************************\n"
	
	# https://support.hp.com/us-en/drivers/selfservice/hp-officejet-pro-9020-all-in-one-printer-series/23918456	
	run "hardware/Hewlett Packard/OfficeJet Pro 9020/Basic Driver - OJP9020_Basicx64_49.6.4502.exe" || return

	echo "Updating icons..."
	mergeDir "$pp/HP" "$oo" || return
	$rm "$pd/HP OfficeJet Pro 9020 series-HP Scan.lnk" || return
	$rm "$pd/HP OfficeJet Pro 9020 series.lnk" || return
	$mv "$pd/HP Print Scan Doctor Downloader - HP OfficeJet Pro 9020 series.lnk" "$oo/HP/HP OfficeJet Pro 9020 series" || return
	$mv "$pd/Shop for Supplies - HP OfficeJet Pro 9020 series.lnk" "$oo/HP/HP OfficeJet Pro 9020 series" || return
}

intelDriverUpdateInstall()
{
	printf "**************************************************\n* Intel Driver Update \n**************************************************\n"

	# https://www-ssl.intel.com/content/www/us/en/support/detect.html
	run "hardware/Intel/driver/Intel-Driver-and-Support-Assistant-Installer.exe" --elevate /q || return

	IntelIcons || return
}

intelDriversInstall()
{
	local a=(--elevate --no-pause)

	printf "**************************************************\n* Intel Drivers \n**************************************************\n"
	run "hardware/Intel/driver/WiFi/WiFi_21.80.2_Driver64_Win10/Netwtw08.INF" || return # https://downloadcenter.intel.com/download/29124/Intel-PROSet-Wireless-Software-and-Drivers-for-IT-Admins
	run "hardware/Intel/driver/Bluetooth/BT_21.80.0_64_Win10/Intel Bluetooth.msi" --elevate --no-pause || return # https://downloadcenter.intel.com/download/29126/
	run "hardware/Intel/driver/Serial IO/SerialIO_30.100.1915.1_PV_CNL_19H1/SetupSerialIO.exe" -s || return # rosie
	i IntelStorageManagement IntelThunderboltControlCenter IntelIcons || return
}

intelExtremeTuningInstall()
{
	printf "**************************************************\n* Intel Extreme Tuning\n**************************************************\n"

	# https://downloadcenter.intel.com/download/24075/Intel-Extreme-Tuning-Utility-Intel-XTU
	run "hardware/Intel/Exteme Tuning Utility/XTUSetup Software.exe" --elevate || return

	if IsPlatform win; then
		mergeDir "$pp/Intel" "$oo" || return
		$rm "$pd/Intel(R) Extreme Tuning Utility.lnk" || return
	fi

	return 0
}

intelProcessorIdentificationUtilityInstall() { run "hardware/Intel/other/Intel(R) Processor Identification Utility.exe"; IntelIcons; }
intelStorageManagementInstall() { storeInstall "Intel Storage Management" "9MZNG5HZWZ1T"; }
intelThunderboltControlCenterInstall() { storeInstall "Thunderbolt Control Center" "9N6F0JV38PH1"; }

intelIcons()
{
	makeDir "$oo/Intel" || return	

	MergeDir --suppress "$pp/Intel" "$oo" || return

	mv "$pp/Intel Driver "*" Support Assistant.lnk" "$oo/Intel/Intel Driver Update.lnk" >& /dev/null
	$mv "$ud/Intel(R) Processor Identification Utility.lnk" "$oo/Intel" || return

	$registry 32 delete "run/Intel Driver \& Support Assistant" || return # C:\Program Files (x86)\Intel Driver and Support Assistant\DsaTray.exe
}

lgMonitorInstall()
{
	printf "**************************************************\n* LG Monitor\n**************************************************\n"

	run "hardware/LG/Gaming Monitor 34UC89G/OSC2_Setup_2-86.exe" || return

	mergeDir "$pp/OnScreen Control" "$oo" || return
	$rm "$pd/OnScreen Control.lnk" || return
}

logitechOptionsInstall()
{
	printf "**************************************************\n* Logitech Options\n**************************************************\n"

	# http://support.logitech.com/en_us/software/options
	# the macOS zip file contains an installation program, if this pattern repeats add a -run option that is passed to InstallAppFromZip, for macOS no argument is needed, unzip to $TEMP
	run "hardware/Logitech/options/" -p "Options_8.10.154.exe" "LogiMgr Installer 8.10.64.app" "" --elevate || return

	if IsPlatform win; then
		$mv "$pp/Logitech/Logitech Options.lnk" "$pp/Operating System" || return
		$rmd "$pp/Logitech" || return
		$registry delete "run/LogiOptions" # C:\Program Files\Logitech\LogiOptions\LogiOptions.exe /noui
		$registry delete "run/Logitech Download Assistant" # C:\Windows\system32\rundll32.exe C:\Windows\System32\LogiLDA.dll,LogiFetch	
	fi

	LogitechOptions profile restore default || return
}

msiMotherboardInstall()
{
	printf "**************************************************\n* MSI Motherboard\n**************************************************\n"
	run "hardware/MSI/MSI PRESTIGE 15 A10SC-011/Creator Center/v1.1.1911.0501_1.1.1911.0501/Setup.exe" || return

	mergeDir "$pp/MSI" "$oo" || return	
}

nVidiaGeForceExperienceInstall()
{
	printf "**************************************************\n* nVidia GeForce Experience\n**************************************************\n"

	# https://www.nvidia.com/en-us/geforce/geforce-experience/
	run "hardware/nVidia/experience/GeForce_Experience_v3.20.3.63.exe" --elevate || return

	nVidiaFinal || return
}

nVidiaDriverInstall()
{
	printf "**************************************************\n* nVidia Driver\n**************************************************\n"

	# https://www.nvidia.com/en-us/drivers/results/159423/
	run "hardware/nVidia/driver/445.87/setup.exe" --elevate

	nVidiaFinal || return
}

nVidiaFinal()
{
	mergeDir --rename "$pp/NVIDIA Corporation" "$oo/NVIDIA" || return
	$rm "$pd/GeForce Experience.lnk" || return
	$registry delete "HKEY_CLASSES_ROOT/Directory/Background/shellex/ContextMenuHandlers/NvCplDesktopContext/" || return
	return 0
}

powerPanelInstall()
{
	printf "**************************************************\n* PowerPanel \n**************************************************\n"
	
	# https://www.cyberpower.com/hk/en/software
	run "hardware/CyberPower/PowerPanel/setup/PPP_Windows_v2.2.1.exe" || return

	mergeDir "$pp/CyberPower PowerPanel Personal" "$oo" || return
	$rm "$pp/Startup/PowerPanel Personal.exe.lnk" || return # "C:\Program Files (x86)\CyberPower PowerPanel Personal\PowerPanel Personal.exe"
	$rm "$pp/Startup/ppuser.exe.lnk" || return # "C:\Program Files (x86)\CyberPower PowerPanel Personal\bin\ppuser.exe"
}

qnapQvrInstall()
{
	printf "**************************************************\n* QVR (QNAP Video Recorder)\n**************************************************\n"

	# https://www.qnap.com/en/download?model=tvs-471&category=firmware
	run "hardware/QNAP/QVR/" -p "QVRProClient.exe" "QVRMacClient-2.2.1-170221.dmg" || return

	if IsPlatform win; then
		mergeDir "$pp/QNAP" "$pp/Surveillance/Other" || return
		$mv "$ud/QVR Pro Client.lnk" "$pp/Surveillance/Other/QNAP/QVR Pro Client" || return
	fi

	return 0
}

qnapExternalRaidManagerInstall()
{
	printf "**************************************************\n* QNAP External RAID Manager\n**************************************************\n"

	# https://www.qnap.com/en/utilities/essentials
	run "hardware/QNAP/Expansion Bay/setup/" -p "QNAPExternalRAIDManagerWindows-1.3.5.0309.exe" "QNAPExternalRAIDManagerMac-1.2.4.1202.dmg" || return

	if IsPlatform win; then
		mergeDir "$pp/QNAP" "$oo" || return
		$rm "$pd/QNAP External RAID Manager.lnk" || return
	fi

	return 0
}

senaInstall()
{
	printf "**************************************************\n* Sena\n**************************************************\n"
	run "hardware/Sena/setup/" -p "SenaBluetoothDeviceManagerForWindows-v3.8.2-setup_x64.exe" "SENABluetoothDeviceManagerForMAC-v3.7.pkg" "" || return # ​https://www.sena.com/software/#device-manager

	echo "Updating icons..."
	mergeDir "$up/Sena Technologies" "$pp/Travel/Other" || return
	$rm "$ud/SenaBluetoothDeviceManager.lnk"	
}

surveillanceStationInstall()
{
	printf "**************************************************\n* 4 Station\n**************************************************\n"
	run "hardware/Synology/Surveillance Station/" -p "Synology Surveillance Station Client-1.2.2-0589_x64.exe" "Synology Surveillance Station Client-1.2.2-0589.dmg" || return # https://www.synology.com/en-us/support/download/DS216+II?item_filter= x#utilities

	if IsPlatform win; then	
		echo "Updating icons..."
		mergeDir "$pp/Synology" "$pp/Surveillance/Other" || return
		$rm "$pd/Live View.lnk" || return
		$rm "$pd/Surveillance Station Client.lnk" || return
		$rm "$pd/Timeline.lnk" || return
	fi

	return 0
}

uniFiControllerInstall()
{
	[[ ! -d "$P32/Java" ]] && { jreInstall || return; }

	printf "**************************************************\n* UniFi Controller\n**************************************************\n"

	# https://www.ui.com/download/unifi
	run "hardware/Ubiquiti Networks/UniFi/controller/" -p "UniFi-installer.exe" "UniFi.pkg" "BZ.ar934x.v3.9.27.8537.180317.1223.bin" || return
	
	if [[ "$PLATFORM" == "win" ]]; then	

		echo "Updating icons..."
		mergeDir "$up/Ubiquiti UniFi" "$oo" || return
		$rm "$ud/UniFi.lnk" || return		

		echo "Moving data folders..."
		MakeLink --merge --hide "$udata/Unifi Controller" "$WIN_HOME/Ubiquiti UniFi" || return

	fi

	return 0
}

#
# Network
#

domotzInstall()
{
	printf "**************************************************\n* Domotz\n**************************************************\n"

	# https://portal.domotz.com/portal/web_app
	local v="1.1.2" # http://www.techsmith.com/download/licenses/snagitupgrade.asp
	run "Domotz/Domotz Pro Desktop App " -p "Setup $v" "-$v.dmg" "" || return

	if IsPlatform win; then
		$mv "$pp/Domotz Pro Desktop App.lnk" "$pp/Operating System" || return
		$rm "$pd/Domotz Pro Desktop App.lnk" || return
	fi

	return 0
}

domotzAgentInstall()
{
	printf "**************************************************\n* Domotz\n**************************************************\n"

	# https://portal.domotz.com/portal/domotz_software
	if IsPlatform raspbian; then
		local file="domotz-raspberry-armhf-1.0-2.5.0-2.7.5-b004-0023.deb"		
		wget "https://portal.domotz.com/download/agent_packages/$file" -P "/tmp" || return
		sudo dpkg -i "/tmp/$file" || return
	fi

	return 0
}

glassWireInstall()
{
	printf "**************************************************\n* GlassWire\n**************************************************\n"
	run "network/GlassWire/GlassWireSetup.exe" --elevate || return # https://www.glasswire.com/download/

	$registry delete "urun/GlassWire" # "C:\Program Files (x86)\GlassWire\glasswire.exe" -hide
	mergeDir "$pp/GlassWire" "$oo" || return
	$rm "$pd/GlassWire.lnk" || return

	echot "\
- Show Mini Viewer
- Activate GlassWire"
}

jumpCloudInstall()
{
	printf "**************************************************\n* JumpCloud\n**************************************************\n"

	# https://console.jumpcloud.com/#/systems/new
	local key="d55d2d17f6fdc877905cf7dd798e7c910948eff3"

	if IsPlatform mac,win; then
		echo "connect key=<paste> ($key)"; clipw "$key"
		run "JumpCloud/setup/" -p "JumpCloudInstaller.exe" "jumpcloud-agent.pkg" "" || return
	elif IsPlatform ubuntu; then
		curl --tlsv1.2 --silent --show-error --header "x-connect-key: $key" https://kickstart.jumpcloud.com/Kickstart | sudo bash
	fi

	return 0
}

jumpDesktopInstall()
{
	printf "**************************************************\n* Jump Desktop\n**************************************************\n"

	# https://app.jumpdesktop.com/dashboard
	run "network/JumpDesktop/" -p "JumpDesktop.exe" "JumpDesktopMac.zip" || return

	if IsPlatform win; then
		makeDir "$oo/Jump Desktop" || return
		$mv "$pp/Jump Desktop.lnk" "$oo/Jump Desktop" || return
		$mv "$pp/Jump Desktop Connect.lnk" "$pp/Operating System/other/Jump Desktop" || return
	fi

	return 0
}

mDns()
{
	printf "**************************************************\n* mDNS\n**************************************************\n"
	package avahi-daemon avahi-utils || return
}

niniteInstall()
{	
	printf "**************************************************\n* Ninite\n**************************************************\n"

	# https://ninite.com/agent.exe
	run "Ninite/Ninite Agent Installer.exe" --elevate --no-pause /silent || return
}

wiresharkInstall()
{	
	printf "**************************************************\n* Wireshark\n**************************************************\n"

	# https://www.wireshark.org/#download
	run "network/Wireshark/" "Wireshark-win64-3.2.4.exe" "Wireshark 3.2.4 Intel 64.dmg" "wireshark-3.2.4.tar.xz" || return
}

#
# Java
#

devJavaCore()
{
	printf "**************************************************\n* JAVA Development Core\n**************************************************\n"
	local java="$pp/Development/Java/Other"
	makeDir "$java" || return
}

jreInstall()
{
	printf "**************************************************\n* Java Runtime Environment \n**************************************************\n"
	
	# Download 7: http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html#javasejdk
	# Download: http://www.java.com/en/download/manual.jsp
	# Download: http://www.oracle.com/technetwork/java/javase/downloads/index.html
	# Eary access: http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html
	# Test: http://www.java.com/en/download/installed.jsp http://java.com/en/download/help/testvm.xml
	# Services: JavaQuickStarterService
	run "Sun/Java/jre/*-x86.exe" || return
	run "Sun/Java/jre/*-x64.exe" || return

	javaFinal
}

javaFinal()
{
	mergeDir "$pp/Java" "$oo" || return
	$registry 32 delete "run/SunJavaUpdateSched" || return
	$registry 64 delete "run/SunJavaUpdateSched" || return
}

#
# Microsoft
#

iisInstall()
{
	# - Add/Remove Windows Components requires inf files
	# - Remote Desktop Web Connection reference http://www.microsoft.com/windowsxp/using/networking/expert/northrup_03may16.mspx
	printf "**************************************************\n* IIS\n**************************************************\n"
  echo "- Internet Information Services, check all"
  echo "- (optional) Internet Information Services Hostable Web Core"
	
	product optional --wait || return

	if [[ $client ]]; then
	  echo "Updating firewall..."
	  $firewall rule enable "World Wide Web Services HTTP Traffic In"
	fi

	echo "Updating services..."
	service exist FTPSVC && { service manual FTPSVC || return; }

	if [[ $client ]] && ask "Set IIS services to run manually"; then
	  service exist IISADMIN && { service manual IISADMIN || return; }
	  service exist w3svc && { service manual w3svc || return; }
	  service exist AppHostSvc && { service manual AppHostSvc || return; }
	fi

	echo "Updating icons..."
	makeDir "$pp/Development/Other/IIS" || return
	mergeDir "$pp/IIS" "$pp/Development/Other" || return
	$makeShortcut "$WINDIR/system32/inetsrv/iis.msc" "$pp/Development/Other/IIS/IIS Client Manager" || return

	# [[ $client ]] && ask "Install remote manager" && { IisRemoteManager || return; }
	# ask "Configure WebDAV" --default n && { IisWebDav || return; }
	# ask "Configure FTP" --default n && { IisFtp || return; }
	# ask "Configure debugging" --default n && { IisDebugging || return; }
	# ask "Configure compression" --default n && { IisCompression || return; }
	# ask "Configure SSL" --default n && { IisSsl || return; }

	echo "Restarting IIS..."
	iisreset
}

iisExpressFinal()
{
	echo "Moving data folders..."
	makeLink --merge --hide "$udata/app/IISExpress" "$udoc/IISExpress"

	echo "Setting permissions..."
	icacls "$(utw "$P32/IIS Express")" /grant "$USER:(OI)(CI)F" /T
}

officeInstall()
{
	printf "**************************************************\n* Office 365\n**************************************************\n"

	# https://stores.office.com/myaccount/advancedinstalls.aspx 
	run "other/Microsoft/Office/" -p "Setup.X64.en-US_O365HomePremRetail_08b88893-8375-4065-aeb5-26309617dc27_TX_PR_.exe" "Microsoft_Office_16.37.20051002_Installer.pkg" || return
	officeFinal || return
}

officeIcons()
{
	echo "Updating icons..."

	p="$ao/Office"
	makeDir "$p" || return

	mergeDir --rename "$pp/Microsoft Office Tools" "$p/tools" || return
	$mv "$pp/"Access.lnk "$p" || return
	$mv "$pp/"Excel.lnk "$p" || return
	$mv "$pp/"Outlook.lnk "$p" || return
	$mv "$pp/"PowerPoint.lnk "$p" || return
	$mv "$pp/"Publisher.lnk "$p" || return
	$mv "$pp/"Word.lnk "$p" || return
	$rm "$up/Startup/Send to OneNote.lnk" || return

	SkypeIcons || return

	mergeDir --rename "$pp/Microsoft Office 2013" "$p" || return
	mergeDir --rename "$p/Office 2013 Tools" "$p/tools" || return
	for f in "$p/"*2013.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	for f in "$p/tools/"*2013*.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	
	mergeDir --rename "$pp/Microsoft Office 2016 Tools" "$p/tools" || return
	$mv "$pp/"*2016.lnk "$p" || return
	for f in "$p/"*2016.lnk; do $ren "$f" "${f/ 2016/}" || return; done
	for f in "$p/tools/"*2016*.lnk; do $ren "$f" "${f/ 2016/}" || return; done

	$registry delete "urun/Lync" # "c:\Program Files\Microsoft Office\root\office16\lync.exe" /fromrunkey
}

officeFinal()
{
	if IsPlatform mac; then
		sudo rm -fr "$P/Microsoft OneDrive.app" "$P/Microsoft OneNote.app" "$P/Microsoft Outlook.app" || return

	elif IsPlatform win; then
		. office.sh || { EchoErr "inst: Office is not installed"; return 1; }

		makeDir "$_data/templates" "$udata/app/office" "$udata/templates" || return
		MakeLink --merge --hide "$udata/app/office/template" "$udoc/Custom Office Templates" || return
	
		registry import "$setupFiles/ShellNew.reg" || return
	
		officeIcons || return
	fi

	ask "Restore normal templates" && { word RestoreNormal || return; }
	ask "Configure Word" && { word configure || return; }

	return 0
}

powerShellInstall()
{
	printf "**************************************************\n* PowerShell\n**************************************************\n"
	
	# https://aka.ms/pscore6
	run "other/Microsoft/PowerShell/" -p "PowerShell-7.0.2-win-x64.msi" "powershell-7.0.2-osx-x64.pkg" "powershell-7.0.2-linux-x64.tar.gz" --elevate || return
}

powerToysInstall()
{
	printf "**************************************************\n* PowerToys\n**************************************************\n"

	# https://github.com/microsoft/PowerToys
	run "other/Microsoft/Windows/other/PowerToysSetup-0.16.1-x64.msi" || return

	if IsPlatform win; then
		$ren "$pp/PowerToys (Preview).lnk" "$pp/Operating System/Power Toys.lnk" || return
	fi

	return 0
}

skypeInstall()
{
	printf "**************************************************\n* Skype\n**************************************************\n"

	# https://www.skype.com/en/get-skype/
	run "other/Microsoft/Skype/" -p "Skype-8.59.0.77.exe" "Skype-8.59.0.77.dmg" "skypeforlinux-64.deb" || return

	IsPlatform win && { skypeIcons || return; }

	return 0
}

skypeIcons()
{
	mergeDir "$pp/Skype" "$pp/Applications/Other" || return
	$rm "$pp/"Skype*.lnk || return
	$rm "$pd/Skype.lnk" || return
	$registry delete "urun/Skype for Desktop" # C:\Program Files (x86)\Microsoft\Skype for Desktop\Skype.exe
}

ss() { sqlServerInstall; }
sqlServerInstall()
{
	local base="other/Microsoft/SQL Server"
	local setup="en_sql_server_2017_enterprise_x64_dvd_11293666"; [[ $client ]] && setup="en_sql_server_2017_developer_x64_dvd_11296168"
	printf "**************************************************\n* SQL Server \n**************************************************\n"

	echot "\
Setup logs are in \"$P/Microsoft SQL Server/130/Setup Bootstrap/Log\"
- run <drive>\setup.exe
- Installation, New SQL installation
- Feature Selection, Select Database Engine Services, SQL Server Replication
- Server Configuration, check Grant Perform Volume Maintenance Task provilege
- Database Engine Configuration
  - Authentication Mode=Mixed Mode, Enter password=XXX, Confirm password=XXX
  - Add Current User"
 	run "$base/setup/$setup.iso" || return

	i SqlServerServerConfig SqlServerLogCleanup SsFinal || return
}

ssms() { sqlServerManagementStudioInstall; }
sqlServerManagementStudioInstall()
{
	local base="other/Microsoft/SQL Server"

	run "$base/studio/SSMS-Setup-ENU.exe" || return # https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms
	run "$base/studio/plugins/SSMSBoostInstaller_3.4.6796.msi" || return # http://www.ssmsboost.com

	local dir="$udata/app/SQL Server Management Studio"; makeDir "$dir" || return
	makeLink --merge --hide "$udata/app/SQL Server Management Studio" "$udoc/SQL Server Management Studio" || return
	$makeShortcut "$CLOUD/data/sql" "$dir/Personal.lnk" || return

	i SqlServerFinal || return
	SqlServerManagementStudio profile restore default || return
}

sqlServerConfig()
{
	ScriptEval SqlServer init || return

	echot "\

- SQL Server Network Configuration, Protocols for MSSQLSERVER
- Named Pipes and TCP/IP=Enabled
- TCP/IP, IP Addresses
	- (IP for primary NIC) IPn, Enabled=Yes
	-IPAll, TCP Port=$port"
	SqlServer config
	pause
	SqlServer service restart

	echot "
- Object Explorer, Server, Properties, Memory, Maximum server memory=256"
	SqlServerManagementStudio || return
	pause

	echo "Updating firewall..."
	local port=1433
	$firewall rule add "SQL Server" dir=in action=allow protocol=TCP localport=$port profile=private \
		program="$(utw "$P/Microsoft SQL Server/MSSQL${versionNum}.MSSQLSERVER/MSSQL/Binn/sqlservr.exe")" || return
}

sqlServerLogCleanup()
{
	ScriptEval SqlServer init || return

	echo "Removing log files..."
	$rmd "$P/Microsoft SQL Server/${versionNun}0/Setup Bootstrap/Log" || return
}

sqlServerFinal()
{
	ScriptEval SqlServerManagementStudio init || return	

	local dir="$(utw "$udata/sql")" r="HKCU/Software/Microsoft/SQL Server Management Studio/${versionNum}.0"

	echo "Updating SQL Server registry..."
	$registry set "$r/DefaultBrowseComponentLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$dir" || return

	if [[ $client ]]; then
		SqlServer service demand --all || return
		SqlServer service stop --all || return
	fi

	os path editor || return
	echo "- Remove SQL entries from the system path"
	pause
}

systemInternalsInstall() 
{ 
	echo "Setting System Internals EULA..."
	$registry import "$setupFiles/SysInternalsEula.reg"
}

vscode() { visualStudioCodeInstall; }
visualStudioCodeInstall()
{
	printf "**************************************************\n* Visual Studio Code\n**************************************************\n"
	echot "- check Add ... to Windows Explorer and Register Code"
	
	# https://code.visualstudio.com/
	run "other/Microsoft/Visual Studio/code/" -p "VSCodeUserSetup-x64-1.41.1.exe" "VSCode-darwin-stable.zip" "code_1.40.1-1573664190_amd64.deb" || return

	if IsPlatform win; then
		echo "Updating icons..."
		mergeDir "$up/Visual Studio Code" "$up/Development/other" || return
	fi

	return 0
}

windowsAdministrationToolsInstall()
{
	printf "**************************************************\n* Windows Administration Tools\n**************************************************\n"
	run "other/Microsoft/Server/tools/WindowsTH-RSAT_WS_1803-x64.msu" || return # http://www.microsoft.com/en-us/search/result.aspx?q=Remote%20Server%20Administration%20Tools&form=DLC

	echo "Updating icons..."
	mergeDir "$pp/Administrative Tools" "$oo" || return
	$rm "$pp/Server Manager.lnk" || return
	$rm "$pp/Administrative Tools.lnk" || return
}

windowsTerminalInstall()
{
	printf "**************************************************\n* Windows Terminal\n**************************************************\n"
	
	# https://github.com/microsoft/terminal/releases
	run "other/Microsoft/Windows/terminal/Microsoft.WindowsTerminalPreview_1.0.1402.0_8wekyb3d8bbwe.msixbundle" --elevate || return

	WindowsTerminal profile restore default || return	
}

#
# .NET
#

DevDotNetCore() 
{
	printf "**************************************************\n* .NET Development Core\n**************************************************\n"

	if IsPlatform win; then
		makeDir "$pp/Development/DotNet/Other"
	fi

	i LinqPad NUnitConsole VisualStudio || return
}

vs() { VisualStudioInstall; }
VisualStudioInstall()
{
	printf "**************************************************\n* Visual Studio\n**************************************************\n"

	local vs="other/Microsoft/Visual Studio"
	local vse="$vs/extension"
	
	run "$vs/setup/" -p "vs_Community.exe" "visualstudioformacinstaller.dmg" || return # # https://www.visualstudio.com/downloads/
	run "$vse/VSColorOutput.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496
	run "$vse/SolutionLoadManager.vsix" # https://marketplace.visualstudio.com/items?itemName=kolomiets.SolutionLoadManager

	visualStudioFinal || return
	VisualStudio profile restore default || return
}

visualStudioFinal()
{
	ScriptEval VisualStudio init || return

	local base="$pp/Development/DotNet"
	local other="$base/Other"
	local vs="$other/Visual Studio $vsName"
	local r="$vsRegistryKey" c="$(utw "$CODE")"

	makeDir "$CODE/test/vs"
	makeDir "$other" || return

	$makeShortcut "$WIN_ROOT/Windows/assembly" "$base/GAC.lnk" || return
	$hide ~/.dnx ~/.nuget || return
	makeLink --merge --hide "$vsData" "$udoc/Visual Studio $vsName" || return
	mergeDir --rename "$pp/Visual Studio $vsName" "$other/Visual Studio $vsName" || return
	mergeDir "$pp/Windows Kits" "$pp/Development/Other" || return
	$mv "$pp/Visual Studio Installer.lnk" "$vs" || return
	$mv "$up/Microsoft Corporation/Microsoft Teams.lnk" "$up/Development" || return
	$ren "$pp/Visual Studio $vsName.lnk" "$base/Visual Studio.lnk" || return
	$ren "$pp/Microsoft Test Manager $vsVersion.lnk" "$vs/Test Manager.lnk" || return
	$ren "$pp/Blend for Visual Studio $vsName.lnk" "$vs/Blend.lnk" || return
	$ren "$pp/Microsoft Expression/Microsoft Expression Blend SDK/Expression Blend SDK Documentation.lnk" "$vs/Expression Blend SDK Documentation.lnk"  || return
	$rmd "$pp/Microsoft Expression" || return
	$rmd "$up/Microsoft Corporation" || return
	
	$registry 32 set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/VisualStudioProjectsLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/UserProjectTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ProjectTemplates")" || return
	$registry 32 set "$r/UserItemTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ItemTemplates")" || return
	$registry 32 set "$r/VisualStudioLocation" REG_EXPAND_SZ "$(utw "$vsData")" || return

	i IisExpressFinal SilverlightIcons || return
}

nUnitConsoleInstall()
{
	printf "**************************************************\n* NUnit\n**************************************************\n"
	
	local version="3.9.0" # http://nunit.org/download/
	run "shareware/DOT.NET/NUnit/setup/NUnit.Console-$version.msi" || return 

	mergeDir "$up/NUnit $version" "$pp/Development/DotNet/Other" || return
}

SilverlightInstall()
{
	printf "**************************************************\n* Silverlight SDK\n**************************************************\n"

	# downloads  http://www.silverlight.net/downloads
	# - Developer Runtime (required, debugging): http://go.microsoft.com/fwlink/?linkid=229324
	# - toolkit (required, additonal controls): http://silverlight.codeplex.com/ http://silverlight.codeplex.com/releases/view/78435
	# - SDK (required if Visual Studio is not installed): http://www.microsoft.com/en-us/download/details.aspx?id=28359 
	# - tools (developer runtime, SDK, Visual Studio 2010 support): http://www.microsoft.com/en-us/download/details.aspx?id=28358
	# version: http://www.microsoft.com/getsilverlight/Get-Started/Install/Default.aspx
	run "other/Microsoft/DOT.NET/Silverlight/development/Silverlight_Developer_64.exe"
	run "other/Microsoft/DOT.NET/Silverlight/development/Silverlight_5_Toolkit_December_2011.msi"

	SilverlightIcons || return
}

SilverlightIcons()
{
	local base="$pp/Development/DotNet/Other/Silverlight"
	makeDir "$base" || return

	$ren "$pp/Microsoft Silverlight/Microsoft Silverlight.lnk" "$pp/Applications/Accessories/Silverlight.lnk"  || return
	$ren "$pp/Microsoft Silverlight 5 SDK/Welcome.lnk" "$base/Silverlight 5 SDK Welcome.lnk" || return

	mergeDir --rename "$pp/Microsoft Silverlight 5 Toolkit December 2011" "$base/Silverlight 5 Toolkit" || return

	$rmd "$pp/Microsoft Silverlight 5 SDK" || return
	$rmd "$pp/Microsoft Silverlight" || return
}

#
# PDF
#

PdfElement()
{
	printf "**************************************************\n* PDFelement\n**************************************************\n"

	# ​https://pdf.wondershare.com/
	run "other/Wondershare/PDFelement/" -p "pdfelement-pro_setup_full5239.exe" "mac-pdfelement6-pro_full2992.dmg" "" --elevate || return

	mergeDir "$pp/Wondershare/" "$pp/Applications/Other" || return
	$rm "$pd/Wondershare PDFelement.lnk" || return
}

PdfElement()
{
	printf "**************************************************\n* Nitro PDF\n**************************************************\n"

	# ​https://www.gonitro.com/nps/product-details/downloads
	run "other/Nitro/nitro_pro13.exe" || return

	$mv "$pp/Nitro Pro.lnk" "$pp/Applications" || return
	$rm "$pd/Nitro Pro.lnk" || return
}

#
# Python
#

PythonInstall()
{	
	printf "**************************************************\n* Python\n**************************************************\n"

	# python3
	! InPath python3 && IsPlatform debian,mac && { package python3 || return; }

	# pip3 - https://packaging.python.org/tutorials/installing-packages/ 
	if ! InPath pip3; then

		IsPlatform mac && { python3 -m ensurepip --default-pip || return; }

		# Ubuntu pip3 has issues getting updated packages, but needs to be installed for get-pip to work
		if IsPlatform ubuntu; then	
			package python3-pip || return
			packageu python3-pip || return
		fi

		! InPath pip3 && { sudo -H python3 "$setupFiles/get-pip.py" || return; }
	fi

	if IsPlatform debian; then
		package python3-dev libcairo2-dev libgirepository1.0-dev || return
		sudo -H pip3 install --ignore-installed httplib2 pyasn1-modules pygobject pyxdg PyYAML || return # fix issues updating packages
	fi

	if IsPlatform win && [[ ! -d ~/.cache || ! -d ~/.pip ]]; then
		echo "Creating directories..."
		makeDir ~/.cache ~/.pip || return
		$hide ~/.cache ~/.pip || return
	fi

	return 0
}

#
# Ruby
#

RubyInstall()
{
	# ruby
	! InPath ruby && IsPlatform debian,mac && { package ruby || return; }

	# development
	if IsPlatform debian && [[ ! -f /usr/include/ruby-2.5.0/ruby.h ]]; then
		local devPackage="ruby$(ruby -e 'puts RUBY_VERSION[/\d+\.\d+/]')-dev"
		package $devPackage || return		
	fi

	! InPath gcc && { package gcc || return; }
	! InPath make && { package make || return; }
	
	# SSL libraries
	IsPlatform debian && [[ ! -d /usr/include/openssl ]] && { package libssl-dev || return; }

	# create directories
	makeDir ~/.gem && $hide ~/.gem || return

	# update ~/.gemrc
	if IsPlatform mac && ! grep "/usr/local/bin" ~/.gemrc  >& /dev/null; then
		echo "gem: -n/usr/local/bin" >> ~/.gemrc
	fi
}

ColorLsInstall() { i ruby || return; sudo gem install colorls; }

#
# Terminals
#

iTermInstall()
{
	printf "**************************************************\n* iTerm\n**************************************************\n"
	
	# https://iterm2.com/downloads.html
	run "platform/mac/iTerm2/iTerm2-3_3_11.zip" || return

	if ask "Do you want to install iTerm shell integration"; then # https://iterm2.com/documentation-shell-integration.html
		curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
	fi

	dockutil --add "/Applications/iTerm.app" --after "Notion" || return

	echo "- Preferences, General, Preferences, check Load preferences from a custom folder or URL=<paste>"
	clipw "$udata/profile/default" || return
	macAppOpen iTerm || return
}

terminator()
{
	printf "**************************************************\n* Terminator\n**************************************************\n"
	packages terminator || return
	TerminatorHelper profile restore default || return
}

#
# X Windows
#

xClient()
{
	printf "**************************************************\n* X Client\n**************************************************\n"
	package x11-utils xclip wmctrl || return
}

xServer()
{
	printf "**************************************************\n* X Server\n**************************************************\n"
	RunPlatform xServer || return
}

xServerMac()
{ 
	xQuartzInstall || return
}

xServerWin() 
{ 
	x410Install || return
	$makeShortcut "wscript.exe" "$pp/Operating System/terminator" "$(utw "$DATA/platform/win")\terminator.vbs" "$(utw "$DATA/icons/terminator2.ico")" || return
}

vcxsrvInstall()
{
	# https://sourceforge.net/projects/vcxsrv/
	run "platform/linux/X Windows/VcXsrv/vcxsrv-64.1.20.1.4.installer.exe" --pause || return

	mergeDir "$pp/VcXsrv" "$oo" || return
}

x410Install()
{
	# http://tlu.dl.delivery.mp.microsoft.com/filestreamingservice/files/d58e1ec4-93e0-419d-9087-b4b6140cec73?P1=1592686347&P2=402&P3=2&P4=UINsnvSEcuBjJQ1nWgwyab8CSRSOjheiHY2nIZlGQhKh9frMHHpM4v%2bgxSuXfpuueMtIyJYmmBg4CnBrrW5dpw%3d%3d
	# storeInstall "X410" "9NLP712ZMN9Q" || return
	run "platform/linux/X Windows/X410/setup/X410_StorePkg_2.8.2.0_x64.appx" || return
	
	echo "- check Allow Public Access.   At the Windows Firewall prompt check Public"
	pause
}

xMingInstall()
{
	# http://www.straightrunning.com/XmingNotes/ http://www.straightrunning.com/candidate/
	run "platform/linux/X Windows/Xming/rel_x64_Xming-7-7-0-54-setup.exe" || return

	mergeDir "$pp/Xming" "$oo" || return
	$rm "$pd/XLaunch.lnk" || return
	$hide "$WIN_HOME/Xdefaults" || return
}

xQuartzInstall()
{
	# https://www.xquartz.org/ 
	run "platform/linux/X Windows/XQuartz/XQuartz-2.7.11.dmg" || return

	echot "\
- Preferences, Security, check Allow connections from network clients"
	macAppConfigure XQuartz || return

	if askP 'Test XQuartz'; then
		export DISPLAY=:0
		/opt/X11/bin/xclock
	fi

	return 0
}

#
# Virtualization
#

DockerInstall()
{
	printf "**************************************************\n* Docker\n**************************************************\n"

	# https://hub.docker.com/editions/community/docker-ce-desktop-windows
	run "shareware/Docker/" -p "Docker for Windows Installer.exe" || return

	if IsPlatform win; then	
		$mv "$ud/Docker Desktop.lnk" "$pp/Operating System" || return
	fi

	return 0
}

hv() { hypervInstall; }
hypervInstall()
{
	printf "**************************************************\n* Hyper-V\n**************************************************\n"

	local data="$DATAD/data/Hyper-V"
	elevate RunScript --pause-error DISM.exe /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V
	pause

	makeDir "$data" || return
	mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return

	clipw "$(utw "$data")" || return
	echot "- Hyper-V Manager, $HOSTNAME, Hyper-V Settings..., Virtual Hard Disks and Virtual Machines, folder=$data (paste)" 
	hyperv gui || return
}

HypervLinuxTools()
{
	{ IsPlatform win || ! IsHypervVm || ! IsPlatform Ubuntu; } && return

	return 0 # could not get tools to work

	package linux-tools-virtual linux-cloud-tools-virtual xrdp || return
	sudo systemctl stop xrdp || return
	sudo systemctl stop xrdp-sesman || return

	local f="/etc/xrdp/xrdp.ini"
	sudo sed -i_orig -e 's/use_vsock=false/use_vsock=true/g' "$f" || return
	sudo sed -i_orig -e 's/security_layer=negotiate/security_layer=rdp/g' "$f" || return
	sudo sed -i_orig -e 's/crypt_level=high/crypt_level=none/g' "$f" || return
	sudo sed -i_orig -e 's/bitmap_compression=true/bitmap_compression=false/g' "$f" || return # fast when local

	[[ ! -e /etc/xrdp/startubuntu.sh ]] && { echo "#!/bin/sh
export GNOME_SHELL_SESSION_MODE=ubuntu
export XDG_CURRENT_DESKTOP=ubuntu:GNOME
exec /etc/xrdp/startwm.sh" | sudo tee /etc/xrdp/startubuntu.sh || return; }

	sudo chmod a+x "/etc/xrdp/startubuntu.sh" || return
	
	sudo sed -i_orig -e 's/startwm/startubuntu/g' "/etc/xrdp/sesman.ini"  || return # setup the ubuntu session
	sudo sed -i -e 's/FuseMountName=thinclient_drives/FuseMountName=shared-drives/g' "/etc/xrdp/sesman.ini"  || return # rename the redirected drives to 'shared-drives'
	sudo sed -i_orig -e 's/allowed_users=console/allowed_users=anybody/g' "/etc/X11/Xwrapper.config" || return

	# Blacklist the vmw module
	[[ ! -e /etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf ]] && 
		{ echo "blacklist vmw_vsock_vmci_transport" | sudo tee -a "/etc/modprobe.d/blacklist_vmw_vsock_vmci_transport.conf" || return; }

	#Ensure hv_sock gets loaded
	[[ ! -e /etc/modules-load.d/hv_sock.conf ]] && echo "hv_sock" | sudo tee "/etc/modules-load.d/hv_sock.conf"
	
	# Configure the policy xrdp session
	echo "[Allow Colord all Users]
Identity=unix-user:*
Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
ResultAny=no
ResultInactive=no
ResultActive=yes" | sudo tee "/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla" || return

	# reconfigure the service
	sudo systemctl daemon-reload || return
	sudo systemctl start xrdp || return
}

VirtualBoxInstall()
{
	printf "**************************************************\n* VirtualBox\n**************************************************\n"

	local data="$DATAD/data/VirtualBox" v="6.1.10-138449"	# https://www.virtualbox.org/wiki/Downloads
	run "shareware/VirtualBox/setup/" -p "VirtualBox-$v-Win.exe" "VirtualBox-$v-OSX.dmg" "virtualbox-$v~Ubuntu~bionic_amd64.deb" || return
	run "shareware/VirtualBox/extension/Oracle_VM_VirtualBox_Extension_Pack-6.1.10.vbox-extpack" || return

	if IsPlatform win; then	
		makeDir "$data" || return
		mergeDir "$pp/Oracle VM VirtualBox" "$oo" || return
		$rm "$pd/Oracle VM VirtualBox.lnk" || return
		$hide "$WIN_HOME/.VirtualBox" || return
		$rm "$WIN_HOME/VirtualBox VMs" || return
	fi

	clipw "$(utw "$data")" || return
	echot "- File, Preferences..., General, Default Machine Folder=$data (paste)"
}

vmw() { VmwareWorkstationInstall; }
VmwareWorkstationInstall()
{
	printf "**************************************************\n* VMware Workstation\n**************************************************\n"

	# https://my.vmware.com/group/vmware/downloads#tab1
	run "other/VMware/workstation/" -p "VMware-workstation-full-15.5.6-16341506.exe" "" "VMware-Workstation-Full-15.5.6-16341506.x86_64.bundle" --elevate || return

	local data="$DATAD/data/VMware"
	makeDir "$data" || return
	mergeDir "$pp/VMware" "$oo" || return
	$rm "$pd/VMware Workstation Pro.lnk" || return

	# enable guest NAT ping - allow echo replies (ICMP type and code 0)
	$firewall rule add "VMware NAT Echo Reply" dir=in action=allow enable=yes profile=private,domain localip=any remoteip=any protocol=icmpv4:0,0 interfacetype=any edge=yes || return

	clipw "$(utw "$data")" || return
	echot "\
- Edit, Preferences...
  - Workspace, Default location for virtual machines=$data (paste)
  - Hotkeys, select Ctrl and Win only
  - Display
    - uncheck Autofit Window
    - check Autofit guest
    - uncheck Show toolbar edge when unpinned in full screen
  - Updates, check Automatically update VMware Tools on a virtual machine"
	vmware start || return
}

VmwareLinuxTools()
{
	{ IsPlatform win || ! IsVmwareVm; } && return

	if IsServer; then
		package open-vm-tools || return	
	elif IsDesktop; then
		package open-vm-tools-desktop || return	
	fi

	return 0
}

#
# Other Programs
#

BashInstall()
{
	printf "**************************************************\n* Bourne Again Shell\n**************************************************\n"

	# profile
	local file="/etc/bash.bashrc"
	local line='[[ -f "/usr/local/data/bin/bash.bashrc" ]] && . "/usr/local/data/bin/bash.bashrc"'
	local after="# this file has to be sourced in"
	local before='# If not running interactively, don'\''t do anything' 

	IsPlatform mac && { file="/etc/bashrc"; after="# System-wide .bashrc file" before="if [ -z \"$PS1\" ]; then"; }
	IsPlatform dsm,qnap && { file="/opt/etc/profile"; before="# Please note"; }
	
	[[ ! -f "$file" ]] && { EchoErr "$file does not exist"; return 1; }

	# try and add the line automatically
	if ! grep "$line" "$file" >& /dev/null && [[ $after ]]; then		
		sudo ${G}sed -ie '/^'"$after"'/a \\n'"$line"'' "$file" || return
	fi

	# add the line manually
	if ! grep "$line" "$file" >& /dev/null; then
		echo "$line"; clipw "$line"
		echo "- paste before \"$before\""
		pause
		sudo nano "$file" || return
	fi

	return 0
}

ZshInstall()
{
	printf "**************************************************\n* Z shell\n**************************************************\n"

	ZshHelper $noPrompt profile restore default || return

	! InPath zsh && { package zsh || return; }

	# zshenv
	local file="/etc/zsh/zshenv";  IsPlatform mac && file="/etc/zshenv"; IsPlatform entware && file="/opt/etc/zshenv"
	makeFileSudo "$file" || return
	
	# profile
	local line='[[ -f "/usr/local/data/bin/bash.bashrc" ]] && . "/usr/local/data/bin/bash.bashrc"'
	! grep "$line" "$file" >& /dev/null && { echo "$line" | sudo tee -a "$file" || return; }

	# permissions
	local dir="/usr/local/share/zsh"
	[[ -d "$dir" ]] && { sudo chmod go-w "$dir" || return; }
	[[ -d "$dir/site-functions" ]] && { sudo chmod go-w "$dir/site-functions" || return; }

	# login shell
	SetLoginShell zsh || return
}

nodeInstalled() { InPath node; }

NodeJsInstall()
{	
	printf "**************************************************\n* Node.js\n**************************************************\n"
	local v="14"

	# https://nodejs.org/en/download/
	if IsPlatform debian && ( ! InPath node || ! node --version | grep v$v >& /dev/null); then
		echo "Installing node v$v..."
		curl -sL https://deb.nodesource.com/setup_$v.x | sudo -E bash || return
		package nodejs || return
	elif IsPlatform mac; then
		package nodejs || retun
	fi

	[[ ! -f ~/.npmrc ]] && { touch ~/.npmrc || return; }

	echo "Installing core node packages..."
	InPath nodemon || { $sudo npm install -g nodemon || return; }
	InPath n || { $sudo npm install -g n || return; }
	sudo n lts || return
	sudo n latest || return

	echo "Updating npm..."
	$sudo npm install -g npm@latest || return
	$sudo npm update -g || return

	echo "Rebuilding packages..."
	cd "$(sudo npm -g prefix)/lib/node_modules" || return
	sudo npm rebuild --unsafe-perm || return

	return 0
}

WinampInstall()
{
	printf "**************************************************\n* Winamp\n**************************************************\n"
	
	run "Nullsoft/WinAmp/setup/winamp565_pro_all.exe" || return

	echo "Updating icons..."
	mergeDir "$pp/Winamp" "$ao" || return
	mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" || return
	$rm "$pd/Winamp.lnk" || return

	echot "Note
- WiFi Sync - disable addition network interfaces (i.e. VMware networks), run WinAmp as Administrator"
}

wmp() { WindowsMediaPlayerInstall; }
WindowsMediaPlayerInstall()
{
	printf "**************************************************\n* Windows Media Player\n**************************************************\n"
	
 	start "$P32\Windows Media Player\wmplayer.exe" || return

	echot "\
- Recommended settings
- Organize, Manage Libraries, Music, Add..., This PC, portable4"
}

ahk() { AutoHotKeyInstall; }; AutoHotKeyInstall()
{
	printf "**************************************************\n* AutoHotKey\n**************************************************\n"

	AutoHotKey close || return

	# https://www.autohotkey.com/ https://autohotkey.com/download/2.0/
	run "shareware/AutoHotKey/image/AutoHotkey_2.0-a115-f7c71ea8.zip" "$P/AutoHotKey" || return 

	AutoHotKey startup || return
}

WinSplitInstall()
{
	printf "**************************************************\n* WinSplit\n**************************************************\n"
	run "shareware/WinSplit Revolution/image.zip" "$P32/WinSplit Revolution" || return
	WinSplit startup
}

SublimeInstall()
{
	printf "**************************************************\n* Sublime Text Editor\n**************************************************\n"

	# http://www.sublimetext.com/3 
	local v=3211
	run "other/Sublime/setup/" -p "Sublime Text Build $v x64 Setup.exe" "Sublime Text Build $v.dmg" "sublime_text_3_build_${v}_x64.tar.bz2" --elevate || return 

	case "$PLATFORM" in

		debian) # https://www.sublimetext.com/docs/3/linux_repositories.html
			mvSudo "$P/sublime_text_3" "$P/sublime_text" || return

			echo "Installing sublime package repository for updates..."
			wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - || return
			sudo apt-get install apt-transport-https || return
			echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list || return
			sudo apt-get update || return
			sudo apt-get install sublime-text || return
			;;

		win)
			makeLink --merge --hide "$udata/app/Dash" "$udoc/Dash" || return
			registry delete "HKEY_CLASSES_ROOT/Applications/sublime_text.exe/" # Fix Windows Open With
			$ren "$pp/Sublime Text 3.lnk" "$pp/Applications/Sublime Text.lnk" || return
			makeDir "$adata/Sublime Text 3" || return; # for profile
			;;
			
	esac

	sublime profile restore default || return
}

SublimeMergeInstall()
{
	printf "**************************************************\n* Sublime Merge\n**************************************************\n"

	# https://www.sublimemerge.com/download
	local v="2020"
	run "other/Sublime/merge/" -p "sublime_merge_build_${v}_x64_setup.exe" "sublime_merge_build_${v}_mac.zip" "sublime-merge_build_${v}_amd64.deb" || return;

	IsPlatform win && { $mv "$pp/Sublime Merge.lnk" "$pp/Applications" || return; }

	return 0
}

pGina()
{
	printf "**************************************************\n* pGina\n**************************************************\n"
	
	IsInDomain && return 0
	
	# http://pgina.org/download.html
	run "other/Microsoft/Visual Studio/redistributable/vcredist_x86.exe" || return 
	run "other/Microsoft/Visual Studio/redistributable/vcredist_x64.exe" || return 
	run "shareware/pGina/setup/pGinaSetup-3.1.8.0.exe" /silent || return # 

	echo "Updating icons..."
	mergeDir "$pp/pGina" "$oo" || return

	pGina profile restore default || return
}

DropboxInstall()
{
	printf "**************************************************\n* DropBox\n**************************************************\n"

	# https://www.dropbox.com/download?full=1&plat=win 
	# https://www.dropbox.com/download?full=1&plat=mac
	# https://www.dropbox.com/install-linux
	local v=97.4.467
	run "other/Dropbox/" -p "Dropbox $v Offline Installer.exe" "Dropbox $v.dmg" "dropbox_2019.02.14_amd64.deb" /S || return

	if askP 'Configure Dropbox'; then
		if IsPlatform win; then
			echot "\
		- Dropbox, Preferences...,
		  - General
		  	- uncheck Start Dropbox on system startup
				- Dropbox Badge, Show only if others present
			- Backups, Change AutoPlay Settings, Removable drive=Take no action
		  - Notifications, uncheck Edits to files
		  - Bandwidth, Upload rate, Don't Limit
		  - Sync, Selective Sync, uncheck large
		- Explorer
			- Dropbox, Include in Library, Documents
			-  Libraries, Documents, Library Tools, Manage, Manage library
		  	- Move Up (to top), Set as default save location
		  - View, List"
		else
			echot "\
		- Dropbox, Preferences...,
		  - Notifications, uncheck Edits to files
		  - Sync, Slective Sync, Choose folders, uncheck large"
		fi
		dropbox startup
		IsPlatform win && start explorer "$udoc"
	fi

	DropboxFinal || return
}

DropboxFinal()
{
	local company="Juntos Holdings" user="John Butare"

	if IsPlatform win; then

		mergeDir "$up/Dropbox" "$up/Applications/Other" || return
		mergeDir "$pp/Dropbox" "$pp/Applications/Other" || return
		$rm "$up/Startup/Dropbox.lnk" || return
		$rm "$ud/Dropbox.lnk" "$ud/$company Dropbox.lnk" || return

		#$registry 32 delete "run/Dropbox" # "C:\Program Files (x86)\Dropbox\Client\Dropbox.exe" /systemstartup
		$registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{E31EA727-12ED-4702-820C-4B6445F28E1B}/" # Desktop Dropbox icon
		$registry set "HKCU/SOFTWARE/Classes/CLSID/{E31EA727-12ED-4702-820C-4B6445F28E1A}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return # Desktop Dropbox icon

		makeLink "$WIN_HOME/$company Dropbox/$user" "$HOME/Dropbox" || return
		$hide "$WIN_HOME/$company Dropbox/.dropbox" || return
	else
		makeLink "$HOME/$company Dropbox/$user" "$HOME/Dropbox" || return
	fi
}

BcInstall() { BeyondCompareInstall; }
BeyondCompareInstall()
{	
	printf "**************************************************\n* BeyondCompare\n**************************************************\n"

	# http://www.scootersoftware.com/download.php
	local v=4.3.5.24893
	run "other/Scooter Software/Beyond Compare/setup/" -p "BCompare-${v}_x64.msi" "BCompareOSX-${v}.zip" "bcompare-${v}_amd64.deb" || return

	if IsPlatform win; then	
		mergeDir --rename "$pp/Beyond Compare 4" "$ao/Beyond Compare" || return
		$rm "$pd/Beyond Compare 4.lnk" || return
		$rm "$ud/Beyond Compare 4.lnk" || return
		$registry delete "urun/BCClipboard" # C:\Program Files\Beyond Compare 4\BCClipboard.exe
	fi
	
	echo "- Help|Preferences, Enter Key..."
	[[ "$PLATFORM" == "mac" ]] && echo "- Beyond Compare, Install Command Line Tools…"
	BeyondCompare profile restore default || return
}

sonos()
{
	printf "**************************************************\n* Sonos Music System\n**************************************************\n"
	
	# https://support.sonos.com/s/downloads?language=en_US
	run "other/Sonos/SonosDesktopController1201." -p "exe" "dmg" "" --elevate || return

	case "$PLATFORM" in
		win) $rm "$pd/Sonos.lnk" || return; mergeDir "$pp/Sonos" "$pp/Media/Other" || return;;
		mac) macAppConfigure Sonos;;
	esac
}

cctray() { CruiseControlTrayInstall; }
CruiseControlTrayInstall()
{
	local version="1.8.5.0"
	printf "**************************************************\n* CruiseControl Tray\n**************************************************\n"
	echo '- Uncheck Run CruiseControl.NET CCTray 1.8.5.0'	

	# download: http://vmspwbld001/ccnetpreprod/ViewFarmReport.aspx http://www.cruisecontrolnet.org/projects/cctray http://cruisecontrol.sourceforge.net http://ccnet.sourceforge.net/CCNET/CCTray.html https://github.com/ccnet/CruiseControl.NET
	run "shareware/CruiseControl/tray/CruiseControl.NET-CCTray-$version-Setup.exe" || return

	echo "Installing plugins..."	
	findFile "shareware/CruiseControl/plugins/CCTray" || return
	$cp	"$file"/* "$P32/CCTray" || return

	echo "Updating icons..."
	mergeDir "$pp/CCTray" "$pp/Development/Other" || return
	mergeDir "$up/CCTray" "$pp/Development/Other" || return
	$rm "$ud/CCTray.lnk" || return
	$rm "$up/Startup/CCTray.lnk" || return

	CruiseControlTray profile restore default || return
	CruiseControlTray startup || return

 	wincred get CCTray:$USER >& /dev/null || echot "\
- File, Settings, Build Projects, Add..., select a secure Build Server,
  check Server is secure, Authorisation Mode=Secure user name/password authentication,
  Configure, Username=%USERNAME%"
}

thunderbird()
{
	printf "**************************************************\n* Thunderbird\n**************************************************\n"

	# https://www.thunderbird.net/en-US/thunderbird/all/#E
	local v="68.8.0"
	run "other/Mozilla/Thunderbird/" -p "Thunderbird Setup $v.msi" "Thunderbird $v.dmg" "thunderbird-$v.tar.tar" || return

	if IsPlatform win; then
		$ren "$pp/Mozilla Thunderbird.lnk" "$pp/Applications/Thunderbird.lnk" || return
		$rm "$pd/Mozilla Thunderbird.lnk" || return
	fi

	makeDir "$APPDATA/Thunderbird" || return
	profile --app "Thunderbird" --method "$APPDATA/Thunderbird" restore default || return
}

SqlPromptInstall()
{
	printf "**************************************************\n* SQL Prompt\n**************************************************\n"
	run "platform/win/RedGate/SQLPromptDownload.exe" || return # downloads to $tmp/Red Gate http://www.red-gate.com/products/sql-development/sql-prompt

	echo "Updating icons..."
	mergeDir "$pp/Red Gate" "$pp/Development/Other"

	echot "\
- SQL Prompt
	- Help, Enter Serial Number...
	- Tabs, History, uncheck Restore open tabs"
	 SqlServerManagementStudio || return
	 pause
}

appleCore()
{
	echo "Updating Apple icons..."
	makeDir "$ao/Apple" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return

}

iCloudInstall()
{
	printf "**************************************************\n* iCloud\n**************************************************\n"
	
	run "other/Apple/iCloud/iCloudSetup.exe" || return # http://support.apple.com/kb/DL1455

	echo "Updating icons..."
	mergeDir "$pp/iCloud" "$oo" || return
	mergeDir "$up/iCloud" "$oo" || return

	echo "Updating registry..."		
	registry delete "urun/AppleIEDAV" || return # C:\Program Files (x86)\Common Files\Apple\Internet Services\AppleIEDAV.exe
	registry delete "urun/ApplePhotoStreams" || return # C:\Program Files (x86)\Common Files\Apple\Internet Services\ApplePhotoStreams.exe
	registry delete "urun/iCloudDrive" || return # C:\Program Files (x86)\Common Files\Apple\Internet Services\iCloudDrive.exe
	registry delete "urun/iCloudServices" || return #  C:\Program Files (x86)\Common Files\Apple\Internet Services\iCloudServices.exe

	appleCore || return

	echot "\
iCloud Control Panel
- uncheck Mail, Contacts, Calendars, & Tasks and Bookmarks
- check Photo Stream"
}

iTunesInstall()
{
	printf "**************************************************\n* iTunes\n**************************************************\n"
	
	run "other/Apple/iTunes/setup/iTunes64Setup.exe" || return # http://itunes.com

	echo "Updating icons..."
	$rm "$pd/iTunes.lnk" || return
	mergeDir "$pp/iTunes" "$ao" || return

	QuickTimePost || return
	appleCore || return

	echot "\
- iTunes Store, Sign In
- Store, Authorize Computer...
- Notes: Ctrl-t visualizer, ctrl-f full screen"
}

QuickTimePost()
{
	$registry 32 delete "run/QuickTime Task" # "C:/Program Files/QuickTime/qttask.exe" -atboottime

	echo "Updating icons..."
	makeDir "$ao/Apple" || return
	mergeDir "$pp/QuickTime" "$ao" || return
	$rm "$pd/QuickTime Player.lnk" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return
}

npp() { NotepadPpInstall; }
NotepadPpInstall()
{
	printf "**************************************************\n* Notepad++\n**************************************************\n"
	echo "- Uncheck Run Notepad++"

	# http://notepad-plus-plus.org/download/
	run "shareware/Notepad++/setup/npp.7.8.7.Installer.x64.exe" --elevate || return

	findFile "shareware/Notepad++" || return

	ask "Update plugins" && { RunScriptElevated "rsync -vr --delete $file/setup/plugins \"$P/Notepad++\"" || return; }

	registry import "$file/setup/NotepadPP.reg" || return
	$mv "$pp/Notepad++.lnk" "$pp/Applications" || return
	$rmd "$pp/Notepad++" || return
	$rm "$pd/Notepad++.lnk" || return

	notepadpp profile restore default || return
}

DashLane()
{
	printf "**************************************************\n* Dashlane\n**************************************************\n"
	run "Dashlane/Dashlane/" -p "Inst.exe" ".dmg" || return # https://www.dashlane.com/download#downloaded

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/DashLane" "$oo" || return
		$rm "$ud/Dashlane.lnk" || return
	fi
}

LastPassInstall() # LastPass for Linux only installs Chrome extension
{
	printf "**************************************************\n* LastPass\n**************************************************\n"
	
	# https://lastpass.com/misc_download2.php
	run "other/LastPass/setup/" -p "LastPassInstaller.exe" "LastPass.dmg" "lplinux.tar.bz2" --elevate || return 

	if IsPlatform linux; then
		cd "$P/lplinux" || return
		./install_lastpass.sh || return
	elif IsPlatform win; then
		mergeDir "$pp/LastPass" "$oo" || return
		$rm "$pd/My LastPass Vault.lnk" || return
		$registry 32 delete "run/LastApp" # C:\Program Files (x86)\LastPass\lastapp.exe
	fi

		return 0
}

iExplorerInstall()
{
	printf "**************************************************\n* iExplorer\n**************************************************\n"
	
	run "other/Macroplant/iExplorer/setup/" -p "iExplorer_Setup_3401.exe" "iExplorer-3.5.0.6.dmg" ""|| return # http://www.macroplant.com/iexplorer/download-ie3-pc.php

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating registry..."	
		$registry delete "urun/iExplorer" # "C:\Program Files (x86)\iExplorer\iExplorer.exe" /background

		echo "Updating icons..."
		mergeDir "$pp/iExplorer" "$oo" || return
		$rm "$oo/iExplorer/Uninstall iExplorer.lnk" || return
			$rm "$oo/iExplorer/iExplorer on the Web.url" || return
		QuickTimePost || return
  elif [[ "$PLATFORM" == "mac" ]]; then
		run "shareware/Fuse/setup/osxfuse-2.7.1.dmg" || return # http://osxfuse.github.io
	fi
}

picasaInstall()
{
	printf "**************************************************\n* Picasa\n**************************************************\n"
	
	echot "\
- Completing the Picasa 3 Setup
  - Uncheck Google as my default search engine in Internet Explorer
  - Uncheck Send anonymous usage stats to Google
- Only search My Documents, My Pictures, and Desktop
- Select Don't use Picasa Photo Viewer"

	run "other/Google/Picasa/setup/Picasa Setup v3.9.139.161.exe" || return
	run "other/Google/Picasa/starter/image v2.0.zip" "$P32/PicasaStarter" || return

	echo "Updating icons..."
	mergeDir --rename "$pp/Picasa 3" "$pp/Media/Other/Picasa" || return
	mergeDir "$up/Google+ Auto Backup" "$up/Operating System/Other" || return
	$rm "$pp/Media/Other/Picasa/Uninstall.lnk" || return
	$rm "$pd/Picasa 3.lnk" || return
	$makeShortcut "$P32/PicasaStarter/PicasaStarter.exe" "$pp/Media/Other/Picasa/Picasa Starter" || return

	echot "Tools, Options
- General
	- Check Single-click to exit Edit View
	- Delete from disk without confirmation
	- Check Remove from album without confirmation
- E-Mail, E-mail program=Use my Google account
- File Types, select .PNG
- Name Tags, check Store name tags in photo"	
	picasa || return
	pause
}

fsviewInstall() { FastStoneImageViewerInstall; }
FastStoneImageViewerInstall()
{
	printf "**************************************************\n* FastStone Image Viewer\n**************************************************\n"

	run "shareware/FastStoneImageViewer/setup/FSViewerSetup53.exe" || return

	echo "Updating icons..."
	$rmd "$pp/FastStone Image Viewer" || return
	$mv "$pd/FastStone Image Viewer.lnk" "$pp/Media" || return

		echot "Settings, Settings (F12)
	- Viewer
		- uncheck Confirm on ESC exit
		- uncheck Confirm on overwriting files
		- uncheck Auto-Load next image in Crop Board
		- Single File Deleted to=Recyle-Bin, No Confirmation
	- Dual Monitor, check "Preview" on the secodary monitor
	- Associations, Select All
	- Favorites, Add, P:(\\NAS\Photo), Display Name=NAS"
	fsview start || return
}

irfanInstall() { IrfanViewInstall; }
IrfanViewInstall()
{
	printf "**************************************************\n* IrfanView\n**************************************************\n"
	
	run "shareware/IrfanView/setup/iview451_x64_setup.exe" || return
	run "shareware/IrfanView/setup/irfanview_plugins_436_setup.exe" || return
	
	echo "Updating icons..."
	mergeDir "$up/IrfanView" "$pp/Media/Other" || return
	$rm "$ud/IrfanView 64.lnk" || return
	$rm "$ud/IrfanView 64 Thumbnails.lnk" || return
}

CalibreInstall()
{
	printf "**************************************************\n* Calibre\n**************************************************\n"
	[[ "$PLATFORM" == "win" ]] && echo "- Advanced, uncheck Add install directory to path"

	local v=2.57.1 # http://calibre-ebook.com/download
	run "shareware/Calibre/setup/" -p "calibre-64bit-$v.msi" "calibre-$v.dmg" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir --rename "$pp/calibre 64bit - E-book Management" "$ao/calibre" || return
		$rm "$pd/calibre 64bit - E-book management.lnk" || return
	fi

	echot "\
	- choose a location for your books=\\nas\home\documents\data\books
	- Manufacturers=Amazon, Devices=Kindle PaperWhite
	- E-Book Viewer, Configure, General, Page Flip options, Page flip duration=disabled
	- Notes: 
	  - Organizes library folders by <author>/<book> on import or metadata change
	  - Search uses regular expressions: not mobi and not pdf and not azw
	  - Import content from the download directory using the Add books button (content
	    is copied to the ebook location)"
}

Calibre2opdsInstall()
{
	printf "**************************************************\n* calibre2opds\n**************************************************\n"
	run "shareware/Calibre/calibre2opds/setup/calibre2opds-3.3-253.zip" "$P/calibre2opds" || return # http://calibre2opds.com/downloads/

	echo "Updating icons..."
	$makeShortcut "$P/calibre2opds/rungui.cmd" "$pp/Media/calibre2opds - OPDS Catalog Generator" "-" "" "" min || return
	# cmd "/c /"$P/calibre2opds/rungui.cmd/""  "" 
	# --workingdir="$(utw "$P/calibre2opds")"
}

KindleInstall()
{
	printf "**************************************************\n* Kindle\n**************************************************\n"
	run "other/Amazon/Kindle/setup/KindleForPC-installer-1.16.44025.exe" || return # http://www.amazon.com/gp/kindle/mac/download http://www.amazon.com/gp/kindle/pc/download
	run "other/Amazon/Kindle/converter/Kindle DRM Removal v4.16.525.exe" || return # http://www.ebook-converter.com/kindle-drm-removal.htm

	echo Creating data folders...
	makeDir "$udata/Kindle" || return
	makeDir "$udata/eBook Converter" || return
	makeDir "$udoc/eBook Converter" || return
	$hide "$udoc/eBook Converter" || return

	echo "Updating icons..."
	mergeDir "$pp/Amazon" "$ao" || return
	mergeDir "$up/Amazon" "$ao" || return
	mergeDir --rename "$ao/Amazon/Amazon Kindle" "$ao/Amazon/Kindle" || return
	$rm "$pd/Kindle.lnk" || return
	$rm "$ud/Kindle.lnk" || return
	$rm "$ao/Amazon/Kindle/Uninstall Kindle.lnk" || return
	
	mergeDir "$pp/eBook Converter" "$ao" || return

	echot "\
Kindle for PC
- Tools, Options
  - General, uncheck Automatically install updates
  - Content, Change Folder, data/Kindle

- Kindle DRM Reoval
  - Output Option, Set Output Folder, Documents/data/Kindle DRM
  - Kindle, Kindle Serial Number=NNN"
	start "https://www.amazon.com/gp/digital/fiona/manage?ie=UTF8&ref_=sv_kinc_7&signInRedirect=1&#manageDevices"
	kindle start || return
	kindle decrypt || return
}

HarmonyRemoteInstall()
{
	printf "**************************************************\n* Harmony Remote\n**************************************************\n"
	run "Logitech/Harmony Remote/LogitechHarmonyRemote7.7.0-WIN-x86.exe" || return # http://www.logitech.com/en-us/440/6441?section=downloads&bit=&osid=14

	echo "Updating icons..."
	mergeDir "$pp/Logitech" "$ao" || return
	$rm "$pd/Logitech Harmony Remote Software 7.lnk" || return
}

VeraCryptInstall()
{
	printf "**************************************************\n* VeraCrypt\n**************************************************\n"
	local v="1.16" # https://veracrypt.codeplex.com/wikipage?title=Downloads

	run "shareware/VeraCrypt/setup/" -p "VeraCrypt Setup $v.exe" "VeraCrypt_${v}.dmg" "veracrypt-$v-setup" || return 

	makeDir "$UserHome/Documents/data/VeraCrypt" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		mergeDir "$pp/VeraCrypt" "$ao" || return
		$rm "$pd/VeraCrypt.lnk" || return
	fi

	echot "\
- Settings, Hot Keys...
	- Mount Favorite Volumes - Control+Shift+Alt+F2
	- Dismount All - Control+Shift+Alt+F3
	- Force Dismount All, Wipe Cache & Exit - Control+Shift+Alt+F4
- Settings, Preferences
	- Uncheck Preserve modification timestamp of file containers
	- Check Cache passwords in driver memory
	- Uncheck Wipe cached passwords on auto-dismount and exit
- Select File..., data/VeraCrypt, personal.tc, Mount
- Favorites, Add Mounted Volumes to Favorites...
	- Label of selected favorite volume=Personal"
	#start 4ard VeraCrypt start
}

FLuxInstall()
{
	printf "**************************************************\n* f.lux\n**************************************************\n"
	run "shareware/f.lux/" -p "flux-setup.exe" "Flux.zip" "" || return # http://justgetflux.com/	

	echo "Updating icons..."
	mergeDir "$up/Flux" "$up/Operating System/Other" || return

	echo "Updating registry..."	
	$registry delete "urun/f.lux" # "C:\Users\jjbutare\AppData\Local\FluxSoftware\Flux\flux.exe" /noshow

	echot "\
- Location: Search
- Transition: Slow
- check Start F.lux at Login"
	[[ "$PLATFORM" == "mac" ]] && { start "/Applications/Flux.app" || return; }
}

ParallelsDesktopInstall()
{
	printf "**************************************************\n* Parallels Desktop\n**************************************************\n"

	# http://www.parallels.com/downloads/desktop/
	run "platform/mac/Parallels Desktop/setup/ParallelsDesktop-15.1.4-47270.dmg" || return

	echo "Updating icons..."
	$rm "$la\com.parallels.mobile.prl_deskctl_agent.launchagent.plist" || return
	$rm "$ula\com.parallels.mobile.startgui.launchagent.plist" || return

	echot "\
- Preferences
	- Shortcuts
		- System Shortcuts, Send system shortcuts=Always
		- Profile=Windows Custom - based on Windows, uncheck all
		add cmd-down=Ctrl+End cmd-up=Ctrl+Home ctrl-option-right=Win+Right 
		ctrl-option-left=Win+Left
- Virtual Machine, Configure...
	- Options
		- Startup and Shutdown, On VM Shutdown=Close Window
		- Applications
			- check Show Dock icons in Coherence only
			- uncheck Dock icons bounce to alert
		- Full Screen, check Use all displays in full screen
	- Hardware
		- Mouse & Keyboard, uncheck Mouse pointer sticks at window edges
		- Network 1, Type=Bridge, Default adapter
	- Security, check Do not back up virtual machine"
}

chocolateyInstall()
{
	printf "**************************************************\n* choclatey\n**************************************************\n"
	# installs: user environment path=c:\Chocolatey\bin, ChocolateyInstall=c:\Chocolatey
	start --wait cmd /c powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" "&&" pause
}

mosaicoInstall()
{
	printf "**************************************************\n* Mosaico\n**************************************************\n"
	echo "- uncheck Launch Mosaico"

	run "Soulid Studio/Mosaico/setup/Mosaico Setup v1.9.0.0.exe" || return # http://www.soulidstudio.com/download/

	echo "Updating icons..."
	mergeDir "$pp/Mosaico" "$oo" || return

	echo "Updating registry..."	
	$registry delete "urun/Mosaico" # C:\Program Files (x86)\Mosaico\mosaico.exe

	echot "\
- Try Mosaico for Free!
- unselect Auto Place
- Settings
	- uncheck Always on top of other windows
	- uncheck Display info message when reduced to system tray
	- check Start minimized to system tray
	- uncheck Start with "auto place" turned on
	- uncheck Tabify when not active
	- Show quick guide at startup"
	mosaico start
}

ccInstall() { CreativeCloudInstall; }
CreativeCloudInstall()
{
	local copyLocal

	printf "**************************************************\n* Adobe Creative Cloud\n**************************************************\n"
	
	# https://creative.adobe.com/products/creative-cloud
	IsPlatform win && copyLocal="--copy-local"
	run "other/Adobe/Creative Cloud/" -p "Creative_Cloud_Set-Up.exe" "Creative_Cloud_Installer.dmg" "" $copyLocal || return

	CreativeCloud start || return
	echot "Install: Acrobat"
	pause

	IsPlatform mac && { duti -s com.adobe.Acrobat.Pro .pdf all || return; }	
	ccIcons		
}

ccIcons()
{
	! IsPlatform win && return
	makeDir "$pp/Media/Other/Adobe" || return
	$mv "$pp/Adobe"*".lnk" "$pp/Media/Other/Adobe" >& /dev/null
	$mv "$pd/Adobe"*".lnk" "$pp/Media/Other/Adobe" >& /dev/null

	$registry 32 delete "run/Adobe Creative Cloud" # "C:\Program Files (x86)\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe" --showwindow=false --onOSstartup=true
	$registry 32 delete "run/Acrobat Assistant 8.0" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\Acrotray.exe"
	$registry delete "run/AdobeGCInvoker-1.0" # "C:\Program Files (x86)\Common Files\Adobe\AdobeGCClient\AGCInvokerUtility.exe"
	$registry delete "urun/Adobe Acrobat Synchronizer" # "C:\Program Files (x86)\Adobe\Acrobat DC\Acrobat\AdobeCollabSync.exe"

	$registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/" # Desktop Creative Cloud icon
	$registry set "HKCU/Software/Classes/CLSID/{0E270DAA-1BE6-48F2-AC49-30EDF67ECDE9}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return # Desktop Creative Cloud icon

	makeLink --merge "$udata/app/Creative Cloud Files" "$WIN_HOME/Creative Cloud Files" || return
	makeLink --merge --hide "$udata/app/Adobe" "$udoc/Adobe" || return
}

ProxifierInstall()
{
	printf "**************************************************\n* Proxifier\n**************************************************\n"
	run "network/Proxifier/setup/" -p "ProxifierSetup.exe" "Proxifier.app.zip" "" || return # http://www.proxifier.com/download.htm https://intelpedia.intel.com/Proxifier


	findFile "Proxifier/profiles/Intel Custom.ppx" || return
	clipw "$file" || return	
	echot "\
- File, Import, <paste>"
}

IntuosProInstall()
{
	printf "**************************************************\n* Intuos Pro\n**************************************************\n"
	run "other/Intuos/Pro/setup/WacomTablet_6.3." -p "16-2.exe" "15-3.dmg" "" || return # http://us.wacom.com/en/support/drivers/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$pp/Wacom Tablet" "$pp/Media/Other" || return
	fi
}

DiskInventortyXInstall()
{
	printf "**************************************************\n* Disk Inventory X\n**************************************************\n"
	run "shareware/Disk Inventory X" -p "" "DIX1.0Universal.dmg" "" || return # http://www.derlien.com/downloads/index.html
}

SevenZip()
{
	printf "**************************************************\n* 7-Zip\n**************************************************\n"
	
	# http://www.7-zip.org/download.html
	run "shareware/7-Zip/setup/7z1900-x64.exe" --elevate || return

	# Update bin files
	$cp "$P/7-zip/7-zip.chm" "$DATA/platform/win" || return
	$cp "$P/7-zip/7z.exe" "$P/7-zip/7z.dll" "$DATA/platform/win" || return

	echo "Updating icons..."
	mergeDir "$pp/7-Zip" "$ao" || return

	clipw "$(utw "$P/Sublime Text 3/sublime_text.exe")" || return
	echot "\
- Tools, Options
	- System, above $USER click +
	- Editor
 		- View=Editor=<paste>
		- Diff=C:\Program Files\Beyond Compare 4\BComp.exe
	- Settings, check Show system menu"
  "$P/7-Zip/7zFM.exe" || return
}

PaintNetInstall()
{
	printf "**************************************************\n* paint.net\n**************************************************\n"
	run "shareware/paint.net/setup/paint.net.4.0.6.install.exe" || return # http://www.getpaint.net/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/paint.net.lnk" "$pp/Media" || return
		$rm "$pd/paint.net.lnk" || return
	fi
}

FiddlerInstall()
{
	printf "**************************************************\n* Fiddler\n**************************************************\n"

	# http://www.telerik.com/fiddler
	run "other/Telerik/Fiddler/" -p "Fiddler Everywhere 0.10.2.exe" "fiddler-mac.zip" "fiddler-linux.zip" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$up/Fiddler Everywhere.lnk" "$up/Development" || return
		$rm "$ud/Fiddler Everywhere.lnk" || return
	fi
}

LinqPadInstall()
{
	printf "**************************************************\n* LINQPad\n**************************************************\n"
	run "shareware/DOT.NET/LinqPad/LINQPad5Setup.exe" || return # https://www.linqpad.net/Download.aspx

	echo "Moving data folders..."
	makeDir "$udata/LINQPad" || return
	makeLink --merge --hide "$udata/LINQPad" "$udoc/LINQPad Queries" || return

	echo "Updating icons..."
	$mv "$ud/LINQPad 5.lnk" "$pp/Development/DotNet" || return
	$rmd "$pp/LINQPad" || return
}

MusicBeeInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* MusicBee\n**************************************************\n"
	run "shareware/MusicBee/setup/MusicBeeSetup_3_0_Update1.exe" || return # http://getmusicbee.com/download.html

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/MusicBee" "$pp/Media/Other" || return
		$rm "$ud/MusicBee.lnk" || return
	fi

	echot "\
- Cancel"
}

TidalInstall()
{
	printf "**************************************************\n* TIDAL\n**************************************************\n"
	run "TIDAL/TIDALSetup." -p "exe" "dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		mergeDir "$up/TIDAL" "$up/Media/Other" || return
		$rm "$ud/TIDAL.lnk" || return
	fi
}

OpcScoutInstall()
{
	printf "**************************************************\n* OPC Scout\n**************************************************\n"
	run "Siemens/setup/OPCScoutV10.zip" "$P32/OPCScoutV10" || return

	echo "Updating icons..."
	MakeShortcut "$P32/OPCScoutV10/OPCScoutV10.exe" "$pp/Development/OPC Scout.lnk" || return	
}

MatrikonOpcSimulatorInstall()
{
	printf "**************************************************\n* Matrikon OPC Simulator\n**************************************************\n"
	run "Matrikon/setup/MatrikonOPCSimulation.EXE" || return

	echo "Updating icons..."
	mergeDir "$pp/MatrikonOPC" "$up/Development/Other" || return
}
	
GrayboxOpcInstall()
{
	printf "**************************************************\n* Graybox OPC \n**************************************************\n"
	run "Graybox/setup/gbopcsim18.msi" || return # http://gray-box.net/opc_simulator.php

	echo "Updating icons..."
	mergeDir "$pp/Graybox" "$up/Development/Other" || return
}

GreenShot()
{
	printf "**************************************************\n* GreenShot\n**************************************************\n"

	# http://getgreenshot.org/downloads/
	run "shareware/Greenshot/" -p "Greenshot-INSTALLER-1.2.10.6-RELEASE.exe" "1103915944" "" /silent || return

	if IsPlatform win; then
		mergeDir "$pp/GreenShot" "$oo" || return
		$registry delete "run/Greenshot" # C:\Program Files\Greenshot\Greenshot.exe

	elif IsPlatform mac && askP "Configure GreenShot"; then
		echo "System Preferences, Security & Privacy, Screen Recording, check Greenshot"
		macAppOpen "$1" || return
		pause
	fi

	return 0
}

PartitionAssistantInstall()
{
	printf "**************************************************\n* Partition Assistant\n**************************************************\n"
	
	# https://www.aomeitech.com/pa/professional.html?ref=en.nav.partition-manager
	run "platform/win/AOMEI/Partition Assistant/PAssist_ProDemo.exe" --elevate || return 

	mergeDir --rename "$pp/AOMEI Partition Assistant" "$oo/Partition Assistant" || return
	$ren "$oo/Partition Assistant/AOMEI Partition Assistant Demo Edition "*".lnk" "$oo/Partition Assistant/Partition Assistant.lnk" || return
	$rm "$pd/AOMEI Partition Assistant"*".lnk" || return
}

TigerVnc()
{
	printf "**************************************************\n* TigerVNC\n**************************************************\n"
	echot "- uncheck all Server configuration options"

	# ​https://github.com/TigerVNC/tigervnc/releases
	run "shareware/TigerVNC/" -p "tigervnc64-1.8.0.exe" "" "" || return

	mergeDir --rename "$pp/TigerVNC 64-bit" "$oo/TigerVNC" || return
}

TidyTabsInstall() 
{ 
	printf "**************************************************\n* TidyTabs\n**************************************************\n"
	
	# https://www.nurgo-software.com/pricing/tidytabs
	run "platform/win/NURGO/TidyTabs.msi" || return

	mergeDir "$pp/TidyTabs" "$oo" || return
	$registry delete "urun/TidyTabs" || return; # C:\Program Files (x86)\TidyTabs\TidyTabs.Daemon.exe
	TidyTabs profile restore default || return
}

AquaSnapInstall()
{
	printf "**************************************************\n* AquaSnap\n**************************************************\n"

	# https://www.nurgo-software.com/pricing/aquasnap
	run "platform/win/NURGO/AquaSnap.msi" || return

	mergeDir "$pp/AquaSnap" "$oo" || return
	$registry delete "urun/AquaSnap" || return; # C:\Program Files (x86)\AquaSnap\AquaSnap.Daemon.exe
	AquaSnap profile restore default || return
}

Geekbench()
{
	printf "**************************************************\n* Geekbench\n**************************************************\n"
	
	# https://www.geekbench.com/
	local v=5.1.1
	run "other/Geekbench/" -p "Geekbench-$v-WindowsSetup.exe" "Geekbench-$v-Mac.zip" "Geekbench-$v-Linux.tar.gz" --elevate || return 

	if IsPlatform win; then
		echo "Updating icons..."
		$ren "$up/Geekbench 5/Geekbench 5.lnk" "$pp/Applications/Geekbench.lnk" || return
		$rmd "$up/Geekbench 5" || return
	fi

	return 0
}

OneDrive()
{
	echo "Configuring OneDrive..."

	SetVar --delete OneDrive || return
	SetVar --delete OneDriveConsumer || return

	$registry delete "urun/OneDrive" # "C:\Users\jjbutare\AppData\Local\Microsoft\OneDrive\OneDrive.exe" /background
	$registry delete "HKCU/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/Desktop/NameSpace/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/" # Desktop One Drive icon
	$registry set "HKCR/CLSID/{018D5C66-4533-4307-9B53-224DE2ED1FE6}/System.IsPinnedToNameSpaceTree" REG_DWORD 0 || return # Desktop One Drive icon

	$mv "$pp/OneDrive"*".lnk" "$pp/Applications/Accessories" || return
	$mv "$up/OneDrive"*".lnk" "$pp/Applications/Accessories" || return
}

tribler()
{
	printf "**************************************************\n* Tribler\n**************************************************\n"

	# https://www.tribler.org/
	run "shareware/tribler/Tribler_7.2.2_x64.exe" || return

	mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
	mergeDir "$up/Tribler" "$oo" || return
	$rm "$pd/VLC media player.lnk" || return
	$rm "$ud/Tribler.lnk" || return

		echot "\
- settings
	- Save files to=C:\Users\jjbutare\Downloads
	- uncheck Family filter / Download anonymously / Encrypted anonymous seeding"
}

TrueImage()
{
	printf "**************************************************\n* True Image\n**************************************************\n"

	# https://www.acronis.com/en-us/support/updates/index.html
	run "acronis/True Image/setup/AcronisTrueImage2019." -p "exe" "dmg" "" || return

	mergeDir "$pp/Acronis" "$oo" || return
	$rm "$pp/Acronis True Image.lnk" || return
	$rm "$pd/Acronis True Image.lnk" || return
	$registry delete "run/Acronis Scheduler2 Service" # C:\Program Files (x86)\Common Files\Acronis\Schedule2\schedhlp.exe
	$registry 32 delete "run/AcronisTibMounterMonitor" # C:\Program Files (x86)\Common Files\Acronis\TibMounter\TibMounterMonitor.exe
	$registry 32 delete "run/TrueImageMonitor.exe" # C:\Program Files (x86)\Acronis\TrueImageHome\TrueImageMonitor.exe

	echot "\
- Active Protection, off
- settings, Mobile backup location=d:\backup"
}

ToDoBackup()
{
	printf "**************************************************\n* ToDo Backup\n**************************************************\n"

	# https://www.easeus.com/backup-software/personal.html
	run "platform/win/EaseUS/ToDo Backup Home/tbh_trial.exe" || return
	
	mergeDir --rename "$pp/EaseUS Todo Backup 11.5" "$oo/ToDo Backup" || return
	$rm "$pd/EaseUS Todo Backup Home 11.5.lnk" || return
}

teraCopyInstall()
{
	printf "**************************************************\n* TeraCopy\n**************************************************\n"
	
	# https://codesector.com/teracopy
	run "platform/win/TeraCopy/teracopy.exe" || return
}

ParagonExtFs()
{
	printf "**************************************************\n* Paragon ExtFS \n**************************************************\n"

	# http://www.paragon-drivers.com/extfs-windows/
	run "platform/win/Paragon/ExtFS/Paragon-608-PEU_WinInstallSN-4.3.852.msi" || return
	
	mergeDir --rename "$pp/Paragon ExtFS for Windows" "$oo/Paragon ExtFS" || return
	$rm "$pd/Paragon ExtFS for Windows.lnk" || return

	service manual "ParagonMounter" || return # does not allow computer to sleep
}

nordVpnInstall()
{
	printf "**************************************************\n* NordVPN\n**************************************************\n"

	# https://nordvpn.com/download/
	run "network/NordVPN/" -p "NordVPNSetup.exe" "mac" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		$rmd "$pp/NordVPN" || return
		mv "$pd/NordVPN.lnk" "$pp/Applications" || return
		$registry 32 delete "urun/NordVPN" || return # C:\Program Files (x86)\NordVPN\NordVPN.exe
	fi
}

cleanMyInstall()
{
	printf "**************************************************\n* Clean My PC\n**************************************************\n"
	
	# https://macpaw.com
	run "other/MacPaw/Clean My/" -p "CleanMyPC.exe" "CleanMyMacX.dmg" --pause # returns error even if the setup is successful

	if IsPlatform mac; then
		macAppConfigure "CleanMyMac X" || return
	elif IsPlatform win; then
		mergeDir "$pp/CleanMyPC" "$oo" || return
		$rm "$pd/CleanMyPC.lnk" || return
	fi

	return 0
}

closeAllWindowsInstall()
{
	printf "**************************************************\n* Close All Windows\n**************************************************\n"

	# https://www.ntwind.com/software/closeall.html
	run "platform/win/NTwind/CloseAll_4.8-setup.exe" --elevate || return

	echo "Updating icons..."
	mergeDir "$pp/CloseAll" "$oo" || return
	$rm "$pd/CloseAll.lnk" || return
}

altTabTerminatorInstall()
{
	printf "**************************************************\n* Alt-Tab Terminator\n**************************************************\n"
	
	# https://www.ntwind.com/software/alttabter.html
	run "platform/win/NTwind/AltTabTer_4.8-setup.exe" --elevate || return

	mergeDir "$pp/Alt-Tab Terminator" "$oo" || return
	$rm "$pd/Alt-Tab Terminator.lnk" || return
	$registry delete "urun/Alt-Tab Terminator" # "C:\Program Files\Alt-Tab Terminator\AltTabTer64.exe" /startup

	echot "\
Settings...
- Uncheck Autostart on Windows startup
- Hamburger, check Replace Alt-Tab, uncheck Replace Win-Tab"
	app AltTabTerminator || return
}

hiddenStartInstall()
{
	printf "**************************************************\n* Hidden Start\n**************************************************\n"

	# https://www.ntwind.com/software/hstart.html
	run "platform/win/NTwind/Hstart_4.7-setup.exe" --elevate || return 

	mergeDir "$pp/Hidden Start" "$oo" || return
	$rm "$pd/Hidden Start.lnk" || return

	HiddenStartFinal || return
}

HiddenStartFinal()
{
	echo "Adding Hidden Start license..."
	if [[ ! "$(registry 32 get "HKLM/SOFTWARE/Alexander Avdonin/Hidden Start/RegName")" ]]; then
			registry import "$setupFiles/HiddenStart.reg" || return
			pause
	fi

	echo "Adding Hidden Start scheduled task..."
	if ! schtasks.exe | egrep HstartUAC-x64 >& /dev/null; then
		start --wait hstart64.exe /nouac /wait ""cmd" /c echo Hidden Start 64 scheduled task is setup && pause"
	fi

	return 0
}

quickenInstall()
{
	printf "**************************************************\n* Quicken\n**************************************************\n"

	# https://www.quicken.com/activate
	run "other/Quicken/" -p "Quicken.exe" "Quicken.dmg" "" --elevate || return

	mergeDir --rename "$pp/Quicken" "$ao/Quicken"
	$rm "$pd/Quicken.lnk" || return
}

quickBooks()
{
	printf "**************************************************\n* Quick Books\n**************************************************\n"

	run "Intuit/QuickBooks-Setup.exe" || return

	$mv "$ud/QuickBooks.lnk" "$pp/Applications" || return
	$mv "$up/QuickBooks.lnk" "$pp/Applications" || return
}

AxCrypt()
{
	printf "**************************************************\n* AxCrypt\n**************************************************\n"
	run "AxCrypt/setup/" -p "AxCrypt-2.1.1573.0-Setup.exe" "AxCrypt-Mac-2.2.578.0.pkg" || return # https://www.axcrypt.net/download/

	if IsPlatform win; then	
		mergeDir "$pp/AxCrypt" "$oo" || return
		makeLink --merge --hide "$udata/AxCrypt" "$udoc/My AxCrypt" || return
		makeLink --merge --hide "$uhome/DropBox/data/AxCrypt" "$uhome/DropBox/My AxCrypt" || return
		makeLink --merge --hide "$uhome/OneDrive/documents/data/AxCrypt" "$uhome/OneDrive/My AxCrypt" || return
	fi

	return 0
}

taskLayoutInstall()
{
	printf "**************************************************\n* TaskLayout\n**************************************************\n"

	# http://www.systemgoods.com/
	run "platform/win/SystemGoods/TaskLayout-v0.7.0.5-Installer.exe" || return
}

vlc()
{
	printf "**************************************************\n* VLC Media Player\n**************************************************\n"

	# https://www.videolan.org/vlc/
	run "shareware/VideoLAN/" -p "vlc-3.0.4-win64.exe" "mac" || return

	if IsPlatform win; then	
		echo "Updating icons..."
		mergeDir "$pp/VideoLAN" "$pp/Media/Other" || return
		$rm "$pd/VLC media player.lnk" || return
	fi

	return 0
}

StandardNotes()
{
	printf "**************************************************\n* Standard Notes\n**************************************************\n"

	local v="3.0.19" # https://standardnotes.org/
	run "shareware/Standard Notes/" -p "standard-notes-setup-$v.exe" "standard-notes-$v-mac.zip" "standard-notes-$v-x86_64.AppImage" || return

	if IsPlatform linux; then
		cp "$InstallDir/shareware/Standard Notes/appimagekit-standard-notes.desktop" ~/.local/share/applications || return
	elif IsPlatform mac; then
		macAppConfigure "Standard Notes" || return
	elif IsPlatform win; then
		$mv "$ud/Standard Notes.lnk" "$up/Applications" || return
		$rm "$up/Standard Notes.lnk" || return
		makeDir "$udata/app/Standard Notes" || return
		makeLink --merge --hide "$udata/app/Standard Notes/backups" "$WIN_HOME/Standard Notes Backups" || return
	fi

	return 0
}

plex()
{
	printf "**************************************************\n* PLEX\n**************************************************\n"

	# https://www.plex.tv/media-server-downloads/
	run "other/PLEX/" -p "Plex-1.15.1.1358-43550df5-x86_64.exe" "Plex-1.11.0.1215-1d8c460c-x86_64.zip" || return 
	run "other/PLEX/" -p "PlexMediaServer-1.20.0.3125-9661fc77c-x86.exe" "PlexMediaServer-1.18.8.2468-5d395aa9d-x86_64.zip" "plexmediaserver_1.18.8.2468-5d395aa9d_amd64.deb" || return

	if [[ "$PLATFORM" == "win" ]]; then
		mergeDir "$pp/Plex" "$pp/Media/Other" || return
	fi

	return 0
}

LinkShellExtension()
{
	printf "**************************************************\n* Link Shell Extension\n**************************************************\n"

 	# http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.htm	
	run "platform/win/Link Shell Extension/" -p "HardLinkShellExt_X64.exe" "mac" "" || return

	if IsPlatform win; then	
		mergeDir "$up/Link Shell Extension" "$oo" || return
	fi

	return 0
}

RightClickEnhancer()
{
	printf "**************************************************\n* Right Click Enhancer\n**************************************************\n"
	
	# https://rbsoft.org/downloads/right-click-enhancer/
	run "platform/win/RBSoft/Right Click Enhancer/Right.Click.Enhancer.Professional.Setup.exe" --elevate || return

	mergeDir "$up/Right Click Enhancer Professional" "$oo" || return
	$rm "$ud/Right Click Enhancer Professional.lnk" || return	

	echot "\
Setup
- Registration, Registration
- Right Click Editor, Action, Install Customize this Menu
Definitions
- normal entries - static entries, normally no submenus or icons
- shell extensions - dynamic entries (from a DLL) , typically shown with an icon
Instructions
- shift-right-click - view hidden items
- shift-right-click, Customize this Menu - customize the right click menu which 
  shows all normal and shell extensions fo the selected object together
- Right Click Editor, click top-left picture to toggle between normal entries and shell extensions
- EPP is Windows Defender, mscore (.NET programs)"
}

homebridge()
{
	local plugins="homebridge-neato homebridge-vera homebridge-webos-tv"

	printf "**************************************************\n* Homebridge\n**************************************************\n"

	! nodeInstalled && { i nodejs || return; }
	
	if ! InPath homebridge; then
		echo "Installing homebridge..."
		sudo npm install -g --unsafe-perm homebridge homebridge-config-ui-x homebridge-script homebridge-wol || return
	fi

	packages g++ gcc make python || return

	RunPlatform homebridge || return

	ask "Install other packages" && { sudo npm install -g $plugins || return; }
	
	return 0
}

homebridgeRaspbian()
{
	if ! [[ -f /etc/systemd/system/homebridge.service ]]; then
		sudo hb-service install --user homebridge || return
	fi

	if ! [[ -e ~/.homebridge ]]; then
		echo "Linking /var/lib/homebridge to ~/.homebridge to enable $USER to run homebridge from the command line..."
		ln -s -T /var/lib/homebridge ~/.homebridge
	fi

	if ask "Configuring Wake On Lan plugin"; then
		InPath setcap && { sudo setcap cap_net_raw=pe /usr/bin/node || return; }
		[[ -f /sbin/shutdown ]] && { sudo chmod +s /sbin/shutdown || return; }
	fi

	if ! grep "/usr/local/data/bin" /etc/default/homebridge >& /dev/null && ask "Configuring SSH plugin"; then
		printf "\n"'PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/data/bin"'"\n" | sudo tee -a /etc/default/homebridge
	fi

	if ask "Change homebridge password"; then
		sudo passwd homebridge || return
	fi
	
	if [[ ! -d ~homebridge/.ssh ]] && ask 'Enable passwordless ssh for homebridge account (for homebridge-ssh and homebridge-script)'; then
		sudo mkdir ~homebridge/.ssh || return

		sudo cp ~/.ssh/config ~/.ssh/known_hosts ~homebridge/.ssh || return
		sudo chown homebridge ~homebridge/.ssh/config ~homebridge/.ssh/known_hosts || return

		sudo ~/.ssh/id_ed25519 ~/.ssh/id_rsa ~homebridge/.ssh || return
		sudo chown homebridge ~homebridge/.ssh/known_hosts ~homebridge/.ssh/id_ed25519 ~homebridge/.ssh/id_rsa || return
		sudo ssh-keygen -p -N '' -f ~homebridge/.ssh/id_ed25519 || return
		sudo ssh-keygen -p -N '' -f ~homebridge/.ssh/id_rsa || return

		# test ssh connection
		su homebridge -c 'ssh '$USER'@'$HOSTNAME' ls > /dev/null' || return
	fi

	return 0
}

NodeRed()
{
	printf "**************************************************\n* node-red\n**************************************************\n"
	! nodeInstalled && { i nodejs || return; }
	
	if ! InPath node-red; then
		echo "Installing node-red..."
		bash <(curl -sL https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/update-nodejs-and-nodered) || return
	fi

	sudo systemctl enable nodered.service || return

	return 0
}

DiskImager()
{
	printf "**************************************************\n* Disk Imager \n**************************************************\n"
	run "shareware/other/win32diskimager-1.0.0-install.exe" || return # http://www.paragon-drivers.com/extfs-windows/

	echo "Updating icons..."
	mergeDir "$pp/Image Writer" "$oo" || return
}

discordInstall()
{
	printf "**************************************************\n* Discord\n**************************************************\n"

	# https://discordapp.com/download
	run "other/Discord/" -p "DiscordSetup.exe" "Discord.dmg" "discord-0.0.9.deb" || return
	
	mergeDir "$up/Discord Inc" "$up/Applications/Other" || return
	$rm "$ud/Discord.lnk" || return
	$registry delete "urun/Discord" # C:\Users\jjbutare\AppData\Local\Discord\app-0.0.305\Discord.exe --start-minimized
}

todoistInstall()
{
	printf "**************************************************\n* Todoist\n**************************************************\n"

	# https://todoist.com/downloads/
	run "Todoist/Todoist_for_Windows_Desktop_2_7_6.exe" || return
		
	mergeDir "$up/Todoist" "$up/Applications/Other" || return
	$rm "$ud/Todoist.lnk" || return
}

macDock()
{
	dockutil --move "Messages" --after "Safari" || return
	dockutil --move "Spark" --after "Messages" || return
	dockutil --move "Firefox" --after "Spark" || return
	dockutil --move "Notion" --after "Firefox" || return
	dockutil --move "iTerm" --after "Notion" || return
}

apptivate()
{
	printf "**************************************************\n* Apptivate\n**************************************************\n"

	# http://www.apptivateapp.com
	run "platform/mac/Apptivate/Apptivate.app.zip" || return

	if askP "Configure apptivate"; then
		echot "Add Item...
- iTerm, ctrl-cmd-3
- Firefox, ctrl-cmd-a
- Standard Notes, ctrl-cmd-n
- Sublime Text, ctrl-cmd-t"
		macAppOpen Apptivate || return
	fi

	return 0
}

BartenderInstall()
{
	printf "**************************************************\n* Bartender\n**************************************************\n"
	run "platform/mac/Bartender/Bartender 3.zip" || return # https://www.macbartender.com/
	bartender profile restore default || return
	macAppOpen "Bartender 3" || return
}

# Windows Store
Wallpaper4k() { storeInstall "Wallpaper 4K" "9PMS2CJBHCKJ"; }

# Mac Store
CarrotWeather() { storeInstall "CARROTweather" 993487541; }
DayOne() { storeInstall "Day One" 1055511498; }
LiveDesktop() { storeInstall "LiveDesktop" 846060286; }
Magnet() { storeInstall "Magnet" 441258766; }
pcalc() { storeInstall "PCalc" 403504866; }
spark() { storeInstall Spark 1176895641; }
speedtest() { storeInstall Speedtest 1153157709; }
WallpaperWizard() { storeInstall "Wallpaper Wizard" 1266674560; }
yoink() { storeInstall Yoink 457622435; }

JetBrains()
{
	printf "**************************************************\n* JetBrains\n**************************************************\n"
	
	local v="1.16.6067" # https://www.jetbrains.com/toolbox-app/
	run "other/JetBrains/toolbox/jetbrains-toolbox-$v." -p "exe" "dmg" "tar.gz" || return

	if IsPlatform win; then
		echo "Updating icons..."
		mergeDir "$up/JetBrains Toolbox" "$up/Development/other" || return
		mergeDir "$up/JetBrains" "$up/Development/other" || return
	fi

	if ask "Restore ReSharper profile"; then
		ReSharper profile restore default || return
	elif ask 'Configure ReSharper manually'; then
		echot "\
- ReSharper, Options
	- Keyboards & Menus, ReSharper keyboard scheme=ReSharper 2.x or IntelliJ IDEA, Apply Scheme
	- Environment, Editor, Editor Behavior, uncheck Use CamelHumps
	- Environment, IntelliSense
		- Autopopup, C#, Where value is expected, Do not display
		- Completion Appearance, check Show Member Signatures and Show Summary
	- Code Editing
			- Code Cleanup, Add, default
			- Check all except Embrace 'using' directives in region and Apply code body style
	- C#, Formattign Style
		- Blank Lines, Keep max blank lines=1 (2 places)
		- Line Breaks and Wrapping, Other, check Place simple method on single line
	- Tools
		- Unit Testing
			- Run up to 4 assemblies in parallel
			- Uncheck Save and restore Unit Test Sessions
			- Uncheck Wrap long lines in Unit Test Session output
		- External Sources=Navigation to Sources, check all
- Customize Keyboard (ctrl-shift-alt-k)
	- ReSharper.ReShartper_DuplicateText, Remove, Remove (free ctrl-d)
- notes: ctrl-n, <class>, click object, ctrl-b, Navigate to Decompiled Sources"
		VisualStudio start
	fi

	return 0
}

FileLocatorProInstall()
{
	printf "**************************************************\n* FileLocator Pro\n**************************************************\n"

	# https://www.mythicsoft.com/filelocatorpro/download/
	local v="2946" 
	run "platform/win/Mythicsoft/FileLocator Pro/setup/filelocator_x64_$v.msi" || return

	if [[ "$PLATFORM" == "win" ]]; then
		mergeDir "$pp/FileLocator Pro" "$oo" || return
	fi

	return 0
}

UltraMonInstall()
{
	printf "**************************************************\n* UltraMon\n**************************************************\n"

	# https://www.realtimesoft.com/ultramon/download.asp
	run "platform/win/UltraMon/UltraMon_3.4.1_en_x64.msi" || return

	if [[ "$PLATFORM" == "win" ]]; then
		$mv "$pp/UltraMon.lnk" "$pp/Applications" || return
		$rm "$pp/Startup/UltraMon.lnk" || return
	fi

	return 0
}

KarabinerInstall()
{
	printf "**************************************************\n* Karabiner-Elements\n**************************************************\n"
	run "platform/mac/Karabiner-Elements/Karabiner-Elements-12.10.0.dmg" || return # https://pqrs.org/osx/karabiner/
	KarabinerHelper profile restore default || return
	macAppOpen Karabiner-Elements || return
}

notionInstall()
{
	printf "**************************************************\n* Notion\n**************************************************\n"

	# https://www.notion.so/desktop
	run "other/notion/" -p "Notion Setup 2.0.8.exe" "Notion-2.0.7.dmg" || return

	if IsPlatform win; then
		$mv "$up/Notion.lnk" "$up/Applications" || return
		$rm "$ud/Notion.lnk" || return
	
	elif IsPlatform mac; then
		MakeDirOwner "$P/Notion.app" || return # must be writable otherwise prompted for invalid install
	fi

	return 0
}

ZoomInstall()
{
	printf "**************************************************\n* Zoom\n**************************************************\n"

	# https://zoom.us/support/download
	run "other/Zoom/" -p "ZoomInstallerFull.msi" "ZoomInstallOnly.pkg" --pause || return

	if IsPlatform mac; then
		mergeDir "$udoc/Zoom" "$udata/app" || return
	elif IsPlatform win; then
		mergeDir "$pp/Zoom" "$pp/Applications/Other" || return
		$rm "$pd/Zoom.lnk" || return
		$rm "$ud/Zoom.lnk" || return
	fi

	return 0
}

stamps()
{
	printf "**************************************************\n* Stamps.com\n**************************************************\n"

	run "other/stamps/Stamps.com.Connect.exe" --elevate || return

	if IsPlatform win; then
		$registry 32 delete "run/Stamps.com" # C:\Program Files (x86)\Stamps.com Connect\StampsPlugin.exe a
		mergeDir "$pp/Stamps.com Connect" "$pp/Applications/Other" || return
		$rm "$pd/Launch Stamps.com Connect.lnk" || return
	fi

	return 0
}

AjaSystemTest()
{
	printf "**************************************************\n* AJA System Test\n**************************************************\n"

	run "shareware/AJA System Test/" -p "AJA_SystemTest_12.5.0.msi" "" "" || return

	if IsPlatform win; then
		mergeDir "$pp/AJA" "$oo" || return
	fi

	return 0
}

deezerInstall()
{
	printf "**************************************************\n* Deezer\n**************************************************\n"
	IsPlatform win && run "9NBLGGH6J7VV" || run "other/Deezer/DeezerDesktop_4.18.60.dmg"
	return
}

TeamViewerInstall()
{
	printf "**************************************************\n* TeamViewer\n**************************************************\n"

	# https://www.teamviewer.com/en/download/
	run "other/TeamViewer/" -p "TeamViewer_Setup.exe" "TeamViewer.dmg" "teamviewer_15.5.3_amd64.deb" || return

	if [[ "$PLATFORM" == "win" ]]; then
		$mv "$pp/TeamViewer.lnk" "$oo" || return
		$rm "$pd/TeamViewer.lnk" || return
	fi

	return 0
}

EdgeDeflectorInstall()
{
	printf "**************************************************\n* EdgeDeflector\n**************************************************\n"

	# https://github.com/da2x/EdgeDeflector/releases
	run "shareware/other/EdgeDeflector_install.exe" --elevate || return
}

RectangleInstall()
{
	printf "**************************************************\n* Rectangle\n**************************************************\n"
	brew cask install rectangle || return # https://rectangleapp.com/
	rectangle profile restore default || return
}

main "$@"
