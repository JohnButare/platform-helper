#!/bin/bash
. function.sh || exit

# Applications (AppCore, IntelAppCore)
#
# AppCore: office FoxitReader InternetExplorer Chrome BrowserHomePage SilverlightPlayer
# IntelAppCore: VisionApp IntelSpeedDialer IntelBridgePlugIn
# Other: Office/365/13/10/Final/Converters/Connectors
# 	DesktopGadgets EverNote Omron Quicken SnagIt TouchPack WindowsLiveEssentials
# 	Acrobat BitPim Mirada ScreenSavers Smilebox Vonage ZoneTick 
# Book: Audible Kindle AdobeDigitalEditions MicrosoftReader Calibre calibre2opds
# Browser:  Firefox InternetExplorer FlashPlayer Xmarks SilverlightPlayer Xmarks Cooliris
# Clipboard: FreeClip
# Collaboration: Skype ooVoo Trillian Pidgin Yugma Lync
# Compression: WinZip 7Zip
# Download: BitTorrent LimeWire InternetDownloadAccelerator (IDA)
# Editor: sublime NotepadPP Emacs 
# Google: Chrome GoogleDesktop GoogleToolbar Gears GoogleCommandLine Picasa
# Intel:  IntelSpeedDialer IntelBridgePlugIn
# News: FeedDemon
# PDF: AdobeReader FoxIt PrimoPDF PDFzilla
# Security: LastPass TrueCrypt  PGP Eraser eWallet SecretAgent 
#
# Media (MediaCore)
#
# MediaCore: Audacity iTunes wmp ImageMagick JpegLosslessRotator Picasa HandBrake calibre calibre2opds AdobeDigitalEditions Plex
# Audio: AlbumCoverArtDownloader AmazonCloudPlayer Audacity EvilLyrics TotalRecorder Mp3tag
# Center: Plex
# DVD: AnyDVD CloneDvd ImgBurn
# Editing: AviDemux SonyVegas VideoStudio
# Music: Sonos
# Picture: AutoEnhance CoolPix Paint.NET Gimp ImageMagick JpegLosslessRotator EyeFi
# Player: iTunes Pandora PowerDVD WinDVD wmp QuickTime
# Video: HandBrake GraphEdit K-Lite WmpEncoder HdCodecPack CoreAVC HDHomeRun Comcast MediaCoder miro
# Visualizations: WhiteCap Aeon
# Other: Nero MceStandbyTool radioSHARK AirFoil Pictu#otionBrowser
#
# Game
#
# GameCore: Steam  PinnacleGameProfiler 
# Games: BioShock Crysis Doom Hearts
# Other: XboxWirelessReceiver GameJackal
#
# Development (DevCore, IntelDevCore)
#
# DevCore: iis ss SqlPromt BlueGriffon doxygen
# Platforms: .Net Java Android Asst
# 
# AsstDevCore: DevCore TortoiseSVN VisualSVN CruiseControlTray Telerik
# AndroidDevCore: android
# .NetDevCore: vs NUnit SilverlightSdk ReSharper .NetMemoryProfiler WebPlatformInstaller 
#   vs/10/08 vs10clients  WebMatrix
#   Telerik FxCop .NetSdk NDoc NAnt SnippetCompiler
#   Regulator Reflector IsapiRewrite ComponentOne  DundasChart Infragistics 
#   Packages: NugetPackageExplorer
# JavaDevCore: jdk JavaDoc JavaSource Eclipse Ant
#   EclipsePlugsIns: adClipsePlugin JBossTools
#   ManageEngine JProbe DjJava
# Revision Control: svn (TortoiseSVN, VisualSVN) git (GitExtensions TortoiseGit)
# Documentation: doxygen
# Debugging: DebuggingTools SymbolServer SourceServer LogParser
# Database: DBArtisan Toad ERstudio OracleDrivers MicrosoftDb2Drivers
#   SQL Server: ss/12/08r2/08/05 SsSamples SqlPrettyPrinter SqlPrompt
#   MySQL: MySqlWorkbench
# Languages: Perl Coldfusion Delphi
# Services: SoapUI
# Performance: dotTrace .NetMemoryProfiler
# Reporting: CrystalReportServer11 TableauReader
# Source  Control: TortoiseSVN
# Web Design: BlueGriffon Expression Fireworks Freehand Dreamweaver Flash Homesite
# Windows: WindowsSdk
# XML: XmlNotepad XmlSpy 
# Infrastructure: CloudFoundy
# Other: CruiseControlTray Saba QualityCenter SilverRun ProVision Perl Python AmberPoint WebTrends RoboHelp  WindowsMobileDev WindowsDriverKit
#
# Operating System
#
# OsCore: UnixCore pGina Sublime AutoHotKey CloneDrive SysInternals 7zip BeyondCompare
# UnixCore: cygwin bash ssh
# Other: environment ssd FileZilla SysInternals xxcopy Synology
#   FileTransferManager Synergy growl MaxiVista ExtensionColumn LinkShellExtension
# Unix: cygwin ssh bash
# Windows: OsUpdate BaselineSecurityAnalyzer TweakUI DirectX WindowsAdminTools WindowsDesktopSearch 
# Intel: Intel#oteAccess, IntelSsdToolbox
# Backup: Areca ConnectedNetworkBackup
# Benchmark: Sandra PerformanceTest
# Compare: BeyondCompare, WinMerge
# Defense: SecurityEssentials NortonAntiVirusCorporate VirusScan
# Defragmentation: Defraggler PerfectDisk MyDefrag
# Directory: ApacheDirectoryStudio
# Discovery: Bonjour
# Disk: DriveMonitor DiskDirector TrueImage TrueImageWorkstation OsSelector EasyBCD OsLoader HdTune
# Display: StarDock ObjectDock MaxiVista LogonStudio
# Explorer: BetterExplorer PreviewHandlerPack
# Human Interface: AutoHotKey  StrokeIt
# ISO: CloneDrive MagicIso Alcohol52 MagicDisc DaemonTools IsoRecorder
# Monitoring: Foglight
# Network: Fiddler WireShark newt Nmap DynamicDns DynamicDnsCheck HttpWatch OpenVPN
# Notification: Growl
# Platform: Java .Net A+dobeAIR
# Printing: AirPrint
# Registry: RUndelete RegCleaner 
# #ote Control: LogMeIn RealVNC UltraVNC VisionApp
# Security: pGina FingerprintReader FingerAuth ProtectorSuite PSI UpdateChecker
# Shell: PowerShell TakeCommand  TakeCommandPrepareImage
# Storage: GoogleDrive DropBox iCloud SugarSync
# Sync: gSyncit Easy2Sync
# Performance : PerformanceTest QCheck  
# Tuning:  SpeedFan ThinkPad FanController MotherboardMonitor
# UPS: PowerPanel
# Utility: NirSoftLauncher LiberKey
# Virtualization: VMwareWorkstation VMwareServer VMwarePlayer VirtualPc VirtualServer, VirtualBox
# Window: VistaSwitcher WinSplit
#
# Server
#
# ServerCore: iis ss12
# Micrsoft: SharePoint tfs10 tfs08
#
# Hardware
#
# Apple: AirPortExpress
# Gigabyte: GigabyteGaP35Dq6 EasyTune VgaEasyBoost
# Bluetooth: BroadcomBluetooth  LinkSysBluetooth IoGearBluetooth
# HP: Hp8560wLaptop
# Lenovo: LenovoLaptop, LenovoT400Laptop
# Intel: IntelRapidStorage  IntelProNetworkAdapter IntelSsdToolbox
#   IntelMotherboardUtilities IntelDesktopUtilities IntelExt#eTuningUtility IntelIntegratorAssistant
#   IntelDP67BG IntelP35 Intel865Perl 
# Microsoft: MicrosoftMouse
# RealTek: RealTekNic RealTekAudio 
# Other: AiCharger nVidia  PowerMixer Harmony#ote ViaEnvy24 IntelliTypePoint BrotherHl4070 EpsonV100 LogitechWebCam SetPoint
#    CreativeSoundBlasterXFi SeaTools MotorolaDroid

#
# Other
#
# Windows Mobile: WindowsMobileCore DeviceCenter PocketQuicken WindowsMobileReader DockWare AdobeReaderPpc

template()
{
	printf "**************************************************\n* App Name\n**************************************************\n"
	run "" || return

	echo "Updating icons..."
	$mergeDir "$pp/(dir)" "$ao" || return
	$mergeDir "$pp/(dir)" "$pp/Development/Other" || return
	$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
	$delFile "$pd/(prog).lnk" || return
}

TemplateFull()
{
	printf "**************************************************\n* App Name\n**************************************************\n"
	echot "- application infromation"

	echo "Updating icons..."
	$mergeDir "$pp/(dir)" "$pp/Development/Other" || return
	$mergeDir "$pp/(dir)" "$ao" || return
	$delFile "$pd/(prog).lnk" || return
	$mergeDir --rename "$pp/(dir)" "$ao/(new name)" || return
	$makeDir "$pp/Operating System/bash" || return
	mkshortcut "$installDir/bin/mintty.exe" -a="-" -n="$pp/Operating System/bash" || return

	echo "Updating registry..."	
	registry import "$install/AutoHotKey/setup/other/AutoHotkey-${architecture}.reg" || return
}

usage()
{
	echot "\
usage: install cd|install APP*
	Install programs
 	-s,--select					select the host with the installation files
	-h|--host	HOST 			specify the host with the installation files"
	exit $1
}

args()
{
	unset command apps host select
	originalArgs=( "$@" ) 
	while [ "$1" != "" ]; do
		case "$1" in
			-h|--host) host="$2"; shift;;
			-s|--select) select="--select";;
			-h|--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; } # command
				! IsOption "$1" && { apps+=( "$1" ); shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='install'
	[[ "$command" == "cd" && ${#apps[@]} != 0 ]] && UnknownOption "${apps[0]}"
	[[ "$command" == "apps" && ${#apps[@]} == 0 ]] && MissingOperand "APPS"
	args=("$@")
}

cdCommand()
{
	local dir="$(FindPublicDoc "data/install")" || return
	echo "$dir"
}

installCommand()
{
	! IsElevated && sudo mintty -h always "$0" "${originalArgs[@]}"
	init || return

	set -- "${apps[@]}"
	while (($# != 0 )); do
		app="$1"; shift
		appFunction="$(GetFunction "$app")" || { EchoErr "$app installation does not exist"; return 1; }
		$appFunction || return
		(( $# != 0 )) && pause
	done
}

init() 
{
	ScriptEval os FindInfo || return
	serverPrograms="$pp/Development"; [[ $server ]] && serverPrograms="$pp/Server";

	cp="FileCommand cp"
	delFile="rm -f"
	delDir="rm -fr"
	makeDir="mkdir --parents"
	mergeDir="MergeDir --suppress --parents"
	mv="FileCommand mv"

	rc="robocopy"
	rcOptsRegular=( /E /V /R:100 /W:2 )
	rcOptsMir=( "${rcOptsRegular[@]}" /mir)
	rcOpts=( "${rcOptsRegular[@]}" )

	netShareOptions=/grant:Everyone,full
	setupFiles="$(ScriptDir)/../setup"

	RunInit
}

RunInit()
{
	rcOpts=( "${rcOptsRegular[@]}" )
	noCleanup=
	postRun=
}

run() # run EXE [OPTIONS...]
{
	local exe="$1"

	[[ ! $exe ]] && { EchoErr "Executable was not specified"; return 1; }
	FindExe "$exe" || return
	RunExe "$exe" "${@:2}" || return
}

FindExe()
{
	exe="$(FindPublicDoc "/data/install/$exe")" || { pause; return 0; }
}

RunExe()
{
	local exe="$1"; shift
	local exeParts; StringToArray "$exe" "/" exeParts
	local exeDesc="$(IFS=/; echo "${exeParts[*]: -3}")"
	local standard; [[ "$1" == @(-s|--standard) ]] && { standard="--standard"; shift; }
	local pause; [[ "$1" == @(-p|--pause) ]] && { pause="--pause"; shift; }

	ask "Do you want to run $exeDesc" || return 0

	local exeExt; GetExtension "$exe" exeExt

	case "$exeExt" in
		zip|7z|gz|tar|xpi|ear|jar|war) RunZip "$exe" "$@" || return;;
		air|msu|vsix|xpi) ShellRun "$exe" "$@";;
		bat|cmd) cmd /c "$exe" "$@";;
		msi) start msiexec /i "$exe" "$@";;
		*) [[ $standard ]] && sudo --standard "$exe" "$@" || start --wait "$exe" "$@";;
	esac

	[[ $pause || $standard ]] && pause "When the installation has finished press any key..."
	RunInit
}

RunZip()
{
	local exe="$1"; shift
	local installDir; PrepareInstallDir "$@" || return	

	7z.exe x -o"$(utw "$installDir")" "$(utw "$exe")" || return

	# If the archive contains a single directory move the contents of that directory up
	if [[ "$(DirCount "$installDir")" == 1 ]]; then
		for dir in "$installDir"/*; do
			if [[ -d "$dir" ]]; then
				MoveAll "$dir" "$installDir" || return
				break
			fi
		done
	fi
}

PrepareInstallDir()
{
	installDir="$1"; shift;
	[[ ! $installDir ]] && { EchoErr "Installation directory was not specified"; return 1; }

	if [[ -d "$installDir" ]]; then
		ask "Do you want to delete the existing installation in \"$(GetName "$installDir")\"?" -dr n || return
		$delDir "$installDir" || return
	fi

	$makeDir "$installDir" || return
}

Winamp()
{
	printf "**************************************************\n* Winamp\n**************************************************\n"
	run "WinAmp/setup/winamp565_pro_all.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/Winamp" "$ao" || return
	$mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" || return
	$delFile "$pd/Winamp.lnk" || return
}

bootstrap()
{
	printf "**************************************************\n* Bootstrap\n**************************************************\n"
	echot "- Bootstrap Operating System critical setup and applications"

	ask "Open LastPass for registration information?" && ShellRun "https://lastpass.com/index.php?ac=1"

	inst dirs cygwin bash AutoHotKey WinSplit sublime pGina 
}

dirs()
{
	printf "**************************************************\n* Directories\n**************************************************\n"

	$makeDir "$pp/Applications/Other" || return
	$makeDir "$pp/Development/Other" || return
	$makeDir "$pp/Media/Other" || return
	$makeDir "$pp/Operating System/Other" || return
	[[ $client ]] && $makeDir "$pp/Games/Other" || return

	$makeDir "$_sys/temp"
	$makeDir "$_LocalCode"

	$makeDir "$_PublicDocuments/data/log"
	$makeDir "$_PublicDocuments/data/doc"
	$makeDir "$_PublicDocuments/drop"
}

core()
{
	printf "**************************************************\n* Core\n**************************************************\n"
	echot "- Install core operating system application"
}

bash()
{
	printf "**************************************************\n* Bash - Bourne Again Shell\n**************************************************\n"

	printf "Configuring bash..."

	local files=( .bashrc .bash_profile .bash_logout .dialogrc .gitconfig .lessfilter .inputrc .minttyrc )
	for file in "${files[@]}"; do
		local src="$_UserBin/$file" link="$_UserHome/$file"
		[[ ! -h "$link" ]] && { MakeLink "$src" "$link" || return; }
	done

	if [[ "$data" != "/cygdrive/c" ]]; then
		[[ ! -h "$_UserSysHome/.gitconfig" ]] && echo MakeLink "$_UserHome/.gitconfig" "$_UserSysHome/.gitconfig"
	fi
	
	files=( .bash_history .lesshst )
	for file in "${files[@]}"; do
		touch "$file" || return
		attrib +h "$file" || return
	done

	echo done
}

cygwin()
{
	printf "**************************************************\n* Cygwin - POSIX environment for Windows\n**************************************************\n"
	local installDir="$P/Cygwin"

	# cleanup
	command cygwin cleanup || return

	# icons and registry
	if file=$(FindPublicDoc "data/install/Cygwin/setup"); then

		echo "Copying files..."
		cp "$file/Command Prompt.ico" "$installDir/etc" || return

		echo "Updating registry..."
		registry import "$file/setup $architecture.reg" || return

	fi

	# Variables
	if ask "Do you want to update variables?"; then
		ScriptEval SetVar --system --path path "$installDir/bin" || return
		ScriptEval SetVar --system --path path "$_PublicBin" || return
		ScriptEval SetVar --system --path path "$_PublicBin/win" || return
		ScriptEval SetVar --path path "$_UserBin" || return
		ScriptEval SetVar --system CYGWIN "" # nodosfilewarning
	fi

	echo "Updating icons..."
	mkshortcut "$installDir/bin/mintty.exe" -a="-" -n="$pp/Operating System" || return

	# Configuration files
	if ask "Edit configuration files?"; then

		echo "- paste text before interactive login"
		! IsInstalled sublime && { VimHelp; pause; }
		clipw $'\n# Wiggin
[[ -d "/cygdrive/d/users" ]] && export USERS="/cygdrive/d/users" || export USERS="/cygdrive/c/users"
[[ -f "$USERS/Public/Documents/data/bin/bash.bashrc" ]] && . "$USERS/Public/Documents/data/bin/bash.bashrc"\n\n'
		TextEdit --wait "/etc/bash.bashrc" 

	fi

	# /etc/passwd home directory
	if grep ":/home" /etc/passwd > /dev/null; then
		echo "Updateing home directory locations..."
		local escapedUsers="${_data//\//\/}\/users"
		cp /etc/passwd /etc/passwd.bak
		sed 's/:\/home/:'"$escapedUsers"'/g' < /etc/passwd.bak > /etc/passwd
	fi

	# cleanup /hom
	$delDir "/home"

	# ssh
	chmod 700 ~/.ssh/id_dsa
}

ahk() { AutoHotKey; }
AutoHotKey()
# http://l.autohotkey.net/ http://www.autohotkey.com/download/ http://l.autohotkey.net/docs/AHKL_ChangeLog.htm
{
	printf "**************************************************\n* AutoHotKey\n**************************************************\n"
	echo "- Express installation"

	command AutoHotKey close

	run "AutoHotKey/setup/AutoHotkey v1.1.13.00.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/AutoHotKey" "$pp/Operating System/Other" || return
	
	echo "Updating registry..."
	local install="$(FindPublicDoc "data/install/AutoHotKey")" || return
	registry import "$install/setup/other/AutoHotkey-$architecture.reg" || return
	
	[[ ! -f "$_UserData/bin/keys.ahk" ]] && { $cp "$_PublicData/setup/keys.ahk" "$_UserData/bin" || return; }

	sudo --standard AutoHotKey startup
}

WinSplit()
{
	printf "**************************************************\n* WinSplit\n**************************************************\n"
	run "Shareware/WinSplit Revolution/image.zip" "$P32/WinSplit Revolution" || return
	command WinSplit startup
}

sublime()
{
	printf "**************************************************\n* Sublime Text Editor\n**************************************************\n"
	echo "- Check add to explorer context menu"

	if ask 'Install v3 beta?' -dr n; then
		run "Sublime/setup/Sublime Text Build 3047 $architecture Setup.exe" || return
	else
		run "Sublime/setup/Sublime Text 2.0.2 $architecture Setup.exe" || return
	fi

	echo "Restoring the default profile..."
	$makeDir "$_ApplicationData/Sublime Text 2" || return
	command sublime profile restore default || return

	echo "Updating icons..."
	$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
}

args "$@"; ${command}Command "${args[@]}";