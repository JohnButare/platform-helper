#!/usr/bin/env bash
. function.sh || exit

TemplateInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* name\n**************************************************\n"
	run "" -p "win" "mac" "linux" || return # download location

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir "$pp/(dir)" "$ao" || return
		$mergeDir "$pp/(dir)" "$pp/Development/Other" || return
		$mv "$pp/Sublime Text 2.lnk" "$pp/Applications" || return
		$rm "$pd/(prog).lnk" || return
	fi
}

TemplateAlias() { TemplateFullInstall; };
TemplateFullInstall()
{
	printf "**************************************************\n* name\n**************************************************\n"
	echot "- application infromation"

	# installs:
	local v="SnagIt V12.2.1." # http://www.techsmith.com/download/licenses/snagitupgrade.asp
	run "TechSmith/SnagIt/setup/$v" -p "exe" "dmg" "" || return

	local v="4.0.7.19761" # http://www.scootersoftware.com/beta.php
	run "Scooter Software/Beyond Compare/setup/" -p "BCompare-$v.exe" "BCompareOSX-$v.zip" "bcompare-$v_i386.deb" || return

	FindFile "Intel/Profile Manager/ProfileManager.xml" || return
	$cp	"$file" "$WINDIR/system32" || return
	$rc --mirror --quiet "$src" "$dest" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir "$pp/(dir)" "$pp/Development/Other" || return
		$mergeDir "$pp/(dir)" "$ao" || return
		$rm "$pd/(prog).lnk" || return
		$mergeDir --rename "$pp/(dir)" "$ao/(new name)" || return
		$makeDir "$pp/Operating System/bash" || return
		$makeShortcut "$installDir/bin/mintty.exe" "$pp/Operating System/bash" -a="-" || return
	
	elif [[ "$PLATFORM" == "mac" ]]; then	
		$rm "$la\com.adobe.AAM.Updater-1.0.plist" || return
		$rm "$la\com.adobe.AdobeCreativeCloud.plist" || return
		$rm "$ula\com.adobe.AAM.Updater-1.0.plist" || return

	fi

	echo "Moving data folders..."
	$makeLink --merge --hide "$udoc/code/web/sites" "$udoc/My Web Sites" || return

	echo "Updating registry..."	
	$registry delete "run/ErmTray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe 
	$registry import "$install/AutoHotKey/setup/other/AutoHotkey-${architecture}.reg" || return
	$registry set "HKCU/SOFTWARE/Foo/File" REG_EXPAND_SZ "$(utw "$file")" || return

	echo "Updating services..."
	service manual "Stereo Service"
	service manual "nvUpdatusService"

	echo "Updating firewall..."
	$firewall rule add "SSH" dir=in action=allow protocol=TCP localport=22 profile=private program="$(utw "$P/Cygwin/usr/sbin/sshd.exe")" || return

	echo "Creating directories..."
	$makeDir "$_userDocuments/code/test"

	sublime profile restore default || return

	echot "\
- configure"
	app start
}

usage()
{
	echot "\
usage: install cd|install APP*
	Install programs
	-h, --hint DIR			first directory to search for installation files
	-ie,--ignore-errors ignore errors for multiple installs
      --no-run-prompt	do not ask to run the executable
  -s, --select				select the install location"
	exit $1
}

args()
{
	unset command apps host ignoreErrors noRunPrompt select
	originalArgs=( "$@" ) 
	while [ "$1" != "" ]; do
		case "$1" in
			--no-run-prompt) noRunPrompt="true";;
			--help) IsFunction "${command}Usage" && ${command}Usage || usage 0;;
			--hint|-h) hint=( --hint "$2" ); export INSTALL_DIR="$2"; shift;;
			--ignore-errors|-ie) ignoreErrors="true";;
			--select|-s) select="--select";;
			*)
				[[ ! $command ]] && IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; } # command
				! IsOption "$1" && { apps+=( "$1" ); shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done
	[[ ! $command ]] && command='install'
	[[ "$command" == "cd" && ${#apps[@]} != 0 ]] && UnknownOption "${apps[0]}"
	[[ "$command" == "apps" && ${#apps[@]} == 0 ]] && MissingOperand "APPS"
	args=("$@")
}

cdCommand()
{
	FindFile || return
	echo "$file"
}

installCommand()
{
	[[ "$PLATFORM" == "win" ]] && ! IsElevated && { sudo mintty -h error bash -l inst "${originalArgs[@]}"; return; }
	InstallInit || return
	InstallApps "${apps[@]}" || return
}

i() {	InstallApps "$@"; }
InstallApps()
{
	local prompt; { (( $# > 1 )) || [[ $noRunPrompt ]]; } && prompt="true"
	while (($# != 0 )); do
		app="$1"; shift
		if [[ ! $prompt ]] || ask "\nInstall $app"; then
			installFunction="$(GetInstallFunction)" || { EchoErr "inst: $app installation does not exist"; return 1; }
			$installFunction || { [[ $ignoreErrors ]] && pause || return; }
		fi
	done
	return 0
}

GetInstallFunction()
{
	declare -f | egrep -i "^${app} \(\) $|^${app}Install \(\) $" | sed "s/ () //" # Similar to GetFunction
	return ${PIPESTATUS[1]}
}

InstallInit() 
{
	ScriptEval os FindInfo || return
	serverPrograms="$pp/Development"; [[ $server ]] && serverPrograms="$pp/Server";

	local test #="echo "
	cp="${test}FileCommand cp"
	firewall="${test}firewall --suppress"
	hide="${test}FileCommand hide"
	hideAndSystem="${test}FileCommand HideAndSystem"
	makeDir="${test}${G}mkdir --parents"
	makeLink="${test}MakeLink --suppress"
	makeShortcut="${test}MakeShortcut"
	mergeDir="${test}MergeDir --suppress --parents"
	mv="${test}FileCommand mv"
	rc="${test}CopyDir"
	registry="${test}registry"
	ren="${test}FileCommand ren"
	rm="${test}${G}rm -f"
	rmd="${test}${G}rm -fr"
	sudo="sudo"; [[ "$PLATFORM" == "win" ]] && sudo=""
	
	netShareOptions=/grant:Everyone,full
	setupFiles="$_data/setup"
}

run() # run EXE [OPTIONS...]
{
	local exe="$1" i; shift

	[[ ! $exe ]] && { EchoErr "inst: executable was not specified"; return 1; }

	if [[ "$1" == @(-p|--platform) ]]; then
		shift
		case "$PLATFORM" in win) i=1;; mac) i=2;; linux) i=3;; esac
		[[ ! ${!i} ]] && { EchoErr "inst: $exe not available on $PLATFORM"; return 1; }
		exe="$exe${!i}"
		shift; shift; shift;
	fi
	
	FindFile "$exe" || { ask "Continue the installation"; return; }
	RunExe "$file" "$@" || return
}

FindEditorProgram()
{
	args="" program=""
	
	if [[ "$PLATFORM" == "mac" ]]; then
		program="/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"
		args="-w -n"
		return 0
	fi

	if [[ -f "$P/Sublime Text 3/sublime_text.exe" ]]; then
		program="$P/Sublime Text 3/sublime_text.exe"
		args="-w -n"
	elif [[ -f "$P32/Notepad++/notepad++.exe" ]]; then
		program="$P32/Notepad++/notepad++.exe"
	else
		program="$(FindInPath "notepad")"
	fi
}

FindCompareProgram()
{
	args="" name="" program=""
	
	if [[ "$PLATFORM" == "mac" ]]; then
		name="bc" program="/usr/local/bin/bcomp"
		return 0
	fi

	if [[ -f "$P32/Beyond Compare 4/BComp.exe" ]]; then
		name="bc" program="$P32/Beyond Compare 4/BComp.exe"
	elif [[ -f "$P32/Beyond Compare 3/BComp.exe" ]]; then
		name="bc" program="$P32/Beyond Compare 3/BComp.exe"
	elif [[ -f "$P32/KDiff3/kdiff3.exe" ]]; then
		name="kdiff3" program="$P32/KDiff3/kdiff3.exe"
	fi
}

FindFile()
{
	local pattern; file="$1"

	( IsUrl "$file" || [[ "$(GetWord "$file" 0 :)" == @(ism) ]] ) && return 0

	if IsWild "$file"; then
		GetFileName "$file" pattern || return
		GetFilePath "$file" file || return
	fi

	if ! ScriptEval FindInstallFile $select --suppress --eval "${hint[@]}" "$file"; then
		EchoErr "inst: could not locate ${1:-the installation directory}"
		return 1
	fi

	hint=( --hint "$InstallDir" ); export INSTALL_DIR="$InstallDir"
	[[ $pattern ]] && { SelectFile "$file" "$pattern" || return; }
	return 0
}

SelectFile() # DIR PATTERN
{
	local dir="$1" pattern="$2" result items

	pushd "$dir" > /dev/null || return
	
	for f in $pattern; do items+=( "$f" "" ); done

	result=$(dialog --stdout --backtitle "Select File" \
  	--menu "Choose file to install:" $(($LINES-5)) 50 $(($LINES)) "${items[@]}")
	clear

	[[ ! $result ]] && { EchoErr "inst: a file was not selected"; return 1; }

	file="$dir/$result"
	popd > /dev/null
}

RunExe()
{
	local exe="$1"; shift
	local standard; [[ "$1" == @(--standard) ]] && { standard="--standard"; shift; }
	local pause; [[ "$1" == @(--pause) ]] && { pause="--pause"; shift; }
	
	local exeDesc="$1"
	local exeParts; StringToArray "$exe" "/" exeParts
	[[ ! $exeDesc ]] && { exeDesc="$(IFS=/; echo "${exeParts[*]: -3}")"; }
	[[ ! $exeDesc ]] && exeDesc="$exe"

	[[ $noRunPrompt ]] && echo "Runing $exeDesc..." ||
		{ ask "Do you want to run $exeDesc" || return 0; }	

	local exeExt; GetFileExtension "$exe" exeExt

	[[ "$(GetWord "$exe" 0 :)" == @(ism) ]] && exeExt="ism"

 	[[ "$exeExt" == @(air|iso|ism|msu|vsix|xpi) ]] && pause="--pause"

 	[[ "$PLATFORM" == "win" ]] && export SEE_MASK_NOZONECHECKS=1 # disable Open File Secirity Warning

	case "$exeExt" in
		bat|cmd) cmd /c "$exe" "$@" || return;;
		dmg) RunDmg "$exe" "$@" || return;;
		msi) start --wait msiexec /i "$exe" "$@";;
		ism) start --minimize cmd /c start "$exe";;
		iso) iso mount "$exe"; echo "If needed run the setup program manually..."; pause="--pause";;
		zip|7z|gz|tar|xpi|ear|jar|war) RunZip "$exe" "$@" || return;;
		*) [[ $standard ]] && 
				{ sudo --standard "$exe" "$@" || return; } ||
				{ start --wait "$exe" "$@" || return; };;
	esac

	[[ $pause || $standard ]] && pause "When the installation has finished press any key..."
	
	case "$exeExt" in
		iso) iso dismount "$exe" || return
	esac	
}

RunDmg() { local result; DoRunDmg "$@"; result=$?; DmgCleanup; return $result; }
DoRunDmg()
{
	local exe="$1"; shift
	hdiutil mount "$exe" -mountpoint /Volumes/install -quiet || { EchoErr "inst: unable to mount \"$exe\""; return 1; }

	echo "Installing...."
	if [[ -f "/Volumes/install/Install.mpkg" ]]; then
		sudo installer -pkg "/Volumes/install/Install.mpkg" -target /
	else
		shopt -s  nullglob; local app=(/Volumes/install/*.app);  
		[[ ! "$app" ]] && { EchoErr "inst: \"$exe\" does not contain an application"; return 1; }
		local dir; GetFileName "$app" dir || return
		[[ -d "/Applications/$dir" ]] && return 0
		sudo acp --recursive --progress-bar "$app" /Applications
	fi

	echo "Updating Spotlight..."
	mdimport "/Applications/$dir" || return
}

DmgCleanup() { hdiutil detach /Volumes/install -quiet || return; }

RunZip()
{
	local exe="$1"; shift

	if [[ "$PLATFORM" == "mac" ]]; then
		local dir="$(zipinfo -1 "$exe" | head -1)"
		if [[ "$dir" =~ ^.*app/$ ]]; then
			[[ -d "/Applications/$dir" ]] && return 0
			unzip "$exe" -d "/Applications"; return
		fi
	fi

	local installDir; PrepareInstallDir "$@" || return	

	7z.exe x -o"$(utw "$installDir")" "$(utw "$exe")" || return

	# If the archive contains a single directory move the contents of that directory up
	if [[ "$(DirCount "$installDir")" == 1 ]]; then
		for dir in "$installDir"/*; do
			if [[ -d "$dir" ]]; then
				MoveAll "$dir" "$installDir" || return
				break
			fi
		done
	fi
}

PrepareInstallDir()
{
	installDir="$1"; shift;
	[[ ! $installDir ]] && { EchoErr "inst: installation directory was not specified"; return 1; }

	if [[ -d "$installDir" ]]; then
		ask "Do you want to delete the existing installation in \"$(GetFileNameWithoutExtension "$installDir")\"" -dr n || return
		$rmd "$installDir" || return
	fi

	$makeDir "$installDir" || return
}

#
# Installations
#

testInstall()
{
	FindFile "Shareware" || return
	echo "Found Shareware in $file"
}

bootstrap()
{
	bootstrapInit || return
	core || return
}

bootstrapInit()
{
	printf "**************************************************\n* Bootstrap Initialization\n**************************************************\n"

	coreDirs || return
	i bash || return
	bootstrap${PLATFORM^} || return
}

bootstrapWin()
{
	i cygwin || return
}

bootstrapMac()
{
	if ask "Install brew"; then
		ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)" || return
		brew doctor || return
		brew update || return
	fi

	ask "Install brew packages" && 
		{ brew install bash coreutils findutils git fping nmap dialog exiftool wget wakeonlan || return; }

	ask "Update path" && { sudo bash -c 'echo "/usr/local/data/bin
/usr/local/data/platform/mac
/usr/local/sbin" > /etc/paths.d/wiggin' || return; }

	return 0
}

bootstrapLinux() { :; }

coreDirs()
{
	$makeDir "$_root/temp" || return
	$makeDir "$_data/doc" || return
	$makeDir "$_data/log" || return
	$makeDir "$pdoc/drop" || return
	core${PLATFORM^}Dirs || return
}

coreWinDirs()
{
	$makeDir "$pp/Applications/Other" || return
	$makeDir "$pp/Development/Other" || return
	$makeDir "$pp/Media/Other" || return
	$makeDir "$pp/Operating System/Other" || return
	[[ $client ]] && { $makeDir "$pp/Games/Other" || return; }

	$makeDir "$_DataDrive/temp" || return
	$makeDir "$_DataDrive/Program Files" || return
	$makeDir "$_DataDrive/Users/Public" || return
}

coreMacDirs() { :; }
coreLinuxDirs() { :; }

core()
{
	printf "**************************************************\n* Core\n**************************************************\n"

	core${PLATFORM^} || return
	i python ruby ssh || return

	case "${USERNAME#ad_}" in
		jjbutare) i AutoHotKey notepadpp sublime BeyondCompare || return;;
	esac

	i winsplit EverNote DropBox 7Zip chrome BrowserHomePage SnagIt || return
	
	intel IsIntelHost &&
		{ i IntelCore wmp OfficeFinal WindowsAdministrationTools CsisDeveloperCore || return; }

	[[ "$COMPUTERNAME" == @(bean|MiniMe|oversoul) ]] && # wiggin
		{ i office365 sonos || return; }

	case "$COMPUTERNAME" in
		bean) i ParallelsDesktop proxifier diskInventortyX || return;;
		oversoul) i VmwareWorkstation Mediacore DevCore || return;;
	esac
}

coreWin()
{
	i WindowsSetup console SysInternals || return
}

coreMac()
{
	if ask "Disable dock"; then
		defaults write com.apple.dashboard mcx-disabled -boolean true || return
		killall Dock || return
	fi	
}

coreLinux() { :; }

CygwinInstall()
{
	printf "**************************************************\n* Cygwin - POSIX environment for Windows\n**************************************************\n"

	echo "Update environment variables..."
	ScriptEval SetVar --system --path PATH "$P/Cygwin/bin" || return
	ScriptEval SetVar --system --path PATH "$PUB/Documents/data/bin" || return
	ScriptEval SetVar --system --path PATH "$PUB/Documents/data/platform/$PLATFORM" || return
	ScriptEval SetVar --path PATH "$_ubin" || return

	echo "Adding user..." # first user added when Cygwin installed, other users are not
	touch /etc/passwd || return
	local user="$(mkpasswd -c)"
	! grep "^$(id -un)" /etc/passwd > /dev/null && { echo "$user" >> /etc/passwd || return; }
	
	if grep ":/home" /etc/passwd > /dev/null; then
		echo "Updating home directory locations..."
		local escapedUsers="${_users//\//\\/}"
		cp /etc/passwd /etc/passwd.bak || return
		sed 's/:\/home/:'"$escapedUsers"'/g' < /etc/passwd.bak > /etc/passwd || return
		HOME="$_users/$USERNAME"; . bash.bashrc || return
	fi

	# icons and registry
	if FindFile "Cygwin/setup"; then

		echo "Copying files..."
		cp "$file/Command Prompt.ico" "$P/Cygwin/etc" || return

		echo "Updating registry..."
		$registry import "$file/setup $architecture.reg" || return

	fi

	echo "Updating icons..."
	$makeShortcut "$P/Cygwin/bin/mintty.exe" "$pp/Operating System/bash" -a="-" || return
	$makeShortcut "$BIN/run.sh" "$psm/Programs/Startup/startup" -a "startup" -d "Start applications" --show=min || return

	cygwin FixCompletion || return

	ask "Install other Cygwin packages" && { cygwin package other || return; }

	echo "Cleaning up..."
	cygwin cleanup || return
	$rmd "/home"	
}

BashInstall()
{
	printf "**************************************************\n* Bash - Bourne Again Shell\n**************************************************\n"

	printf "Configuring bash..."

	printf "links..."
	local files=( .bashrc .bash_profile .bash_logout .dialogrc .gitignore .kdiff3rc .lessfilter .magic .inputrc .minttyrc )
	for file in "${files[@]}"; do
		$makeLink --symbolic --hide "$_ubin/$file" "$_home/$file" || return
	done

	# for Windows program that require Windows links, not a POSIX .lnk link
	files=( .ExifTool_config  .gitconfig )
	for file in "${files[@]}"; do
		$makeLink --symbolic --hide --windows --absolute "$UBIN/$file" "$_SysHome/$file" || return
		$makeLink --symbolic --hide --windows --absolute "$UBIN/$file" "$HOME/$file" || return
	done
	
	if [[ -d /etc/skel ]]; then
		printf "skeltons..."
		for file in $(find /etc/skel -type f); do 
			[[ ! -f "$(GetFileName "$file")" ]] && { $cp "$file" || return; }
		done
	fi

	printf "create..."
	files=( .bash_history .lesshst )
	for file in "${files[@]}"; do
		touch "$HOME/$file" || return
		$hide "$HOME/$file" || return
	done

	if [[ -d ~/.ssh ]]; then # if issues: chgrp root ~/.ssh/*
		printf "ssh..."
		$hide ~/.ssh || return
		[[ -f ~/.ssh/id_dsa ]] && { chmod 700 ~/.ssh/id_dsa || return; }
		[[ -f ~/.ssh/id_rsa ]] && { chmod 700 ~/.ssh/id_rsa || return; }
		[[ -f ~/.ssh/config ]] && { chmod 700 ~/.ssh/config || return; }
	fi

	echo "...done"

	local file="/etc/bash.bashrc"; [[ "$PLATFORM" == "mac" ]] && file="/etc/bashrc"
	if ask "Edit $file"; then
		if [[ "$PLATFORM" == "win" ]]; then
			echo '- before "# If not running interactively, don'\''t do anything",' 
		else
			echo '- at the end of the file, '
		fi
		echo '  add newline, right click, ensure single line (remove extra newlines)'
		clipw $'[[ -f /usr/local/data/bin/bash.bashrc ]] && . "/usr/local/data/bin/bash.bashrc"'
		pause
		nano "$file" || return
	fi
}

SshInstall()
{
	printf "**************************************************\n* SSH - Secure Shell\n**************************************************\n"
	
	sshHome="$uhome/.ssh"
	sshCloudHome="$_cloud/data/.ssh"

	echo Creating data directory...
	$makeDir "$sshHome" && $hide +h "$sshHome" || return

	echo "Starting ssh agent..."
	SshAgent startup || return

	echo "Updating firewall..."
	$firewall rule add "SSH" dir=in action=allow protocol=TCP localport=22 profile=private program="$(utw "$P/Cygwin/usr/sbin/sshd.exe")" || return

	# do not install SSH daemon until fix install issue (/var permission)
	if false && ask 'Install SSH daemon'; then
		# StrictModes must be off if the home directory is relocated to c:\Users as sshd does not allow the permissions Windows uses
		echot "\
- StrictModes=no, separation=yes, install sshd as a service=yes, value of CYGWIN for the daemon=ntsec,
  use a diferent account name=no, create privileged account=yes, password=<administrator>"
		ssh-host-config && service start sshd || return
	fi
}

IntelCore()
{
	printf "**************************************************\n* Intel Core\n**************************************************\n" 
	i IntelApps IntelCleanup Syncplicity VisionApp || return
}

IntelApps()
{
	ask "Install One Time Password Wizard" && { run ism:appid=23194 "One Time Password wizard" || return; }

	[[ -f "$P32/Cisco/Cisco AnyConnect Secure Mobility Client/vpnui.exe" ]] || 
		{ run ism:appid=23870 "AnyConnect VPN" || return; }

	return 0
}

IntelCleanup()
{
	ask 'Cleanup icons' && { IntelIcons || return; }

	service exist DisplayLinkService && { service manual DisplayLinkService || return; }

	# path: C:\Program Files\Common Files\Intel\WirelessCommon\, C:\Program Files\Intel\WiFi\bin\,
	#   C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT
	#		C:\Program Files\Intel\Intel(R) Management Engine Components\IPT
	#		C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL
	#		C:\Program Files\Intel\Intel(R) Management Engine Components\DAL
	#		C:\Program Files\Intel\iCLS Client
	#		C:\Program Files (x86)\Intel\iCLS Client\
	ask 'Cleanup path' && { os path editor || return; }

	if ask 'Cleanup programs (close Outlook if hangs)'; then
		printf "Uninstalling..."
	 	printf "WinZip..."; product uninstall {CD95F661-A5C4-44F5-A6AA-ECDD91C240E3} > /dev/null
	 	printf "Adobe Reader..."; product uninstall {AC76BA86-7AD7-1033-7B44-AB0000000001} > /dev/null
	 	printf "Connected Backup..."; product uninstall {393E4C89-67E9-43BF-AD29-94D19F7624F7} > /dev/null
	 	echo done
	fi

	if ask 'Cleanup file system'; then
		$rmd "$_root/Drivers" "$_root/Flash11" "$_root/PreDelivery_Automation" \
			"$uhome/Roaming" "$udoc/Add-in Express" || return
		$rm "$_root/build.ini" "$_root/Regionalization.xml"
		$hide "$_root/APPS" "$_root/Quarantine" "$_root/Intel" "$_root/OpalStatus.efi"				
		$makeLink --merge --hide "$_udata/ProfileSnapshot" "$udoc/ProfileSnapshot" || return
	fi

	if ask 'Cleanup startup programs'; then
		$registry 32 delete "run/AgentUiRunKey" # "C:\Program Files (x86)\Autonomy\Connected BackupPC\Agent.exe" -ni -sss -e http://localhost:16386/
		$registry 32 delete "run/McAfeeUpdaterUI"
		$registry 32 delete "run/ShStatEXE"
		$registry 32 delete "run/SunJavaUpdateSched"
		$registry 32 delete "run/Cisco AnyConnect Secure Mobility Agent for Windows" # "C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpnui.exe" -autolaunched
		$registry 32 delete "run/IMSS" # "C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IMSS\PIconStartup.exe" "C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IMSS\PrivacyIconClient.exe" 60
		$registry 32 delete "run/IntelSMSystray" # C:\Program Files (x86)\IntelSM\IntelSMSystray\IntelSMSystemTray.exe
		$registry 32 delete "run/WAATService" # C:\windows\SysWOW64\waatservice.exe -install
		$registry delete "run/ErmTray" # "C:/Program Files/Intel/Security/ERM/Win64/ErmTray.exe"
		$registry delete "run/McAfee Host Intrusion Prevention Tray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe
		$registry delete "run/EpeFprTrainer" # "C:\Program Files\McAfee\Endpoint Encryption\EpeFprTrainer.exe"
		$registry delete "run/MfeEpePcMonitor" # "C:\Program Files\McAfee\Endpoint Encryption\EpePcMonitor.exe"
		$registry delete "run/SysTrayApp" # C:\Program Files\IDT\WDM\sttray64.exe
		$registry delete "urun/test"
		$rm "$up/Startup/Send to OneNote.lnk" || return
	fi
}

IntelIcons()
{
	printf "Updating Intel icons..."
	! intel IsIntelHost && return 0

	ChromeIcons || return
	FoxitReaderIcons || retuern
	JavaIcons || return

	local d="$pp/Operating System/Other/Intel"; $makeDir "$d/Other" || return
	$mergeDir --rename "$pp/Intel" "$d" || return
	$mergeDir --rename "$up/Intel" "$d" || return

	$rm "$pd/AddaPrinter.lnk" || return
	$rm "$pd/AnyConnect"*.lnk || return
	$rm "$pd/Connected BackupPC.lnk" || return
	$rm "$pd/Intel Security Checker.lnk" || return
	$rm "$pd/IT Wireless Utilities.lnk" || return
	$rm "$pd/WiFi Health Advisor.lnk" || return
	$rm "$ud/WiFi Health Advisor.lnk" || return

	$mergeDir "$pp/Autonomy" "$pp/Operating System/Other" || return
	$mergeDir "$up/Cisco" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Cisco" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Dolby" "$pp/Operating System/Other" || return
	$mergeDir "$pp/FileZilla FTP Client" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Intel PROSet Wireless" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Intel Software Market" "$pp/Operating System/Other/Intel" || return
	$mergeDir "$pp/McAfee" "$pp/Operating System/Other" || return
	$mergeDir "$up/Pledge" "$pp/Operating System/Other" || return
	$mergeDir "$pp/ThinkVantage" "$pp/Operating System/Other" || return

	$mv "$pd/AnyConnect User Guide 3_1.lnk" "$pp/Operating System/Other/Cisco/Cisco AnyConnect Secure Mobility Client" || return
	$mv "$pd/AnyConnect_Health_Check_Tool.lnk" "$pp/Operating System/Other/Cisco/Cisco AnyConnect Secure Mobility Client" || return
	$mv "$pp/DTS Studio Sound.lnk" "$pp/Operating System" || return	
	$mv "$up/IBM Endpoint Manager.lnk" "$pp/Operating System" || return
	$mv "$pd/Install CNB - Client Network Backup.lnk" "$pp/Operating System/Other/Intel" || return
	$mv "$pd/Install Conference Room Scheduler.lnk" "$pp/Operating System/Other/Intel" || return
	$mv "$pp/Intel Software Market.lnk" "$pp/Operating System/Other/Intel/Intel Software Market" || return
	$mv "$pp/Intel(R) HD Graphics Control Panel.lnk" "$pp/Operating System" || return
	$mv "$pd/Intel SSD Encryption.lnk" "$pp/Operating System/Other/Intel"
	$mv "$ud/Pledge.lnk" "$pp/Operating System/Other/Intel"
	$mv "$pd/Intel SSD Toolbox.lnk" "$pp/Operating System/Other/Intel"
	$mv "$up/McAfee HIP Messages.lnk" "$pp/Operating System/Other/McAfee" || return
	$mv "$up/McAfee VirusScan Scan Messages.lnk" "$pp/Operating System/Other/McAfee" || return
	$mv "$pd/Pre Delivery Automation.lnk" "$pp/Operating System/Other/Intel" || return
	$mv "$pp/SRS Premium Sound.lnk" "$pp/Operating System" || return
	$mv "$pd/Windows 8 Training.lnk" "$pp/Operating System/Other/Intel" || return
	$mv "$psm/Intel Security Checker.lnk" "$pp/Operating System/Other/Intel" || return
	$mv "$pp/Lenovo Ultranav (Touchpad Clickpad Trackpad TrackPoint Mouse).lnk" "$pp/Operating System/Other/Intel" || return

	echo "done"
	return
}

DevCore()
{
	printf "**************************************************\n* Development Core\n**************************************************\n"
	
	echo "Creating directories..."
	$makeDir "$_userDocuments/code/test" || return
	$makeDir "$CODE/test" || return
	
	echo "Updating icons..."
	$makeShortcut "$CODE" "$pp/Development/Code" || return

	echo "Moving data folders..."
	$makeLink --merge --hide "$udoc/code/web/sites" "$udoc/My Web Sites" || return

	ask "\nInstall GIT core" && { i GitCore || return; }
	ask "\nInstall SQL Development core" && { i iis SqlServer SqlPrompt || return; }
	ask "\nInstall .NET Development core" && { DotNetDevCore || return; }
	ask "\nInstall JAVA Development core" && { JavaDevCore || return; }
	ask "\nInstall Web Development core" && { WebDevCore || return; }
	return 0
}

WebDevCore()
{
	printf "**************************************************\n* Web Development Core\n**************************************************\n"

	i chrome NodeJs || return

	ScriptEval intel SetProxy || return
	gem install compass || return	
	npm install -g yo bower grunt grunt-cli || return
}

NodeJsInstall()
{	
	printf "**************************************************\n* Node.js\n**************************************************\n"
	run "Shareware/Node.js/setup/" -p "node-v0.10.33-x64.msi" || return # http://nodejs.org/download/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir "$up/Node.js" "$pp/Development/Other" || return
	fi

	if [[ ! -f ~/.npmrc ]]; then
		touch ~/.npmrc
		intel IsIntelHost && echo "http http_proxy=http://proxy-chain.intel.com:911" >> ~/.npmrc
		intel IsIntelHost && echo "https https_proxy=http://proxy-chain.intel.com:911" >> ~/.npmrc
	fi
	
	PathAdd "$P/nodejs"; PathAdd "$APPDATA/npm"
}

DotNetDevCore() 
{
	printf "**************************************************\n* .NET Development Core\n**************************************************\n"

	echo "Creating directories..."
	$makeDir "$pp/Development/DotNet/Other"

	echo "Installing Applications..."	
	i VisualStudio NUnit ReSharper LinqPad || return
}

CsisDev() { CsisDeveloperInstall; }
CsisDeveloperInstall()
{
	printf "**************************************************\n* Intel Development Core\n**************************************************\n"

	ask "Install applications" && { i DevCore CruiseControlTray SilverlightSdk || return; }

	$makeDir "$pp/Development/CSIS" || return

	if ask "Install Intel Profile Manager"; then
		run "Intel/Profile Manager/ITBAS.zip" "$P/ITBAS" || return

		FindFile "Intel/Profile Manager/ProfileManager.xml" || return
		$cp	"$file" "$WINDIR/system32" || return
		chmod 744 "$WINDIR/system32/ProfileManager.xml" || return
		$makeDir "$WINDIR/SysWOW64" || return 
		$cp "$file" "$WINDIR/SysWOW64" || return
		chmod 744 "$WINDIR/SysWOW64/ProfileManager.xml" || return
		MakeShortcut "/cygdrive/c/Program Files/ITBAS/ProfileManager/ProfileManager.exe" \
			"$pp/Development/CSIS/Profile Manager" || return
	fi

	if ask "Install Antidote"; then
		run "Intel/Antidote/setup/Antidote.zip" "$P/Antidote" || return
		MakeShortcut "mintty" "$pp/Development/CSIS/Antidote" \
			-a="/c \"$(utw "$P/Antidote/antidote.exe")\" & pause" || return
	fi

	if ask "Update machine.config"; then
		clipw '<appSettings><add key="Environment" value="Development" /></appSettings>'
		echo "- After </configSections> paste the text in the clipboard"
		DotNet 4 MachineConfig || return
		pause
	fi

	if ask "Clone shared projects"; then
		code clone Antidote Errgo Magellan ProfileManager CruiseControlPlugins IntelNuGet || return
	fi

	if ask "Configure Magellan"; then
		MakeShortcut "mintty" "$pp/Development/CSIS/Magellan Local Build" \
			-a="--hold=error run.sh sudo antidote verbose App=Magellan BuildType=LocalBuild CacheBrokerAddress=@DatabaseServer@" || return
		chgrp Administrators "$CODE/Magellan/unversioned/SqlData" || return; chmod 777 "$CODE/Magellan/unversioned/SqlData"
		SqlServer service start || return
		antidote verbose App=Magellan BuildType=LocalBuild CacheBrokerAddress=@DatabaseServer@ || return
		cp "$CODE/Magellan/Profiles/"*.profile "$P/ITBAS/Profiles" || return
	fi

	if ask "Configure Antidote"; then
		MakeShortcut "mintty" "$pp/Development/CSIS/Antidote Local Build" \
			-a="--hold=error antidote verbose App=Antidote BuildType=LocalBuild" || return
		$makeDir "$CODE/Antidote/Intel.Antidote.Models.Fixtures/Output" || return
 		chgrp Administrators "$CODE/Antidote/UnVersioned/SqlData" || return; chmod 777 "$CODE/Antidote/UnVersioned/SqlData"
 		chgrp Administrators "$CODE/Antidote/Intel.Antidote.Models.Fixtures/Output" || return; chmod 777 "$CODE/Antidote/Intel.Antidote.Models.Fixtures/Output"
 		SqlServer service start || return
		antidote verbose App=Antidote BuildType=LocalBuild || return
		cp "$CODE/Antidote/SolutionItems/Profiles/"*.profile "$P/ITBAS/Profiles" || return
	fi

	applications=( ScadaPortal )
	for app in "${applications[@]}"; do 
		if ask "Setup $app"; then
			code clone "$app" || return

			if [[ "$app" == "RPIAD" ]]; then
				chmod 777 "$CODE/RPIAD/SQLData" || return
				cygstart "http://www.microsoft.com/en-us/download/confirmation.aspx?id=1491"; pause;
			elif [[ "$app" == "ScadaPortal" ]]; then
				echo "- grant $USERNAME full control to \"$(utw "$P32/IIS Express")\""
				pause
			fi

			MakeShortcut "mintty" "$pp/Development/CSIS/$app Local Build" \
				-a="--hold=error run.sh sudo antidote verbose App=$app BuildType=LocalBuild" || return
				
			antidote verbose App=$app BuildType=LocalBuild || return
		fi
	done
}

JavaDevCore()
{
	printf "**************************************************\n* JAVA Development Core\n**************************************************\n"
}

WinampInstall()
{
	printf "**************************************************\n* Winamp\n**************************************************\n"
	
	run "Nullsoft/WinAmp/setup/winamp565_pro_all.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/Winamp" "$ao" || return
	$mergeDir --rename "$up/Winamp Detector Plug-in" "$ao/Winamp" || return
	$rm "$pd/Winamp.lnk" || return

	echot "Note
- WiFi Sync - disable addition network interfaces (i.e. VMware networks), run WinAmp as Administrator"
}

wmp() { WindowsMediaPlayerInstall; }
WindowsMediaPlayerInstall()
{
	printf "**************************************************\n* Windows Media Player\n**************************************************\n"
	
 	start "$P32\Windows Media Player\wmplayer.exe" || return

	echot "\
- Recommended settings
- Organize, Manage Libraries, Music, Add..., This PC, portable4"
}

ahk() { AutoHotKeyInstall; }
AutoHotKeyInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* AutoHotKey\n**************************************************\n"
	echo "- Express installation"
	AutoHotKey close || return
	run "AutoHotKey/setup/AutoHotkey112209_Install" || return # http://ahkscript.org/download/

	echo "Updating icons..."
	$mergeDir "$pp/AutoHotKey" "$pp/Operating System/Other" || return
	
	echo "Updating registry..."
	FindFile "AutoHotKey" || return
	$registry import "$file/setup/other/AutoHotkey-$architecture.reg" || return

	sudo --standard AutoHotKey startup
}

WinSplitInstall()
{
	printf "**************************************************\n* WinSplit\n**************************************************\n"
	run "Shareware/WinSplit Revolution/image.zip" "$P32/WinSplit Revolution" || return
	WinSplit startup
}

SublimeInstall()
{
	printf "**************************************************\n* Sublime Text Editor\n**************************************************\n"
	echo "- Check add to explorer context menu"

	local v=3094 # http://www.sublimetext.com/3dev, PackageControl (https://sublime.wbond.net/installation)
	run "Sublime/setup/" -p "Sublime Text Build $v x64 Setup.exe" "Sublime Text Build $v.dmg" "sublime-text_build-$v_amd64.deb" || return 

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating registry..."	
		registry delete "HKEY_CLASSES_ROOT/Applications/sublime_text.exe/" # Fix Windows Open With

		echo "Updating icons..."
		$mv "$pp/Sublime Text 3.lnk" "$pp/Applications" || return
	fi

	$makeDir "$_udata/Sublime Text" || return
	$makeDir "$_ApplicationData/Sublime Text 3" || return
	sublime profile restore default || return

	echo '- Enter license'
	sublime start || return
}

dotCoverInstall()
{
	printf "**************************************************\n* dotCover\n**************************************************\n"
	run "JetBrains/dotCover/dotCoverSetup.2.6.608.466.msi" || return # http://www.jetbrains.com/dotcover/
}

ReSharperInstall()
{
	printf "**************************************************\n* ReSharper\n**************************************************\n"
	
	# download: http://www.jetbrains.com/resharper/download/index.html
	# what's new: http://www.jetbrains.com/resharper/whatsnew/
	# cleanup: $LocalAppData$/JetBrains/ReSharper/v7.1/SolutionCaches
	echo "- select only ReSharper, dotPeek, Visual Studio 2015"
	run "JetBrains/ReSharper/setup/JetBrains.ReSharperUltimate.2015.2.exe" || return
	
	echo "Updating icons..."
	$mergeDir "$up/JetBrains" "$pp/Development/DotNet/Other" || return

	ReSharper profile restore default || return

	echot "\
- Select ReSharper Shortcuts Scheme, ReSharper 2.x and IntelliJ IDEA
- ReSharper, Options
	- Keyboards & Menus, ReSharper keyboard scheme=ReSharper 2.x or IntelliJ IDEA, Apply Scheme
	- Environment, Editor, Editor Behavior, uncheck Use CamelHumps
	- Environment, IntelliSense
		- Autopopup, C#, Where value is expected, Do not display
		- Completion Appearance, check Show Member Signatures and Show Summary
	- Code Editing
			- Code Cleanup, Add, default
			- Check all except Embrace 'using' directives in region
	- C#, Formattign Style
		- Blank Lines, Keep max blank lines=1 (2 places)
		- Line Breaks and Wrapping, Other, check Place simple method on single line
	- Tools
		- Unit Testing
			- Run up to 4 assemblies in parallel
			- Uncheck Save and restore Unit Test Sessions
			- Uncheck Wrap long lines in Unit Test Session output
		- External Sources=Navigation to Sources, check all
- Customize Keyboard (ctrl-shift-alt-k)
	- ReSharper.ReShartper_DuplicateText, Remove, Remove (free ctrl-d)
- notes: ctrl-n, <class>, click object, ctrl-b, Navigate to Decompiled Sources"
	sudo --standard VisualStudio start
}

dotPeekInstall()
{
	printf "**************************************************\n* dotPeek \n**************************************************\n"
	run "JetBrains/dotPeek/dotPeek64_1.3Update1.exe" || return # https://www.jetbrains.com/decompiler/download/

	echo "Updating icons..."
	$mergeDir "$pp/JetBrains dotPeek version 1.1" "$pp/Development/DotNet/Other" || return
}

ConsoleInstall()
{
	printf "**************************************************\n* Console \n**************************************************\n"

	key="HKCU/Console"

	echo "Setting console defaults..."

	registry set "$key/QuickEditMode" REG_DWORD 1 || return
	registry set "$key/QuickEdit" REG_DWORD 1 || return

	# foreground text: bright white=31 (255, 255, 255), white=23 (192,192,192)
	registry set "$key/ScreenColors" REG_DWORD 7 || return

	# Screen Background: black=0 (0,0,0), blue=8388608 (or 0, 0, 128)
	# Black does not flicker when large amounts of text are displayed (for example when do dir bin:)
	registry set "$key/ColorTable01" REG_DWORD 0 || return

	registry set "$key/ColorTable11" REG_DWORD 16776960 || return
	registry set "$key/ColorTable15" REG_DWORD 16777215 || return

	# Font
	registry set "$key/FaceName" REG_SZ "Lucida Console" || return
	registry set "$key/FontFamily" REG_DWORD 54 || return
	registry set "$key/FontSize" REG_DWORD 1048586 || return
	registry set "$key/FontWeight" REG_DWORD 400 || return

	# Screen 165x29 (1680x1050)
	registry set "$key/ScreenBufferSize" REG_DWORD 19660964 || return
	registry set "$key/WindowSize" REG_DWORD 3276964 || return # 3276964=164x50
}

WindowsSetup()
{
	printf "**************************************************\n* Windows Setup\n**************************************************\n"

	WindowsIcons || return

	echo "Cleaning file system..."
	$rmd "$_root/PerfLogs" || return

	echo "Creating directories..."
	$makeDir ~/.config || return
	$hide ~/.config || return

	echo "Moving data folders..."
	[[ -d "$udoc/Fax" ]] && $makeLink --merge --hide "$_udata/fax" "$udoc/Fax"
	[[ -d "$udoc/My Data Sources" ]] && $makeLink --merge --hide "$_udata/Data Sources" "$udoc/My Data Sources"
	[[ -d "$udoc/Scanned Documents" ]] && $makeLink --merge --hide "$_udata/scans" "$udoc/Scanned Documents"

	echo "Setting configuration..."
	registry import "$setupFiles/Windows Setup $version.reg" || return

	echo "Numlock on at boot..."
	numlock boot on || return
	
	echo "Disabling magnifier to remove win-+ shortcut..."
	[[ -f "$WINDIR/System32/Magnify.exe" ]] &&
		{ $ren "$WINDIR/System32/Magnify.exe" "$WINDIR/System32/Magnify.disable.exe" || return; }

	echo "Configuring powershell..."
	powershell Set-ExecutionPolicy RemoteSigned || return

	if [[ -f "$WINDIR/system32/Narrator.exe" ]]; then
		echo "Disabling narrator shortcut key..."
		$ren "$WINDIR/system32/Narrator.exe" "$WINDIR/system32/NarratorDisable.exe" || return
	fi

	ask "Add wsystem account" && { os ComputerManagement || return; }
	
	ask "Update Windows credential store" && { password ChangeCredentialStore || return; }

	if ask "Update permisions on for the Start menu programs"; then
		start explorer "$pp/.."
		echot "\
- Properties, Security, Advanced
	- Owner, Change, $USERNAME, check Replace owner on subcontainers and objects, Apply 
	- Add, Select a principal, $USERNAME, check Full control, check Replace all child object permissions"
		pause
	fi

	start explorer
	echot "\
- Explorer, This PC, Properties, Change settings,
	- Computer Name, Change..., Computer name=NAME
	- Remote, select Allow remote connections to this computer, uncheck Allow connections only
		from computers running Remote Desktop with Network Level Authentication
- Start
	- Show or hide common icons on the desktop, uncheck Recycle Bin
	- Notifications & actions, Turn system icons on or off, Network=Off
- Taskbar Properties
	- (multiple monitors) Taskbar, Show taskbar buttons on=Taskbar where window is open"
	pause

	return
}

WindowsIcons()
{
	echo "Updating icons..."

	$mv "$pp/Desktop.lnk" "$pp/Applications" || return
	$mv "$up/Internet Explorer.lnk" "$pp/Applications" || return
	$mergeDir "$up/Accessories" "$pp/Applications" || return
	$mergeDir "$pp/Accessories" "$pp/Applications" || return
	$mergeDir "$up/Accessibility" "$pp/Applications/Accessories" || return
	$mergeDir "$pp/Accessibility" "$pp/Applications/Accessories" || return
	$mv "$pp/Camera.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$up/Immersive Control Panel.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Bing Desktop/Bing Desktop.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/PhotosApp.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Search.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/FileManager.lnk" "$pp/Applications/Accessories" || return
	$mv "$up/SkyDrive.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Windows Store.lnk" "$pp/Applications/Accessories" || return
	$mv "$pp/Windows Media Player.lnk" "$pp/Applications/Accessories" || return
	$rmd "$pp/Bluetooth Devices" || return

	$mergeDir --rename "$pp/Microsoft Mouse and Keyboard Center" "$pp/Operating System/Mouse and Keyboard Center"|| return
	$mergeDir "$up/Maintenance" "$pp/Operating System"|| return
	$mergeDir "$pp/Maintenance" "$pp/Operating System"|| return
	$mergeDir "$up/System Tools" "$pp/Operating System" || return
	$mergeDir "$pp/System Tools" "$pp/Operating System" || return
	$mergeDir "$pp/Microsoft Silverlight" "$pp/Operating System/Other" || return
	$mergeDir "$pp/Applications/Accessories/System Tools" "$pp/Operating System" || return
	$mergeDir "$pp/Administrative Tools" "$pp/Operating System" || return
	$mv "$pp/Devices Flow.lnk" "$pp/Operating System/System Tools" || return
	$mv "$pp/PrintDialog.lnk" "$pp/Operating System/System Tools" || return
	$mv "$pp/MiracastView.lnk" "$pp/Operating System/System Tools" || return

	$mergeDir "$pp/IIS" "$pp/Development/Other/IIS" || return

	local dest="$pp/Games/Other/Microsoft"; $makeDir "$dest" || return
	$mv "$pp/Games/Chess.lnk" "$dest" || return
	$mv "$pp/Games/FreeCell.lnk" "$dest" || return
	$mv "$pp/Games/Hearts.lnk" "$dest" || return
	$mv "$pp/Games/InkBall.lnk" "$dest" || return
	$mv "$pp/Games/Minesweeper.lnk" "$dest" || return
	$mv "$pp/Games/PurblePlace.lnk" "$dest" || return
	$mv "$pp/Games/Spider Solitaire.lnk" "$dest" || return
	$mv "$pp/Games/Hold 'Em.lnk" "$dest" || return
	$mv "$pp/Games/Mahjong.lnk" "$dest" || return
	$mv "$pp/Games/Solitaire.lnk" "$dest" || return

	$hideAndSystem "$pp/Applications/Accessories/Desktop.ini" || return
	$hideAndSystem "$pp/Applications/Accessories/Accessibility/Desktop.ini" || return
	$hideAndSystem "$pp/Applications/Accessories/Tablet PC/Desktop.ini" || return
}

pGinaInstall()
{
	printf "**************************************************\n* pGina\n**************************************************\n"
	
	IsInDomain && return 0
	
	# http://pgina.org/download.html
	run "Microsoft/Visual Studio/redistributable/vcredist_x86.exe" || return 
	run "Microsoft/Visual Studio/redistributable/vcredist_x64.exe" || return 
	run "Shareware/pGina/setup/pGinaSetup-3.1.8.0.exe" /silent || return # 

	echo "Updating icons..."
	$mergeDir "$pp/pGina" "$pp/Operating System/Other" || return

	pGina profile restore default || return
}

DropBoxInstall()
{
	printf "**************************************************\n* DropBox\n**************************************************\n"
	echo "- (new install) Ensure $(utw "$_cloud") directory is empty"
	
	run "Dropbox/setup/Dropbox 3.12.6 Offline Installer.exe" --standard || return # https://www.dropbox.com/download?full=1&plat=win

	echo "Updating icons..."
	# Keep icons in user programs or else may run incorrect version that another user has installed
	$mergeDir "$pp/Dropbox" "$pp/Operating System/Other" || return
	$rm "$up/Startup/Dropbox.lnk" || return
	$rm "$ud/Dropbox.lnk" || return

	if ask "Do you want to update index locations"; then
		DropBox close

		dir="$_cloud/.dropbox.cache"
		$makeDir  "$dir" || return
		attrib -h -s "$(utw "$dir")" || return

		echo "- Modify, $(utw "$_cloud"), check Dropbox, uncheck .dropbox.cache"
		os index options || return
		pause

		$hideAndSystem "$dir" || return

		sudo --standard DropBox startup
	fi

	pfpc "$_cloud"
	echot "\
- Preferences..., General
  - Uncheck Show desktop notifications
  - Uncheck Start Dropbox on system startup
- Explorer, Show libraries
  - Libraries, Documents, Manage, Manage Library, locations, 
    - Add..., <paste>
    - (not Intel) Move Up (to top), Set as default save location
  - View, List
- Print Screen, No Thanks"
	start explorer "$udoc" || return
}

vs() { vs15; }; VisualStudioInstall() { vs15; }; 

vs15() 
{ 
	vsInit || return
	printf "**************************************************\n* Visual Studio 2015\n**************************************************\n"
	echo "\
- Custom, check
	- Windows and Web Development: Microsoft Web Developer Tools, Silverlight Development Kit
	- Common Tools: GitHub Extension, Visual Studio Extensibility Tools"

	if [[ "$USERNAME" == @(jjbutare|ad_jjbutare) ]] || ask -dr n 'Install Enterprise (requires MSDN license)'; then
		run "$vs/setup/vs/en_visual_studio_enterprise_2015_x86_x64_dvd_6850497.iso" || return
	else
		run "$vs/setup/vs/NA" || return
	fi
	
	run "$vs/extension/VSColorOutput.vsix" # http://visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496
	ask 'Install VisualStudio optional components' && { VisualStudio2015OptionalComponents || return; }

	VsFinal || return
}

VisualStudio2015OptionalComponents()
{
	vsInit || return
	run "$vs/extension/NUnitVisualStudioTestAdapter-2.0.0.vsix" || return # https://visualstudiogallery.msdn.microsoft.com/6ab922d0-21c0-4f06-ab5f-4ecd1fe7175d?SRC=VSIDE
}

vs13() 
{ 
	vsInit || return
	printf "**************************************************\n* Visual Studio 2013\n**************************************************\n"
	echo "- uncheck Microsoft Foundation Classes for C++ (1.4 GB)"
	echo "- uncheck Tools for Maintaining Store apps for Windows 8 and Windows Phone 8.0 SDK"

	if [[ "$USERNAME" == @(jjbutare|ad_jjbutare) ]] || ask -dr n 'Install Ultimate (requires MSDN license)'; then
		run "$vs/setup/vs/en_visual_studio_ultimate_2013_x86_dvd_3009107.iso" || return
	else
		run "$vs/setup/vs/en_visual_studio_professional_2013_x86_dvd_3009197.iso" || return
	fi
	
	run "$vs/update/vs2013.4.exe" || return # http://www.visualstudio.com/news/vs2013-update4-rc-vs
	run "$vs/setup/ssdt/image/SSDTSetup.exe" || return # https://msdn.microsoft.com/en-us/data/tools.aspx
	run "$vs/extension/VSColorOutput.vsix" # http://visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496
	run "$vs/extension/NoGit.vsix" # https://visualstudiogallery.msdn.microsoft.com/146b404a-3c91-46ff-932a-fb0f8b826f94
	
	ask 'Install VisualStudio optional components' && { VisualStudio2013OptionalComponents || return; }

	VsFinal || return
}

VisualStudio2013OptionalComponents()
{
	vsInit || return
	run "$vs/update/OfficeToolsForVS2013Update1.3f.3fen.exe" || return
	run "$vs/setup/other/en_visual_studio_2013_sdk_x86_3009047.exe" || return
	run "$vs/extension/WebEssentials2013.vsix" || return # http://visualstudiogallery.msdn.microsoft.com/56633663-6799-41d7-9df7-0f2a504ca361
	run "$vs/setup/other/FSharp_Bundle.exe" || return
	run "$vs/extension/NUnitVisualStudioTestAdapter-1.2.vsix" || return # https://visualstudiogallery.msdn.microsoft.com/6ab922d0-21c0-4f06-ab5f-4ecd1fe7175d?SRC=VSIDE

	if ask 'Install Entrian Attach and Source (require license)'; then
		run "$vs/extension/Entrian-Attach-1.3.1-Setup.exe" || return # http://entrian.com/attach/download.html
		run "$vs/extension/Entrian-Source-Search-1.4.21-Setup.exe" || return # rhttp://entrian.com/source-search/download.html
	fi

}

vsInit()
{
	vs="Microsoft/Visual Studio"
}

VsFinal()
{
	IisExpressFinal || return
	ScriptEval VisualStudio init || return

	echo "Creating directories..."
	$makeDir "$CODE/test/vs"
	
	if ask "Initialize Visual Studio"; then
		echo "- (optional) Sign In, <Microsoft Live account>"
		echo "- Close Visual Studio"
		VisualStudio start; pause
	fi

	echo "Moving data folders..."
	$makeLink --merge --hide "$vsData" "$udoc/Visual Studio $vsName" || return
	$makeLink --merge --hide "$_udata/Web Essentials" "$uhome/Web Essentials" || return

	ask "Update registry" && { VsRegistry || return; }
	ask "Update icons" && { VsIcons || return; }
	ask "Restore profile" && { VisualStudio profile restore default || return; }

	echot "\
Tools, Options...
- Environment
	- Documents, check Always reload modified files unless there are unsaved changes
	- Keyboard - see Visual Studio Shortcuts, search for custom
  - Tabs and Windows
  	- check Insert new tabs to the right of existing tabs
  	- check Show pinned tabs in a separate row
- Text Editor
	- C#
	  - General, check Line numbers
	  - Tabs, Tab size=3, Indent size=3, Keep tabs
	- XAML, General, check Word wrap, Line Numbers, and Navigation Bar
- Debugging, General
	- uncheck Break all processes when one process breaks
	- uncheck Require source files to exactly match the original version
- IntelliTrace, uncheck Enavle IntelliTrace
- XAML Designer, Split Orientation=Vertical, 
View, Team Explorer...
- Home, Settings, Git Settings
  - Default Respository Location=$(utw "c:\Projects")
  - Check Enable download of author images from 3rd party source." 
	VisualStudio start
}

VsRegistry()
{
	echo "Updating Visual Studio registry..."
	ScriptEval VisualStudio init || return
	local r="$vsRegistryKey" c="$(utw "$CODE")"
	
	$registry 32 set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/VisualStudioProjectsLocation" REG_EXPAND_SZ "$c" || return
	$registry 32 set "$r/UserProjectTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ProjectTemplates")" || return
	$registry 32 set "$r/UserItemTemplatesLocation" REG_EXPAND_SZ "$(utw "$vsData/Templates/ItemTemplates")" || return
	$registry 32 set "$r/VisualStudioLocation" REG_EXPAND_SZ "$(utw "$vsData")" || return
}

VsIcons()
{
	echo "Updating Visual Studio icons..."
	ScriptEval VisualStudio init || return
	local base="$pp/Development/DotNet"; local other="$base/Other"; local vs="$other/Visual Studio $vsName"
	local java="$pp/Development/Java/Other"

	$makeDir "$java" || return
	$makeDir "$other" || return
	$makeShortcut "$_windows/assembly" "$base/GAC.lnk" || return

	$mergeDir --rename "$pp/Visual Studio $vsName" "$other/Visual Studio $vsName" || return
	$mergeDir --rename "$pp/Microsoft Visual Studio $vsName" "$other/Visual Studio $vsName" || return
	$mergeDir --rename "$pp/Python Tools for Visual Studio 2015" "$vs/Python Tools" || return
	$mergeDir "$pp/Windows Kits" "$vs" || return
	$mergeDir "$pp/Windows Phone SDK 8.0" "$vs" || return
	$mergeDir "$pp/Windows Phone SDK 8.1" "$vs" || return

	$mv "$pp/Microsoft Test Manager $vsName.lnk" "$vs" || return
	$mv "$pp/Visual Studio Emulator for Android.lnk" "$vs" || return
	$mv "$pp/Visual Studio $vsName.lnk" "$vs" || return
	$mv "$pp/Blend for Visual Studio $vsName.lnk" "$vs" || return

	$ren "$pp/Microsoft Web Platform Installer.lnk" "$pp/Development/DotNet/Web Platform Installer.lnk" || return
	$ren "$pp/SQL Server Data Tools 2012.lnk" "$base/SQL Server Data Tools.lnk" || return

	$mergeDir "$pp/Hyper-V Management Tools" "$pp/Operating System/other" || return
	$mergeDir "$pp/Java" "$pp/Operating System/other" || return
	$mergeDir "$up/Node.js" "$pp/Development/Other" || return

	$mergeDir "$pp/Android SDK Tools" "$java" || return
	$mergeDir "$pp/Java Development Kit" "$java" || return

	for f in "$vs/Microsoft"*.lnk; do $ren "$f" "${f/\/Microsoft //}" || return; done
	$cp "$vs/Visual Studio $vsName.lnk" "$base" || return

	SilverlightIcons || return
	ExpressionIcons || return
}

ExpressionIcons()
{
	local base="$pp/Development/Other/Expression"; $makeDir "$base"
	$mergeDir --rename "$pp/Microsoft Expression" "$base"
	$mergeDir --rename "$ud/Expression" "$ud/code/web"
	$mergeDir --rename "$base/Microsoft Expression Blend SDK" "$base/Expression Blend SDK"
	$ren "$ud/Expression/Expression Design/Samples 2.lnk" "$base/Design Samples.lnk"
	$ren "$base/Microsoft Expression Encoder 4 Screen Capture.lnk" "$base/Expression Encoder Screen Capture.lnk"
	$ren "$base/Microsoft Expression Encoder 4 SDK.lnk" "$base/Expression Encoder SDK.lnk"
	$ren "$base/Microsoft Expression Web 4 SuperPreview.lnk" "$base/Expression Web SuperPreview.lnk"
	for file in "$base/Microsoft Expression"*4.lnk; do $ren "$f" "${f/\/Microsoft //}"; done
}

IisExpressFinal()
{
	echo "Moving IIS Express data folders..."
	$makeLink --merge --hide "$_udata/IISExpress" "$udoc/IISExpress"
	$mergeDir "$udoc/My Web Sites" "$udoc/code/web"
}

VirtualCloneDriveInstall()
{
	printf "**************************************************\n* Virtual Clone Drive\n**************************************************\n"

	# download: http://www.slysoft.com/en/download.html
	# installs:
	# - ElbyDelay drive LowerFilter
	# - VirtualCloneDrive vcddaemon in Startup
	# - VirtualCloneDrive CloseTray shell extension (elbyvcdshell.dll)
	# - Drivers: ElbyCDIO, ElbyDelay, VClone
	run "SlySoft/CloneDrive/SetupVirtualCloneDrive5460.exe" || return

	echo "Updating icons..."
	$mergeDir "$pp/Elaborate Bytes" "$pp/Operating System/Other" || return
	$rm "$pd/Virtual CloneDrive.lnk" || return

	echot "\
- Settings
  - Number of Drives=Disabled
  - Check Virtual Sheep
  - Uncheck Show Tray Icon"
	iso gui || return
}

BcInstall() { BeyondCompareInstall; }
BeyondCompareInstall()
{
	printf "**************************************************\n* BeyondCompare\n**************************************************\n"
	
	local v=4.1.3.20814 # http://www.scootersoftware.com/download.php http://www.scootersoftware.com/beta.php
	echo "- uncheck Launch Beyond Compare"
	run "Scooter Software/Beyond Compare/setup/" -p "BCompare-$v.exe" "BCompareOSX-$v.zip" "bcompare-$v_i386.deb" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."

		$mergeDir --rename "$pp/Beyond Compare 4" "$pp/Applications/Other/Beyond Compare" || return
		$rm "$ud/Beyond Compare 4.lnk" || return
		$rm "$pd/Beyond Compare 4.lnk" || return

		$mergeDir "$up/Beyond Compare" "$pp/Applications/Other" || return
		$mergeDir "$pp/Beyond Compare" "$pp/Applications/Other" || return
		$rm "$ud/Beyond Compare 3.lnk" || return
		$rm "$pd/Beyond Compare 3.lnk" || return
	fi

	echo "- Help, Enter Key..., check Register for all users"
	[[ "$PLATFORM" == "mac" ]] && echo "- Beyond Compare, Install Command Line Tools…"
	BeyondCompare start || return
	pause

	BeyondCompare profile restore default || return
}

EverNoteInstall()
{
	printf "**************************************************\n* EverNote\n**************************************************\n"
	run "EverNote/setup/Evernote_5.9.6.9494.exe" || return # http://www.evernote.com/about/download

	echo "Updating icons..."
	$mergeDir "$pp/Evernote" "$ao" || return
	$rm "$pd/Evernote.lnk" || return
	$rm "$ud/Evernote.lnk" || return
	$rm "$pp/Startup/EvernoteClipper.lnk" || return
	$rm "$up/Startup/EvernoteClipper.lnk" || return

	echot "\
- View, Left Panel, uncheck all except Notes Notebooks Tags Atlas
- Tools, Options
  - General, uncheck Autoamtically check for updates
  - Sync, uncheck Enable sync notifications"
	sudo --standard EverNote startup || return
}

SonosInstall()
{
	printf "**************************************************\n* Sonos Music System\n**************************************************\n"
	run "Sonos/setup/SonosDesktopController54." -p "exe" "dmg" "" || return # http://sonos.com/support/

	echo "Updating icons..."
	$rm "$pd/Sonos.lnk" || return
	$mergeDir "$pp/Sonos" "$pp/Media/Other" || return

	if intel IsIntelHost; then
		echo "- McAfee Host Intrusion Prevention, Add, Name=Sonos, Application=C:\Program Files (x86)\Sonos\Sonos.exe"
		pause
	fi
}

nUnitInstall()
{
	local version="3.0.1" # http://www.nunit.org/?p=download
	printf "**************************************************\n* NUnit\n**************************************************\n"
	echo "Choose Setup Type=Complete"
	
	run "Shareware/.NET/NUnit/setup/NUnit.$version.msi" || return 

	echo "Updating icons..."
	#$mergeDir "$up/NUnit $version" "$pp/Development/DotNet/Other"
}

SilverlightSdk()
{
	printf "**************************************************\n* Silverlight SDK\n**************************************************\n"

	# downloads  http://www.silverlight.net/downloads
	# 	Developer Runtime (required, debugging): http://go.microsoft.com/fwlink/?LinkId=229324 http://go.microsoft.com/fwlink/?LinkID=229323
	#   toolkit (required, additonal controls): http://silverlight.codeplex.com/ http://silverlight.codeplex.com/releases/view/78435
	#   SDK (required if Visual Studio is not installed): http://www.microsoft.com/en-us/download/details.aspx?id=28359 
	#   tools (developer runtime, SDK, Visual Studio 2010 support): http://www.microsoft.com/en-us/download/details.aspx?id=28358
	# version: http://www.microsoft.com/getsilverlight/Get-Started/Install/Default.aspx
	run "Microsoft/.NET/Silverlight/development/Silverlight_Developer_${architecture}.exe"
	run "Microsoft/.NET/Silverlight/development/Silverlight_5_Toolkit_December_2011.msi"

	SilverlightIcons || return
}

SilverlightIcons()
{
	local base="$pp/Development/DotNet/Other/Silverlight"; $makeDir "$base"
	$ren "$pp/Microsoft Silverlight/Microsoft Silverlight.lnk" "$pp/Applications/Accessories/Silverlight.lnk"
	$ren "$pp/Microsoft Silverlight 4 SDK/Welcome.lnk" "$base/Silverlight 4 SDK Welcome.lnk"
	$ren "$pp/Microsoft Silverlight 5 SDK/Welcome.lnk" "$base/Silverlight 5 SDK Welcome.lnk"
	$mergeDir --rename "$pp/Microsoft Silverlight 5 Toolkit December 2011" "$base/Silverlight 5 Toolkit"
	$rmd "$pp/Microsoft Silverlight 4 SDK"
	$rmd "$pp/Microsoft Silverlight 5 SDK"
	$rmd "$pp/Microsoft Silverlight"
}

cctray() { CruiseControlTrayInstall; }
CruiseControlTrayInstall()
{
	local version="1.8.5.0"
	printf "**************************************************\n* CruiseControl Tray\n**************************************************\n"
	echo '- Uncheck Run CruiseControl.NET CCTray 1.8.5.0'	

	# download: http://vmspwbld001/ccnetpreprod/ViewFarmReport.aspx http://www.cruisecontrolnet.org/projects/cctray http://cruisecontrol.sourceforge.net http://ccnet.sourceforge.net/CCNET/CCTray.html https://github.com/ccnet/CruiseControl.NET
	run "Shareware/CruiseControl/tray/CruiseControl.NET-CCTray-$version-Setup.exe" || return

	echo "Installing plugins..."	
	FindFile "Shareware/CruiseControl/plugins/CCTray" || return
	$cp	"$file"/* "$P32/CCTray" || return

	echo "Updating icons..."
	$mergeDir "$pp/CCTray" "$pp/Development/Other" || return
	$mergeDir "$up/CCTray" "$pp/Development/Other" || return
	$rm "$ud/CCTray.lnk" || return
	$rm "$up/Startup/CCTray.lnk" || return

	CruiseControlTray profile restore default || return
	CruiseControlTray startup || return

 	wincred get CCTray:$USERNAME >& /dev/null || echot "\
- File, Settings, Build Projects, Add..., select a secure Build Server,
  check Server is secure, Authorisation Mode=Secure user name/password authentication,
  Configure, Username=%USERNAME%"
}

FirefoxInstall()
{
	printf "**************************************************\n* Firefox\n**************************************************\n"

	local v="39.0" # https://www.mozilla.org/en-US/firefox/all/
	run "Mozilla/Firefox/setup/Firefox Setup $v." -p "exe" "dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/Mozilla Firefox.lnk" "$pp/Applications" || return
		$rm "$pd/Mozilla Firefox.lnk" || return
	fi

	echot "\
- Don't import anything
- check Don't ask me again, Use Firefox as my default browser
- if start page does not come up, Internet Explorer, Tools, Connections, LAN settings, uncheck
  all, check Use automatic configuration script, Address=http://autoproxy/
- about:config, uncheck Show this warning next time
  - network.automatic-ntlm-auth.trusted-uris=localhost,intel.com,goto
  - network.negotiate-auth.trusted-uris=intel.com
- Open menu
	- Sign in to Sync, Already have an account? Sign in.
  - General, When Firefox starts Show my home page
  - Search, Default Search Engine=Google
  - Advanced
  	- General, check Search for text when I start typing"
intel IsIntelHost && echot "\
		- Certificates, View Certificates, Authorities, Import..., data\\certificate\\public, 
			Intel Root CA.cer, check Trust this CA to identify web sites"
  echot "\
- right of tabs, select Bookmarks Toolbar, select each bookmark to get icon and login"

}

ChromeInstall()
{
	printf "**************************************************\n* Google Chrome Browser\n**************************************************\n"
	echo '- Sign in Email=NNN, Password=NNN'
	echo '- New Tab, Apps, Learn more, Get the launcher'

	# download: http://www.google.com/chrome/eula.html?system=true&standalone=1
	run "Google/Chrome/setup/" -p "ChromeStandaloneSetup.exe" "googlechrome.dmg" "" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating registry..."	
		$registry set "HKEY_CURRENT_USER\Software\Google\Chrome\Metro\launch_mode" REG_DWORD 0 || return

		echo "Updating icons..."
		ChromeIcons || return

	elif [[ "$PLATFORM" == "mac" ]]; then	
		$rm "$la\com.google.keystone.agent.plist" || return

	fi

	echot "\
- Settings, Show advanced settings...
	- uncheck Continue running background apps when Google Chrome is closed
- LastPass, Preferences
	- Notifications, uncheck Show Matching Sites Count in toolbar
	- Icons, select second"
	chrome start || return
}

ChromeIcons()
{
		$rm "$ud/Google Chrome.lnk"
		$rm "$pd/Google Chrome.lnk"
		$rm "$ud/Chrome App Launcher.lnk"
		$rm "$ud/Google Chrome Canary Build.lnk"
		$mergeDir --rename "$pp/Google Chrome" "$ao/Chrome"
		$mergeDir --rename "$up/Google Chrome" "$ao/Chrome"
		$mergeDir "$up/Chrome Apps" "$up/Applications"
		$mergeDir --rename "$up/Google Chrome Canary Build" "$ao/Chrome Beta"
}

iisInstall()
{
	# - Add/Remove Windows Components requires inf files
	# - Remote Desktop Web Connection reference http://www.microsoft.com/windowsxp/using/networking/expert/northrup_03may16.mspx
	printf "**************************************************\n* IIS\n**************************************************\n"
  echo "- Internet Information Services, check all"
  echo "- (optional) Internet Information Services Hostable Web Core"
	
	product optional --wait || return

	if [[ $client ]] && ! intel IsIntelHost; then
	  echo "Updating firewall..."
	  $firewall rule enable "World Wide Web Services HTTP Traffic In"
	fi

	echo "Updating services..."
	service exist FTPSVC && { service manual FTPSVC || return; }

	if [[ $client ]] && ask "Set IIS services to run manually"; then
	  service exist IISADMIN && { service manual IISADMIN || return; }
	  service exist w3svc && { service manual w3svc || return; }
	  service exist AppHostSvc && { service manual AppHostSvc || return; }
	fi

	echo "Updating icons..."
	$makeDir "$pp/Development/Other/IIS" || return
	$mergeDir "$pp/IIS" "$pp/Development/Other" || return
	$makeShortcut "$WINDIR/system32/inetsrv/iis.msc" "$pp/Development/Other/IIS/IIS Client Manager" || return

	# [[ $client ]] && ask "Install remote manager" && { IisRemoteManager || return; }
	# ask "Configure WebDAV" --default n && { IisWebDav || return; }
	# ask "Configure FTP" --default n && { IisFtp || return; }
	# ask "Configure debugging" --default n && { IisDebugging || return; }
	# ask "Configure compression" --default n && { IisCompression || return; }
	# ask "Configure SSL" --default n && { IisSsl || return; }

	echo "Restarting IIS..."
	iisreset
}

IisCheck()
{ 
	if ! IsInstalled iis && ask "Do you want to install IIS"; then
		iisInstall; return
	fi
	return 0
}

ss() { SqlServerInstall; }; ss14() { SqlServerInstall; }
SqlServerInstall()
{
	local base="Microsoft/SQL Server"
	printf "**************************************************\n* SQL Server 2014\n**************************************************\n"
	
	echo; echo "Checking for IIS (required for reporting services)..."; IisCheck || return

	echot "\
Setup logs are in \"$P/Microsoft SQL Server/120/Setup Bootstrap/Log\"
- run <virtual clone drive>\setup.exe
- Installation, New SQL installation or add features to an existing installation
- Setup Roles, SQL Server Feature Installation
- Feature Selection, Select All (2.5GB)
- (optional) Instance Configuration
  - Named instance=MSSQLSERVER<version>
	- Instance root directory=d:\Program Files\Microsoft SQL Server\
- Database Engine Configuration
  - Authentication Mode=Mixed Mode, Enter password=XXX, Confirm password=XXX
  - Add Current User, Add..., ad_IDSID, (optional) Add..., AD_$USERNAME
- Analysis Services Configuration and Distributed Replay Controller
  - Add Current User, Add..., ad_IDSID, (optional) Add..., AD_$USERNAME"

  # download: http://www.microsoft.com/en-us/sqlserver/editions/2012-editions/express.aspx
	# updates: http://support.microsoft.com/kb/2755533
	# installs:
	# - Path:
	#   c:/Program Files (x86)/Microsoft SQL Server/120/Tools/Binn/
	#   c:/Program Files/Microsoft SQL Server/120/Tools/Binn
	#   c:/Program Files/Microsoft SQL Server/120/DTS/Binn
	#   c:/Program Files (x86)/Microsoft SQL Server/120/Tools/Binn/VSShell/Common7/IDE
	#   c:/Program Files (x86)/Microsoft Visual Studio 9.0/Common7/IDE/PrivateAssemblies
	#   c:/Program Files (x86)/Microsoft SQL Server/110/DTS/Binn/
  if [[ $client ]]; then
  	run "$base/setup/en_sql_server_2014_developer_edition_x64_dvd_3940406.iso" || return
	else
		run "$base/setup/en_sql_server_2014_enterprise_edition_x64_dvd_3932700.iso" || return
	fi

	# updates
	#run "$base/update/SQLServer2012SP2-KB2958429-${architecture}-ENU.exe" || return

	# determine components were installed
	local clientTools; [[ -f "$P32/Microsoft SQL Server/120/Tools/Binn/ManagementStudio/Ssms.exe" ]] && clientTools="true"
	local database; [[ -f "$P/Microsoft SQL Server/MSSQL12.MSSQLSERVER/MSSQL/Binn/sqlservr.exe" ]] && database="true"

	if [[ $clientTools ]]; then
		run "$base/plugins/SSMSBoostInstaller2014_2.17.5717.28174.msi" || return # http://www.ssmsboost.com
	fi

	[[ $database ]] && ask "Update server configuration" && { SsServerConfig || return; }

	ask "Cleanup log" && { SsLogCleanup || return; }
	ask "Update services" && { SsUpdateServices || return; }

	if [[ $clientTools ]]; then
		ask "Configure SQL Server Management Studio" && { SsManagementStudioConfig || return; }
	fi

	SsFinal || return
}

SsLogCleanup()
{
	ScriptEval SqlServer init || return

	echo "Removing log files..."
	$rmd "$P/Microsoft SQL Server/${versionNun}0/Setup Bootstrap/Log" || return
}

SsServerConfig()
{
	ScriptEval SqlServer init || return

	echo "- Object Explorer, Server, Properties, Memory, Maximum server memory=256"
	SqlServer studio || return
	pause

	echo "Updating firewall..."
	local port=1433; intel IsIntelHost && port=3180
	$firewall rule add "SQL Server" dir=in action=allow protocol=TCP localport=$port profile=private \
		program="$(utw "$P/Microsoft SQL Server/MSSQL${versionNum}.MSSQLSERVER/MSSQL/Binn/sqlservr.exe")" || return

	echot "\
- SQL Server Network Configuration, Protocols for MSSQLSERVER
- Named Pipes and TCP/IP=Enabled (click drop down, down arrow, enter)
- TCP/IP, IP Addresses
	- (IP for primary NIC) IPn, Enabled=Yes
	-IPAll, TCP Port=$port"
	SqlServer config
	pause
}

SsUpdateServices()
{
	[[ ! $client ]] && return 0

 	echo "Updating services..."
	SqlServer service demand --all || return
	SqlServer service stop --all || return

	if ask 'Automatically start SQL Server' -dr n; then
		SqlServer service auto || return
		SqlServer service start || return
	fi
}

SsManagementStudioConfig()
{
	ScriptEval SqlServer init || return

	ask 'Restore profile' && { SqlServer profile restore default || return; }
	SsManagementStudioConfigInstructions || return
	SqlServer studio || return
	pause
}

SsManagementStudioConfigInstructions()
{
	echot "\
	- View: Registered Servers at top left
	- Tools, Options
	  - Environment
	    - General, 20 items shown
	    - Startup, At startup Open empty environment
	  - Text Editor
	    - All Languages, check Line numbers
	    - Editor Tab and Status Bar, Tab Text, all but Include File Name to False
	   - Query Execution, SQL Server, ANSI, uncheck SET QUOTED IDENTIFIER"
}

SsFinal()
{
	ScriptEval SqlServer init || return

	echo "Moving data folders..."
	local dir="$_udata/SQL Server Management Studio"; $makeDir "$dir" || return
	$makeLink --merge --hide "$_udata/SQL Server Management Studio" "$udoc/SQL Server Management Studio" || return
	$makeLink --merge --hide "$_udata/Visual Studio 2010" "$udoc/Visual Studio 2010" || return

	echo "Linking script directory..."
	[[ -d "$_cloud/data/sql" ]] &&
		{ $makeShortcut "$_cloud/data/sql" "$dir/Personal.lnk" || return; }

	ask "Update registry" && { SsRegistry || return; }

	SsIcons || return;

	intel IsIntelHost && ask "Intel administrator setup" && { SsIntel || return; }

	if ask "Cleanup path"; then
		os path editor || return
		echo "- Remove SQL entries from the system path"
		pause
	fi
}

SsIntel()
{
	ScriptEval SqlServer init || return

	local p="$(utw "$P32/Microsoft SQL Server/${versionNum}0/Tools/Binn/ManagementStudio/Ssms.exe")"
	local adPrefix="$USERS/ad_$USERNAME"
	local toolSuffix="Microsoft/Microsoft SQL Server/${versionNum}0/Tools"
	local adToolDir="$adPrefix/AppData/Roaming/$toolSuffix"

	if [[ ! -d "$adToolDir" ]]; then
		SsManagementStudioConfigInstructions || return
		start runas "/user:amr\ad_$USERNAME" /savecred "$p"
		pause
	fi

	echo "Linking AD directory..."
	if [[ ! -L "$adToolDir/Shell" ]]; then

		echo "- Shell&sql&sql, Properties, Security, Edit..., Add..., amr\ad_$USERNAME, check Full control"
		start explorer "$APPDATA/$toolSuffix"
		[[ -d "$_cloud/data/sql" ]] && start explorer "$_cloud/data"
		[[ -d "$HOME/Syncplicity/data/sql" ]] && start explorer "$HOME/Syncplicity/data"
		pause

		mv "$adToolDir/Shell" "$adToolDir/Shell.backup" || return
		MakeLink "$APPDATA/$toolSuffix/Shell" "$adToolDir/Shell" || return

	fi	

	echo "Creating AD shortcut..."
	local link="$serverPrograms/Other/SQL Server $version/SQL Server Management Studio - AD.lnk"
	if [[ ! -f "$link" ]]; then
		$makeShortcut "runas.exe" "$link" \
			-a "/user:amr\ad_$USERNAME /savecred \"$p\"" \
			-d "SQL Server Management Studio - AD" --show=min || return
		clipw "$p" || return
		explore "$serverPrograms/Other/SQL Server $version" || return
		echot "- properties, Change Icon..., <paste>, Pin to Taskbar"
		pause
	fi

	echo "Linking SQL script directory..."	
	local pDir="$_cloud/data/sql"
	local spDir="$HOME/Syncplicity/data/sql"
	local dir="$_udata/SQL Server Management Studio"; $makeDir "$dir" || return
	local adPersonal="$adPrefix/Documents/SQL Server Management Studio/Personal.lnk"
	local adIntel="$adPrefix/Documents/SQL Server Management Studio/Intel.lnk"

	[[ -d "$spDir" ]] && { $makeShortcut "$spDir" "$dir/Intel.lnk" || return; }

	if [[ (-d "$pDir" && ! -f "$adPersonal") || (-d $spDir && ! -f "$adIntel") ]]; then
		[[ -d "$pDir" ]] && { $makeShortcut "$pDir" "$adPersonal" -w "/cygdrive/c" || return; }
		[[ -d "$spDir" ]] && { $makeShortcut "$spDir" "$adIntel" -w "/cygdrive/c" || return; }
	
		echo "- open SQL Server Mangement Studio - AD, ctrl-o, Intel&Personal, Properties, Target, remove ad_"
		pause
	fi

	return 0
}
SsRegistry()
{
	ScriptEval SqlServer init || return	

	local dir="$(utw "$_udata/sql")" r="HKCU/Software/Microsoft/SQL Server Management Studio/${versionNum}.0"

	echo "Updating SQL Server registry..."
	$registry set "$r/DefaultBrowseComponentLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultFileOpenLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultNewProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjectLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenProjItemLocation" REG_EXPAND_SZ "$dir" || return
	$registry set "$r/DefaultOpenSolutionLocation" REG_EXPAND_SZ "$dir" || return
}

SsIcons()
{
	echo "Updating icons..."	
	$mergeDir --rename "$pp/Microsoft SQL Server 2014" "$serverPrograms/Other/SQL Server 2014"
	$mergeDir --rename "$pp/Microsoft SQL Server 2012" "$serverPrograms/Other/SQL Server 2012"
	$mergeDir --rename "$pp/Microsoft Visual Studio 2010" "$pp/Development/DotNet/Other/Visual Studio 2010"
	$mergeDir --rename "$pp/Microsoft SQL Server 2008" "$serverPrograms/Other/SQL Server 2008"
}

SqlPromptInstall()
{
	printf "**************************************************\n* SQL Prompt\n**************************************************\n"
	run "RedGate/SQLPrompt_6.5.0.330.exe" || return # http://www.red-gate.com/products/sql-development/sql-prompt , downloads to $tmp/Red Gate

	echo "Updating icons..."
	$mergeDir "$pp/Red Gate" "$pp/Development/Other"

	echot "\
- SQL Prompt
	- Help, Enter Serial Number...
	- Options...
	  - Tabs & wraping, Characters per line=120
	  - Tab history, uncheck all"
	 SqlServer studio || return
	 pause
}

VisionAppInstall()
{
	printf "**************************************************\n* VisioApp Remote Desktop\n**************************************************\n"

	# home: http://www.visionapp.com/germany/software/visionapp-remote-desktop
	# download: \\vmsdaklx001\software$\Visionapp_remotedesktop http://www.visionapp.com/germany/solutions/asg-remote-desktop/asg-remote-desktop-2012-download.html
	run "VisionApp/Remote Desktop/setup/ASGRD_Setup.exe" || return

	echo "Updating icons..."
	$rmd "$pp/ASG-Remote Desktop 2012" || return
	$ren "$pd/ASG-Remote Desktop 2012.lnk" "$pp/Operating System/ASG Remote Desktop.lnk" || return

	echo "Configure..."

	local cloudDir="$_cloud/data/VisionApp" localDir="$_udata/VisionApp"
	$makeDir "$cloudDir" "$localDir" "$APPDATA/visionapp/vRD 2012" || return

	FindFile "VisionApp/Remote Desktop/license/Intel Corporation_Global.xml" || return
	clipw "$(utw "$file")" || return

	VisionApp profile restore default || return

	echot "\
- Add…, Database…, Connect to an Existing Database
	- Name of the environment=Intel
  - Database server=azssql940-vsql.amr.corp.intel.com,3180
  - Database name=VisionApp
- ?, Info..., Import new license file, <paste>
- View, Icon Size, 16x16
- Tools, Options
	- Application, check only Save tree view settings, Save last selected notepad, Pass-through authentication
	- Connections, check only Automatically disconnect active sessions, Deactivate 'docking' of connections
	- Layout
		- check only Hide status bar
		- Color Style=Office 2010 Black
		- Position of additional toolbar for=None
	- Logs , Delete=30 days (120 days for connection), Maximum nuumber of entries=100
- Administration
	- Default Conneciton Parameters, Name=, RDP, Programs, Program path and filename=mstsc /f /v:
	- Navigation, Auto Hide on left"
	VisionApp start || return
}

Office365Install()
{
	printf "**************************************************\n* Office 365\n**************************************************\n"
	run "Microsoft/Office/setup/office/" -p "en_office_365_preview_${architecture}.exe" "Microsoft_Office_2016_Installer.pkg" "" || return # https://stores.office.com/myaccount/advancedinstalls.aspx
	OfficeFinal || return
}

OfficeFinal()
{
	. office.sh || { EchoErr "inst: Office is not installed"; return 1; }

	echo "Updating directories..."
	$makeDir "$_udata/Templates" "$_data/Templates" || return

	echo "Moving data folders..."
	$makeLink --merge --hide "$_udata/OneNote" "$udoc/OneNote Notebooks" || return
	$makeLink --merge --hide "$_udata/Custom Office Templates" "$udoc/Custom Office Templates" || return
	
	ask "Restore normal templates" && { word RestoreNormal || return; }
	ask "Update registry" && { registry import "$setupFiles/ShellNew.reg" || return; }
	ask "Update icons" && { OfficeIcons || return; }
	ask "Configure" && { for o in "$setupFiles/Set Options".*; do start "$o" || return; pause; done; }
}

OfficeIcons()
{
	p="$ao/Office"

	$rm "$up/Startup/Send to OneNote.lnk" || return

	$mergeDir --rename "$pp/Microsoft Office 2013" "$p" || return
	$mergeDir --rename "$p/Office 2013 Tools" "$p/tools" || return
	for f in "$p/"*2013.lnk; do $ren "$f" "${f/ 2013/}" || return; done
	for f in "$p/tools/"*2013*.lnk; do $ren "$f" "${f/ 2013/}" || return; done

	$makeDir "$p" || return
	$mergeDir --rename "$pp/Microsoft Office 2016 Tools" "$p/tools" || return
	$mv "$pp/"*2016.lnk "$p" || return
	for f in "$p/"*2016.lnk; do $ren "$f" "${f/ 2016/}" || return; done
	for f in "$p/tools/"*2016*.lnk; do $ren "$f" "${f/ 2016/}" || return; done
}

nVidiaInstall()
{
	printf "**************************************************\n* nVidia Video Drivers\n**************************************************\n"

	# Driver: http://www.nvidia.com/Download/Find.aspx?lang=en-us for GTX 550 Ti
	# Scan: http://www.nvidia.com/Download/Scan.aspx?lang=en-us
	# System tools: http://www.nvidia.com/object/nvidia_system_tools_6.03.html
	# NTune: http://www.nvidia.com/object/sysutility.html
	# Installs:
	# Path: c:/Program Files (x86)/NVIDIA Corporation/Physx/Common
	# Service: 
	# - nvUpdatusService - NVIDIA Settings Update Manager, check for new updates
	# - Stereo Service - NVIDIA Stereoscopic 3D Driver Service (3D glasses)
	# - nvsvc - Provides system and desktop level support to the NVIDIA display driver
	#     Note: In 2010 on Oversoul the nVidia service changed the display settings to undesired settings, 2011 trying again
	# - nTuneService - display the Performance and System Stability sections of the NVIDIA control panel (clock and fan adjustment, etc).
	run "nVidia/driver/335.23-desktop-win8-win7-winvista-${bits}bit-english-whql/setup.exe" || return

	echo "Updating services..."
	service manual "Stereo Service" || return
	service manual "nvUpdatusService" || return

	echo "Updating icons..."
	$mergeDir --rename "$pp/NVIDIA Corporation" "$pp/Operating System/Other/NVIDIA" || return
	$rm "$pd/GeForce Experience.lnk" || return
	$rm "$pd/3D Vision Photo Viewer.lnk" || return
}

GitCore()
{		
	Git${PLATFORM^}Core || return
	ask 'Configure git' && { GitConfigure || return; }
	ask 'Clone bin' && { GitHelper bin || return; }
}

GitConfigure()
{
	local args name program
	FindEditorProgram || return
	$sudo git config --system core.editor "\"$program\" $args" || return

	FindCompareProgram || return
	git config --global merge.tool "$name" || return
	git config --global diff.tool "$name" || return	
}


GitWinCore()
{
	ask 'Install Cygwin git' && { i CygwinGit || return; }
	ask 'Install Git for Windows' && { i GitForWindows || return; }
	ask 'Install Git Extensions' && { i GitExtensions || return; }

	ScriptEval intel SetProxy || return

	ask 'Install git-up' && { pip install git-up || return; }

	ask 'Install git-extras' && 
		{ (cd /tmp && git clone --depth 1 https://github.com/tj/git-extras.git && cd git-extras && make install) || return; }

	cp "$setupFiles/hub.bash_completion.sh" "$COMPLETION/hub" || return
}

CygwinGit()
{
	cygwin package git || return
	cygwin FixCompletion || return

	echo "Configuring git..."

	/usr/bin/git config --system core.autocrlf false || return
	/usr/bin/git config --system core.filemode false || return
	/usr/bin/git config --system credential.helper wincred || return

	FindEditorProgram || return
	/usr/bin/git config --system core.editor "sublime start --wait" || return

	/usr/bin/git config --system difftool.$name.trustExitCode "true" || return
	/usr/bin/git config --system difftool.$name.cmd "BeyondCompare --wait "'"$LOCAL" "$REMOTE"' || return
	/usr/bin/git config --system mergetool.$name.trustExitCode "true" || return
	/usr/bin/git config --system mergetool.$name.cmd "BeyondCompare --wait "'"$LOCAL" "$REMOTE" "$BASE" "$MERGED"' || return
}

GitMacCore()
{
	i GitX || return
	#ask 'Install git-up' && { gem install git-up || return; } # ruby git-up stopped working on OS X 10.11
	ask 'Install git-up' && { pip install git-up || return; }
	ask 'Install git-extras and hub' && { brew install git-extras hub || return; }

	FindCompareProgram || return
	
	git config --global diff.tool "$name" || return
	$sudo git config --system difftool.$name.trustExitCode "true" || return
	$sudo git config --system difftool.$name.cmd "\"$program\" $args "'"$LOCAL" "$REMOTE"' || return
	
	git config --global merge.tool "$name" || return
	$sudo git config --system mergetool.$name.trustExitCode "true" || return
	$sudo git config --system mergetool.$name.cmd "\"$program\" $args "'"$LOCAL" "$REMOTE" "$BASE" "$MERGED"' || return
}

GitXInstall()
{
	printf "**************************************************\n* GitX\n**************************************************\n"
	run "Shareware/GitX/GitX-dev.dmg" || return # http://rowanj.github.io/gitx/
}

gfwInstall() { GitForWindowsInstall; }
GitForWindowsInstall()
{
	local g="$P/Git/cmd/git" gc="/usr/bin/git"
	printf "**************************************************\n* Git for Windows\n**************************************************\n"
	
	echot "\
- Select Components
	- uncheck Windows Explorer Integration
	- (Cygwin) uncheck Associate .sh files to be run with Bash
- Checkout as-is, commit as-is
- check Enable file system caching
- uncheck View ReleaseNotes.rtf"
	run "Shareware/Git for Windows/setup/Git-2.6.3-64-bit.exe" || return # https://github.com/git-for-windows/git/releases/

	if [[ -f "$P/Git/usr/bin/ssh.exe" ]]; then
		echo "Enabling Cygwin ssh..."
		mv "$P/Git/usr/bin/ssh.exe" "$P/Git/usr/bin/ssh_hold.exe" || return
	fi
	
	echo "Updating icons..."
	$mergeDir "$pp/Git" "$pp/Development/Other"
	$mergeDir "$up/Git" "$pp/Development/Other"
	
	echo "Configuring http.sslcainfo..."
	"$gc" config --system http.sslcainfo "$P/Git/usr/ssl/certs/ca-bundle.crt" || return
	"$g" config --system http.sslcainfo "$(utw "$P/Git/usr/ssl/certs/ca-bundle.crt")" || return

	echo "Configuring git..."
	"$g" config --system core.fscache true || return
	"$g" config --system core.filemode false || return
	"$g" config --system core.autocrlf false || return
	"$g" config --system credential.helper wincred || return

	FindEditorProgram || return
	"$g" config --system core.editor "\"$(utw $program)\" $args" || return

	FindCompareProgram || return
	"$g" config --system difftool.$name.trustExitCode "true" || return
	"$g" config --system difftool.$name.cmd "\"$(utw $program)\" $args "'"$LOCAL" "$REMOTE"' || return
	"$g" config --system mergetool.$name.trustExitCode "true" || return
	"$g" config --system mergetool.$name.cmd "\"$(utw $program)\" $args "'"$LOCAL" "$REMOTE" "$BASE" "$MERGED"' || return
}

MsysgitInstall()
{
	printf "**************************************************\n* msysgit \n**************************************************\n"

	echot "\
- Select Components
	- uncheck Windows Explorer Integration
	- (Cygwin) uncheck Associate .sh files to be run with Bash
- Checkout as-is, commit as-is
- uncheck View ReleaseNotes.rtf"
	run "Shareware/msysGit/setup/Git-1.9.5-preview20150319.exe" || return # http://msysgit.github.io/ http://git-scm.com/download/win https://github.com/msysgit/msysgit/releases https://github.com/msysgit/msysgit

	if [[ -f "$P32/Git/bin/ssh.exe" ]]; then
		echo "Enabling Cygwin ssh..."
		mv "$P32/Git/bin/ssh.exe" "$P32/Git/bin/ssh_hold.exe" || return
	fi

	echo "Updating icons..."
	$mergeDir "$pp/Git" "$pp/Development/Other"
	$rm "$pd/Git Bash.lnk"
	$rm "$pd/Git Extensions.lnk"

	echo "Configuring Cygwin git..."
	/usr/bin/git config --system http.sslcainfo "$P32/git/bin/curl-ca-bundle.crt" || return

	echo "Configuring git..."
	"$P32/Git/bin/git" config --system core.filemode false || return
	"$P32/Git/bin/git" config --system core.autocrlf false || return
	"$P32/Git/bin/git" config --system credential.helper wincred || return

	FindEditorProgram || return
	"$P32/Git/bin/git" config --system core.editor "\"$(utw $program)\" $args" || return

	FindCompareProgram || return
	"$P32/Git/bin/git" config --system difftool.$name.trustExitCode "true" || return
	"$P32/Git/bin/git" config --system difftool.$name.cmd "\"$(utw $program)\" $args "'"$LOCAL" "$REMOTE"' || return
	"$P32/Git/bin/git" config --system mergetool.$name.trustExitCode "true" || return
	"$P32/Git/bin/git" config --system mergetool.$name.cmd "\"$(utw $program)\" $args "'"$LOCAL" "$REMOTE" "$BASE" "$MERGED"' || return

}

geInstall() { GitExtensionsInstall; }
GitExtensionsInstall()
{
	printf "**************************************************\n* Git Extensions\n**************************************************\n"
	
	echot "\
- check Install GitCred
- uncheck Windows Explorer Integration, Add installation directory to PATH, Visual Studio extension
- (if using ssh-agent) Select OpenSSH"
	# http://gitextensions.github.io/ https://code.google.com/p/gitextensions https://github.com/gitextensions/gitextensions
	run "Shareware/GitExtensions/setup/GitExtensions-2.48.05-SetupComplete.msi" || return # https://github.com/gitextensions/gitextensions/releases/latest

	GitHelper gui || return
	echot "- English, Quit"
	pause

	echo "Creating files..."
	if [[ ! -f ~/.gitconfig.tmp ]]; then
		touch ~/.gitconfig.tmp || return
		$hide ~/.gitconfig.tmp || return
	fi

	echo "Updating icons..."
	$makeDir "$pp/Development/Other/Git" || return
	$mv "$pp/Git Extensions.lnk" "$pp/Development/Other/Git" || return
	$rm "$pd/Git Extensions.lnk" || return

	GitHelper profile restore default || return
}

GitHubInstall()
{
	printf "**************************************************\n* GitHub\n**************************************************\n"
	run "GitHub/setup/GitHubSetup.exe" || return # https://github-windows.s3.amazonaws.com/GitHubSetup.exe
	pause
	
	echo "Updating icons..."
	$mergeDir --rename "$up/GitHub, Inc" "$up/Development/Other/GitHub" || return
	$rm "$ud/GitHub.appref-ms" || return
	$rm "$ud/Git Shell.lnk" || return

	echot "\
- GITHUB ENTERPRISE, GitHub Username or Email=IDSID
- Password=NNN
- GitHub Enterprise URL=https://GitHub.intel.com/
- Full Name=NNNN
- tools, options...
	- default storage directory=c:\Projects
	- SCAN FOR REPOSITORIES
	- (optional) default shell=Custom, c:\Program Files\Cygwin\bin\mintty.exe
- note: 
	- GitHib is useful for quickly cloning a repository from GitHub
	- clone a repository - click an account on the left channel, right click on the repository, and select Clone To..."
}

TortoiseGitInstall()
{
	printf "**************************************************\n* TortoiseGit\n**************************************************\n"
	
	echot "- (optional) Check Registrer link handlers"
	run "Shareware/TortoiseGit/setup/TortoiseGit-1.8.7.0-${bits}bit.msi" || return # https://code.google.com/p/tortoisegit/wiki/Download?tm=2

	echo "Updating icons..."
	$mergeDir "$pp/TortoiseGit" "$pp/Development/Other"

	FindCompareProgram || return; clipw "$(utw "$program")" || return
	echot "\
- General
	- Contect Menu, uncheck all but Clone and Show log
	-Dialogs 1, check Enable Gravatar
- (optional) Diff Viewer (1 place) and Merge Tool (1 place), External=<paste>
- Icon Overlays
	- check Unversioned files mark parent folder as modified
	- Icon Set, Icon Set=Straight"
	GitHelper tgui /command:settings || return
}

VisualSvnInstall() { TortoiseSvnInstall; }
TortoiseSvnInstall()
{
	printf "**************************************************\n* TortoiseSVN Source Control\n**************************************************\n"
	echo "- Select all features"
	
	run "Shareware/TortoiseSVN/TortoiseSVN-1.8.5.25224-${architecture}-svn-1.8.8.msi" || return # http://tortoisesvn.net/downloads.html
	run "VisualSVN/VisualSVN-4.0.6.msi" || return # http://www.visualsvn.com/visualsvn/download/

	echo "Updating icons..."
	$mergeDir "$pp/TortoiseSVN" "$pp/Development/Other" || return
	$mergeDir "$up/VisualSVN" "$pp/Development/Other" || return
	$mergeDir "$pp/VisualSVN" "$pp/Development/Other" || return

	FindCompareProgram || return; clipw "$(utw "$program")" || return
	echot "- (optional) Diff Viewer (2 places) and Merge Tool (1 place), External=<paste>"
  TortoiseSVN gui /command:settings || return
}	

BrowserHomePage()
{
	local file="$_udata/replicate/default.htm"
	local url="file:///$(utw "$file")"

	[[ ! -f "$file" ]] && { EchoErr "inst: cannot access browser home page file \`$file\`: No such file"; return 1; }

 	# Chrome
	$makeLink "$_udata/replicate" "$_ApplicationData/replicate" || return

	# Internet Explorer
	echo "- Tools, Internet Options, Use Current"
	InternetExplorer start "$url" || return
	pause
}

sysInternalsInstall()
{
	printf "**************************************************\n* SysInternals Tools\n**************************************************\n"
	registry import "$setupFiles/SysInternalsEula.reg"
}

iTunesInstall()
{
	printf "**************************************************\n* iTunes\n**************************************************\n"
	echo "- Uncheck Use iTunes as the default player for audio files"
	echo "- Uncheck Automatically update iTunes and other Apple software"
	
	# Download: http://itunes.com
	# Setup: VBScript is not installed error: http://coderjournal.com/2007/03/apple-wants-vista-to-run-un-secured-to-install-itunes/
	# AirPrint: http://discussions.apple.com/thread.jspa?threadID=2659544 or http://ipadhelp.com/ipad-help/how-to-enable-airprint-for-windows-and-use-any-printer/
	# Installs:
	#   - iTunesHelper - optional, for quick launch
	#   - Shell Extension: iTunes
	#   - Task Scheduler: AppleSoftwareUpdateApple
	# -   Services: Apple Mobile Device (required), iPod Service (recognize iPods), Bonjour Service (sharing), AirPrint
	run "Apple/iTunes/setup/iTunes v12.3.2.35 ${architecture}.exe" || return

	echo "Updating icons..."
	$rm "$pd/iTunes.lnk" || return
	$mergeDir "$pp/iTunes" "$ao" || return

	echo "Updating registry..."	
	$registry 32 delete "run/iTunesHelper" # "C:/Program Files/iTunes/iTunesHelper.exe"
	$registry 32 delete "run/APSDaemon" # "C:/Program Files (x86)/Common Files/Apple/Apple Application Support/APSDaemon.exe"

	echo "Updating services..."
	service auto "iPod Service"

	#iTunes profile restore default || return
	QuickTimePost || return
	AppleCore || return

	echot "\
Use alt to open menu items
- iTunes Store, Sign In
- Store, Authorize Computer...
- Edit, Preferences
	- General
    - Library Name=<first name>'s Library
    - Sources, check all
    - Import Settings
      - Import Using=MP3 Encoder
      - Setting=Higer Quality
	- Store, uncheck Automatic Downloads, Music, Apps, Books
	- Advanced
    - iTunes Music folder location=Music/My Music or (Music ROO) Music/Public Music
    - uncheck Keep iTunes Music folder organized
    - uncheck Copy files to iTunes Music folder when adding to library
    - check Enable full keyboard navigation
- File, Add folder to library..., Music/My Music or (Music ROO) Music/Public Music
- Connect iOS device
  - (optional) Music, check Selected playlists, artists, and genres, check Best or 5 Star
  - (optional) Info
    - Check Sync Contacts with Outlook
    - (one time) check Sync Mail Accounts from Outlook
    - Check Sync notes with Outlook
- Notes: Ctrl-t visualizer, ctrl-f full screen"
	#sudo --standard iTunes start || return
}

QuickTimePost()
{
	$registry 32 delete "run/QuickTime Task" # "C:/Program Files/QuickTime/qttask.exe" -atboottime

	echo "Updating icons..."
	$makeDir "$ao/Apple" || return
	$mergeDir "$pp/QuickTime" "$ao" || return
	$rm "$pd/QuickTime Player.lnk" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return
}

TeamViewerInstall()
{
	printf "**************************************************\n* TeamViewer\n**************************************************\n"
	echo "- How do you want to use TeamViewer=personal / non-commercial use"

	run "TeamViewer/setup/TeamViewer_Setup_en.exe" || return # http://www.teamviewer.com/en/download/windows.aspx

	echo "Updating icons..."
	$mv "$pp/TeamViewer "?".lnk" "$pp/Operating System" || return
	$rm "$pd/TeamViewer "?".lnk" || rturn

	echot "\
- Computers & Contacts, Sign In, ...
- Add this computer, Comptuer name=<camel case>, Password/Confirm Password=<secure numeric>"
}

TrueImageInstall()
{
	printf "**************************************************\n* True Image\n**************************************************\n"
	
	run "Acronis/setup/ATIH2014_5560_en-US" || return # http://www.acronis.com/support/updates/

	echo "Updating icons..."
	$mergeDir "$pp/Acronis" "$pp/Operating System/Other" || return
	$rm "$pd/Acronis True Image 2014.lnk" || return

	echo "Updating registry..."	
	$registry delete "run/Acronis Scheduler2 Service" # "C:\Program Files (x86)\Common Files\Acronis\Schedule2\schedhlp.exe"
	$registry 32 delete "run/AcronisTibMounterMonitor" # C:\Program Files (x86)\Common Files\Acronis\TibMounter\TibMounterMonitor.exe
	$registry 32 delete "run/TrueImageMonitor.exe" # "C:\Program Files (x86)\Acronis\TrueImageHome\TrueImageMonitor.exe"
}

npp() { NotepadPpInstall; }
NotepadPpInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* Notepad++\n**************************************************\n"
	echo "- Uncheck Run Notepad++"

	run "Shareware/Notepad++/setup/npp.6.8.8.Installer.exe" || return # http://notepad-plus-plus.org/download/

	FindFile "Shareware/Notepad++" || return

	if ask "Deleting existing plugins and install the defaults"; then
		$rc --mirror --quiet "$file/plugins/default" "$P32/Notepad++/plugins" || return
	fi

	echo "Updating registry..."
	registry import "$file/setup/NotepadPP.reg" || return

	echo "Updating icons..."
	$rm "$ud/Notepad++.lnk" || return
	$rm "$pd/Notepad++.lnk" || return
	$mergeDir "$up/Notepad++" "$ao" || return
	$mergeDir "$pp/Notepad++" "$ao" || return

	notepadpp profile restore default || return

	echot "\
- Settings, Shortcut Mapper...,  Reload from Disk=Ctrl+R
- Explorer, Search=*.txt, Open with, Choose another app, check Always use this app to open .txt files, 
  More apps, Look for another app on this PC, c:\Program Files (x86)\Notepad++\notepad++.exe
- keyboard shortcuts 
  ctrl-n/w=new/close,  ctrl+/-=zoom ctrl-r=refresh
  [shift]ctrl-tab=switch, ctrl-shift-o=file switcher
  [alt]click drag=[block] select, ctrl-space=auto complete"
	notepadpp || return
}

jreInstall()
{
	printf "**************************************************\n* Java Runtime Environment \n**************************************************\n"
	
	# Download 7: http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html#javasejdk
	# Download: http://www.java.com/en/download/manual.jsp
	# Download: http://www.oracle.com/technetwork/java/javase/downloads/index.html
	# Eary access: http://www.oracle.com/technetwork/java/javase/downloads/ea-jsp-142245.html
	# Test: http://www.java.com/en/download/installed.jsp http://java.com/en/download/help/testvm.xml
	# Services: JavaQuickStarterService
	run "Sun/Java/jre/*-x86.exe" || return
	[[ "$architecture" == "x64" ]] && { run "Sun/Java/jre/*-x64.exe" || return; }

	JavaFinal
}

JavaFinal()
{
	echo "Updating registry..."
	$registry 32 delete "run/SunJavaUpdateSched"
	$registry 64 delete "run/SunJavaUpdateSched"

	echo "Updating icons..."
	JavaIcons || return

	ask "Test the Java browser plugin?" && JavaUtil test
	return 0
}

JavaIcons()
{
		$mergeDir "$pp/Java" "$pp/Operating System/Other" || return
}

VmwareWorkstationInstall()
{
	printf "**************************************************\n* VMware Workstation\n**************************************************\n"
	echot "\
- Custom
  - Uncheck development environment plug-ins 
  - Workstation Server Component Configuration
    - Store shared VMs to=Public/Documents/data/VMware
    - HTTPS Port=444
- Uncheck Check for product updates on startup"
	
	# download - https://my.vmware.com/group/vmware/downloads#tab1
	# services - VMAuthdService: run virtual machines as non-admin or in the background
	run "VMware/workstation/setup/VMware-workstation-full-12.0.0-2985596.exe" || return 

	echo "Updating firewall..."
	# When the guest uses NAT echo replies (ICMP type and code 0) must be allowed for ping to function on the guest
	$firewall rule add "VMware NAT Echo Reply" dir=in action=allow enable=yes profile=private,domain localip=any remoteip=any protocol=icmpv4:0,0 interfacetype=any edge=yes || return

	echo "Creating VMware directory..."
	$makeDir "$_udata/VMware"

	echo "Updating icons..."
	$mergeDir "$pp/VMware" "$pp/Operating System/Other" || return
	$rm "$pd/VMware Workstation"*".lnk" || return

	echo "Virtual Network Editor..."
	echo "(optional) - VMnet1 (host-only), VMnet8 (NAT): uncheck Connect a host virtual adapter to this network, Apply"
	#VMware network
	pause

	#if [[ "$(service StartType SysMain)" != "DISABLED" ]] && ask "Disable SuperFetch (causes excessive disk utilization with virtual machines)"; then
	#	 service disable SysMain || return
	#fi

	echot "\
- Edit, Preferences...
  - Workspace
    - Default location for virtual machines=Documents/data/VMware or d:\users\...\VMware
    - uncheck Remember opened tabs between sessions
    - check Keep VMs running after workstation closes
  - Hotkeys, select Ctrl and Win only
  - Display
    - uncheck Autofit Window
    - check Autofit guest
    - uncheck Show toolbar edge when unpinned in full screen
  - Updates, check Automatically update VMware Tools on a virtual machine
  - Memory, How much host RAM=12000 (Oversoul)
  - Priority
    - Input grabbed=High
    - Input ungrabbed=Low
    - (optional) Uncheck Take and restore snapshots in the background when possible
  - (optional) Devices, Uncheck Disable Autorun on the host when a VM is running"
	# Start manually default location folder is not yet configured
	start --wait "$P32/VMware/VMware Workstation/vmware.exe"
}

LastPassInstall()
{
	printf "**************************************************\n* LastPass\n**************************************************\n"

	echo "- Log In to Existing Account"
	run "LastPass/setup/LastPass Setup ${architecture} v3.1.95.exe" || return # https://lastpass.com/misc_download2.php

	echo "- uncheck Run LastPass for Applications"
	#run "LastPass/setup/LastPass for Applications Setup ${architecture} v3.1.40.exe" -dr n || return 

	echo "Updating icons..."
	$mergeDir "$up/LastPass" "$pp/Operating System/Other" || return
	$mergeDir "$pp/LastPass" "$pp/Operating System/Other" || return
	$rm "$pp/Operating System/Other/LastPass/Uninstall LastPass For Applications.lnk" || return
	$mv "$pd/My LastPass Vault.lnk" "$pp/Applications" || return
	$rm "$pp/Startup/Install LastPass FF RunOnce.lnk" || return
	$rm "$pp/Startup/Install LastPass IE RunOnce.lnk" || return

	echo "Updating registry..."	
	$registry 32 delete "run/LastApp" # C:\Program Files (x86)\LastPass\lastapp.exe

	if ask 'Update Firefox'; then
		echo "- Open menu, Add-ons, Enable LastPass, Restart now, check Remember Password"
		echo "- Preferences, Icons, select grey no border"
		"$P32/Mozilla Firefox/firefox.exe" || return
	fi
}

FoxitReaderInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	echot "**************************************************\n* Foxit Reader - PDF Reader\n**************************************************\n
- Uncheck Foxit Reader Creator
- Uncheck Enable Safe Reading Mode"
	
	if intel IsIntelHost; then
		run "Intel/erm/ErmClientInstall_1.5.0.18.exe" || return # https://adrms.intel.com/erm/ac/download/pdf/
	else
		run "Foxit/reader/setup/FoxitReader715.0425_enu_Setup.exe" || return # http://www.foxitsoftware.com/downloads/index.php 
	fi

	run "Foxit/reader/setup/FoxitPdfPreviewHandlerSetup_1_1.msi" || return # http://timheuer.com/blog/archive/2008/05/09/foxit-pdf-preview-handler.aspx

	echo "Updating icons..."
	FoxitReaderIcons || return

	echot "\
- Edit, Preferences
  - General, uncheck Show Start Page
  - History, Maximum number of documents in recently used list=10
  - Updater, Do not download"
	start "$P32/Foxit Software/Foxit Reader/FoxitReader.exe" || return
}

FoxitReaderIcons()
{
	$mergeDir "$pp/Foxit Reader" "$ao" || return
	$rm "$pd/Foxit Reader.lnk" || return
	$rm "$ud/Foxit Reader.lnk" || return
}
iCloudInstall()
{
	printf "**************************************************\n* iCloud\n**************************************************\n"
	
	run "Apple/iCloud/iCloudSetup v3.0.2.exe" || return # http://support.apple.com/kb/DL1455

	# iCloudServices - C:\Program Files (x86)\Common Files\Apple\Internet Services\iCloudServices.exe
	# registry delete "urun/iCloudServices" || return

	# ApplePhotoStreams - C:\Program Files (x86)\Common Files\Apple\Internet Services\ApplePhotoStreams.exe
	# registry delete "urun/ApplePhotoStreams" || return

	echo "Updating icons..."
	$mergeDir "$pp/iCloud" "$pp/Operating System/Other" || return

	AppleCore || return

	echot "\
iCloud Control Panel
- uncheck Mail, Contacts, Calendars, & Tasks and Bookmarks
- check Photo Stream"
}

AppleCore()
{
	echo "Updating Apple icons..."
	$makeDir "$ao/Apple" || return
	$mv "$pp/Apple Software Update.lnk" "$ao/Apple" || return
}

iExplorerInstall()
{
	printf "**************************************************\n* iExplorer\n**************************************************\n"
	
	run "Macroplant/iExplorer/setup/" -p "iExplorer_Setup_3401.exe" "iExplorer-3.5.0.6.dmg" ""|| return # http://www.macroplant.com/iexplorer/download-ie3-pc.php

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating registry..."	
		$registry delete "urun/iExplorer" # "C:\Program Files (x86)\iExplorer\iExplorer.exe" /background

		echo "Updating icons..."
		$mergeDir "$pp/iExplorer" "$pp/Operating System/Other" || return
		$rm "$pp/Operating System/Other/iExplorer/Uninstall iExplorer.lnk" || return
			$rm "$pp/Operating System/Other/iExplorer/iExplorer on the Web.url" || return
		QuickTimePost || return
  elif [[ "$PLATFORM" == "mac" ]]; then
		run "Shareware/Fuse/setup/osxfuse-2.7.1.dmg" || return # http://osxfuse.github.io
	fi
}

MediaCore()
{
	printf "**************************************************\n* Media Core\n**************************************************\n"
	
	echo "Updating icons..."
	$makeShortcut "$DATA/platform/win/gspot.exe" "$pp/Media/GSpot" || return
	$makeShortcut "$DATA/platform/win/InstalledCodec.exe" "$pp/Media/Installed Codecs"  || return
	$makeShortcut "$DATA/platform/win/DSFMgr.exe" "$pp/Media/DirectShow Filter Manager" || return

	#echo "Registering libraries...""
	#.net.btm register "$PublicData/lib/taglib-sharp.dll" # MediaCmd.exe

	ask 'Install image programs' && { i picasa FastStoneImageViewer IrfanView || return; }
	ask 'Install book programs' && { i calibre calibre2opds kindle || return; }
	ask 'Install music programs' && { i sonos MusisBee || return; }
}

PicasaInstall()
{
	printf "**************************************************\n* Picasa\n**************************************************\n"
	
	echot "\
- Completing the Picasa 3 Setup
  - Uncheck Google as my default search engine in Internet Explorer
  - Uncheck Send anonymous usage stats to Google
- Only search My Documents, My Pictures, and Desktop
- Select Don't use Picasa Photo Viewer"

	run "Google/Picasa/setup/Picasa Setup v3.9.139.161.exe" || return
	run "Google/Picasa/starter/image v2.0.zip" "$P32/PicasaStarter" || return

	echo "Updating icons..."
	$mergeDir --rename "$pp/Picasa 3" "$pp/Media/Other/Picasa" || return
	$mergeDir "$up/Google+ Auto Backup" "$up/Operating System/Other" || return
	$rm "$pp/Media/Other/Picasa/Uninstall.lnk" || return
	$rm "$pd/Picasa 3.lnk" || return
	$makeShortcut "$P32/PicasaStarter/PicasaStarter.exe" "$pp/Media/Other/Picasa/Picasa Starter" -d "Start Picasa with custom database" || return
	$makeShortcut "$P32/PicasaStarter/PicasaStarter.exe" "$pp/Media/Other/Picasa/Picasa butare.net" -a "/autorun photo.butare.net" -d "Start Picasa for butare.net " || return

	echot "Tools, Options
- General
	- Check Single-click to exit Edit View
	- Delete from disk without confirmation
	- Check Remove from album without confirmation
- E-Mail, E-mail program=Use my Google account
- File Types, select .PNG
- Name Tags, check Store name tags in photo"	
	picasa || return
	pause
}

fsviewInstall() { FastStoneImageViewerInstall; }
FastStoneImageViewerInstall()
{
	printf "**************************************************\n* FastStone Image Viewer\n**************************************************\n"

	run "Shareware/FastStoneImageViewer/setup/FSViewerSetup53.exe" || return

	echo "Updating icons..."
	$rmd "$pp/FastStone Image Viewer" || return
	$mv "$pd/FastStone Image Viewer.lnk" "$pp/Media" || return

		echot "Settings, Settings (F12)
	- Viewer
		- uncheck Confirm on ESC exit
		- uncheck Confirm on overwriting files
		- uncheck Auto-Load next image in Crop Board
		- Single File Deleted to=Recyle-Bin, No Confirmation
	- Dual Monitor, check "Preview" on the secodary monitor
	- Associations, Select All
	- Favorites, Add, P:(\\NAS\Photo), Display Name=NAS"
	fsview start || return
}

irfanInstall() { IrfanViewInstall; }
IrfanViewInstall()
{
	printf "**************************************************\n* IrfanView\n**************************************************\n"
	
	run "Shareware/IrfanView/setup/iview438_setup.exe" || return
	run "Shareware/IrfanView/setup/irfanview_plugins_436_setup.exe" || return
	
	echo "Updating icons..."
	$mergeDir "$up/IrfanView" "$pp/Media/Other" || return
	$rm "$ud/IrfanView.lnk" || return
	$rm "$ud/IrfanView Thumbnails.lnk" || return
}

CalibreInstall()
{
	printf "**************************************************\n* Calibre\n**************************************************\n"
	[[ "$PLATFORM" == "win" ]] && echo "- Advanced, uncheck Add install directory to path"

	local v=2.48.0 # http://calibre-ebook.com/download
	run "Shareware/Calibre/setup/" -p "calibre-64bit-$v.msi" "calibre-$v.dmg" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir --rename "$pp/calibre 64bit - E-book Management" "$ao/calibre" || return
		$rm "$pd/calibre 64bit - E-book management.lnk" || return
	fi

	echot "\
	- choose a location for your books=\\nas\home\documents\data\books
	- Manufacturers=Amazon, Devices=Kindle PaperWhite
	- E-Book Viewer, Configure, General, Page Flip options, Page flip duration=disabled
	- Notes: 
	  - Organizes library folders by <author>/<book> on import or metadata change
	  - Search uses regular expressions: not mobi and not pdf and not azw
	  - Import content from the download directory using the Add books button (content
	    is copied to the ebook location)"
}

Calibre2opdsInstall()
{
	printf "**************************************************\n* calibre2opds\n**************************************************\n"
	run "Shareware/Calibre/calibre2opds/setup/calibre2opds-3.3-253.zip" "$P/calibre2opds" || return # http://calibre2opds.com/downloads/

	echo "Updating icons..."
	$makeShortcut "$P/calibre2opds/rungui.cmd" "$pp/Media/calibre2opds - OPDS Catalog Generator" -a="-" --show=min || return
	# cmd "/c /"$P/calibre2opds/rungui.cmd/""  "" 
	# --workingdir="$(utw "$P/calibre2opds")"
}

KindleInstall()
{
	printf "**************************************************\n* Kindle\n**************************************************\n"
	run "Amazon/Kindle/setup/KindleForPC-installer-1.14.43019.exe" || return # http://www.amazon.com/gp/kindle/mac/download http://www.amazon.com/gp/kindle/pc/download
	run "Amazon/Kindle/converter/Kindle DRM Removal v4.15.830.384.exe" || return # http://www.ebook-converter.com/kindle-drm-removal.htm

	echo Creating data folders...
	$makeDir "$_udata/Kindle" || return
	$makeDir "$_udata/Kindle DRM Removal" || return
	$makeDir "$udoc/Kindle DRM Removal" || return
	$hide "$udoc/Kindle DRM Removal" || return

	echo "Updating icons..."

	$mergeDir "$pp/Amazon" "$ao" || return
	$mergeDir "$up/Amazon" "$ao" || return
	$mergeDir --rename "$ao/Amazon/Amazon Kindle" "$ao/Amazon/Kindle" || return
	$rm "$pd/Kindle.lnk" || return
	$rm "$ud/Kindle.lnk" || return
	$rm "$ao/Amazon/Kindle/Uninstall Kindle.lnk" || return
	
	$mergeDir "$up/Kindle DRM Removal" "$ao" || return
	$rm "$ud/Kindle DRM Removal.lnk" || return

	echot "\
Kindle for PC
- Tools, Options
  - General, uncheck Automatically install updates
  - Content, Change Folder, data/Kindle

- Kindle DRM Reoval
  - Output Option, Set Output Folder, Documents/data/Kindle DRM
  - Kindle, Kindle Serial Number=NNN"
	cygstart "https://www.amazon.com/gp/digital/fiona/manage?ie=UTF8&ref_=sv_kinc_7&signInRedirect=1&#manageDevices"
	kindle start || return
	kindle decrypt || return
}

QuickenInstall()
{
	printf "**************************************************\n* Quicken\n**************************************************\n"
	run "Intuit/Quicken/Quicken_RPM_2016.exe" || return # http://quicken.intuit.com/support/help/quicken-2014-for-windows-release-notes--updates--and-mondo-patch-/GEN85883.html

	echo "Updating icons..."
	$mergeDir --rename "$pp/Quicken 2016" "$ao/Quicken"
	$rm "$pd/Quicken Rental Property Manager 2016.lnk"

	echot "\
- Run Quicken, select I am already a Quicken user, Next, Next, Documents/Finances/Current/Finances
- Edit, Preferences
  - Quicken Preferences,  Setup/Backup, uncheck Manual Backup Reminder
  - Register/Data entry and QuickFill
    - Check Use enter key to move between fields
  - Reports and Graphs, select Customizing modifies current report or graph
- Click One Step Update, Register 
  - Check Don't show this summary again unless there is an error"
}

HarmonyRemoteInstall()
{
	printf "**************************************************\n* Harmony Remote\n**************************************************\n"
	run "Logitech/Harmony Remote/LogitechHarmonyRemote7.7.0-WIN-x86.exe" || return # http://www.logitech.com/en-us/440/6441?section=downloads&bit=&osid=14

	echo "Updating icons..."
	$mergeDir "$pp/Logitech" "$ao" || return
	$rm "$pd/Logitech Harmony Remote Software 7.lnk" || return
}

TrueCryptInstall()
{
	printf "**************************************************\n* TrueCrypt\n**************************************************\n"
	local v="7.1a" # http://www.truecrypt.org/downloads
	run "Shareware/TrueCrypt/setup/" -p "TrueCrypt Setup $v.exe" "TrueCrypt $v Mac OS X.dmg" "truecrypt-$v-setup-x64" || return 

	$makeDir "$UserHome/Documents/data/TrueCrypt" || return

	if [[ "$PLATFORM" == "win" ]]; then
		echo "Updating icons..."
		$mergeDir "$pp/TrueCrypt" "$ao" || return
		$mergeDir "$up/TrueCrypt" "$ao" || return
		$rm "$ao/TrueCrypt/TrueCrypt Website.url" || return
		$rm "$ao/TrueCrypt/Uninstall TrueCrypt.lnk" || return
		$rm "$pd/TrueCrypt.lnk" || return
	fi

	echot "\
- Settings, Hot Keys...
	- Mount Favorite Volumes - Control+Shift+Alt+F2
	- Dismount All - Control+Shift+Alt+F3
	- Force Dismount All, Wipe Cache & Exit - Control+Shift+Alt+F4
- Settings, Preferences
- Uncheck Preserve modification timestamp of file containers
	- Check Cache passwords in driver memory
	- Uncheck Wipe cached passwords on auto-dismount and exit
- T:, Select File..., data/TrueCrypt, personal.tc, Mount
- Favorites, Add Mounted Volumes to Favorites...
	- Label of selected favorite volume=Personal"
	#start --standard TrueCrypt start
}

FLuxInstall()
{
	printf "**************************************************\n* f.lux\n**************************************************\n"
	run "Shareware/f.lux/" -p "flux-setup.exe" "Flux.zip" "" || return # http://justgetflux.com/	

	echo "Updating icons..."
	$mergeDir "$up/Flux" "$up/Operating System/Other" || return

	echo "Updating registry..."	
	$registry delete "urun/f.lux" # "C:\Users\jjbutare\AppData\Local\FluxSoftware\Flux\flux.exe" /noshow

	echot "\
- Location: Search
- Transition: Slow
- check Start F.lux at Login"
	[[ "$PLATFORM" == "mac" ]] && { start "/Applications/Flux.app" || return; }
}

SnagItInstall()
{
	printf "**************************************************\n* snagIt\n**************************************************\n"
	echo "- Options, uncheck Windows Explorer Menu Extension"

	local major="12"
	local v="SnagIt V$major.4.1.3036." # http://www.techsmith.com/download/licenses/snagitupgrade.asp
	run "TechSmith/SnagIt/setup/$v" -p "exe" "dmg" "" || return

	echo "Updating icons..."
	$mergeDir --rename "$pp/TechSmith" "$ao/TechSmith" || return
	$ren "$ao/TechSmith/Snagit $major Editor.lnk" "$ao/TechSmith/Snagit Editor.lnk" || return
	$ren "$ao/TechSmith/Snagit $major.lnk" "$ao/TechSmith/Snagit.lnk" || return
	$rm "$pp/Startup/Snagit $major.lnk" || return
 
 	if [[ "$PLATFORM" == "win" ]]; then
		echo "Creating registry entries..."
		SnagIt start || return
		SnagIt close || return

		echo "Updating registry..."
		local r="HKCU/Software/TechSmith/SnagIt/$major" folder="$udoc/data/SnagIt"
		registry 32 set "$r/CatalogFolder" REG_SZ "$folder/" || return
		registry 32 set "$r/ExternalOutputDir" REG_SZ "$folder/Program/" || return

		echo "Updating directories..."
		$mergeDir "$udoc/Snagit" "$_udata" || return
	fi

	case "$PLATFORM" in
		mac) echot "\
Snagit, Preferences...
- General, select Menu Bar Icon
- Capture, check Always copy capture to clipboard
- Advanced, Autosave Location=~/data";;
		win) echot "\
- Unlock with your Software Key
- No Thanks
- Preferences...
	- General, select Enable Notification Area Icon
  - Advanced, uncheck uncheck Enable automated update checking
- Manage Profiles, File, New Profile
  - Clipboard, uncheck Editor, Share=Clipboard
  - Word, uncheck Editor, Share=Word, Hotkey=Shift Print Scrern";;
	esac
	SnagIt start || return
}

ParallelsDesktopInstall()
{
	printf "**************************************************\n* Parallels Desktop\n**************************************************\n"
	run "Parallels Desktop/setup/ParallelsDesktop-10.0.0-27675.dmg" || return # http://www.parallels.com/downloads/desktop/

	echo "Updating icons..."
	$rm "$la\com.parallels.mobile.prl_deskctl_agent.launchagent.plist" || return
	$rm "$ula\com.parallels.mobile.startgui.launchagent.plist" || return

	echot "\
- Preferences
	- Shortcuts
		- System Shortcuts, Send system shortcuts=Always
		- Profile=Windows Custom - based on Windows, uncheck all
		add cmd-down=Ctrl+End cmd-up=Ctrl+Home ctrl-option-right=Win+Right 
		ctrl-option-left=Win+Left
- Virtual Machine, Configure...
	- Options
		- Startup and Shutdown, On VM Shutdown=Close Window
		- Applications
			- check Show Dock icons in Coherence only
			- uncheck Dock icons bounce to alert
		- Full Screen, check Use all displays in full screen
	- Hardware
		- Mouse & Keyboard, uncheck Mouse pointer sticks at window edges
		- Network 1, Type=Bridge, Default adapter
	- Security, check Do not back up virtual machine"
}

ChocolateyInstall()
{
	printf "**************************************************\n* choclatey\n**************************************************\n"
	# installs: user environment path=c:\Chocolatey\bin, ChocolateyInstall=c:\Chocolatey
	cygstart --wait cmd /c powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" "&&" pause
}

SyncplicityInstall()
{
	printf "**************************************************\n* Syncplicity\n**************************************************\n"

	[[ ! -f "$P/Syncplicity/Syncplicity.exe" ]] && ask "Install Syncplicity" &&
		{ run ism:appid=24064 "Syncplicity" || return; }

	echo "Updating icons..."
	$mergeDir "$pp/Syncplicity" "$ao" || return

	echo "Updating registry..."	
	$registry delete "run/Syncplicity" # C:\Program Files\Syncplicity\Syncplicity.exe

	pfpc "$HOME/Syncplicity"
	echot "\
- Settings, Account, check Hide file download notifications
- Manage folders, Desktop/Documents/Favorites, Syncplicity, Delete folder
- Explorer
  - Libraries, Documents, Manage, Manage Library, locations, 
    - Add..., <paste>
    - (Intel) Move Up (to top), Set as default save location
  - View, List"
	start explorer "$udoc" || return

}

WindowsAdministrationToolsInstall()
{
	printf "**************************************************\n* Windows Administration Tools\n**************************************************\n"
	run "Microsoft/Server/tools/Windows$version-$architecture.msu" || return # http://www.microsoft.com/en-us/search/result.aspx?q=Remote%20Server%20Administration%20Tools&form=DLC

	if ask "Enable features?"; then
	
		echo Enabling default features...
		dism.exe /online /enable-feature /featurename:RemoteServerAdministrationTools || return
		dism.exe /online /enable-feature /featurename:RemoteServerAdministrationTools-Roles || return
		dism.exe /online /enable-feature /featurename:RemoteServerAdministrationTools-Roles-RDS || return
		
		echo "Enable other features..."
		echo "- Turn Windows features on or off, Remote Server Administration Tools"
		echo "  - (optional) Check other features"
		product gui || return
		pause
		
	fi

	echo "Updating icons..."
	$mergeDir "$pp/Administrative Tools" "$pp/Operating System/Other" || return
	$rm "$pp/Server Manager.lnk" || return
	$rm "$pp/Administrative Tools.lnk" || return
}

MosaicoInstall()
{
	printf "**************************************************\n* Mosaico\n**************************************************\n"
	echo "- uncheck Launch Mosaico"

	run "Mosaico/setup/Mosaico Setup v1.8.0.3.exe" || return # http://www.soulidstudio.com/download/

	echo "Updating icons..."
	$mergeDir "$pp/Mosaico" "$pp/Operating System/Other" || return

	echo "Updating registry..."	
	$registry delete "urun/Mosaico" # C:\Program Files (x86)\Mosaico\mosaico.exe

	echot "\
- Try Mosaico for Free!
- unselect Arrange
- Settings
	- uncheck Always on top of other windows
	- uncheck Run automatically when Windows starts
	- check Send to system tray when close button is pressed
	- uncheck Display info message when reduced to system tray
	- check Start minimized to system tray
	- uncheck Start with manual arrangement engaged
	- check Show button labels
	- uncheck Tabify when not active
	- uncheck Show quick guide at startup"
	sudo --standard mosaico start
}

ccInstall() { CreativeCloudInstall; }
CreativeCloudInstall()
{
	printf "**************************************************\n* name\n**************************************************\n"
	run "Adobe/Creative Cloud/setup/" -p "CreativeCloudSet-Up.exe" "CreativeCloudInstaller.dmg" "bcompare-$v_i386.deb" || return # https://creative.adobe.com/products/creative-cloud

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$makeDir "$pp/Media/Other/Adobe" || return
		$mv "$pp/Adobe"*".lnk" "$pp/Media/Other/Adobe" || return
		$mv "$pd/Adobe"*".lnk" "$pp/Media/Other/Adobe" || return

		echo "Updating registry..."	
		$registry 32 delete "run/Adobe Creative Cloud" # "C:\Program Files (x86)\Adobe\Adobe Creative Cloud\ACC\Creative Cloud.exe" --showwindow=false --onOSstartup=true

	elif [[ "$PLATFORM" == "mac" ]]; then	
		$rm "$la\com.adobe.AAM.Updater-1.0.plist" || return
		$rm "$la\com.adobe.AdobeCreativeCloud.plist" || return
		$rm "$ula\com.adobe.AAM.Updater-1.0.plist" || return

	fi
}

ProxifierInstall()
{
	printf "**************************************************\n* Proxifier\n**************************************************\n"
	run "Proxifier/setup/" -p "ProxifierSetup.exe" "Proxifier.app.zip" "" || return # http://www.proxifier.com/download.htm https://intelpedia.intel.com/Proxifier


	FindFile "Proxifier/profiles/Intel Custom.ppx" || return
	clipw "$file" || return	
	echot "\
- File, Import, <paste>"
}

IntuosProInstall()
{
	printf "**************************************************\n* Intuos Pro\n**************************************************\n"
	run "Intuos/Pro/setup/WacomTablet_6.3.8" -p "-4.exe" "-2.dmg" "" || return # http://us.wacom.com/en/support/drivers/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir "$pp/Wacom Tablet" "$pp/Media/Other" || return
	fi
}

DiskInventortyXInstall()
{
	printf "**************************************************\n* Disk Inventory X\n**************************************************\n"
	run "Shareware/Disk Inventory X" -p "" "DIX1.0Universal.dmg" "" || return # http://www.derlien.com/downloads/index.html
}

RubyInstall()
{
	case $PLATFORM in
		win) 
			! which ruby >& /dev/null && { cygwin package ruby || return; }

			$makeDir ~/bin || return
			$hide ~/bin || return
			ScriptEval SetVar --path PATH ~/bin || return

			$makeDir ~/.gem || return
			$hide ~/.gem || return
			;;
	esac
}

PythonInstall()
{	
	printf "**************************************************\n* Python\n**************************************************\n"

	ScriptEval intel SetProxy || return
	
	if [[ "$PLATFORM" == "win" ]]; then
		! which python >& /dev/null && { cygwin package python || return; }
		$makeDir ~/.cache ~/.pip || return
		$hide ~/.cache ~/.pip || return
	fi
	
	! which pip >& /dev/null && { get-pip.py || return; }
	
	! which pip-review >& /dev/null && { pip install pip-tools || return; }
}

7ZipInstall()
{
	printf "**************************************************\n* 7-Zip\n**************************************************\n"
	run "Shareware/7-Zip/setup/7z1514-${architecture}.exe" || return # http://www.7-zip.org/download.html

	# Update bin files
	$cp "$P/7-zip/7-zip.chm" "$DATA/platform/win" || return
	$cp "$P/7-zip/7z.exe" "$P/7-zip/7z.dll" "$DATA/platform/win" || return

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir "$pp/7-Zip" "$ao" || return
	fi

	clipw "$(utw "$P\Sublime Text 4\sublime_text.exe")" || return
	echot "\
- Tools, Options
  - System,  above All Users click + twice
  - View=Editor=<paste>
  - Diff=C:\Program Files (x86)\Beyond Compare 4\BComp.exe
  - Settings, check Show system menu"
  "$P/7-Zip/7zFM.exe" || return
}

PaintNetInstall()
{
	printf "**************************************************\n* paint.net\n**************************************************\n"
	run "Shareware/paint.net/setup/paint.net.4.0.6.install.exe" || return # http://www.getpaint.net/

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/paint.net.lnk" "$pp/Media" || return
		$rm "$pd/paint.net.lnk" || return
	fi
}

FiddlerInstall()
{
	printf "**************************************************\n* Fiddler\n**************************************************\n"
	run "Telerik/Fiddler/Fiddler 4 Setup v4.4.9.8.exe" || return # http://www.telerik.com/fiddler

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mv "$pp/Fiddler4.lnk" "$pp/Development" || return
	fi
}

LinqPadInstall()
{
	printf "**************************************************\n* LINQPad\n**************************************************\n"
	run "Shareware/.NET/LinqPad/LINQPad5Setup.exe" || return # https://www.linqpad.net/Download.aspx

	echo "Moving data folders..."
	$makeDir "$_udata/LINQPad" || return
	$makeLink --merge --hide "$_udata/LINQPad" "$udoc/LINQPad Queries" || return

	echo "Updating icons..."
	$mv "$ud/LINQPad 5.lnk" "$pp/Development/DotNet" || return
	$rmd "$pp/LINQPad" || return
}

MusicBeeInstall()
{
	[[ "$PLATFORM" != "win" ]] && return 0;
	printf "**************************************************\n* MusicBee\n**************************************************\n"
	run "Shareware/MusicBee/setup/MusicBeeSetup_2_5.exe" || return # http://getmusicbee.com/download.html

	if [[ "$PLATFORM" == "win" ]]; then	
		echo "Updating icons..."
		$mergeDir "$up/MusicBee" "$pp/Media/Other" || return
		$rm "$ud/MusicBee.lnk" || return
	fi

	echot "\
- Cancel"
}

args "$@"; ${command}Command "${args[@]}";