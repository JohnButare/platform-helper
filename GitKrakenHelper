#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|IsInstalled|profile|program|start|service](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start" 	
	profileName="GitKraken"
	profileDir="$HOME/.gitkraken"
	profileMask="config profiles"

	# find program and profile
	case "$PLATFORM" in
		mac) program="$P/GitKraken.app" profileName="GitKrakenMac";;
		win) program="$UADATA/gitkraken/gitkraken.exe" profileName="GitKrakenWin";;
		*) unset program;;
	esac
	AppInstallCheck || return
	[[ ! -d "$profileDir" ]] && { ${G}mkdir --parents "$profileDir" || return; }

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { AppInstallCheck && start "$program" "${startArgs[@]}"; }
startupCommand() { start "$program" "${startupArgs[@]}"; }
versionCommand() { AppInstallCheck && AppVersion "$program"; }

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	[[ "$command" == "restore" ]] && { closeCommand || return; }
	profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"
}

ScriptRun "$@"
