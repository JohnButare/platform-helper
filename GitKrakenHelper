#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [cli|close|IsInstalled|profile|program|start|service](start)
$(ScriptName) commands.

-a,	--alterate		load an alternative version, i.e. the Linux version of Git Kraken under Windows"
}

init() { defaultCommand="start"; }
argStart() { alternate="$alternate"; } # use environment variable for a default

opt()
{
	case "$1" in
		-a|--alternate) alternate="--alternate";;
		*) return 1;;
	esac
}

argEnd()
{
	profileName="GitKraken"
	profileDir="$HOME/.gitkraken"
	profileMask="config profiles"

	# find program and profile
	case "$PLATFORM_OS" in
		mac) program="$P/GitKraken.app" profileName="GitKrakenMac";;
		win) 
			program="$UADATA/gitkraken/gitkraken.exe" profileName="GitKrakenWin"
			[[ $alternate ]] && program="$(FindInPath "gitkraken")"
			;;
		*) unset program;;
	esac

	return 0
}

closeCommand() { ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { AppInstallCheck && start "$program" "${startArgs[@]}"; }
startupCommand() { start "$program" "${startupArgs[@]}"; }

cliArgs() { cliArgs=( "$@" ); shift="$#"; }

cliCommand()
{
	AppInstallCheck || return

	local cli prefix
	if IsPlatform win; then
		cli="$(GetDirs "$(GetFilePath "$program")" | head -1 | utw)/resources/bin/gitkraken.cmd"
		prefix="cmd.exe /c"
	elif IsPlatform mac; then
		cli="$P/GitKraken.app/Contents/MacOS/GitKraken"
	else
		cli="$program"
	fi

	$prefix "$cli" "${cliArgs[@]}" "${otherArgs[@]}"
}

versionCommand()
{
	AppInstallCheck || return

	if IsPlatform win && [[ ! $alternate ]]; then
		GetDirs "$(GetFilePath "$program")" | grep "app-" | sort --version-sort --reverse | head -1 | cut -d"-" -f2
	else
		AppVersion "$program"
	fi
}

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }

profileCommand()
{
	[[ "$command" == "restore" ]] && { closeCommand || return; }
	profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"
}

ScriptRun "$@"
