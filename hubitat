#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [api|cli|devices](api)
Manage the Huibitat controller.

	api 				call a API command
	devices			list all devices"
}

argStart() { unset -v apiInitialized; }

#
# API Command
#

apiUsage()
{
	EchoWrap "Usage: $(ScriptName) api [URI](/devices)
Perform an API command.

Examples:
	/devices - all devices"
}

apiArgStart() { uri="/devices"; }

apiArgs()
{
	(( $# > 0 )) && { ScriptArgGet "uri" -- "$@"; shift; }
	return 0
}

apiCommand() { api "$uri" "$json"; }
apiavailableCommand() { apiInit; }
apiPutCommand() { apiPut "$uri" "$json"; }

#
# CLI Command
#

cliArgStart() { unset -v cliArgs; }
cliArgs() { cliArgs=("$@"); shift="$#"; }

cliCommand()
{
	apiInit || return

 	hubitat-cli \
	  --hub-url="https://$server:$port" \
	  --hub-username= \
	  --hub-password= \
	  "${cliArgs[@]}" "${otherArgs[@]}"
}

cliInit()
{
	[[ $cliInitialized ]] && return
	
	# get configuration
	log1 "getting CLI data from the credential store"
	getServerData || return
	user="$(credential get hubitat user --fallback)" || return
	password="$(credential get hubitat password --fallback)" || return
	log1 "server='$server' port='$port' user='$user' password='REDACTED'"

  cliInitialized="true"
}

#
# Device Commands
#

deviceUsage()
{
	echot "Usage: $(ScriptName) device [id|info](info)
Perform a device command.

	ls						list all devices
	id NAME				get specified device ID
	info NAME			get specified device information"
}

deviceCommand() { deviceLsCommand | jq; }
deviceLsCommand() { getDevices; }

deviceIdArgs() { ScriptArgGet "name" -- "$@"; shift; }
deviceIdCommand() { getDeviceId "$name"; }

deviceInfoArgs() { ScriptArgGet "name" -- "$@"; shift; }
deviceInfoCommand() { local id; id="$(getDeviceId "$name")" && api "/devices/$id"; }

# getDeviceId NAME - get the ID of the specified device
getDeviceId()
{
	local name="$1"
	local id; id="$(getDevices | jq ".[] | select(.label == \"$name\").id" | RemoveQuotes)" || return
	[[ ! $quiet && ! $id ]] && EchoErr "device '$name' not found"
	[[ $id ]] && echo "$id"
}

getDevices() { api "/devices"; }

#
# API Helper
#

api()
{
	local uri="$1"
	apiInit || return
	RunLog curl -X GET --silent "https://$server:$port/apps/api/15/$(echo "$uri" | RemoveFront "/")?access_token=$token"
}

apiInit()
{
	[[ $apiInitialized ]] && return
	
	# get configuration

	log1 "getting API server and token from the credential store"
  getServerData || return
  token="$(credential get hubitat token --fallback)" || return

	log1 "server='$server' port='$port' token='REDACTED'"

	# check if the API is available
	IsAvailablePort "$server" "$port" && { apiInitialized="true"; return; }
	ScriptErrQuiet "The Hubitat Controller on '$server' is not available on port '$port'"  
}

#
# helper
#

getServerData()
{
  server="$(credential get hubitat server --fallback)" || return
  port="443"	
}

ScriptRun "$@"
