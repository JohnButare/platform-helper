#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script color || exit

usage()
{
	ScriptUsage "$1" "\
Usage: service [OPTION]... [COMMAND](start) 
Control system services.

	continue|manage|pause|reload|restart|start|stop SERVICE							control service
	auto|boot|delete|demand|disable|manual SERVICE		 									configure service
	detail|exists|info|log|show|StartType|state|status|running SERVICE	service information
	dir|list|refresh|ui

	auto|demand|disable start|stop	configure and control service, i.e. service auto start SERVICE

	-f, --force 						force the service operation even if the service seems to be in the correct state
	-H, --host=HOST					host to check
			--no-host-check 		do not check for host availability
			--no-service-check	do not check for service existence
	-q, --quiet							minimize output
	-w, --wait							wait for the service to change state"
	exit $1
}

init()
{ 
	sc="sc.exe" scBufferSize=5000 # fix sc data area error - http://www.dostips.com/forum/viewtopic.php?f=3&t=3408
}

argStart() { unset -v host hostArg ignoreHost noHostCheck noServiceCheck wait; unset -v service; }

opt()
{
	case "$1" in
		--host|-H|--host=*|-H=*) ScriptOptGet "host" "$@"; hostArg="--host=\"$host\"";;
		--ignore-host) ignoreHost="--ignore-host";;
		--no-host-check|--nhc) noHostCheck="--no-host-check";;
		--no-service-check|--nsc) noServiceCheck="--no-service-check";;
		--wait|-w) wait="--wait";;
		*) return 1;;
	esac
}

args() { [[ "$command" == @(dir|infoAll|infoDump|list*|logClear|refresh|ui) ]] && return; ScriptArgGet "service" -- "$@"; }
argEnd() { unset macServiceFiles; serviceInit; }

serviceInit()
{
	unset -v hostUnc hostDescription sudo type useSystemd

	# check remote host
	if IsLocalHost "$host"; then
		unset -v host
	else
		[[ ! $noHostCheck ]] && { HostAvailable "$host" || return; }
		hostUnc='\\'"$host"
		hostDescription=" on $host"
		ssh="SshHelper $host --interactive ${globalArgs} --"
	fi

	# run on host - assumes service command exists on remote host
	[[ $host && ! $ignoreHost ]] && { RunLog $ssh service --ignore-host "${originalArgs[@]}"; exit $?; }

	# initialize service variables
	[[ $service ]] && { serviceCheck || return; }

	return 0
}

serviceCheck()
{
	# initialize - set _platformOs for subsequent commands
	_platformOs="$PLATFORM_OS"

	# check
	case "$_platformOs" in
		mac)
			macServiceLoaded="true"
			unset macServiceInfo macServiceFile macServiceFileContent

			# remove file extension, so we can use a plist file as the service 
			[[ -f "$service" ]] && service="$(GetFileNameWithoutExtension "$service")"

			# check loaded services
			if macServiceInfo="$(launchctl print "system/$service" 2>&1)"; then macServiceDomain="system/"
			elif macServiceInfo="$(launchctl print "gui/$UID/$service" 2>&1)"; then macServiceDomain="gui/$UID/"
			elif macServiceInfo="$(launchctl print "user/$UID/$service" 2>&1)"; then macServiceDomain="user/$UID/"

			# check services on disk - includes unloaded services
			else
				unset macServiceInfo macServiceLoaded
				getMacServiceFiles || return
				if echo "$macServiceFiles" | qgrep "^/Users/$USER/.*/$service.plist$"; then
					macServiceDomain="user/$UID/"
				elif echo "$macServiceFiles" | qgrep -E "^/(System|Library)/.*/$service.plist$"; then
					macServiceDomain="system/"
				else
					unknownService; return
				fi
			fi 

			macService="$macServiceDomain$service" || return
			sudo=""; [[ "$macServiceDomain" == "system/" ]] && sudo="sudoc"
			log1 "macService=$macService domain=$macServiceDomain loaded=$macServiceLoaded sudo=$sudo"
			;;

		linux) 
			checkSystemd || return
			isLinuxService "$service" || { unknownService; return; }
			;;

		win)
			checkSystemd || return

			if isLinuxService "$service"; then
				log1 "service '$service' is a linux service"
				_platformOs="linux"
				return
			fi

			local result="$(sc.exe $hostUnc query "$service" | RemoveCarriageReturn |& grep FAILED)"
			resultCode="${result#*FAILED }"; resultCode="${resultCode%%:}"

			case $resultCode in
				"") return 0;;
		  	5) echo "service: access to the service control manager denied on $host"; return 1;;
				1060) unknownService; return;;
				*) EchoErr "service: unknown error $resultCode accessing $service"; return 1;;
			esac
			;;

	esac

	return 0
}

checkSystemd() { IsSystemd && useSystemd="true"; return 0; }

getMacServiceFileContent() 
{
	[[ $macServiceFileContent ]] && return
	getMacServiceFile && macServiceFileContent="$(plutil -p "$macServiceFile")" || macServiceFileContent="unknown"
}

getMacServiceFiles() 
{
	[[ $macServiceFiles ]] && return
	macServiceFiles="$(listFilesMac)"
}

getMacServiceFile()
{
	[[ $macServiceFile ]] && return

	# look in the cached macServiceInfo
 	if [[ $macServiceInfo ]]; then
 		macServiceFile="$(echo "$macServiceInfo" | ${G}grep "path =.*\.plist$" | cut -d"=" -f2 | RemoveSpaceTrim)"
 		[[ ! -f "$macServiceFile" ]] && { log2 "getMacServiceFile: service '$macService' file '$macServiceFile' from the cached service information does not exist"; unset macServiceFile; }
 	fi

 	# look for service files on disk
 	if [[ ! $macServiceFile ]]; then 	
 		getMacServiceFiles || return
		macServiceFile="$(echo "$macServiceFiles" | ${G}grep "/$service.plist$" | head -1)"
		[[ ! $macServiceFile ]] && { log2 "getMacServiceFile: service '$macService' does not have a service file on disk"; unset macServiceFile; }
	fi

	[[ ! $macServiceFile ]] && macServiceFile="unknown"
	log2 "getMacServiceFile: macServiceFile='$macServiceFile'"
	[[ $macServiceFile ]]
}

unknownService() 
{
	[[ $noServiceCheck ]] && { exit 0; }
	[[ ! $quiet ]] && EchoErr "service: $service does not exist as an installed service$hostDescription"
	return 1
}

#
# commands
#

existsCommand() { serviceCheck >& /dev/null; }
runningCommand() { [[ "$(stateCommand)" == "RUNNING" ]]; }
uiCommand() { ! IsPlatform win && return; start services.msc; }

autoStartCommand() { autoCommand && startCommand; }
demandStopCommand() { demandCommand && stopCommand; }
disableStopCommand() { disableCommand && stopCommand; }

dirCommand() { RunPlatform "dir" --host;  }
dirMac() { ArrayShow macServices; }
dirWin() { dirLinux; }

dirLinux()
{	
	if IsSystemd; then
		[[ -d "/etc/systemd/system/" ]] && echo "/etc/systemd/system/"
		[[ -d "/lib/systemd/system/" ]] && echo "/lib/systemd/system/"
	elif [[ -d "/etc/init.d/" ]]; then
		echo "/etc/init.d/"
	fi
}

bootCommand() 
{	
	! isWinService "$service" && return
	doCommand "boot"
}

bootWin() { local result; result="$($sc config $hostUnc "$service" start= boot)" && return; EchoErr "$result"; return 1; }

demandCommand() 
{	
	if isWinService "$service"; then
		doCommand "demand"
	else
		disableCommand
	fi
}

demandWin() { local result; result="$($sc config $hostUnc "$service" start= demand)" && return; EchoErr "$result"; return 1; }

manualCommand()
{
	[[ ! $quiet ]] && echo "Stopping $service service and setting it to demand start$hostDescription..."
	demandCommand || return
	stopCommand || return
	return 0
}

refreshUsage()
{
	EchoWrap "Usage: $(ScriptName) refresh SERVICE
Load new services and reset failed services."
}

refreshCommand()
{
	! IsSystemd && return
	sudo systemctl daemon-reload && sudo systemctl reset-failed
}

reloadCommand()
{
	if [[ $useSystemd ]]; then
		sudoc systemctl reload "$service" || return
	else
		restartCommand || return
	fi
}

restartCommand() 
{ 
	local oldWait="$wait" wait="--wait"
	stopCommand || return
	wait="$oldWait"
	startCommand || return
	return 0
}

statusCommand()
{
	state="$(stateCommand)" || return
	startType="$(startType)" || return
	echo "$service is $RED$state$RESET$hostDescription ($startType)"
}

#
# auto command
#

autoCommand() { doCommand "auto"; }
autoLinux() { linuxService enable "$service"; }
autoMac() { RunLog $sudo launchctl enable "$macService"; }
autoWin() { local result; result="$($sc config $hostUnc "$service" start= auto)" && return; EchoErr "$result"; return 1; }

#
# continue command
#

continueCommand()
{
	if isWinService "$service"; then
		doCommand "continue"
	else
		startCommand
	fi	
}

continueWin() { local result; result="$($sc $hostUnc continue "$service")" && return; EchoErr "$result"; return 1; }

#
# delete command
#

deleteCommand() { stopCommand && disableCommand && RunPlatform "delete" --host; }
deleteWin() {	$sc delete $hostUnc "$service"; }

deleteLinux()
{
	[[ -f "/etc/systemd/system/$service.service" ]] && { sudo rm -f "/etc/systemd/system/$service.service" || return; }
	[[ -f "/lib/systemd/system/$service.service" ]] && { sudo rm -f "/lib/systemd/system/$service.service" || return; }
	sudo systemctl daemon-reload || return
	sudo systemctl reset-failed || return
}

#
# detail command
#

detailCommand() { statusCommand && RunPlatform "detail" --host; }

detailLinux()
{
	
	echo "$(infoTypeLinux) service: $(infoFileLinux)"
	linuxService status "$service" || return
}

detailMac() {	infoFileContentsCommand; }	

detailWin()
{
	$sc $hostUnc GetDisplayName "$service"
	$sc $hostUnc qdescription  "$service" $scBufferSize
	$sc $hostUnc queryex "$service" $scBufferSize
	$sc $hostUnc qc "$service" $SscBufferSize
	$sc $hostUnc qfailure "$service"
}

#
# disable command
#

disableCommand() { doCommand "disable"; }
disableMac() { RunLog $sudo launchctl disable "$macService"; }
disableWin() { $sc config $hostUnc "$service" start= disabled; }
disableLinux() { linuxService disable "$service"; }

#
# list command
#

listUsage()
{
	ScriptUsageEcho "\
Usage: service list [files|running]
List services.

	-d, --detail		show more detail about the services
	-F, --file			show the services in a file"
}

listArgStart() { unset -v detail file; }

listOpt()
{
	case "$1" in
		-d|--detail) detail="true";;
		-F|--file) file="true";;
		*) return 1
	esac
}

listCommand()
{
	[[ ! $file ]] && { RunPlatform "list"; return; }

	local file="$TMP/services.txt";
	printf "" > "$file" || return
	RunPlatform "list" >> "$file" || return
	TextEdit "$file"
}

listMac()
{ 
	{ 
		{ launchctl list; sudoc launchctl list; } | cut -d"	" -f3 | ${G}grep -v "^Label$"		# loaded services
		listFilesMac | rev | ${G}cut -d$'/' -f1 | cut -d"." -f2- | rev 											# unloaded services
	} | sort | uniq; 
}

listLinux()
{
	if IsSystemd; then
		{
			[[ -d "/etc/systemd/system" ]] && command ls -1 "/etc/systemd/system/" | grep ".service$"; 
			[[ -d "/lib/systemd/system" ]] && command ls -1 "/lib/systemd/system/" | grep ".service$";
			systemctl list-units --type=service,target --no-legend --full --plain | cut -d" " -f1;
		} | grep -v "@.service$" | sed 's/.service$//' | sort | uniq; # @.service are templates
	elif [[ -d "/etc/init.d" ]]; then
		grep "force-reload" "/etc/init.d/"* --files-with-matches | cut -d'/' -f4
	fi
}

listWin()
{
	[[ $detail ]] && { listWinDetail; return; }
	{ listLinux; sc.exe queryex | grep "^SERVICE_NAME: " | cut -d" " -f2; } | sort | uniq
}

listWinDetail()
{
	header "Windows"; $sc $hostUnc queryex bufsize= $scBufferSize type= all state= all
	if IsSystemd; then header "Systemd"; listLinux
	elif [[ -d "/etc/init.d" ]]; then header "Init"; /usr/sbin/service --status-all
	fi 
}

listFilesUsage() { ScriptUsageEcho "Usage: $(ScriptName) list files\nList files associated with all services."; }
listFilesCommand() { RunPlatform listFiles; }
listFilesMac() { find "${macServices[@]}" -type f | sort | uniq; }

listRunningUsage() { ScriptUsageEcho "Usage: $(ScriptName) list running [user|system]\nList running services."; }
listRunningCommand() { RunPlatform listRunning; }
listRunningMac() { { launchctl list; sudoc launchctl list; } | grep -v "^-" | cut -d"	" -f3 | sort | uniq; }
listRunningUserCommand() { RunPlatform listRunningUser; }
listRunningUserMac() { launchctl list | grep -v "^-" | cut -d"	" -f3 | sort; }
listRunningSystemCommand() { RunPlatform listRunningSystem; }
listRunningSystemMac() { sudoc launchctl list | grep -v "^-" | cut -d"	" -f3 | sort ; }

#
# log command
#

logUsage()
{
	EchoWrap "Usage: $(ScriptName) log [clear]
Log commands.

	-a, --all					show logs from start
	-np, --no-pager		do not use a pager"
}

logArgStart() { unset -v all noPager; }

logOpt() 
{
	case "$1" in
		-a|--all) all="--all";;
		-np|--no-pager) noPager="--no-pager";;
		*) return 1
	esac
}

logCommand() { RunPlatform "log" --host; }
logWin() { start eventvwr.msc; }

logLinux()
{
	local args=( )

	[[ ! $all && ! $noPager ]] && args+=( "--follow" )
	[[ $noPager ]] && args+=( "--no-pager" )
	RunLog $ssh sudoc journalctl -u "$service" "${args[@]}"; 
}

logClearCommand() { RunPlatform "logClear"; }
logClearLinux() { sudo journalctl --rotate && sudoc journalctl --vacuum-time=1s; }

#
# manage command
#

manageUsage()
{
	EchoWrap "Usage: $(ScriptName) manage SERVICE
Start the service and display periodic output while the service is running.  Stop the service when SIGTERM is received.  Restart the service if it stops.  This is useful to control service from orchestration engines such as Nomad.

	-no-stop-service			do not stop the service if we stop
	-retries N						number of times to try and start the service"

}

manageArgStart() { unset -v noStopService nowaitService; retriesArg="5"; }

manageOpt() 
{
	case "$1" in
		--no-stop-service) noStopService="--no-stop-service";;
		--no-wait-service) nowaitService="--no-wait-service";;
		--retries) ScriptArgGet "retriesArg" --integer -- "$@";;
		*) return 1
	esac
}

manageCommand()
{
	local stopSignal

	# start service
	echo "Service '$service' manager pid is $$"

	# traps
	trap "manageSignal SIGINT" SIGINT
	trap "manageSignal SIGTERM" SIGTERM
	trap "manageExit" EXIT

	# wait
	local i=0 sleepSeconds=5 try tryMax=5; TimerOn
	while true; do

		# get service state
		local state; state="$(service state "$service" "${globalArgsLessVerbose[@]}")" || return

		# service is now running
		if [[ "$state" == "RUNNING" && $try ]]; then
			unset -v try; i=0; TimerOn

		# service is now not running
		elif [[ "$state" != "RUNNING" && ! $try ]]; then
			 try=1; i=0; TimerOn
			 service start "$service" "${globalArgs[@]}"

		# service is still not running, at try limit
		elif [[ "$state" != "RUNNING" ]] && (( try >= tryLimit )); then
			printf "\nThe '$service' could not be started after $tryLimit tries, exiting"
			return 1
	
		# service is still not running, try and start it every minute
		elif [[ "$state" != "RUNNING" ]] && (( i % 60 == 0 )); then
			  (( ++try ))
			  service start "$service" "${globalArgs[@]}"

		fi

		# status every two minutes
		if (( i % 120 == 0 )); then
			printf "\nThe '$service' service has been $state for $(TimerOff)..."
		else
			printf "."; (( i+=$sleepSeconds ))
		fi

		# sleep if we have not been signaled, break if we are signaled
		[[ ! $stopSignal ]] && sleep $sleepSeconds &
		wait; [[ $stopSignal ]] && return

	done
}

manageExit()
{
	[[ ! $noStopService ]] && service stop "$service" "${globalArgs[@]}"
	echo "The '$service' service ran for $(TimerOff)"
}

manageSignal()
{
	stopSignal="$1"
	printf "\nReceived $stopSignal...\n"
}

#
# pause command
#

pauseCommand()
{
	if isWinService "$service"; then
		doCommandWait "pause"
	else
		stopCommand
	fi
}

pauseWin() { local result; result="$($sc $hostUnc pause "$service")" && return; EchoErr "$result"; return 1; }

#
# start command
#

startCommand() { doCommandWait "start"; }
startLinux() { linuxService start "$service"; }
startWin() { local result; result="$($sc $hostUnc start "$service")" && return; EchoErr "$result"; return 1; }

startMac()
{
	getMacServiceFile && { RunLog $sudo launchctl bootstrap "$macServiceDomain" "$macServiceFile"; return; }
	RunLog $sudo launchctl start "$macService"
}

#
# State Command
#

stateUsage()
{
	EchoWrap "Usage: $(ScriptName) state
Show service state, one of RUNNING, STOPPED, FAILED, or PAUSED."
}

stateCommand() { RunPlatform "state" --host; }

stateLinux()
{
	[[ ! $useSystemd ]] && { linuxService status "$service" | grep --quiet "is running" && echo "RUNNING" || echo "STOPPED"; return; }

	local status="$(linuxService status "$service" | head -3 | grep "^[ ]*Active:" | sed 's/^[ ]*//' | cut -d" " -f2-3)"
	[[ "$status" = "active (running)" ]] && { echo "RUNNING"; return; }
	[[ "$status" =~ ^failed.* ]] && { echo "FAILED"; return; }
	echo "STOPPED"; return; # Active: inactive	
}

stateMac()
{
	[[ ! $macServiceLoaded ]] && { echo "STOPPED"; return; }

	# macServiceInfo state - exited, not running, running, or uninitialized
	local state; state="$(echo "$macServiceInfo" | ${G}grep "^	state = " | ${G}cut -d"=" -f2 | RemoveSpaceTrim)" || return

	# running
	[[ "$state" == "running" ]] && { echo "RUNNING"; return; }

	# failed - lastExitCode != 0
	local lastExitCode; lastExitCode="$(echo "$macServiceInfo" | grep "^	last exit code = " | ${G}cut -d"=" -f2)" || return
	[[ "$lastExitCode" == "lastExitCode" ]] && { echo "FAILED"; return; }

	# stopped
	echo "STOPPED"
}

stateWin()
{
	GetWord "$($sc $hostUnc query "$service" |& grep STATE)" 4
}

#
# show command
#

showUsage() { EchoWrap "Usage: $(ScriptName) show active|start\nShow service information."; }
showCommand() { RunPlatform show; }
showLinux() { [[ ! $useSystemd ]] && return; systemctl show "$service"; }

showActiveUsage() { EchoWrap "Usage: $(ScriptName) show active\nShow time service became active."; }
showActiveCommand() { RunPlatform showActive; }
showActiveLinux() { getProp "ActiveEnterTimestamp"; }

showStartUsage() { EchoWrap "Usage: $(ScriptName) show start\nShow service start time."; }
showStartCommand() { RunPlatform showStart; }
showStartLinux() { local result="$(getProp "ExecMainStartTimestamp")"; [[ $result ]] && { echo $result; return; }; showActiveLinux; }

getProp() { showCommand | grep "^$1=" | cut -d= -f2; }

#
# Start Type Command
#

starttypeUsage()
{
	EchoWrap "Usage: $(ScriptName) StartType
Show service start type, one of AUTO_START, DISABLED, or DEMAND_START."
}

starttypeCommand() { startType; }
startType() { RunPlatform "startType" --host; }

startTypeLinux()
{
	[[ ! $useSystemd ]] && { echo "unknown"; return; }
	[[ "$(linuxService is-enabled "$service")" == "enabled" ]] && echo "AUTO_START" || echo "DISABLED"
}

startTypeMac()
{
	local file;

	# disabled
	if launchctl print-disabled "$macServiceDomain" | ${G}grep --quiet "\"$service\" => disabled"; then
		echo "DISABLED"
		return
	fi

	# auto
	getMacServiceFileContent || return
	if echo "$macServiceFileContent" | qgrep '"RunAtLoad" => 1$'; then
		echo "AUTO_START"
		return
	fi

	# demand
	echo "DEMAND_START"
}

startTypeWin()
{
	GetWord "$($sc $hostUnc qc "$service" $ScBufferSize |& RemoveCarriageReturn | grep START_TYPE)" 4
}

#
# Stop Command
#

stopCommand() { doCommandWait "stop"; }
stopLinux() { linuxService stop "$service"; }
stopWin() { local result="$($sc $hostUnc stop "$service")" && return; EchoErr "$result"; return 1; }

stopMac()
{
	getMacServiceFile && { RunLog $sudo launchctl bootout $macServiceDomain "$macServiceFile"; return; }
	RunLog $sudo launchctl stop "$macService"
}

#
# helper
#

isWinService() { IsPlatform win && ! isLinuxService "$1"; }

doCommand() { local command="$1"; checkState "$command" && return; doCommandRun "$command"; }
doCommandWait() { local command="$1"; checkState "$command" && return; waitStart "$command" && doCommandRun "$command" --host && waitEnd "$command"; }

doCommandRun()
{
	local command="$1"

	# run command with additional permissions if needed
	if isWinService "$service" && ! IsElevated; then
		! CanElevate && { ScriptErrQuiet "unable to elevate"; return 1; }
		RunLog elevate RunScript --pause-error -- service $command $service $noHostCheck $noServiceCheck "${globalArgs[@]}"
		return
	fi

	# run command
	RunPlatform "$command" --host
}

macDaemons=( "/System/Library/LaunchDaemons" "/Library/LaunchDaemons" )
macSystemAgents=( "/System/Library/LaunchAgents" "/Library/LaunchAgents" "$HOME/Library/LaunchAgents" )
macAgents=(  "${macSystemAgents[@]}" "$HOME/Library/LaunchAgents" )
macServices=( "${macDaemons[@]}" "${macAgents[@]}" )

isLinuxService() { isInitService "$1" || isSystemdService "$1"; }
isInitService() { [[ -f "/etc/init.d/$1" ]] ; }

# isSystemdService NAME - NAME format is SERVICE_NAME[@SERVICE_INSTANCE]
isSystemdService()
{
	local name="$1"; [[ $useSystemd ]] || return

	# service or service@instance exists explicitly
	[[ -f "/etc/systemd/system/$name.service" || -f "/lib/systemd/system/$name.service" ]] && return

	# service with an instance name
	[[ "$name" =~ @ && "$(RemoveBefore "$name" "@")" == "" ]] && return 1 # empty instance name not allowed
	[[ "$name" =~ @ ]] && name="$(RemoveAfter "$name" "@")@" # remove instance suffix
	[[ -f "/etc/systemd/system/$name.service" || -f "/lib/systemd/system/$name.service" ]] && return

	# static units
	systemctl is-enabled "$service" >& /dev/null
}

# linuxService - COMMAND SERVICE
linuxService() 
{
	local command="$1" service="$2"
	local sudo; [[ "$command" != @(running|status) ]] && sudo="sudo"

	[[ $sudo ]] && { sudov || return; }

	# systemd
	if [[ $useSystemd ]]; then
		RunLog $sudo systemctl "$command" "$service"

	# WSL
	elif IsPlatform wsl; then 
		[[ "$command" == "enable" ]] && return
		local quiet="/dev/null"; [[ "$command" == "status" ]] && quiet="/dev/stdout"
		RunLog $sudo "/usr/sbin/service" "$service" "$command" > "$quiet"

	# init.d
	else 
		RunLog $sudo "/etc/init.d/$service" "$command"

	fi
}

#
# info commands
#

infoUsage() { EchoWrap "Usage: $(ScriptName) info all|file|dump|platform|type\nShow service information."; }
infoCommand() { usage; }

infoAllUsage() { EchoWrap "Usage: $(ScriptName) info all\nService information for all services."; }

infoAllCommand()
{
	local service services; IFS=$'\n' ArrayMake services "$(RunPlatform "list")" || return

	{
		echo "service#domain#type#start type#state"

		for service in "${services[@]}"; do
			serviceCheck || return
			echo "$service#$macServiceDomain#$(infoTypeMac)#$(startType)#$(stateCommand)"
		done
	} | column -c $(tput cols -T "$term") -t -s#
}

infoDumpUsage() { EchoWrap "Usage: $(ScriptName) info dump\nDump all service information if possible."; }
infoDumpCommand() { RunPlatform "infoDump"; }
infoDumpMac() { launchctl dumpstate; }

infoFileUsage() { EchoWrap "Usage: $(ScriptName) info file [contents]\nShow the file associated with the service, if applicable."; }
infoFileCommand() { RunPlatform "infoFile"; }
infoFileMac() { getMacServiceFile && echo "$macServiceFile"; }

infoFileLinux()
{
	if [[ $useSystemd ]]; then
		if [[ -f "/lib/systemd/system/$service.service" ]]; then echo "/lib/systemd/system/$service.service"
		elif [[ -f "/etc/systemd/system/$service.service" ]]; then echo "/etc/systemd/system/$service.service"
		fi
	elif [[ -f "/etc/init.d/$service" ]]; then
		echo "/etc/init.d/$service"
	fi
}

infoFileContentsCommand()
{
	local file; file="$(RunPlatform "infoFile")"; [[ ! $file ]] && return; 
	ScriptFileCheck "$file" || return
	IsPlatform mac && { plutil -p "$file"; return; }
	cat "$file"
}

infoPlatformUsage() { EchoWrap "Usage: $(ScriptName) info platform\nShow platform specific service information."; }
infoPlatformCommand() { RunPlatform "infoPlatform"; }

infoPlatformMac()
{
	[[ $macServiceLoaded ]] && { echo "$macServiceInfo"; return; }
	getMacServiceFileContent && echo "$macServiceFileContent"
}

infoTypeUsage() { EchoWrap "Usage: $(ScriptName) info type\nShow the platform specific type of the service."; RunPlatform infoTypeUsage; }
infoTypeCommand() { RunPlatform "infoType"; }
infoTypeLinux() { [[ $useSystemd ]] && echo "systemd" || echo "init.d"; }

infoTypeUsageMac() { echo "Valid service types: Extension LaunchAgent LaunchDaemon pid Submitted XPCService"; }
infoTypeMac()
{
	# get type from loaded service
	[[ $macServiceLoaded ]] && { echo "$macServiceInfo" | grep "^	type = " | ${G}cut -d"=" -f2 | RemoveSpaceTrim; return; }
	
	# get type from the service file
	if getMacServiceFile; then
		[[ "$macServiceFile" =~ '/LaunchAgents/' ]] && { echo "LaunchAgent"; return; }
		[[ "$macServiceFile" =~ '/LaunchDaemons/' ]] && { echo "LaunchDaemon"; return; }
	fi

	echo "unknown"
}

#
# helper - checkState
#

# checkState - return true if the command is in the desired state
checkState() { local command="$1"; [[ ! $force ]] && RunFunction "checkState" "$command"; }

checkStateAuto() { [[ "$(startType)" == "AUTO_START" ]]; }
checkStateDemand() { ! isWinService "$service" && { checkStateDisabled; return; }; [[ "$(startType)" == "DEMAND_START" ]]; }
checkStateDisable() { [[ "$(startType)" == "DISABLED" ]]; }

checkStateContinue() { ! isWinService "$service" && { checkStateStart; return; }; [[ "$(stateCommand)" != "RUNNING" ]]; }
checkStatePause() { ! isWinService "$service" && { checkStateStop; return; }; [[ "$(stateCommand)" != "PAUSED" ]]; }
checkStateStart() { [[ "$(stateCommand)" != @(FAILED|STOPPED) ]]; }
checkStateStop() { [[ "$(stateCommand)" != "RUNNING" ]]; }

#
# helper - wait
#

waitNeeded() { IsFunction "waitForState${command^}"; }

waitStart() 
{	
	! waitNeeded && return
	local desc="${command^}ing"; [[ "$command" == "stop" ]] && desc="Stopping"
	[[ ! $quiet ]] && printf "$desc $service service$hostDescription..."
	return 0
}

# waitEnd
waitEnd()
{
	! waitNeeded && return
	[[ ! $wait ]] && { [[ ! $quiet ]] && echo done; return 0; }
	RunFunction waitForState "$command"
}

waitForStateContinue() { waitForState "RUNNING" "continue" "continued"; }
waitForStatePause() { waitForState "PAUSED" "pause";}
waitForStateStart() { waitForState "RUNNING" "start" "started"; }
waitForStateStop() { waitForState  "STOPPED|FAILED" "stop"; }

# waitForState STATE PRESENT [PAST](finalState)
waitForState()
{
	local seconds=30 state="$1" present="$2" past="$3"

	[[ ! $wait ]] && return

	for (( i=1; i<=seconds; ++i )); do
 		read -n 1 -t 1 -s && { echo "cancelled after $i seconds"; return 1; }
 		local currentState="$(stateCommand)"
 		[[ "$currentState" =~ ^($state)$ ]] && { [[ ! $quiet ]] && echo "${past:-${currentState,,}} in $i seconds"; return 0; }
		printf "."
	done

	[[ ! $quiet ]] && echo "did not $present in $seconds seconds";
	return 1
}

ScriptRun "$@"
