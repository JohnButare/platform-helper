#!/bin/bash
. function.sh

usage()
{
	echot "\
usage: template [one|two|cd](one)
	one										perform the first command
	two										perform the second command
	sub one|two						perform a sub command
	-f, --file <file>			the file for the command
	-i, --interactive			prompt for changes
	-s, --server <server>	the server to use
	-t, --test						run in test mode
	-v, --verbose					display detailed output"
	exit $1
}

init() 
{
	unset file interactive server verbose test
	command='one'
}

args()
{
	while [ "$1" != "" ]; do
		case "${1,,}" in
			-f|--file) shift; file="$1";;
			-s|--server) shift; server="$1";;
			-i|--interactive) interactive="-i";;
			-t|--test) test="-t";;
			-v|--verbose) verbose="-v";;
			-h|--help) usage 0;;
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(sub) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	args=( "$@" )
	[[ ! $command ]] && MissingOperand "command"
	[[ ! $file ]] && MissingOperand "file"
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }
oneCommand() {  echo "command=$command"; }
twoCommand() {  echo "command=$command"; }

subCommand()
{
	command="One"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Sub${s}Command && { command="$s"; shift; }
	[[ $# != 0 ]] && usage
	Sub${command}Command "$@"
}

SubOneCommand() { echo "command=Sub$command args=${#args[@]} file=\"$file\" server=\"$server\" interactive=$interactive verbose=$verbose test=$test"; }
SubTwoCommand() {  echo "command=Sub$command"; }

#run "$@"
# tc service "$@"

echo "TODO: implement service"