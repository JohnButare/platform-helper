#!/usr/bin/env bash

. function.sh || exit

usage()
{
	echot "\
usage: service [COMMAND](start) SERVICE [HOST]
	Control Windows services
	detail|exists|list|ListFile|log|StartType|show|state|status|running
	continue|pause|restart|start|stop				control service
	auto|delete|demand|disable|manual		 		configure service
	-h, --host 								host to check
	    --no-host-check 			do not check for host availability
	    --no-service-check		do not check for service existence
	-w, --wait								wait for the service to change state"
	exit $1
}

args()
{
	unset command service host noHostCheck noServiceCheck wait 

	[[ $# == 0 ]] && { command="show"; return; }
	
	while (( $# != 0 )); do
		case "$1" in
			--host|-h) host="$2"; shift;;
			--no-host-check) noHostCheck="--no-host-check";;
			--no-service-check) noServiceCheck="--no-service-check";;
			--wait|-w) wait="--wait";;
			--help) help="--help";;
			ListFile) command="listFile";; StartType) command="startType";;
			*)
				! IsOption "$1" && [[ ! $command ]] && { CheckCommand "$1"; command="${1,,}"; shift; continue; }
				! IsOption "$1" && [[ "$command" != @(list|ListFile) && ! $service ]] && { service="$1"; shift; continue; }
				! IsOption "$1" && [[ ! $host ]] && { host="$1"; shift; continue; }
				UnknownOption "$1"
		esac
		shift
	done

	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	
	args=("$@")
}

init()
{ 
	unset hostUnc hostDescription

	# SC data area error - http://www.dostips.com/forum/viewtopic.php?f=3&t=3408
	scBufferSize=5000
	sc="sc.exe" # service command

	if [[ ! $noHostCheck && $host && "$host" != @(localhost|$HOSTNAME) ]]; then
		! IsAvailable "$host" && { EchoErr "service: $host is not available"; return 1; }
		hostUnc='\\'"$host"
		hostDescription=" on $host"
	fi

	if [[ "$command" != @(list|ListFile|show) ]]; then
		[[ $service ]] || MissingOperand "service"
		[[ "$command" != "exists" ]] && { check || return; }
	fi

	return 0
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }

#
# Helper Functions
#

isLinuxService() { [[ -f "/etc/init.d/$1" ]]; }
checkLinuxService() { isLinuxService "$1" && return 0; EchoErr "service: $1 does not exist as an installed service"; return 1; }
lsc() { IsPlatform wsl && { sudoc "/usr/sbin/service" "$2" "$1"; return; }; sudoc systemctl "$1" "$2"; } # Linux Service Command COMMAND HOST

check()
{
	[[ $noServiceCheck ]] && return 0

	isLinuxService "$service" && return;
	! IsPlatform win && { invalidService; return; }

	local result="$(sc.exe $hostUnc query "$service" | RemoveCarriageReturn |& grep FAILED)"
	resultCode="${result#*FAILED }"; resultCode="${resultCode%%:}"

	case $resultCode in
		1060) invalidService;;
  	5) echo "service: access to the service control manager denied$hostDescription";;
		*) return 0
	esac

	return 1
}

invalidService() { EchoErr "service: $service does not exist as an installed service$hostDescription"; return 1; }

checkElevated()
{
	! IsPlatform win && return
	
	if ! IsElevated && [[ "$host" == @(|localhost|$HOSTNAME) ]]; then
		elevate="true";
		return 0
	else
		elevate=""
		return 1
	fi
}

checkWaiting()
{
	unset waiting
	[[ ! $wait ]] && waiting="\n"
}

waitForState()
{
	local seconds=30 state="$1"

	for (( i=1; i<=seconds; ++i )); do
 		read -n 1 -t 1 -s && { echo "cancelled after $i seconds"; return 1; }
 		[[ "$(stateCommand)" == "$state" ]] && { echo "$3 in $i seconds"; return 0; }
		printf "."
	done

	echo "did not $2 in $seconds seconds"; return 1
}

#
# Commands
#

existsCommand() { check; }
runningCommand() { [[ "$(stateCommand)" == "RUNNING" ]]; }
showCommand() { IsPlatform win && start services.msc; }

# information

detailCommand()
{
	echo "Status of $service service$hostDescription..."

	if IsPlatform win && ! isLinuxService "$service"; then 
		$sc $hostUnc GetDisplayName "$service"
		$sc $hostUnc qdescription  "$service" $scBufferSize
		$sc $hostUnc queryex "$service" $scBufferSize
		$sc $hostUnc qc "$service" $SscBufferSize
		$sc $hostUnc qfailure "$service"
	else
		checkLinuxService "$service" || return
		lsc status "$service"
	fi
}

listCommand()
{
	if IsPlatform win; then
		$sc $hostUnc queryex bufsize= $scBufferSize type= all state= all; /usr/sbin/service --status-all
	else
		ls -1 "/etc/init.d/"
	fi
}

listFileCommand() 
{ 
	local file="$TMP/services.txt";
	printf "" > "$file" || return
	IsPlatform win && { $sc $hostUnc queryex bufsize= $scBufferSize type= all state= all >> $file || return; }
	[[ -d /etc/init.d ]] && { ls -1 "/etc/init.d" >> $file || return; }
	TextEdit "$file"
}

logCommand()
{
	! isLinuxService "$service" && { EventViewer; return; }
	sudoc journalctl -f -u "$service" -b
}

startTypeCommand()
{	
	if IsPlatform win && ! isLinuxService "$service"; then
		GetWord "$($sc $hostUnc qc "$service" $ScBufferSize |& RemoveCarriageReturn | grep START_TYPE)" 4
	else
		checkLinuxService "$service" || return
		if [[ "lsc" == "/usr/sbin/service" ]]; then
			echo "unknown"
		else
			lsc status "$service" | grep -E "^[ ]*Loaded:" | grep "enabled;" >& /dev/null && echo "AUTO_START" || echo "DISABLED"
		fi
	fi
}

stateCommand() 
{ 
	if IsPlatform win && ! isLinuxService "$service"; then 
		GetWord "$($sc $hostUnc query "$service" |& grep STATE)" 4; 
	else
		checkLinuxService "$service" || return
		if IsPlatform wsl; then
			lsc status "$service" | grep "is running" > /dev/null && echo "RUNNING" || echo "STOPPED"
		else
			lsc status "$service" | grep "active (running)" > /dev/null && echo "RUNNING" || echo "STOPPED"
		fi
	fi
}

statusCommand()
{
	state="$(stateCommand)" || return
	startType="$(startTypeCommand)" || return
	echo "$service is ${state}${hostDescription} ($startType)"
}

# change - auto/demand/disable/manual/delete

autoCommand() 
{ 
	[[ "$(startTypeCommand)" == "AUTO_START" ]] && return
	
	if IsPlatform win && ! isLinuxService "$service"; then 
		checkElevated && { elevate RunScript --pause-error service auto $wait $noServiceCheck $noHostCheck "$service" "$host"; return; }	
		$sc config $hostUnc "$service" start= auto; 
	else
		checkLinuxService "$service" || return
		lsc enable "$service" || return
	fi
}

demandCommand() 
{	
	isLinuxService "$service" && { disableCommand; return; }

	[[ "$(startTypeCommand)" == "DEMAND_START" ]] && return 
	checkElevated && { elevate RunScript --pause-error service demand $wait $noServiceCheck $noHostCheck "$service" "$host"; return; }
	$sc config $hostUnc "$service" start= demand; 
}

disableCommand() 
{ 
	[[ "$(startTypeCommand)" == "DISABLED" ]] && return 
	
	if IsPlatform win && ! isLinuxService "$service"; then 
		checkElevated && { elevate RunScript --pause-error service disable $wait $noServiceCheck $noHostCheck "$service" "$host"; return; }
		$sc config $hostUnc "$service" start= disabled; 
	else
		checkLinuxService "$service" || return
		lsc disable "$service" || return
	fi
}

manualCommand()
{
	echo "Stopping $service service and setting it to demand start$hostDescription..."
	demandCommand || return
	stopCommand || return
	return 0
}

# start/stop/restart/pause/continue

startCommand()
{
	[[ "$(stateCommand)" != "STOPPED" ]] && return 

	checkWaiting; printf "Starting $service service$hostDescription...$waiting"

	if IsPlatform win && ! isLinuxService "$service"; then 
		result="$($sc $hostUnc start "$service")" || { EchoErr "$result"; return 1; }
	else
		checkLinuxService "$service" || return
		lsc start "$service" || return
	fi

	[[ $wait ]] && { waitForState RUNNING start started || return; }
	
	return 0
}

stopCommand()
{
	[[ "$(stateCommand)" != "RUNNING" ]] && return 
	! isLinuxService "$service" && checkElevated && { elevate RunScript --pause-error service stop $wait $noServiceCheck $noHostCheck "$service" "$host"; return; }

	checkWaiting; printf "Stopping $service service$hostDescription..."$waiting

	if IsPlatform win && ! isLinuxService "$service"; then 
		result="$($sc $hostUnc stop "$service")" || { EchoErr "$result"; return 1; }
	else
		checkLinuxService "$service" || return
		lsc stop "$service" || return
	fi

	[[ $wait ]] && waitForState STOPPED stop stopped
	return 0
}

restartCommand() 
{ 
	local oldWait="$wait" wait="--wait"; noServiceCheck="--no-service-check"
	stopCommand || return
	wait="$oldWait"
	startCommand || return
	return 0
}

continueCommand()
{
	isLinuxService "$service" && { startCommand; return; }
	
	[[ "$(stateCommand)" != "PAUSED" ]] && return 
	
	checkWaiting; printf "Continuing $service service$hostDescription..."$waiting
	result="$($sc $hostUnc continue "$service")" || { EchoErr "$result"; return 1; }

	[[ $wait ]] && waitForState RUNNING continue continued
}

pauseCommand()
{
	isLinuxService "$service" && { stopCommand; return; }
	
	[[ "$(stateCommand)" != "RUNNING" ]] && return 
	checkElevated && { elevate RunScript --pause-error service pause $wait $noServiceCheck $noHostCheck "$service" "$host"; return; }

	checkWaiting; printf "Pausing $service service$hostDescription..."$waiting
	result="$($sc $hostUnc pause "$service")" || { EchoErr "$result"; return 1; }

	[[ $wait ]] && waitForState PAUSED pause paused
}

run "$@"
