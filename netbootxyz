#!/usr/bin/env bash
. script.sh || exit

usage() {	ScriptUsage "$1" "usage: netbootxyz backup|web
	docker 		control the docker image
	web				update the netboot.xyz web site
  profile 	netboot.xyz configuration"; }

init() 
{ 
	image="netbootxyz"
	profileDir="$DATA/appconfig/netboot.xyz"
	config="/opt/netboot.xyz/user_overrides.yml"
}

#
# Commands
#

backupCommand() { AppBackup "netboot.xyz.config" "//$(UpdateGet "FileServer")/root$DATA/appconfig/netbootxyz" || return; }

#
# Docker Image Commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker IsInstalled|IsRunning|shell|start|stop
Control the docker image."; }

dockerCommand() { usage; }
dockerIsInstalledCommand() { ! InPath docker && return 1; docker image list |& grep "$image" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep "$image" >& /dev/null; }
dockerShellCommand() { docker exec -it "$image" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)
netboot.xyz configuration."; }

profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }

profileCommand()
{
	profile $noPrompt --app "$image" --method "$profileDir" --files "nginx menus" "${profileArgs[@]}" || return
	profile $noPrompt --sudo --app "$image-config" --method "$(GetFilePath "$config")" --files "$(GetFileName "$config")" "${profileArgs[@]}" || return
}

#
# Web Commands
#

webUsage()
{
	echot "Usage: $(ScriptName) web config|deploy|update
Update the netboot.xyz web site.

	config		edit the web site configuration
	deploy		deploy the web site
	update		update the web site"
}

webCommand() { usage; }
webConfigCommand() { sudoe "$config"; }

webDeployCommand()
{
	# local Hyper-V virtual machines
	CopyDir "/var/www/html/ipxe" "$DATA/appdata/netboot.xyz" || return 

	# netboot
	local dest; dest="$(apache dir web)" || return
	merge "/var/www/html" "$dest/netboot.xyz" || return
	unc unmount "$dest" || return
}

webUpdateCommand()
{
	# install netboot.xyz
	if [[ ! -d "/opt/netboot.xyz" ]]; then
		package ansible git apache2 || return
		sudo git clone "https://github.com/netbootxyz/netboot.xyz.git" "/opt/netboot.xyz" || return
		netbootxyz profile restore default || return
	fi

	# update the web site
	cd /opt/netboot.xyz || return
	sudo ansible-playbook -i inventory site.yml || return
}

#
# helper functions
#

getContainerId() { docker ps --all | grep "$image" | cut -d" " -f1; }

ScriptRun "$@"
