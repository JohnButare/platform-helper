#!/usr/bin/env bash
. script.sh || exit

usage()
{
	init; ScriptUsage "$1" "\
usage: netbootxyz app|docker|profile|setup|test|web"
}

usageVerbose()
{
	ScriptUsageEcho "\
Locations:
	    application: $appDir (netboot.xyz git repository)
	  configuration: $configDir
	  	custom host: $customHost
	 			web (app): $webDirApp
	 		web (final): $webDirFinal"
}

init() 
{ 
	app="netbootxyz"
	dockerImageName="$app"

	appDir="/opt/netboot.xyz"
	appConfig="$appDir/user_overrides.yml"
	configDir="/etc/netbootxyz"
	customHost="ender"
	webDirApp="/var/www/html/"
	webDirFinal="$(apache dir web)/netboot.xyz" || return
}

#
# commands
#

testUsage() { echot "Usage: $(ScriptName) test\nTest the netboot.xyz configuration."; }

testCommand()
{
	printf "TFTP: " && IsAvailablePortUdp "web.service.butare.net" 69 && echo "OK" || EchoErr "FAIL"
	printf "menus: "; curl --silent "https://boot.butare.net" | grep -q "Legacy and EFI Combined iPXE Bootloaders" && echo "OK" || EchoErr "FAIL"
	printf "UI: "; curl --silent "https://netboot.butare.net" | grep -q "Web Application for customizing netboot.xyz" && echo "OK" || EchoErr "FAIL"
	printf "assets: " && curl -s "http://ender.butare.net:10181/" | grep -q "Index of /" && echo "OK" || EchoErr "FAIL"
}

#
# app commands
#

appUsage() { echot "Usage: $(ScriptName) app config|update\nMaintain the netboot.xyz application."; }
appCommand() { usage; }
appConfigUsage() { echot "Usage: $(ScriptName) app config\nEdit the application configuration file."; }
appConfigCommand() { TextEdit "$appConfig"; }
appUpdateUsage() { echot "Usage: $(ScriptName) app update\nUpdate the netboot.xyz application by running the Ansible playbook."; }
appUpdateCommand() { setupAll && cd "$appDir" && sudo ansible-playbook -i "inventory site.yml"; }

#
# deploy commands
#

deployUsage() { echot "Usage: $(ScriptName) deploy app|custom\nDeploy netboot.xyz components."; }
deployCommand() { usage; }

deployWebUsage() { echot "Usage: $(ScriptName) deploy web\nDeploy the web site.\n\n$hostUsage"; }
deployWebArgStart() { unset hostArg hostOpt hosts; }
deployWebOpt() { ScriptOptHost "$@"; }

deployWebCommand()
{
	echo "Updating web files..."
	sudo CopyDir --recursive --delete "$webDirApp" "$webDirFinal" "${globalArgs[@]}" || return

	echo "Updating web custom files..."
	sudo CopyDir --recursive "$configDir/web/netboot.xyz/" "$webDirFinal" "${globalArgs[@]}" || return

	echo "Updating custom menus..."
	sudo cp "$configDir/menu/custom.ipxe.j2" "$webDirFinal/custom/custom.ipxe"  || return # assumes Jinja2 template not used (no {{ }})

	echo "Synrnozing web sites..."	
	apache deploy --host=localhost "${globalArgs[@]}" && apache sync "${hostOpt[@]}" "${globalArgs[@]}"
}

deployCustomUsage() { echot "Usage: $(ScriptName) deploy web\nDeploy custom installation files."; }
deployCustomCommand() { scp -r "$configDir/web/custom" $customHost:/tmp && SshHelper connect "$customHost" -- /usr/local/bin/docker cp "/tmp/custom" "$dockerImageName:/assets"; }

#
# docker commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker cp|IsInstalled|IsRunning|shell|start|stop\nControl the '$dockerImageName' Docker image."; }
dockerCommand() { usage; }
dockerCpCommand() { docker cp "/tmp/assets"/* "$dockerImageName:/assets/custom"; } 
dockerIsInstalledCommand() { ! InPath docker && return 1; docker dockerImageName list |& grep "$dockerImageName" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep --quiet "$dockerImageName"; }
dockerShellCommand() { docker exec -it "$dockerImageName" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# profile command
#

profileUsage() { echot "Usage: $(ScriptName) profile [all|app|config](all) dir|SaveDir|save|restore [<profile name>|default](latest)\nnetboot.xyz configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }
profileCommand() { profileAllCommand; }
profileAllCommand() { profileAppCommand && profileConfigCommand; }
profileAppCommand() { profile $noPrompt --sudo --app "$app-app-config" --method "$(GetFilePath "$appConfig")" --files "$(GetFileName "$appConfig")" "${profileArgs[@]}"; }
profileConfigCommand() { profile $noPrompt --app "$app-config" --method "$configDir" --files "*" "${profileArgs[@]}"; }

#
# setup command
#

setupUsage() { echot "Usage: $(ScriptName) setup [app|config|web](all)\nSetup netboot.xyz web deployment."; }
setupCommand() { setupAll; }
setupAllCommand() { setupAll; }
setupAll() { setupConfigCommand && setupWebCommand && setupAppCommand; }

setupAppCommand()
{
	[[ -d "$appDir" && ! $force ]] && return
	package ansible git apache2 || return
	sudo git clone "https://github.com/netbootxyz/netboot.xyz.git" "$appDir" || return
	sudo chown -R "$USER" "$appDir" || return
	! IsPlatform mac && { sudo chgrp -R "$USER" "$appDir" || return; }
	netbootxyz profile app restore default || return
}

setupConfigDirCommand()
{
	[[ -d "$configDir" && ! $force ]] && return
	sudo mkdir --parents "$configDir" || return
	sudo chown --recursive "$USER" "$configDir" || return
	netbootxyz profile config restore default || return
}

setupWebCommand()
{
	[[ -d "$webDirFinal" && ! $force ]] && return
	apache sync --host="$(GetServer "web")" && sudo mkdir --parents "$webDirFinal"
}

#
# helper functions
#

getContainerId() { docker ps --all | grep "$dockerImageName" | cut -d" " -f1; }

ScriptRun "$@"
