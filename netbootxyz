#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
usage: netbootxyz backup|docker|IsInstalled|profile|test|web
	docker 		control the docker dockerImageName
	web				update the netboot.xyz web site
  profile 	netboot.xyz configuration
  test			test the configuration"
}

init() 
{ 
	dockerImageName="netbootxyz"
	config="/opt/netboot.xyz/user_overrides.yml"
	menuDir="/etc/netbootxyz/custom"
	webDir="/var/www/html/"
}

#
# Commands
#

IsInstalledCommand() { [[ "${ACONFIG}2/netbootxyz" ]]; }

backupCommand()
{ 
	! IsInstalledCommand && return
	local backupHosts; backupHosts="$(network current servers backup)" || return
	BorgHelper backup "${ACONFIG}2/netbootxyz" --archive "netboot.xyz" --backup-host="$backupHosts" --prune 5
}

testCommand()
{
	printf "TFTP: " && IsAvailablePortUdp "web.service.butare.net" 69 && echo "OK" || EchoErr "FAIL"
	printf "menus: "; curl --silent "https://boot.butare.net" | grep -q "Legacy and EFI Combined iPXE Bootloaders" && echo "OK" || EchoErr "FAIL"
	printf "UI: "; curl --silent "https://netboot.butare.net" | grep -q "Web Application for customizing netboot.xyz" && echo "OK" || EchoErr "FAIL"
	printf "assets: " && curl -s "http://netboot.butare.net:10181/" | grep -q "Index of /" && echo "OK" || EchoErr "FAIL"
}

#
# Docker dockerImageName Commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker IsInstalled|IsRunning|shell|start|stop
Control the docker dockerImageName."; }

dockerCommand() { usage; }
dockerIsInstalledCommand() { ! InPath docker && return 1; docker dockerImageName list |& grep "$dockerImageName" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep --quiet "$dockerImageName"; }
dockerShellCommand() { docker exec -it "$dockerImageName" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\nnetboot.xyz configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }

profileCommand()
{
	hilight "configuration..."
	profile $noPrompt --sudo --app "$dockerImageName-config" --method "$(GetFilePath "$config")" --files "$(GetFileName "$config")" "${profileArgs[@]}" || return

	hilight "custom menus..."
	profile $noPrompt --app "$dockerImageName-menus" --method "$menuDir" --files "*" "${profileArgs[@]}" || return

	hilight "web assets..."
	profile $noPrompt --app "$dockerImageName-web" --method "$webDir" --files ".htaccess *.png" "${profileArgs[@]}" || return
}

#
# Web Commands
#

webUsage()
{
	echot "Usage: $(ScriptName) web config|deploy|update
Update the netboot.xyz web site.

	config		edit the web site configuration
	deploy		deploy the web site
	update		update the web site"
}

webCommand() { usage; }
webConfigCommand() { TextEdit "$config"; }
webDeployCommand() { sudo CopyDir --recursive --delete "$webDir" "$SRV/apache-web/htdocs/netboot.xyz" && inst ApacheSync;  }

webUpdateCommand()
{
	local dir="/opt/netboot.xyz"
	
	# custom menus location
	if [[ ! -d "$menuDir" ]]; then
		sudoc mkdir --parents "$menuDir" || return
		sudo chown --recursive "$USER" "$menuDir" || return
	fi

	# install netboot.xyz
	if [[ ! -d "$dir" ]]; then
		package ansible git apache2 || return
		sudo git clone "https://github.com/netbootxyz/netboot.xyz.git" "$dir" || return
		sudo chown -R "$USER" "$dir" || return
		! IsPlatform mac && { sudo chgrp -R "$USER" "$dir" || return; }
		netbootxyz profile restore default || return
	fi

	# update the web site
	cd "$dir" || return
	sudo ansible-playbook -i inventory site.yml || return
}

#
# helper functions
#

getContainerId() { docker ps --all | grep "$dockerImageName" | cut -d" " -f1; }

ScriptRun "$@"
