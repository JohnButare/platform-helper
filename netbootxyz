#!/usr/bin/env bash
. script.sh || exit

usage()
{
	init; ScriptUsage "$1" "\
usage: netbootxyz backup|docker|IsInstalled|profile|setup|test|web
	docker 		control the docker dockerImageName
	web				update the netboot.xyz web site
  profile 	netboot.xyz configuration
  test			test the configuration"
}

usageVerbose()
{
	ScriptUsageEcho "
Locations:
      application: $appDir
     custom menus: $menuDir
      web staging: $webStageDir
   web deployment: $webDir
    configuration: $config"
}

init() 
{ 
	app="netbootxyz"
	dockerImageName="$app"

	appDir="/opt/netboot.xyz"
	menuDir="/etc/netbootxyz/custom"
	webStageDir="/etc/netbootxyz/staging"
	webAppDir="/var/www/html/"
	webDir="$(apache dir web)/netboot.xyz" || return

	config="/opt/netboot.xyz/user_overrides.yml"
}

#
# Commands
#

IsInstalledCommand() { [[ "${ACONFIG}2/netbootxyz" ]]; }

backupCommand()
{ 
	! IsInstalledCommand && return
	local backupHosts; backupHosts="$(network current servers backup)" || return
	BorgHelper backup "${ACONFIG}2/netbootxyz" --archive "netboot.xyz" --backup-host="$backupHosts" --prune 5
}

testCommand()
{
	printf "TFTP: " && IsAvailablePortUdp "web.service.butare.net" 69 && echo "OK" || EchoErr "FAIL"
	printf "menus: "; curl --silent "https://boot.butare.net" | grep -q "Legacy and EFI Combined iPXE Bootloaders" && echo "OK" || EchoErr "FAIL"
	printf "UI: "; curl --silent "https://netboot.butare.net" | grep -q "Web Application for customizing netboot.xyz" && echo "OK" || EchoErr "FAIL"
	printf "assets: " && curl -s "http://netboot.butare.net:10181/" | grep -q "Index of /" && echo "OK" || EchoErr "FAIL"
}

#
# Docker dockerImageName Commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker IsInstalled|IsRunning|shell|start|stop
Control the docker dockerImageName."; }

dockerCommand() { usage; }
dockerIsInstalledCommand() { ! InPath docker && return 1; docker dockerImageName list |& grep "$dockerImageName" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep --quiet "$dockerImageName"; }
dockerShellCommand() { docker exec -it "$dockerImageName" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# Profile Command
#

profileUsage() { echot "Usage: $(ScriptName) profile [all|app|menus|web](all) dir|SaveDir|save|restore [<profile name>|default](latest)\nnetboot.xyz configuration."; }
profileArgStart() { profileArgs=(); }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); }
profileCommand() { profileAllCommand; }
profileAllCommand() { profileAppCommand && profileMenusCommand && profileWebCommand; }
profileAppCommand() { profile $noPrompt --sudo --app "$app-config" --method "$(GetFilePath "$config")" --files "$(GetFileName "$config")" "${profileArgs[@]}"; }
profileMenusCommand() { profile $noPrompt --app "$app-menus" --method "$menuDir" --files "*" "${profileArgs[@]}"; }
profileWebCommand() { profile $noPrompt --app "$app-web" --method "$webStageDir" --files ".htaccess *.png" "${profileArgs[@]}"; }

#
# Setup Command
#

setupUsage() { echot "Usage: $(ScriptName) setup [menus|stage|web](all)\nSetup netboot.xyz web deployment."; }
setupCommand() { setupAll; }
setupAllCommand() { setupAll; }
setupAll() { setupMenusCommand && setupStageCommand && setupWebCommand && setupAppCommand; }

setupAppCommand()
{
	[[ -d "$appDir" && ! $force ]] && return
	package ansible git apache2 || return
	sudo git clone "https://github.com/netbootxyz/netboot.xyz.git" "$appDir" || return
	sudo chown -R "$USER" "$appDir" || return
	! IsPlatform mac && { sudo chgrp -R "$USER" "$appDir" || return; }
	netbootxyz profile app restore default || return
}

setupMenusCommand()
{
	[[ -d "$menuDir" && ! $force ]] && return
	sudo mkdir --parents "$menuDir" || return
	sudo chown --recursive "$USER" "$menuDir" || return
	netbootxyz profile menus restore default || return
}

setupStageCommand()
{
	[[ -d "$webStageDir" && ! $force ]] && return
	sudo mkdir --parents "$webStageDir" || return
	sudo chown --recursive "$USER" "$webStageDir" || return
	netbootxyz profile web restore default || return
}

setupWebCommand()
{
	[[ -d "$webDir" && ! $force ]] && return
	apache sync all || return
	sudo mkdir --parents "$webDir" || return
}

#
# Web Commands
#

webUsage()
{
	echot "Usage: $(ScriptName) web config|deploy|update
Update the netboot.xyz web site.

	config		edit the web site configuration
	deploy		deploy the web site
	update		update the web site"
}

webCommand() { usage; }
webConfigCommand() { TextEdit "$config"; }
webUpdateCommand() { setupAll && cd "$appDir" && sudo ansible-playbook -i "inventory site.yml"; }

webDeployCommand()
{
	echo "Updating netboot.xyz application files..."
	sudo CopyDir --recursive --delete "$webAppDir" "$webDir" "${globalArgs[@]}" || return

	echo "Updating netboot.xyz custom files..."
	sudo CopyDir --recursive "$webStageDir/" "$webDir" "${globalArgs[@]}" || return

	echo "Updating netboot.xyz custom menus..."
	sudo cp "$menuDir/custom.ipxe.j2" "$webDir/custom/custom.ipxe"  || return # assumes Jinja2 template not used (no {{ }})

	echo "Synrnozing web sites..."	
	apache deploy localhost "${globalArgs[@]}" && apache sync all "${globalArgs[@]}"
}


#
# helper functions
#

getContainerId() { docker ps --all | grep "$dockerImageName" | cut -d" " -f1; }

ScriptRun "$@"

