#!/usr/bin/env bash
. script.sh || exit
. color.sh || exit

usage()
{
	init; ScriptUsage "$1" "\
usage: netbootxyz deploy|docker|edit|setup|test|update"
}

usageVerbose()
{
	ScriptUsageEcho "\
Locations:
- application - netboot.xyz Git repository  : $appDir ($(checkDir "$appDir"))
- configuration - custom configuration      : $confDir ($(checkDir "$confDir"))
- hosts - custom deployment scripts					: $customHost
- web app - netboot.xyz website             : $webDirApp ($(checkDir "$webDirApp"))
- web final - local website source          : $webDirFinal ($(checkDir "$webDirFinal"))"
}

checkDir() {  [[ -d "$1" ]] && echo "present" || echo "${RED}missing${RESET}";  }

init() 
{ 
	app="netbootxyz"
	dockerImageName="$app"

	confDir="$HOME/$(ConfigGet confDir)/netboot.xyz" || return
	webDirFinal="$(apache dir sync)/htdocs/netboot.xyz" || return

	appDir="/opt/netboot.xyz"
	appConfig="$confDir/user_overrides.yml"
	customHost="ender"
	webDirApp="/var/www/html/"
}

#
# commands
#

testUsage() { echot "Usage: $(ScriptName) test\nTest the netboot.xyz configuration."; }

testCommand()
{
	printf "menus: "; curl --silent "https://boot.butare.net" | grep -q "Legacy and EFI Combined iPXE Bootloaders" && echo "OK" || HilightErr "FAIL"
	printf "UI: "; curl --silent "https://netboot.butare.net" | grep -q "Web Application for customizing netboot.xyz" && echo "OK" || HilightErr "FAIL"

	# ender
	testWeb "ender-docker-live" "http://ender.butare.net:10181"
	testWeb "ender-docker-assets" "http://ender.butare.net:10181/custom/"
	testWeb "ender-apache-assets" "http://ender.butare.net:8080/assets/custom"

	# TFTP
	local check; IsPlatform WSL && { check="ssh $(GetServer apache-web)"; } # WSL does not support UDP, ssh to a web server for the test
	local file="about.ipxe"
	local server servers="$(GetServers tftp)"

	for server in $servers; do
		local desc="$(RemoveDnsSuffix "$server")"
		printf "TFTP $desc: "
		IsAvailable "$server" && printf "available..." || { HilightErr "$desc not available"; continue; }
		IsAvailablePortUdp "$server" 69 && printf "port available..." || { HilightErr "$desc port 69 not responding"; continue; }
		$check tftp $server -c get "$file" > /dev/null && echo "file available" || HilightErr "$file not available on $desc"
		$check rm -f "$file" # cleanup
	done

	return 0
}

# testWeb DESCRIPTION URL
testWeb()
{
	local description="$1" url="$2"
	local server="$(GetUriServer "$url")" port="$(GetUriPort "$url")"
	printf "$description: "
	IsAvailable "$server" && printf "available..." || { HilightErr "$server not available"; return; }
	IsAvailablePort "$server" "$port" && printf "port available..." || { HilightErr "$server port $port not responding"; return; }
	curl -sL "$url" | grep -q "Index of /" && echo "url available" || HilightErr "$url not available"
}

#
# deploy commands
#

deployUsage() { echot "Usage: $(ScriptName) deploy scripts|web\nDeploy netboot.xyz web site or custom deployment scripts."; }
deployCommand() { usage; }

deployWebArgStart() { unset hostArg hostOpt hosts; }
deployWebOpt() { ScriptOptHost "$@"; }

deployWebCommand()
{
	HeaderBig "Updating web files..."
	sudoc CopyDir --recursive --delete --rsync "$webDirApp" "$webDirFinal" "${globalArgs[@]}" || return

	HeaderBig "Updating web custom files..."
	sudo CopyDir --recursive --rsync --no-metadata "$confDir/web/netboot.xyz/" "$webDirFinal" "${globalArgs[@]}" || return

	HeaderBig "Updating custom menus..."
	sudo cp "$confDir/menu/custom.ipxe.j2" "$webDirFinal/custom/custom.ipxe"  || return # assumes Jinja2 templates are not used (no {{ }})

	HeaderBig "Syncronizing web sites..."	
	apache sync "${hostOpt[@]}" "${globalArgs[@]}"
}

deployScriptsCommand()
{
	local src="$confDir/web/custom/windows/scripts"

	# ender
	if IsAvailable ender; then
		hilight "Updating ender..."
		local dir="/opt/homebrew/var/www/assets/custom/windows/scripts"
		UnisonHelper sync "$src" "ender" "$dir" --no-props "${globalArgs[@]}" || return
		SshHelper connect "ender" -- "/usr/local/bin/docker" cp "$dir" "$dockerImageName:/assets/custom/windows"
	fi

	return 0
}

#
# docker commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker IsInstalled|IsRunning|shell|start|stop\nControl the '$dockerImageName' Docker image."; }
dockerCommand() { usage; }
dockerIsInstalledCommand() { ! InPath docker && return 1; docker dockerImageName list |& grep "$dockerImageName" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep --quiet "$dockerImageName"; }
dockerShellCommand() { docker exec -it "$dockerImageName" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# edit commands
#

editUsage() { echot "Usage: $(ScriptName) edit config|menu\nEdit the netboot.xyz configuration or menus."; }
editCommand() { usage; }
editConfigCommand() { TextEdit "$appConfig"; }
editMenuCommand() { TextEdit "$confDir/menu/custom.ipxe.j2"; }

#
# setup command
#

setupUsage() { echot "Usage: $(ScriptName) setup [app|config|web](all)\nSetup the netboot.xyz build environment including the application and web source files."; }
setupCommand() { setupAll; }
setupAllCommand() { setupAll; }
setupAll() { setupWebCommand && setupConfigCommand && setupAppCommand; }

setupAppCommand()
{
	[[ -d "$appDir" && ! $force ]] && return

	# packages
	RunLog package ansible git apache2 python-is-python3 || return

	# application
	[[ -d "$appDir" ]] && { RunLog sudo rm -fr "$appDir" || return; }
	RunLog sudo git clone "https://github.com/netbootxyz/netboot.xyz.git" "$appDir" || return
	RunLog sudo chown --recursive "$USER" "$appDir" || return
	! IsPlatform mac && { RunLog sudo chgrp -R "$USER" "$appDir" || return; }

	# web - use existing web site, it will be updated when the application is deployed
	local webDirAppParent="$(GetParentDir "$webDirApp")"
	RunLog sudoc CopyDir --recursive --delete "$webDirFinal" "$webDirAppParent"  "${globalArgs[@]}" || return
	[[ -d "$webDirApp" ]] && { RunLog sudo rm -fr "$webDirApp" || return; }
	RunLog sudo mv "$webDirAppParent/$(GetFileName "$webDirFinal")" "$webDirApp" || return
}

setupConfigCommand()
{
	(( $(stat -c%b "$confDir/user_overrides.yml") > 0 )) && [[ ! $force ]] && return
	CloudGet "$$confDir"

}
setupWebCommand()
{
	[[ -d "$webDirFinal" && ! $force ]] && return
	apache sync && sudo mkdir --parents "$webDirFinal"
}

#
# update commands
#

updateUsage() { echot "Usage: $(ScriptName) app update\nUpdate the netboot.xyz application by running the Ansible playbook."; }
updateCommand() { setupAll && cp "$confDir/user_overrides.yml" "$appDir" && cd "$appDir" && sudoc ansible-playbook -i "inventory" "site.yml"; }

#
# helper functions
#

getContainerId() { docker ps --all | grep "$dockerImageName" | cut -d" " -f1; }

ScriptRun "$@"