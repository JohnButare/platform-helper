#!/usr/bin/env bash
. app.sh || exit
. color.sh || exit

usage()
{
	init; ScriptUsage "$1" "\
usage: netbootxyz all|deploy|dir|docker|edit|info|setup|test|update|vars"
}

usageVerbose()
{
	ScriptUsageEcho "\
Locations:
- application: netboot.xyz Git repository  : $appDir ($(checkDir "$appDir"))
- configuration: custom configuration      : $confDir ($(checkDir "$confDir"))
- web app: netboot.xyz website             : $webDirApp ($(checkDir "$webDirApp"))
- web final: local website source          : $webDirFinal ($(checkDir "$webDirFinal"))

Sites:
- application
	- vanity: https://netboot.butare.net
	- direct: http://$(GetServer "netbootxyz"):3000
- bootloaders: https://boot.butare.net 
- assets
  - vanity: https://boot.butare.net/assets/
  - direct: https://$(GetServer apache-web):1443/netboot.xyz/assets/
- assets-custom
  - vanity: https://boot.butare.net/assets-custom/
  - direct: https://$(GetServer apache-web):1443/netboot.xyz/assets-custom/
Servers:
- web
  - servers: $(GetServers "apache-web" | NewlineToSpace)
  - directory: 'cd \$(apache dir cd)/netboot.xyz/assets'
- tftp
  - servers: $(Getervers "tftp" | NewlineToSpace)
  - configuration: /etc/default/tftpd-hpa
	- example: 'tftp $(GetServer tftp) -c get about.ipxe'	"
}

checkDir() {  [[ -d "$1" ]] && echo "present" || echo "${RED}missing${RESET}";  }

init() 
{ 
	# netboot.xyz application
	app="netbootxyz"
	dockerImageName="$app"

	# locations
	confDir="$HOME/$(ConfigGet confDir)/netboot.xyz" || return
	appDir="/opt/netboot.xyz"
	appConfig="$confDir/user_overrides.yml"
	downloadDir="$HOME/Downloads"
	menu="$confDir/menu/custom.ipxe.j2"
	webDirApp="/var/www/html/"
	webDirFinal="$(apache dir sync)/htdocs/netboot.xyz" || return
	winScriptDir="$confDir/web/custom/windows/scripts"

	# other
	winReleases=(canary dev beta rp)
}

#
# commands
#

allUsage() { echot "Usage: $(ScriptName) all\nUpdate and deploy netboot.xyz."; }
allCommand() { updateAppCommand && deployAllCommand; }
isInstalledCommand() { [[ -d "$appDir" ]]; }
varsCommand() { ScriptReturn appDir confDir webDirApp webDirFinal; }

#
# deploy commands
#

deployUsage() { echot "Usage: $(ScriptName) deploy [all|app|assets|installers|web](all)\nDeploy netboot.xyz assets, installers, and the web site."; }
deployCommand() { deployAllCommand; }
deployAllUsage() { echot "Usage: $(ScriptName) deploy all\nDeploy application, assets, and installers."; }
deployAllCommand() { local noPrompt="--no-prompt"; deployAppCommand && deployWebCommand && deployAssetsCommand && deployInstallersCommand; }

deployAppUsage() { echot "Usage: $(ScriptName) deploy app\nDeploy the netboot.xyz application by upgrading the menus."; }

deployAppCommand()
{
	HeaderBig "Deploying Application"

 	local versionLatest; versionLatest="$(versionLatest)" || return
 	log1 "versionLatest=$versionLatest"

	local host hosts; getHosts || return
	for host in "${hosts[@]}"; do
		local h="$(RemoveDnsSuffix "$host")" versionHost; versionHost="$(versionApp "$host")" || return		
		log1 "host=$host versionHost=$versionHost versionLatest=$versionLatest"
		[[ "$versionHost" == "$versionLatest" ]] && continue
		open "http://$host:3000" || return
		pause "Click Update Menus then press any key to continue..."
	done
}

deployAssetsUsage() { echot "Usage: $(ScriptName) deploy assets\nDeploy menus, assets, and custom assets."; }

deployAssetsCommand()
{
	header "Deploying Assets"

	hilight "Synchronizing Netboot.xyz menus..."
	UnisonHelper sync --host=rp1 --root "$ACONF/netbootxyz/config" "rp2" "${globalArgs[@]}"  -- -ignore "'Name {*.log}'" || return

	hilight "Synchronizing Netboot.xyz assets..."
	UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz/assets" "rp2" "${globalArgs[@]}" || return

	hilight "Synchronizing custom assets..."
	UnisonHelper sync "$winScriptDir" "rp1" "$ADATA/netbootxyz/assets-custom/windows/scripts" --root --no-props "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz/assets-custom" "rp2" "${globalArgs[@]}" || return
}

deployInstallersUsage() { echot "Usage: $(ScriptName) deploy installers\nDeploy installers "; }

deployInstallersCommand()
{
	header "Deploying Installers"

	UnisonHelper sync --host=rp1 --no-props "$ADATA/netbootxyz/installers" "rp2" "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --no-props "$ADATA/netbootxyz/installers" "ender" "${globalArgs[@]}" || return
}

deployWebUsage() { echot "Usage: $(ScriptName) deploy web\nCopy the netboot.xys web site from $(FileToDesc "$webDirApp") to $(FileToDesc "$webDirFinal"), then uploads the content to the Apache web servers."; }
deployWebArgStart() { unset hostArg hostOpt hosts; }
deployWebOpt() { ScriptOptHost "$@"; }

deployWebCommand()
{
	HeaderBig "Deploying Web"

	hilight "Copying files.."
	sudoc CopyDir --recursive --delete --rsync "$webDirApp" "$webDirFinal" "${globalArgs[@]}" || return

	hilight "Copying custom files..."
	sudo CopyDir --recursive --rsync --no-metadata "$confDir/web/netboot.xyz/" "$webDirFinal" "${globalArgs[@]}" || return
	[[ ! -L "$webDirFinal/assets" ]] && { sudoc ln -s "/srv/netbootxyz/assets" "$webDirFinal/assets" || return; }
	[[ ! -L "$webDirFinal/assets-custom" ]] && { sudoc ln -s "/srv/netbootxyz/assets-custom" "$webDirFinal/assets-custom" || return; }

	hilight "Copying custom menus..."
	sudo cp "$menu" "$webDirFinal/custom/custom.ipxe"  || return # assumes Jinja2 templates are not used (no {{ }})

	hilight "Syncronizing web sites..."	
	apache sync "${hostOpt[@]}" "${globalArgs[@]}"
}

#
# dir command
#

dirUsage()
{
	echot "Usage: $(ScriptName) dir [app|conf|web-app|web-final|win-install](web)
Return the path to a netboot.xyz directory.

- app: netboot.xyz application (the Git repository)
- conf: custom configuration
- web-app: netboot.xyz website
- web-final: local website source
- win-install: Windows installers"
}

dirCommand() { dirAppCommand; }
dirAppCommand() { echo "$appDir"; }
dirConfCommand() { echo "$confDir"; }
dirWeb-appCommand() { echo "$webDirApp"; }
dirWeb-finalCommand() { echo "$webDirFinal"; }
dirWin-installCommand() { getWinInstallDir; }

#
# docker commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker IsInstalled|IsRunning|shell|start|stop\nControl the '$dockerImageName' Docker image."; }
dockerCommand() { usage; }
dockerIsInstalledCommand() { ! InPath docker && return 1; docker dockerImageName list |& grep "$dockerImageName" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep --quiet "$dockerImageName"; }
dockerShellCommand() { docker exec -it "$dockerImageName" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# edit commands
#

editUsage() { echot "Usage: $(ScriptName) edit conf|menu|win\nEdit the netboot.xyz configuration or menus."; }
editCommand() { usage; }
editConfUsage() { echot "Usage: $(ScriptName) edit conf\nEdit the netboot.xyz configuration ($(FileToDesc "$appConfig"))."; }
editConfCommand() { TextEdit "$appConfig"; }
editMenuUsage() { echot "Usage: $(ScriptName) edit conf\nEdit the netboot.xyz configuration ($(FileToDesc "$menu"))."; }
editMenuCommand() { TextEdit "$menu"; }
editWinUsage() { echot "Usage: $(ScriptName) edit conf\nEdit the netboot.xyz configuration ($(FileToDesc "$menu"))."; }
editWinCommand() { TextEdit "$winScriptDir"; }

#
# info commands
#

infoUsage() { echot "Usage: $(ScriptName) info win\nShow information."; }
infoCommand() { usage; }

infoWinUsage() { echot "Usage: $(ScriptName) info win\Show Windows release information."; }

infoWinCommand()
{
	local release
	for release in "${winReleases[@]}"; do
		echo "$release: $(infoWinBuild "$release")"
	done
}

# infoWinBuild canary|dev|beta|rp
infoWinBuild()
{
	local name release="$1"
	case "${release,,}" in
		canary) name="canarychannellatest";;
		dev) name="DevLatest";;
		beta) name="BetaLatest";;
		rp) name="ReleasePreviewWindows11";;
		*) ScriptErr "'$1' is not a valid Windows release"; return 1;;
	esac
	
	local build; build="$(HttpHeader "https://aka.ms/$name" | ${G}grep "^Location:" | sed 's/^.*-build//' | cut -d"-" -f2)" || return
	! IsInteger "$build" && { ScriptErr "Windows '$release' release build '$build' is not numeric"; return 1; }
	echo "$build"
}

#
# setup command
#

setupUsage() { echot "Usage: $(ScriptName) setup [app|config|web](all)\nSetup the netboot.xyz build environment including the application and web source files."; }
setupCommand() { setupAll; }
setupAllCommand() { setupAll; }
setupAll() { setupWebCommand && setupConfigCommand && setupAppCommand && setupAppCommand; }

setupAppCommand()
{
	[[ ! $force && -d "$appDir" ]] && return	
	hilight "Setting up the netboot.xyz application ($appDir)..."

	# install packages
	package ansible git apache2 || return
	IsPlatform debian && { package python-is-python3 || return; }

	# install /opt/netboot.xyz application
	[[ -d "$appDir" ]] && { sudo rm -fr "$appDir" || return; }
	sudoc git clone "https://github.com/netbootxyz/netboot.xyz.git" "$appDir" || return
	sudo $(G)chown --recursive "$USER" "$appDir" || return
	! IsPlatform mac && { sudo chgrp -R "$USER" "$appDir" || return; }

	# create /var/www/html web site - it will be updated when the application is deployed
	sudoc CopyDir --recursive --delete "$webDirFinal/" "$webDirApp"  "${globalArgs[@]}" || return

	# update the application (checks out the latest tag)
	updateAppCommand || return
}

setupConfigCommand()
{
	(( $(${G}stat -c%b "$confDir/user_overrides.yml") > 0 )) && [[ ! $force ]] && return
	hilight "Setting up the configuration directory '$(FileToDesc "$confDir")'..."
	CloudGet "$confDir"
}

setupWebCommand()
{
	[[ -d "$webDirFinal" && ! $force ]] && return
	hilight "Setting up the web directory '$(FileToDesc "$webDirFinal")'..."
	apache sync "${globalArgs[@]}" && sudo mkdir --parents "$webDirFinal"
}

#
# test command
#

testUsage() { echot "Usage: $(ScriptName) test\nTest the netboot.xyz configuration."; }

testCommand()
{
	local result="0";
	! InPath tftp && { i --no-prompt --no-header TftpClient || return; }

	printf "menus: "; curl --silent "https://boot.butare.net" | grep -q "iPXE Bootloaders" && echo "OK" || testFail "FAIL"
	printf "UI: "; curl --silent "https://netboot.butare.net" | grep -q "Web Application for customizing netboot.xyz" && echo "OK" || testFail "FAIL"

 	# application
 	local versionCurrent; versionCurrent="$(versionCurrent)" || return
 	local versionLatest; versionLatest="$(versionLatest)" || return
 	printf "application source version: "; [[ "$versionCurrent" == "$versionLatest" ]] && echo "OK" || testFail "out of date (current v$versionCurrent, latest v$versionLatest)"

	local host hosts; getHosts || return
	for host in "${hosts[@]}"; do
		local h="$(RemoveDnsSuffix "$host")" versionHost; versionHost="$(versionApp "$host")" || return
		printf "application $h version: "; [[ "$versionHost" == "$versionLatest" ]] && echo "OK" || testFail "out of date ($h v$versionHost, latest v$versionLatest)"
	done

	# assets
	testWeb "assets-vanity" "http://boot.butare.net/assets/"
	testWeb "assets-custom-vanity" "http://boot.butare.net/assets-custom/"
	testWeb "assets-rp1" "http://rp1.butare.net:180/netboot.xyz/assets/"
	testWeb "assets-custom-rp1" "http://boot.butare.net/assets-custom/"
	testWeb "assets-rp2" "http://rp2.butare.net:180/netboot.xyz/assets/"
	testWeb "assets-custom-rp2" "http://rp2.butare.net:180/netboot.xyz/assets-custom/"

	# TFTP
	local check; IsPlatform mac,WSL && { check="ssh $(GetServer apache-web)" || return; } # WSL does not support UDP, ssh to a web server for the test, mac TFTP does not support -c
	local file="about.ipxe"
	local server servers="$(GetServers tftp)"

	for server in $servers; do
		local desc="$(RemoveDnsSuffix "$server")"
		printf "TFTP $desc: "
		printf "server..."; IsAvailable "$server" || { testFail "not available"; continue; }
		printf "port..."; IsAvailablePortUdp "$server" 69 || { testFail "not responding (port 69)"; continue; }
		printf "file..."; RunLog $check tftp $server -c get "$file" > /dev/null || testFail "not available ($file)"
		echo "OK"
		$check rm -f "$file" # cleanup
	done

	return $result
}

testFail() { (( ++result )); HilightErrEnd "$1"; }

# testWeb DESCRIPTION URL
testWeb()
{
	local description="$1" url="$2"
	local server="$(GetUriServer "$url")" port="$(GetUriPort "$url")"

	printf "$description: "

	# check server
	printf "server..."; IsAvailable "$server" || { testFail "not available ($(RemoveDnsSuffix "$server"))"; return; }
	
	# check port
	if [[ $port ]]; then
		printf "port..."; IsAvailablePort "$server" "$port" || { testFail "not responding ($(RemoveDnsSuffix "$server") port $port)"; return; }
	fi
	
	# check HTTP response
	printf "url..."; RunLog curl -sL "$url" | qgrep "Index of /" || { testFail "not available ($url)"; return; }

	echo "OK"
}

#
# update commands
#

updateUsage() { echot "Usage: $(ScriptName) update [all|app|win](all)"; }
updateCommand() { updateAllCommand; }
updateAllCommand() { updateAppCommand && updateWinCommand; }

#
# update app commands
#

updateAppUsage() { echot "Usage: $(ScriptName) update app [all|code|build](all)\nUpdate the netboot.xyz application to the latest version (tag)."; }
updateAppCommand() { updateAppAllCommand; }
updateAppAllCommand() { updateAppCodeCommand && updateAppBuildCommand; }

updateAppCodeUsage() { echot "Usage: $(ScriptName) update app code\nUpdate the netboot.xyz application code in $(FileToDesc "$appDir") to the latest tag in the repository."; }

# updateAppCodeCommand - 
updateAppCodeCommand()
{
	cd "$appDir" || return	
	git fetch || return

	# return if at the latest
	local latestTag; latestTag="$(versionLatest)" || return
	local currentTag; currentTag="$(versionCurrent)" || return
	log1 "updateAppCode: currentTag=$currentTag latestTag=$latestTag"
	[[ ! $force && "$currentTag" == "$latestTag" ]] && return

	# update
	hilight "Updating the netboot.xyz application to v${latestTag}..."
	git reset --hard  "$latestTag" || return
}

updateAppBuildUsage() { echot "Usage: $(ScriptName) update app build\nBuild the netboot.xyz application by running the Ansible playbook.  The build integrates new netboot.xyz code and menus to $(FileToDesc "$webDirApp")."; }
updateAppBuildCommand() { cp "$confDir/user_overrides.yml" "$appDir" && cd "$appDir" && sudoc ansible-playbook -i "inventory" "site.yml"; }

#
# update win commands
#

updateWinUsage()
{
	echot "\
Usage: $(ScriptName) app update win [all|build|download|select|sync](select)
Update Windows setup images.

	all 				download and build the current Windows builds 
	build				build any compressed UUP download files in $(FileToDesc "$downloadDir")
	download  	download current Windows UUP files to $(FileToDesc "$downloadDir")
	select 			select a specific Windows build
	sync				synchronize installation shares"
}

updateWinCommand() { updateWinSelectCommand; }

updateWinBuildUsage() { echot "Usage: $(ScriptName) update win build\Build any compressed UUP download files in $(FileToDesc "$downloadDir")."; }
updateWinBuildCommand() { uupBuild; }

updateWinDownloadUsage() { echot "Usage: $(ScriptName) update win download\Download current Windows UUP files to $(FileToDesc "$downloadDir")."; }
updateWinDownloadCommand() { uupDownload; }

updateWinSyncCommand() { wiggin sync public "${globalArgs[@]}"; }

updateWinAllUsage() { echot "Usage: $(ScriptName) update win all auto\Download and build the current Windows builds."; }

updateWinAllCommand()
{
	HeaderBig "Download UUP Files"
	uupDownload || return
	(( $(getUupFileCount) == 0 )) && return
	uupBuild || return
}

updateWinSelectUsage() { echot "Usage: $(ScriptName) update win select [auto]\Select a specific Windows build."; }

updateWinSelectCommand()
{
		echot "\
- Latest NNN build, x64
- Windows 11 Insider Preview NNN (ni_release)
- Next, Next, Create download package"
	open "https://uupdump.net/"; pause
	uupBuild || return
}

# uupBuild - build the UUP files in $downloadDir
uupBuild()
{
	cd "$downloadDir" || return

	# return if no UUP files
	(( $(getUupFileCount) == 0 )) && { echo "There are not any UUP build files in $(FileToDesc "$downloadDir")."; return 0; }

	# build UUP zip files
	local file; for file in *.*.zip; do
		HeaderBig "Building $file"
		uup build "$file" "${globalArgs[@]}" || return
	done

	echo "Updating batchfiles..."
	echo "@setup.bat $build" > "$winScriptDir/install/$build.bat" || return

	deployInstallersCommand || return
}

# uupDownload - download current UUP files to $downloadDir
uupDownload()
{
	hilight "Downloading current releases..."
	local setupDir; setupDir="$(getWinInstallDir)" || return
	infoWinCommand | tee "$setupDir/releases.txt" || return

	hilight "Downloading UUP build files..."
	local file; file="$(mktemp -t "UupBuilds.XXXXXXXXXX.json")" || return
	curl --silent "https://api.uupdump.net/listid.php" > "$file" || return
	log2 "downloaded UUP build JSON file to '$file'"

	# download the UUP files for each current windows build
	local release
	for release in "${winReleases[@]}"; do
		local build; build="$(infoWinBuild "$release")" || return
		local arch="amd64" # amd64|arm64
		local uuid; uuid="$(cat "$file" | jq '.response.builds | map(select(.build | contains("'$build'"))) | map(select(.arch == "amd64"))[0] | .uuid' | RemoveQuotes)"
		local uup="$downloadDir/${build}.${arch}.zip"
		log2 "release=$release build=$build uuid=$uuid uup='$uup'"

		# UUP zip file is already downloaded
		[[ -f "$uup" ]] && { log1 "the UUP build file for the current $release release is already in '$uup'"; continue; }

		# check if this release is already downloaded
		[[ ! $force && -d "$setupDir/$build" ]] && { [[ ! $quiet ]] && echo "The setup for the current $release release (build $build) exists in $(FileToDesc "$setupDir/$build")."; continue; }

		# download UUP zip file
		hilight "Downloading UUP file for Windows $release build $build $arch..."
		log1 "uuid=$uuid uup=$uup"

		while true; do
			curl --location -X POST "https://uupdump.net/get.php?id=${uuid}&pack=en-us&edition=core;professional" --data 'autodl=2&updates=1' --output "$uup" || return
			file "$uup" | qgrep "Zip" && break # rapid downloads are text files not zip files
			SleepStatus "Download failed, waiting for UUP site to stabilize..." 5
		done

	done

	# display status
	let uupFileCount; uupFileCount="$(getUupFileCount)" || return
	(( uupFileCount > 0 )) && { echo "$uupFileCount UUP build file(s) in $(FileToDesc "$(GetFilePath "$uup") need processing")."; }

	rm "$file"
}

#
# version command
#

versionUsage() { echot "Usage: $(ScriptName) version all|app|current|latest\nShow netboot.xyz versions."; }
versionCommand() { versionAllCommand; }

versionAllCommand()
{
	echo "source current: v$(versionCurrent)"
	echo "source latest: v$(versionLatest)"

	local host hosts; getHosts || return
	for host in "${hosts[@]}"; do
		echo "application $(RemoveDnsSuffix "$host"): v$(versionApp "$host")"
	done
}

versionAppUsage() { echot "Usage: $(ScriptName) version menus\nShow netboot.xyz application version."; }
versionAppCommand() { local host; host="$(GetServer "netbootxyz")" && versionApp "$host"; }

versionCurrentUsage() { echot "Usage: $(ScriptName) version current\nShow netboot.xyz application source current version."; }
versionCurrentCommand() { versionCurrent; }

versionLatestUsage() { echot "Usage: $(ScriptName) version latest\nShow netboot.xyz application source latest version."; }
versionLatestCommand() { versionLatest; }

versionCurrent() { ( appCd && git describe --tags; ); }
versionLatest() { ( appCd && git tag | sort -V | grep -v '\-RC' | tail -1; ); }
versionApp() { SshHelper connect "$1" -- cat "$ACONF/netbootxyz/config/menuversion.txt 2> /dev/null"; } # versionApp HOST

#
# helper functions
#

appCd() { AppInstallCheck && cd "$appDir"; }
getContainerId() { docker ps --all | grep "$dockerImageName" | cut -d" " -f1; }
getHosts() { GetHosts "netbootxyz"; }
getUupFileCount() { command ls -1 "$downloadDir/"*.*".zip" 2> /dev/null | wc -l; }
getWinInstallDir() { FindInstallFile "other/Microsoft/Windows/setup"; }

ScriptRun "$@"