#!/usr/bin/env bash
. app.sh || exit
. color.sh || exit

usage()
{
	init; ScriptUsage "$1" "\
usage: netbootxyz all|deploy|dir|docker|edit|info|setup|test|update"
}

usageVerbose()
{
	ScriptUsageEcho "\
Locations:
- application: netboot.xyz Git repository  : $appDir ($(checkDir "$appDir"))
- configuration: custom configuration      : $confDir ($(checkDir "$confDir"))
- web app: netboot.xyz website             : $webDirApp ($(checkDir "$webDirApp"))
- web final: local website source          : $webDirFinal ($(checkDir "$webDirFinal"))"
}

checkDir() {  [[ -d "$1" ]] && echo "present" || echo "${RED}missing${RESET}";  }

init() 
{ 
	app="netbootxyz"
	dockerImageName="$app"

	confDir="$HOME/$(ConfigGet confDir)/netboot.xyz" || return
	webDirFinal="$(apache dir sync)/htdocs/netboot.xyz" || return

	appDir="/opt/netboot.xyz"
	appConfig="$confDir/user_overrides.yml"
	webDirApp="/var/www/html/"

	winReleases=(canary dev beta rp)
}

#
# commands
#

allUsage() { echot "Usage: $(ScriptName) all\nUpdate and deploy netboot.xyz."; }
allCommand() { netbootxyz update "${globalArgs[@]}" && deployAllCommand; }
isInstalledCommand() { [[ -d "$appDir" ]]; }
versionCommand() { version; }

#
# deploy commands
#

deployUsage() { echot "Usage: $(ScriptName) deploy [all|assets|assets-custom|installers|web](all)\nDeploy netboot.xyz assets, installers, and the web site."; }
deployCommand() { deployAllCommand; }
deployAllCommand() { netbootxyz deploy web --no-prompt "${globalArgs[@]}" && netbootxyz deploy assets --no-prompt "${globalArgs[@]}" && netbootxyz deploy assets-custom --no-prompt "${globalArgs[@]}" && netbootxyz deploy installers --no-prompt "${globalArgs[@]}"; }

deployAssetsCommand()
{
	header "Deploying Assets"

	hilight "Synchronize asset menus..."
	UnisonHelper sync --host=rp1 --root "$ACONF/netbootxyz/config" "rp2" "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --root "$ACONF/netbootxyz/config" "ender" "${globalArgs[@]}" || return

	hilight "Synchronize assets..."
	UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz/assets" "rp2" "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz/assets" "ender" "${globalArgs[@]}" || return
}

deployAssets-customCommand()
{
	hilight "Updating custom asset scripts..."
	UnisonHelper sync "$confDir/web/custom/windows/scripts" "rp1" "$ADATA/netbootxyz/assets-custom/windows/scripts" --root --no-props "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz/assets-custom" "rp2" "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --root "$ADATA/netbootxyz/assets-custom" "ender" "${globalArgs[@]}" || return
}

deployInstallersCommand()
{
	header "Deploying Installers"

	UnisonHelper sync --host=rp1 --no-props "$ADATA/netbootxyz/installers" "rp2" "${globalArgs[@]}" || return
	UnisonHelper sync --host=rp1 --no-props "$ADATA/netbootxyz/installers" "ender" "${globalArgs[@]}" || return
}

deployWebArgStart() { unset hostArg hostOpt hosts; }
deployWebOpt() { ScriptOptHost "$@"; }

deployWebCommand()
{
	HeaderBig "Deploying Web"

	hilight "Copying files.."
	sudoc CopyDir --recursive --delete --rsync "$webDirApp" "$webDirFinal" "${globalArgs[@]}" || return

	hilight "Copying custom files..."
	sudo CopyDir --recursive --rsync --no-metadata "$confDir/web/netboot.xyz/" "$webDirFinal" "${globalArgs[@]}" || return
	[[ ! -L "$webDirFinal/assets" ]] && { sudoc ln -s "/srv/netbootxyz/assets" "$webDirFinal/assets" || return; }
	[[ ! -L "$webDirFinal/assets-custom" ]] && { sudoc ln -s "/srv/netbootxyz/assets-custom" "$webDirFinal/assets-custom" || return; }

	hilight "Copying custom menus..."
	sudo cp "$confDir/menu/custom.ipxe.j2" "$webDirFinal/custom/custom.ipxe"  || return # assumes Jinja2 templates are not used (no {{ }})

	hilight "Syncronizing web sites..."	
	apache sync "${hostOpt[@]}" "${globalArgs[@]}"
}

#
# dir command
#

dirUsage()
{
	echot "Usage: $(ScriptName) dir [app|conf|web-app|web-final|win-install](web)
Return the path to a netboot.xyz directory.

- app: netboot.xyz application (the Git repository)
- conf: custom configuration
- web-app: netboot.xyz website
- web-final: local website source
- win-install: Windows installers"
}

dirCommand() { dirAppCommand; }
dirAppCommand() { echo "$appDir"; }
dirConfCommand() { echo "$confDir"; }
dirWeb-appCommand() { echo "$webDirApp"; }
dirWeb-finalCommand() { echo "$webDirFinal"; }
dirWin-installCommand() { getWinInstallDir; }

#
# docker commands
#

dockerUsage() { echot "Usage: $(ScriptName) docker IsInstalled|IsRunning|shell|start|stop\nControl the '$dockerImageName' Docker image."; }
dockerCommand() { usage; }
dockerIsInstalledCommand() { ! InPath docker && return 1; docker dockerImageName list |& grep "$dockerImageName" >& /dev/null; }
dockerIsRunningCommand() { docker ps | grep --quiet "$dockerImageName"; }
dockerShellCommand() { docker exec -it "$dockerImageName" /bin/bash; } 
dockertStartCommand() { docker start "$(getContainerId)"; } 
dockerStopCommand() { docker stop "$(getContainerId)"; } 

#
# edit commands
#

editUsage() { echot "Usage: $(ScriptName) edit conf|menu\nEdit the netboot.xyz configuration or menus."; }
editCommand() { usage; }
editConfCommand() { TextEdit "$appConfig"; }
editMenuCommand() { TextEdit "$confDir/menu/custom.ipxe.j2"; }

#
# info commands
#

infoUsage() { echot "Usage: $(ScriptName) info win\Show information."; }
infoCommand() { usage; }

infoWinUsage() { echot "Usage: $(ScriptName) info win\Show Windows release information."; }

infoWinCommand()
{
	local release
	for release in "${winReleases[@]}"; do
		echo "$release: $(infoWinRelease "$release")"
	done
}

# infoWinRelease canary|dev|beta|rp
infoWinRelease()
{
	local name
	case "${1,,}" in
		canary) name="canarychannellatest";;
		dev) name="DevLatest";;
		beta) name="BetaLatest";;
		rp) name="ReleasePreviewWindows11";;
		*) ScriptErr "'$1' is not a valid Windows release"; return 1;;
	esac
	
	HttpHeader "https://aka.ms/$name" | ${G}grep "^Location:" | sed 's/^.*-build//' | cut -d"-" -f2
}

#
# setup command
#

setupUsage() { echot "Usage: $(ScriptName) setup [app|config|web](all)\nSetup the netboot.xyz build environment including the application and web source files."; }
setupCommand() { setupAll; }
setupAllCommand() { setupAll; }
setupAll() { setupWebCommand && setupConfigCommand && setupAppCommand; }

setupAppCommand()
{
	[[ -d "$appDir" && ! $force ]] && { setupAppLatest; return; }

	# packages
	RunLog package ansible git apache2 python-is-python3 || return

	# application
	[[ -d "$appDir" ]] && { RunLog sudo rm -fr "$appDir" || return; }
	RunLog sudo git clone "https://github.com/netbootxyz/netboot.xyz.git" "$appDir" || return
	RunLog sudo chown --recursive "$USER" "$appDir" || return
	! IsPlatform mac && { RunLog sudo chgrp -R "$USER" "$appDir" || return; }

	# web - use existing web site, it will be updated when the application is deployed
	local webDirAppParent="$(GetParentDir "$webDirApp")"
	RunLog sudoc CopyDir --recursive --delete "$webDirFinal" "$webDirAppParent"  "${globalArgs[@]}" || return
	[[ -d "$webDirApp" ]] && { RunLog sudo rm -fr "$webDirApp" || return; }
	RunLog sudo mv "$webDirAppParent/$(GetFileName "$webDirFinal")" "$webDirApp" || return

	# checkout the latest tag of the application
	setupAppLatest || return
}

setupAppLatest()
{
	hilight "Setting up application..."

	cd "$appDir" || return	
	git fetch || return

	local tag; tag="$(version)" || return
	
	hilight "v$tag..."
	git reset --hard  "$tag"
}

setupConfigCommand()
{
	(( $(stat -c%b "$confDir/user_overrides.yml") > 0 )) && [[ ! $force ]] && return
	hilight "Setting up configuration..."
	CloudGet "$confDir"
}

setupWebCommand()
{
	[[ -d "$webDirFinal" && ! $force ]] && return
	hilight "Setting up web directory..."
	apache sync "${globalArgs[@]}" && sudo mkdir --parents "$webDirFinal"
}

#
# test command
#

testUsage() { echot "Usage: $(ScriptName) test\nTest the netboot.xyz configuration."; }

testCommand()
{
	printf "menus: "; curl --silent "https://boot.butare.net" | grep -q "iPXE Bootloaders" && echo "OK" || HilightErr "FAIL"
	printf "UI: "; curl --silent "https://netboot.butare.net" | grep -q "Web Application for customizing netboot.xyz" && echo "OK" || HilightErr "FAIL"

	# ender
	testWeb "assets-vanity" "http://boot.butare.net/assets/"
	testWeb "assets-rp1" "http://rp1.butare.net:180/netboot.xyz/assets/"
	testWeb "assets-rp2" "http://rp2.butare.net:180/netboot.xyz/assets/"

	# TFTP
	local check; IsPlatform WSL && { check="ssh $(GetServer apache-web)"; } # WSL does not support UDP, ssh to a web server for the test
	local file="about.ipxe"
	local server servers="$(GetServers tftp)"

	for server in $servers; do
		local desc="$(RemoveDnsSuffix "$server")"
		printf "TFTP $desc: "
		IsAvailable "$server" && printf "available..." || { HilightErr "$desc not available"; continue; }
		IsAvailablePortUdp "$server" 69 && printf "port available..." || { HilightErr "$desc port 69 not responding"; continue; }
		$check tftp $server -c get "$file" > /dev/null && echo "file available" || HilightErr "$file not available on $desc"
		$check rm -f "$file" # cleanup
	done

	return 0
}

# testWeb DESCRIPTION URL
testWeb()
{
	local description="$1" url="$2"
	local server="$(GetUriServer "$url")" port="$(GetUriPort "$url")"

	printf "$description: "

	# check server
	IsAvailable "$server" && printf "available..." || { HilightErr "$server not available"; return; }
	
	# check port
	if [[ $port ]]; then
		if IsAvailablePort "$server" "$port"; then
			printf "port available..."
		else
			HilightErr "$server port $port not responding"; return
		fi
	fi
	
	# check HTTP response
	curl -sL "$url" | grep -q "Index of /" && echo "url available" || HilightErr "$url not available"
}

#
# update commands
#

updateUsage() { echot "Usage: $(ScriptName) app update [all|ansible|win](all)"; }
updateCommand() { updateAllCommand; }

updateAnsibleUsage() { echot "Usage: $(ScriptName) app update ansible\nUpdate the netboot.xyz application by running the Ansible playbook."; }
updateAnsibleCommand() { setupAll && cp "$confDir/user_overrides.yml" "$appDir" && cd "$appDir" && sudoc ansible-playbook -i "inventory" "site.yml"; }

updateWinUsage() { echot "Usage: $(ScriptName) app update win [auto|build|download|prompt](prompt)\nUpdate Windows setup programs."; }
updateWinCommand() { updateWinPromptCommand; }

updateWinBuildUsage() { echot "Usage: $(ScriptName) app update win build\Build any compressed UUP download files in ~/Download."; }
updateWinBuildCommand() { uupBuild; }

updateWinDownloadUsage() { echot "Usage: $(ScriptName) app update win download\Download current Windows UUP files to ~/Download."; }
updateWinDownloadCommand() { uupDownload; }

updateWinAutoUsage() { echot "Usage: $(ScriptName) app update win auto\Download current Windows builds automatically."; }

updateWinAutoCommand()
{
	HeaderBig "Download UUP Files"
	uupDownload || return
	(( $(getUupFileCount) == 0 )) && return
	uupBuild || return
}


updateWinPromptUsage() { echot "Usage: $(ScriptName) app update win [auto]\Prompt to download UUP files to update Windows."; }

updateWinPromptCommand()
{
		echot "\
- Latest NNN build, x64
- Windows 11 Insider Preview NNN (ni_release)
- Next, Next, Create download package"
	open "https://uupdump.net/"; pause
	uupBuild || return
}

# uupBuild - build the UUP files in ~/Download
uupBuild()
{
	cd "$HOME/Downloads" || return

	# return if no UUP files
	(( $(getUupFileCount) == 0 )) && { echo "No UUP files have been downloaded to ~/Downloads."; return 0; }

	# build UUP zip files
	local file; for file in *.*.zip; do
		HeaderBig "Building $file"
		uup build "$file" "${globalArgs[@]}" || return
	done

	echo "Updating batchfiles..."
	echo "@setup.bat $build" > "$confDir/web/custom/windows/scripts/install/$build.bat" || return

	netbootxyz deploy installers || return
}

# uupDownload - download current UUP files to ~/Download
uupDownload()
{
	hilight "Downloading current releases..."
	local setupDir; setupDir="$(getWinInstallDir)" || return
	infoWinCommand | tee "$setupDir/releases.txt" || return

	hilight "Download UUP builds..."
	local file; file="$(mktemp -t "UupBuilds.XXXXXXXXXX.json")" || return
	curl --silent "https://api.uupdump.net/listid.php" > "$file" || return

	# download the UUP files for each current windows build
	local release
	for release in "${winReleases[@]}"; do
		local build; build="$(infoWinRelease "$release")" || return
		local arch="amd64" # amd64|arm64
		local uuid; uuid="$(cat "$file" | jq '.response.builds | map(select(.build | contains("'$build'"))) | map(select(.arch == "amd64"))[0] | .uuid' | RemoveQuotes)"
		local uup="$HOME/Downloads/${build}.${arch}.zip"

		# UUP zip file is already downloaded
		[[ -f "$uup" ]] && continue

		# check if this release is already downloaded
		[[ ! $force && -d "$setupDir/$build" ]] && continue

		# download UUP zip file
		hilight "Downloading UUP file for Windows $release build $build $arch..."
		log1 "uuid=$uuid uup=$uup"

		while true; do
			curl --location -X POST "https://uupdump.net/get.php?id=${uuid}&pack=en-us&edition=core;professional" --data 'autodl=2&updates=1' --output "$uup" || return
			file "$uup" | qgrep "Zip" && break # rapid downloads are text files not zip files
			SleepStatus "Download failed, waiting for UUP site to stabilize..." 5
		done

	done

	# display status
	(( $(getUupFileCount) == 0 )) && { echo "All current Windows releases have been downloaded."; }

	rm "$file"
}


#
# helper functions
#

getContainerId() { docker ps --all | grep "$dockerImageName" | cut -d" " -f1; }
getUupFileCount() { command ls -1 "$HOME/Downloads"*.*".zip" 2> /dev/null | wc -l; }
getWinInstallDir() { FindInstallFile "other/Microsoft/Windows/setup"; }

version()
{
	AppInstallCheck || return
	cd "$appDir" || return
	git tag | sort -V | grep -v '\-RC' | tail -1
}

ScriptRun "$@"