#!/usr/bin/env bash
#-x (debug) -v (verbose)
. function.sh || exit

init() { :; }

usage()
{
	echot "\
usage: password change|JumpCloud|linux|smb|store|win
	CheckStore - check the passwords in the credential store and set them if needed
	FullName - set the current users full name

	-p, 	--passwd PASSWORD							the password for the user
	-sp, 	--ssh-passphrase PASSWORD			the SSH passphrase for the user
	-u, 	--user USER										the user to change
	-s, 	--save												save the password in the credential store"
	exit $1
}

args()
{
	unset command help oldPassword password save sshPassphrase user

	while (( $# != 0 )); do
		case "$1" in
			--help|-h) usage 0;;
			--old-password|-o) oldPassword="$2"; shift;;
			--password|-p) password="$2"; shift;;
			--save|-s) save="true";;
			--ssh-passphrase|-sp) sshPassphrase="$2"; shift;;
			--user|-u) user="$2"; shift;;
			CheckStore) command="checkStore";; FullName) command="fullName";; JumpCloud) command="jumpCloud";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(FullName|CheckStore|store) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	[[ ! $command ]] && { MissingOperand "command"; }
	user="${user:-$USER}"

	args=("$@")
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }

getPassword()
{
	local prompt="${1:-Enter the new password for $user: }"
	[[ ! $password ]] && { read -s -p "$prompt" password; echo; }
	[[ ! $password ]] && { EchoErr "password: no password specified"; return 1; }
	
	if [[ $save ]] && credential check; then
		local name="secure"; [[ "$USER" != "$user" ]] && name="$user"
		credential set "$name" "$password" || return
	fi
	
	return 0
}

getOldPassword()
{
	local prompt="${1:-Enter the old password for $user: }"
	[[ ! $oldPassword ]] && { read -s -p "$prompt" oldPassword; echo; }
	[[ ! $oldPassword ]] && { EchoErr "password: old password not specified"; return 1; }
	return 0
}

#
# Password Change
#

changeCommand() { getPassword && macCommand && winCommand && linuxCommand && smbCommand && storeCommand; }
jumpCloudCommand() { start "https://console.jumpcloud.com/userconsole#/security"; }

fullNameCommand()
{
	! IsPlatform win && return

	local fullName="${1}"
	
	[[ ! $fullname ]] && { read -p "Enter $USER fullName: " fullName; echo; }
	net.exe user $USER /fullname:"$fullName"
}

linuxCommand()
{
	! InPath chpasswd && return
	getPassword || return
	echo "$user:$password" | sudo chpasswd || return
}

macCommand()
{
	! IsPlatform mac && return
	sudo /usr/bin/dscl . -passwd "/Users/$user" "$password" || return
	getOldPassword || return
	sudo security set-keychain-password -o "$oldPassword" -p "$password" "/Users/$user/Library/Keychains/login.keychain"
}

smbCommand()
{
	! InPath smbpasswd && return
	getPassword || return
	printf "$password\n$password" | sudo smbpasswd -a $user || return
}

winCommand()
{
	! IsPlatform win && return
	getPassword || return
	elevate RunScript --pause-error start pspasswd.exe "$user" "$password"
}

#
# Credential Store
#

checkStoreCommand()
{
	{ ! credential -q check || [[ "$USER" != "$user" ]]; } && return
	credential get ssh default >& /dev/null && credential get secure default >& /dev/null
}

storeCommand()
{
	! credential -q check && { EchoErr "password store: a credential manager is not available"; return 1; }
	[[ "$USER" != "$user" ]] && { EchoErr "password store: cannot update the credential manager for another user"; return 1; }

	getPassword "Enter your password: " || return
	credential set secure default "$password" || return

	[[ ! $sshPassphrase ]] && { read -s -p "Enter your ssh passphase: " sshPassphrase; echo; }
	credential set ssh default "$sshPassphrase" || return
}

run "$@"
