#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
usage: password check|change|generate|gui
Password management commands.

	-p, 	--password PASSWORD						the password for the user
	-sp, 	--ssh-passphrase PASSWORD			the SSH passphrase for the user
	-u, 	--user USER										the user to change"
	exit $1
}

argStart() { unset -v oldPassword password sshPassphrase user; }

opt()
{
	case "$1" in
		-o|--old-password|-o=*|--old-password=*) ScriptOptGet "oldPassword" "$@";;
		-p|--password|-p=*|--password=*)
				ScriptOptGet "password" "$@" || return
				[[ "${password,,}" != "vault" ]] && return
				password="$(cred get secure default --manager="vault")"
				;;
		-sp|--ssh-passphrase|-sp=*|--ssh-password=*) ScriptOptGet "sshPassphrase";;
		-u|--user|-u=*|--user=*) ScriptOptGet "user" "$@";;
		*) return 1;;
	esac
}

argEnd()
{
	user="${user:-$USER}"
	credArgs=(--manager=${CREDENTIAL_MANAGER:-local} "${globalArgs[@]}")
}
 
#
# commands
#

generateCommand() { pwgen 30 1 --secure; }
guiCommand() { RunPlatform gui; }
guiWin() { cmd.exe /c start ms-settings:signinoptions >& /dev/null; }

#
# change commands
#

changeUsage() { echot "Usage: $(ScriptName) change all gk JumpCloud linux mac servers smb store vault win\nChange a password."; }
changeCommand() { usage; }

changeAllUsage() { echot "Usage: $(ScriptName) change all\nChange all passwords on this system (i.e. credential store, SMB, OS)."; }

# all - update all passwords
changeAllCommand()
{
	getPassword || return

	# - store and smb passwords - change first, ensure success before system passwords are changed
	{ force="--force" changeStoreSecure &&	smbCommand; } || return

	# system passwords
	{ linuxCommand && macCommand && winCommand; } || return

	# GNOME Keyring - change last, requires manual changes
	gkCommand || return
}

changeGkCommand()
{
	! credential manager is available --manager=GnomeKeyring && return

	# return if we can unlock the credential store
	credential manager lock --manager=gk --quiet || return
	credential manager unlock --manager=gk --quiet && return

	echo "Unlock using the old user password to change it..."
	seahorse || return

	# test again
	credential manager lock --manager=gk --quiet || return
	credential manager unlock --manager=gk 

	hilight "GNOME Keyring password set"
}

changeJumpCloudCommand() { start "https://console.jumpcloud.com/userconsole#/security"; }

changeLinuxCommand()
{
	! InPath chpasswd && return
	! IsPlatform win && JumpCloud IsInstalled && return # password managed by JumpCloud

	getPassword || return
	sudov || return
	echo "$user:$password" | sudo chpasswd || return

	hilight "Linux password set"
}

changeMacCommand()
{
	! IsPlatform mac && return
	JumpCloud IsInstalled && return # password managed by JumpCloud
	
	getPassword || return
	sudoc /usr/bin/dscl . -passwd "/Users/$user" "$password" || return
	getOldPassword || return
	sudo security set-keychain-password -o "$oldPassword" -p "$password" "/Users/$user/Library/Keychains/login.keychain"

	hilight "Mac password set"
}

changeServersCommand()
{
	echo "TODO"
}

changeSmbCommand()
{
	! InPath smbpasswd && return
	! UserExists "$user" && { ScriptErr "user '$user' does not exist"; return 1; }

	getPassword || return
	printf "$password\n$password" | sudoc smbpasswd -a $user || return
	
	hilight "SMB password set"
}

changeStoreCommand()
{
	echo "TODO"
}

changeStoreUsage() { echot "Usage: $(ScriptName) change store [all|secure|ssh](all)\nChange user passwords in the credential store if needed."; }
changeStoreCommand() { changeStoreAllCommand; }
changeStoreAllCommand() { changeStoreSecure && changeStoreSsh; }
changeStoreSecureCommand() { changeStoreSecure; }
changeStoreSshCommand() { changeStoreSsh; }

changeStoreCheck() { [[ "$USER" == "$user" ]] && return; ScriptErr "cannot update credential manager passwords for another user"; return 1; }

changeStoreSecure()
{	
	changeStoreCheck || return
	[[ ! $force ]] && credCheck && return

	getPassword "Enter your password" || return	
	cred set secure default "$password" "${globalArgs[@]}" || return
	IsPlatform wsl2 && { cred set secure default "$password" "${globalArgs[@]}" --manager="GnomeKeyring" || return; }

	hilight "Credential store secure default password set"
}

changeStoreSsh()
{
	changeStoreCheck || return
	[[ ! $force ]] && credCheck && return

	[[ ! $sshPassphrase ]] && { read -s -p "Enter your ssh passphase: " sshPassphrase; echo; }
	cred set ssh default "$sshPassphrase" "${globalArgs[@]}" || return
	IsPlatform wsl2 && { cred set ssh default "$sshPassphrase" "${globalArgs[@]}" --manager="GnomeKeyring" || return; }	

	hilight "Credential store SSH default passphrase set"
}

changeVaultCommand()
{
	getPassword || return
	cred set secure default --manager=vault "$password"

	hilight "Vault password set"
}

changeWinCommand()
{
	! IsPlatform win && return
	UserExistsWin "$user" || { ScriptErr "Windows user '$user' does not exist"; return 1; }
	JumpCloud IsInstalled && return # password managed by JumpCloud
	
	getPassword || return
	elevate RunScript --pause-error start pspasswd.exe "$user" "$password" || return

	hilight "Windows password set"
}

#
# check commands
#

checkUsage() { echot "Usage: $(ScriptName) check store\nChange passwords."; }
checkCommand() { usage; }

checkStoreUsage() { echot "Usage: $(ScriptName) check store\nCheck if the user passwords exist in the credential store."; }

checkStoreCommand()
{
	checkStore && { EchoQuiet "credential store is configured properly"; return 0; }
	ScriptErrQuiet "credential store is not configured properly"
}

checkStore() { credCheck; }

#
# full name command
#

fullnameUsage() { echot "Usage: $(ScriptName) FullName\nSet the current users full name."; }

fullnameCommand()
{
	! IsPlatform win && return

	local fullName="${1}"
	
	[[ ! $fullname ]] && { read -p "Enter $USER fullName: " fullName; echo; }
	net.exe user $USER /fullname:"$fullName"
}

#
# helper
#

cred() { credential "${credArgs[@]}" "$@"; }
credInit() { CredentialConf "${credArgs[@]}" --unlock; }
credCheck() { credInit && cred test all && { cred get ssh default && cred get secure default; } >& /dev/null; }

getPassword()
{
	local prompt="${1:-Enter the new password for $user}"
	[[ ! $password ]] && { password="$(ask password "$prompt")" || return; }
	[[ ! $password ]] && { ScriptErr "no password specified"; return 1; }

	return 0
}

getOldPassword()
{
	local prompt="${1:-Enter the old password for $user: }"
	[[ ! $oldPassword ]] && { read -s -p "$prompt" oldPassword; echo; }
	[[ ! $oldPassword ]] && { EchoErr "password: old password not specified"; return 1; }
	return 0
}

ScriptRun "$@"
