#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
usage: password check|change|generate|gui
Password management commands.

	-op, 	--old-password PASSWORD				the old password for the user
	-p, 	--password PASSWORD						the password for the user
	-sp, 	--ssh-passphrase PASSWORD			the SSH passphrase for the user
	-u, 	--user USER										the user to change
	-v, 	--vault												get passwords from Vault"
	exit $1
}

argStart() { unset -v passwordOld password sshPassphrase user; }

opt()
{
	case "$1" in
		-o|--old-password|-o=*|--old-password=*) ScriptOptGet "passwordOld" "$@";;
		-p|--password|-p=*|--password=*) ScriptOptGet "password" "$@";;
		-sp|--ssh-passphrase|-sp=*|--ssh-password=*) ScriptOptGet "sshPassphrase";;
		-u|--user|-u=*|--user=*) ScriptOptGet "user" "$@";;
		-v|--vault) getPasswordVault || exit 1; password="$passwordVault" passwordOld="$passwordOldVault";;
		*) return 1;;
	esac
}

argEnd()
{
	user="${user:-$USER}"
	credArgs=(--manager=${CREDENTIAL_MANAGER:-local} "${globalArgs[@]}")
}
 
#
# commands
#

generateCommand() { pwgen 30 1 --secure; }
guiCommand() { RunPlatform gui; }
guiWin() { cmd.exe /c start ms-settings:signinoptions >& /dev/null; }

#
# change commands
#

changeUsage() { echot "Usage: $(ScriptName) change all gk JumpCloud linux mac servers smb store vault win\nChange a password."; }
changeCommand() { usage; }

changeAllUsage() { echot "Usage: $(ScriptName) change all\nChange all passwords on this system (i.e. credential store, SMB, OS)."; }

# all - update all passwords
changeAllCommand()
{
	getPassword || return

	# - store and smb passwords - change first, ensure success before system passwords are changed
	{ force="--force" changeStoreSecure && changeSmbCommand; } || return

	# system passwords
	{ changeLinuxCommand && changeMacCommand && changeWinCommand; } || return

	# GNOME Keyring - change last, requires manual changes
	changeGkCommand || return
}

changeGkCommand()
{
	! gkAvailable && return

	# return if we can unlock the credential store
	credential manager lock --manager=gk --quiet || return
	credential manager unlock --manager=gk --quiet && return

	hilight "Changing GNOME Keyring password..."

	echo "Unlock using the old user password to change it..."
	seahorse || return

	# test again
	credential manager lock --manager=gk --quiet || return
	credential manager unlock --manager=gk 
}

changeJumpCloudCommand() { start "https://console.jumpcloud.com/userconsole#/security"; }

changeLinuxCommand()
{
	! InPath chpasswd && return
	! IsPlatform win && JumpCloud IsInstalled && return # password managed by JumpCloud

	hilight "Changing Linux password..."
	getPassword || return
	sudov || return
	echo "$user:$password" | sudo chpasswd || return
}

changeMacCommand()
{
	! IsPlatform mac && return
	JumpCloud IsInstalled && return # password managed by JumpCloud

	hilight "Changing Mac password..."
	getPassword || return
	getpasswordOld || return
	sudov || return
	sudo /usr/bin/dscl . -passwd "/Users/$user" "$passwordOld" "$password" || return
	sudo security set-keychain-password -o "$passwordOld" -p "$password" "/Users/$user/Library/Keychains/login.keychain"
}

changeServersCommand()
{
	echo "TODO"
	
}

changeSmbCommand()
{
	! InPath smbpasswd && return
	! UserExists "$user" && { ScriptErr "user '$user' does not exist"; return 1; }

	hilight "Changing SMB password..."
	getPassword || return
	printf "$password\n$password" | sudoc smbpasswd -a $user || return
}

changeStoreUsage() { echot "Usage: $(ScriptName) change store [all|secure|ssh](all)\nChange user passwords in the credential store if needed."; }
changeStoreCommand() { changeStoreAllCommand; }
changeStoreAllCommand() { changeStoreSecure && changeStoreSsh; }
changeStoreSecureCommand() { changeStoreSecure; }
changeStoreSshCommand() { changeStoreSsh; }

changeStoreCheck() { [[ "$USER" == "$user" ]] && return; ScriptErr "cannot update credential manager passwords for another user"; return 1; }

changeStoreSecure()
{	
	changeStoreCheck || return
	[[ ! $force ]] && credCheck && return

	hilight "Changing credential store secure default password..."
	getPassword "Enter your password" || return	
	cred set secure default "$password" || return
	IsPlatform wsl2 && { cred set secure default "$password" --manager="GnomeKeyring" || return; }
	return 0
}

changeStoreSsh()
{
	changeStoreCheck || return
	[[ ! $force ]] && credCheck && return

	hilight "Changing credential store SSH default passphrase..."
	[[ ! $sshPassphrase ]] && { read -s -p "Enter your ssh passphase: " sshPassphrase; echo; }
	cred set ssh default "$sshPassphrase" "${globalArgs[@]}" || return
	IsPlatform wsl2 && { cred set ssh default "$sshPassphrase" "${globalArgs[@]}" --manager="GnomeKeyring" || return; }	
	return 0
}

changeVaultUsage() { echot "Usage: $(ScriptName) change vault\nChange user password in the Vault credential."; }

changeVaultCommand()
{
	! InPath vault && return

	hilight "Changing user password in Vault..."
	getPassword || return; getPasswordVault
	[[ "$password" == "$passwordVault" ]] && { EchoQuiet "Vault password was not changed"; return; }
	cred set secure default --manager=vault "$password" || return
	cred set secure default-old --manager=vault "$passwordVault" || return
}

changeWinCommand()
{
	! IsPlatform win && return
	UserExistsWin "$user" || { ScriptErr "Windows user '$user' does not exist"; return 1; }
	JumpCloud IsInstalled && return # password managed by JumpCloud
	
	hilight "Changing Windows password..."
	getPassword || return
	elevate RunScript --pause-error start pspasswd.exe "$user" "$password" || return
	SleepStatus "Waiting to enter password on the lock screen ..." 4 || return
	LockScreen || return
}

#
# check commands
#

checkUsage() { echot "Usage: $(ScriptName) check all|gk|store\nCheck passwords."; }
checkCommand() { usage; }
checkAllCommand() { checkGkCommand && checkStoreAllCommand; }

checkGkUsage() { echot "Usage: $(ScriptName) check gk\nCheck if the GNOME Keyring is ok."; }
checkGkCommand() { gkAvailable && credential manager lock --manager=gk --quiet && credential manager unlock --manager=gk --quiet; }

checkStoreUsage() { echot "Usage: $(ScriptName) check store [all|hashi|other|user](user)\nCheck if credentials exist in the credential store."; }
checkStoreCommand() { checkStoreUserCommand; }

checkStoreAllUsage() { echot "Usage: $(ScriptName) check store all\nCheck if the all credentials exist in the credential store."; }
checkStoreAllCommand() { checkStoreUserCommand && checkStoreHashiCommand; }

checkStoreHashiUsage() { echot "Usage: $(ScriptName) check store hashi\nCheck if the Hashi credentials exist in the credential store."; }
checkStoreHashiCommand() { cred exists "hashi/$(GetDnsBaseDomain)/vault" token --manager=local; checkStoreMessage "Hashi" "$?"; }

checkStoreUserUsage() { echot "Usage: $(ScriptName) check store user\nCheck if the user credentials exist in the credential store."; }
checkStoreUserCommand() { credCheck; checkStoreMessage "user" "$?"; }

checkStoreOtherUsage() { echot "Usage: $(ScriptName) check store hashi\nCheck if the Hashi credentials exist in the credential store."; }

checkStoreOtherCommand()
{
	! IsInDomain butare && return
	cred exists 1Password token --manager=local && { ! IsPlatform wsl2 || cred exists 1Password token --manager="GnomeKeyring"; }
	checkStoreMessage "other" "$?"
}

checkStoreMessage()
{
	local desc="$1" result="$2"
	(( $2 == 0 )) && { EchoQuiet "credential store contains '$desc' credentials"; return; }
	ScriptErrQuiet "credential store does not contain '$desc' credentials"
}

#
# fix commands
#

fixUsage() { echot "Usage: $(ScriptName) fix all|gk|store\nFix passwords."; }
fixCommand() { usage; }
fixAllCommand() { fixGkCommand && fixStoreAllCommand; }

fixGkUsage() { echot "Usage: $(ScriptName) fix gk\nFix the GNOME Keyring credential store."; }
fixGkCommand() { [[ ! $force ]] && checkGkCommand && return; credential manager rebuild gk --force; }

fixStoreUsage() { echot "Usage: $(ScriptName) fix store all|hashi|other\nFix credentials in the credential store."; }
fixStoreCommand() { usage; }

fixStoreAllUsage() { echot "Usage: $(ScriptName) fix store all\nFix all credentials in the credential store."; }
fixStoreAllCommand() { checkStoreHashiCommand && checkStoreOtherCommand; } # must check Hashi first to sync other passwords from Vault

fixStoreHashiUsage() { echot "Usage: $(ScriptName) check store hashi\nCheck if the Hashi credentials exist in the credential store."; }
fixStoreHashiCommand() { [[ ! $force ]] && checkStoreHashiCommand && return; hashi config set local "${globalArgs[@]}"; }

fixStoreOtherUsage() { echot "Usage: $(ScriptName) check store other\nCheck if other credentials exist in the credential store."; }
fixStoreOtherCommand() { ! IsInDomain butare && return; [[ ! $force ]] && checkStoreOtherCommand && return; wiggin sync credential -m1=local -m2=remote "${globalArgsLessForce[@]}"; }

#
# full name command
#

fullnameUsage() { echot "Usage: $(ScriptName) FullName\nSet the current users full name."; }

fullnameCommand()
{
	! IsPlatform win && return

	local fullName="${1}"
	
	[[ ! $fullname ]] && { read -p "Enter $USER fullName: " fullName; echo; }
	net.exe user $USER /fullname:"$fullName"
}

#
# helper
#

cred() { credential "${credArgs[@]}" "$@"; }
credInit() { CredentialConf "${credArgs[@]}" --unlock; }
credCheck() { credInit && cred test all && { cred get ssh default && cred get secure default; } >& /dev/null; }
gkAvailable() { credential manager is available --manager=GnomeKeyring; }

getPassword()
{
	local prompt="${1:-Enter the new password for $user}"
	[[ ! $password ]] && { password="$(ask password "$prompt")" || return; }
	[[ ! $password ]] && { ScriptErr "no password specified"; return 1; }

	return 0
}

getPasswordVault()
{
	local result="0"
	unset -v 
	passwordVault="$(cred get secure default --manager="vault")" || result="$?"
	passwordOldVault="$(cred get secure default-old --manager="vault")" || result="$?"
	return "$result"
}

getpasswordOld()
{
	local prompt="${1:-Enter the old password for $user: }"
	[[ ! $passwordOld ]] && { read -s -p "$prompt" passwordOld; echo; }
	[[ ! $passwordOld ]] && { EchoErr "password: old password not specified"; return 1; }
	return 0
}

ScriptRun "$@"
