#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
usage: password change|gui|JumpCloud|linux|smb|store|win
Password management commands.

	-p, 	--password PASSWORD						the password for the user
	-sp, 	--ssh-passphrase PASSWORD			the SSH passphrase for the user
	-u, 	--user USER										the user to change
	-s, 	--save												save the password in the credential store"
	exit $1
}

argStart() { unset -v oldPassword password save sshPassphrase user; }

opt()
{
	case "$1" in
		-o|--old-password|-o=*|--old-password=*) ScriptOptGet "oldPassword" "$@";;
		-p|--password|-p=*|--password=*) ScriptOptGet "password" "$@";;
		-s|--save) save="true";;
		-sp|--ssh-passphrase|-sp=*|--ssh-password=*) ScriptOptGet "sshPassphrase";;
		-u|--user|-u=*|--user=*) ScriptOptGet "user" "$@";;
		*) return 1;;
	esac
}

argEnd()
{
	user="${user:-$USER}"
	credArgs=(--manager=${CREDENTIAL_MANAGER:-local} "${globalArgs[@]}")
}
 
#
# commands
#

guiCommand() { RunPlatform gui; }
guiWin() { cmd.exe /c start ms-settings:signinoptions >& /dev/null; }

#
# password change commands
#

changeCommand() { getPassword && macCommand && winCommand && linuxCommand && smbCommand && storeCommand; }
jumpCloudCommand() { start "https://console.jumpcloud.com/userconsole#/security"; }

linuxCommand()
{
	! InPath chpasswd && return
	getPassword || return
	sudov || return
	echo "$user:$password" | sudo chpasswd || return
}

macCommand()
{
	! IsPlatform mac && return
	sudo /usr/bin/dscl . -passwd "/Users/$user" "$password" || return
	getOldPassword || return
	sudo security set-keychain-password -o "$oldPassword" -p "$password" "/Users/$user/Library/Keychains/login.keychain"
}

smbCommand()
{
	! InPath smbpasswd && return
	getPassword || return
	printf "$password\n$password" | sudo smbpasswd -a $user || return
}

winCommand()
{
	! IsPlatform win && return
	getPassword || return
	elevate RunScript --pause-error start pspasswd.exe "$user" "$password"
}

#
# Credential Store Commands
#

storeUsage() { echot "Usage: $(ScriptName) store [check|set](check)\nCheck or set the user passwords in the local credential manager."; }
storeCommand() { storeCheckCommand; }

storeCheckUsage() { echot "Usage: $(ScriptName) store check\nCheck for user passwords in the credential store."; }
storeCheckCommand() { credCheck; }

storeSetUsage() { echot "Usage: $(ScriptName) store set\nCheck for user passwords in the credential store and set them if needed."; }

storeSetCommand()
{
	[[ "$USER" != "$user" ]] && { ScriptErr "cannot update credential manager passwords for another user"; return 1; }

	[[ ! $force ]] && credCheck && return

	getPassword "Enter your password: " || return
	cred set secure default "$password" "${globalArgs[@]}" || return

	[[ ! $sshPassphrase ]] && { read -s -p "Enter your ssh passphase: " sshPassphrase; echo; }
	cred set ssh default "$sshPassphrase" "${globalArgs[@]}" || return
}

#
# full name command
#

fullnameUsage() { echot "Usage: $(ScriptName) FullName\nSet the current users full name."; }

fullnameCommand()
{
	! IsPlatform win && return

	local fullName="${1}"
	
	[[ ! $fullname ]] && { read -p "Enter $USER fullName: " fullName; echo; }
	net.exe user $USER /fullname:"$fullName"
}

#
# helper
#

cred() { credential "${credArgs[@]}" "$@"; }
credInit() { CredentialConf "${credArgs[@]}" --unlock ; }
credCheck() { credInit && cred test all && { cred get ssh default && cred get secure default; } >& /dev/null; }

getPassword()
{
	local prompt="${1:-Enter the new password for $user: }"
	[[ ! $password ]] && { password="$(ask password "$prompt")" || return; }
	[[ ! $password ]] && { ScriptErr "no password specified"; return 1; }
	
	if [[ $save ]]; then
		local name="secure"; [[ "$USER" != "$user" ]] && name="$user"
		cred set "$name" "$password" || return
	fi
	
	return 0
}

getOldPassword()
{
	local prompt="${1:-Enter the old password for $user: }"
	[[ ! $oldPassword ]] && { read -s -p "$prompt" oldPassword; echo; }
	[[ ! $oldPassword ]] && { EchoErr "password: old password not specified"; return 1; }
	return 0
}

ScriptRun "$@"
