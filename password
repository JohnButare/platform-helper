#!/usr/bin/env bash
#-x (debug) -v (verbose)
. function.sh || exit

init()
{ 
	ldapServer="nas1"
	user="$USER"
}

usage()
{
	echot "usage: password all|change|ldap|store [USER](current) [PASSWORD] [SSH_PASSWORD]"
	exit $1
}

args()
{
	unset command help

	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(all|change|ldap|store) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=("$@")
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }

getPassword()
{
	[[ ! $prompt ]] && prompt="Enter new password for $user: "

	case $# in
		0) read -s -p "$prompt" password; echo;;
		1) password=$1; shift;;
		2) user="$1"; password="$2"; shift 2;;
		3) user="$1"; password="$2" sshPassword="$3"; shift 3;;
		*) usage 1
	esac

	unset prompt 

	[[ "$#" != "0" ]] && usage 1

	return 0
}

allCommand()
{
	getPassword "$@" || return
	changeCommand "$user" "$password" || return
	storeCommand "$user" "$password" "$sshPassword" || return
}

changeCommand()
{
	getPassword "$@" || return
	changeWin || return
	changeLinux || return
}

changeLinux()
{
	! IsPlatform linux && return

	echo "Changing the Linux password for $user..."
	echo "$user:$password" | sudo chpasswd || return

	if [[ -f /usr/bin/smbpasswd ]]; then
		echo "Changing the SMB password for $user..."
		printf "$password\n$password" | sudo smbpasswd -a $user || return
	fi
}

changeWin()
{
	! IsPlatform win && return

	if IsInDomain; then
		echo "Changing the Windows $USERDOMAIN domain password for $user..."
		echo "ctrl-alt-del / ctrl-win-del (VMware) / ctrl-alt-end (Remote Desktop), Change Password"
		pause
		return
	fi

	echo "Changing the Windows local password for $user..."
	elevate run --pause-error start pspasswd.exe "$user" "$password"
}

ldapCommand()
{
	! HostUtil available $ldapServer && { EchoErr "The LDAP server $ldapServer is not available"; return 1; }

	prompt="Enter current $ldapServer LDAP password for $USER: "
	getPassword "$@" || return

	local ldapUser="$USER" ldapPassword="$(credential get secure default)" ssh="ssh"

	echo "Changing LDAP password for $user on $server..."

	if [[ ! $ldapPassword ]]; then
		EchoErr "Could not find the LDAP password for $ldapUser on $server"
		return 1
	fi
	
	[[ "$HOSTNAME" == "$host" ]] && ssh=""

	$ssh $ldapServer ldappasswd -x -D "uid=$ldapUser,cn=users,dc=butare,dc=net" -w "$password" -s "$ldapPassword" "uid=$user,cn=users,dc=butare,dc=net" || return
}

storeCommand()
{
	getPassword "$@" && [[ "$USER" == "$user" ]] && credential -q check || return

	echo "Changing secure default password for $user in the credential store..."
	credential set secure default "$password" || return

	echo "Changing the SSH key password for $user in the credential store..."
	[[ ! $sshPassword ]] && { read -s -p "ssh password: " sshPassword; echo; }
	credential set ssh default "$sshPassword" || return
}

run "$@"
