#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
usage: password generate|gui|JumpCloud
Password management commands.

	change: all store smb linux mac win gk vault

	-p, 	--password PASSWORD						the password for the user
	-sp, 	--ssh-passphrase PASSWORD			the SSH passphrase for the user
	-u, 	--user USER										the user to change"
	exit $1
}

argStart() { unset -v oldPassword password sshPassphrase user; }

opt()
{
	case "$1" in
		-o|--old-password|-o=*|--old-password=*) ScriptOptGet "oldPassword" "$@";;
		-p|--password|-p=*|--password=*) ScriptOptGet "password" "$@";;
		-sp|--ssh-passphrase|-sp=*|--ssh-password=*) ScriptOptGet "sshPassphrase";;
		-u|--user|-u=*|--user=*) ScriptOptGet "user" "$@";;
		*) return 1;;
	esac
}

argEnd()
{
	user="${user:-$USER}"
	credArgs=(--manager=${CREDENTIAL_MANAGER:-local} "${globalArgs[@]}")
}
 
#
# commands
#

generateCommand() { pwgen 30 1 --secure; }
guiCommand() { RunPlatform gui; }
guiWin() { cmd.exe /c start ms-settings:signinoptions >& /dev/null; }

#
# password change commands
#

jumpCloudCommand() { start "https://console.jumpcloud.com/userconsole#/security"; }

vaultCommand()
{
	getPassword || return
	cred set secure default --manager=vault "$password"

	hilight "Vault password set"
}

# all - update all passwords
# - store and smb first - ensure success before system passwords are changed
# - gk last - does not always prompt display credential prompt
allCommand() { getPassword && storeCommand && smbCommand && linuxCommand && macCommand && winCommand && gkCommand; } # gk last can be problematic

linuxCommand()
{
	! InPath chpasswd && return
	! IsPlatform win && JumpCloud IsInstalled && return # password managed by JumpCloud

	getPassword || return
	sudov || return
	echo "$user:$password" | sudo chpasswd || return

	hilight "Linux password set"
}

gkCommand()
{
	# return if we can unlock the credential store
	credential manager lock --manager=gk --quiet || return
	credential manager unlock --manager=gk --quiet && return

	echo "Unlock using the old user password to change it..."
	seahorse || return

	# test again
	credential manager lock --manager=gk --quiet || return
	credential manager unlock --manager=gk 

	hilight "GNOME Keyring password set"
}

macCommand()
{
	! IsPlatform mac && return
	JumpCloud IsInstalled && return # password managed by JumpCloud
	
	getPassword || return
	sudoc /usr/bin/dscl . -passwd "/Users/$user" "$password" || return
	getOldPassword || return
	sudo security set-keychain-password -o "$oldPassword" -p "$password" "/Users/$user/Library/Keychains/login.keychain"

	hilight "Mac password set"
}

smbCommand()
{
	! InPath smbpasswd && return
	! UserExists "$user" && { ScriptErr "user '$user' does not exist"; return 1; }

	getPassword || return
	printf "$password\n$password" | sudoc smbpasswd -a $user || return
	
	hilight "SMB password set"
}

winCommand()
{
	! IsPlatform win && return
	UserExistsWin "$user" || { ScriptErr "Windows user '$user' does not exist"; return 1; }
	JumpCloud IsInstalled && return # password managed by JumpCloud
	
	getPassword || return
	elevate RunScript --pause-error start pspasswd.exe "$user" "$password"

	hilight "Windows password set"
}

#
# Credential Store Commands
#

storeUsage() { echot "Usage: $(ScriptName) store [check|set](check)\nCheck or set the user passwords in the local credential manager."; }
storeCommand() { storeCheckCommand; }

storeCheckUsage() { echot "Usage: $(ScriptName) store check\nCheck for user passwords in the credential store."; }

storeCheckCommand()
{
	credCheck && { EchoQuiet "credential store is configured properly"; return 0; }
	ScriptErrQuiet "credential store is not configured properly"
}

storeSetUsage() { echot "Usage: $(ScriptName) store set\nCheck for user passwords in the credential store and set them if needed."; }

storeSetCommand()
{
	[[ "$USER" != "$user" ]] && { ScriptErr "cannot update credential manager passwords for another user"; return 1; }

	[[ ! $force ]] && credCheck && return

	getPassword "Enter your password" || return

	# secure default
	cred set secure default "$password" "${globalArgs[@]}" || return
	IsPlatform wsl2 && { cred set secure default "$password" "${globalArgs[@]}" --manager="GnomeKeyring" || return; }	

	# SSH default
	[[ ! $sshPassphrase ]] && { read -s -p "Enter your ssh passphase: " sshPassphrase; echo; }
	cred set ssh default "$sshPassphrase" "${globalArgs[@]}" || return
	IsPlatform wsl2 && { cred set ssh default "$sshPassphrase" "${globalArgs[@]}" --manager="GnomeKeyring" || return; }	

	hilight "Credential store passwords set"
}

#
# full name command
#

fullnameUsage() { echot "Usage: $(ScriptName) FullName\nSet the current users full name."; }

fullnameCommand()
{
	! IsPlatform win && return

	local fullName="${1}"
	
	[[ ! $fullname ]] && { read -p "Enter $USER fullName: " fullName; echo; }
	net.exe user $USER /fullname:"$fullName"
}

#
# helper
#

cred() { credential "${credArgs[@]}" "$@"; }
credInit() { CredentialConf "${credArgs[@]}" --unlock; }
credCheck() { credInit && cred test all && { cred get ssh default && cred get secure default; } >& /dev/null; }

getPassword()
{
	local prompt="${1:-Enter the new password for $user: }"
	[[ ! $password ]] && { password="$(ask password "$prompt")" || return; }
	[[ ! $password ]] && { ScriptErr "no password specified"; return 1; }

	return 0
}

getOldPassword()
{
	local prompt="${1:-Enter the old password for $user: }"
	[[ ! $oldPassword ]] && { read -s -p "$prompt" oldPassword; echo; }
	[[ ! $oldPassword ]] && { EchoErr "password: old password not specified"; return 1; }
	return 0
}

ScriptRun "$@"
