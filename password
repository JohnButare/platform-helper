#!/usr/bin/env bash
#-x (debug) -v (verbose)
. function.sh || exit

usage()
{
	echot "\
usage: password
	change [USER](current) [PASSWORD]"
	exit $1
}

args()
{
	unset command help

	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(change) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=("$@")
}

init() { :; }
run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }

changeCommand()
{
	local passowrd ldapServer="nas1"

	# arguments
	case $# in
		0) user="$USER";;
		1) password=$1;;
		2) user="$1"; password="$2";;
		*) usage 1
	esac
	
	IsPlatform win && { ChangeWindows || return; }
	! IsPlatform raspbian && [[ "$USER" == "$user" ]] && { ChangeCredentialStore || return; }
	ask 'Change $PLATFORM_LIKE password' && { ChangeLinux || return; }
	HostUtil available $ldapServer && ask 'Change LDAP password on $ldapServer' && { ChangeLdap $ldapServer "$user" "$password" || return; }
}

ChangeLinux()
{
	echo "Changing $PLATFORM_LIKE password for $user..."
	passwd "$user" || return
}

ChangeWindows()
{
	if IsInDomain; then
		echo "ctrl-alt-del / ctrl-win-del (VMware) / ctrl-alt-end (Remote Desktop), Change Password"
		pause
		return
	fi

	echo "Changing local Windows password for $user..."
	elevate RunStart pspasswd.exe "$user" "$password"
}

ChangeLdap()
{
	[[ $# != 3 ]]	&& usage 1
	local server="$1" user="$2" password="$3" ldapUser="$USER" ldapPassword="$(credential get secure default)" ssh="ssh"

	echo "Changing LDAP password for $user on $server..."

	if [[ ! $ldapPassword ]]; then
		EchoErr "Could not find the LDAP password for $ldapUser on $server"
		return 1
	fi
	
	[[ "$HOSTNAME" == "$host" ]] && ssh=""

	$ssh $server ldappasswd -x -D "uid=$ldapUser,cn=users,dc=butare,dc=net" -w "$ldapPassword" -s "$password" "uid=$user,cn=users,dc=butare,dc=net" || return
}

ChangeCredentialStore()
{
	echo "Changing secure default password for $user in the credential store..."
	credential set secure default "$password" || return

	echo "Changing the SSH key password for $user in the credential store..."
	read -s -p "ssh password: " sshPassword; echo
	credential set ssh default "$sshPassword" || return
}

run "$@"
