#!/usr/bin/env bash
#-x (debug) -v (verbose)
. function.sh || exit

init()
{ 
	user="$USER"
}

usage()
{
	echot "\
usage: password change|JumpCloud|linux|store|win [USER](current) [PASSWORD] [SSH_PASSWORD]
	CheckStore - check the passwords in the credential store and set them if needed"
	exit $1
}

args()
{
	unset command help

	while (( $# != 0 )); do
		case "$1" in
			--help) help="--help";;
			CheckStore) command="checkStore";; JumpCloud) command="jumpCloud";;
			*)
				[[ ! $command ]] && { CheckCommand "$1"; shift; continue; }
				[[ "$command" == @(all|change|win|linux|store) ]] && break
				UnknownOption "$1"
		esac
		shift
	done

	[[ $help ]] && { IsFunction "${command}Usage" && ${command}Usage || usage 0; }
	[[ ! $command ]] && { MissingOperand "command"; }
	args=("$@")
}

run() {	args "$@"; init || return; ${command}Command "${args[@]}"; }

getPassword()
{
	[[ ! $prompt ]] && prompt="Enter new password for $user: "

	case $# in
		0) read -s -p "$prompt" password; echo;;
		1) password=$1; shift;;
		2) user="$1"; password="$2"; shift 2;;
		3) user="$1"; password="$2" sshPassword="$3"; shift 3;;
		*) usage 1
	esac

	unset prompt 

	[[ "$#" != "0" ]] && usage 1

	return 0
}

#
# Password Change
#

changeCommand()
{
	getPassword "$@" || return
	winCommand "$user" "$password" || return
	linuxCommand "$user" "$password" || return
	storeCommand "$user" "$password" "$sshPassword" || return
	
	return 0
}

jumpCloudCommand() { start "https://console.jumpcloud.com/userconsole#/security"; }

linuxCommand()
{
	( ! InPath chpasswd && ! InPath smbpasswd ) && return

	getPassword "$@" || return

	if InPath chpasswd; then
		echo "Changing the Linux password for $user..."
		echo "$user:$password" | sudo chpasswd || return
	fi

	if InPath smbpasswd; then
		echo "Changing the SMB password for $user..."
		printf "$password\n$password" | sudo smbpasswd -a $user || return
	fi

	return 0
}

winCommand()
{
	getPassword "$@" || return

	! IsPlatform win && return

	if IsInDomain; then
		echo "Changing the Windows $USERDOMAIN domain password for $user..."
		echo "ctrl-alt-del / ctrl-win-del (VMware) / ctrl-alt-end (Remote Desktop), Change Password"
		pause
		return
	fi

	echo "Changing the Windows local password for $user..."
	elevate RunScript --pause-error start pspasswd.exe "$user" "$password"
}

#
# Credential Store
#

checkStoreCommand()
{
	[[ $(credential get ssh default) ]] && [[ $(credential get secure default) ]] && return

	echo "Setting $USER credentials in the credential store..."
	storeCommand
}

storeCommand()
{
	getPassword "$@" || return
	[[ "$USER" != "$user" ]] && return 0 # cannot update the credential store for a different user
	credential -q check || return 0 # return without error if there is not a credential management program installed

	echo "Changing secure default password for $user in the credential store..."
	credential set secure default "$password" || return

	echo "Changing the SSH key password for $user in the credential store..."
	[[ ! $sshPassword ]] && { read -s -p "ssh password: " sshPassword; echo; }
	credential set ssh default "$sshPassword" || return
}

run "$@"
