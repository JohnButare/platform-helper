#!/usr/bin/env bash
# bootstrap-init [USER](jjbutare) [HOST] - bootstrap a local system

run()
{
	init "$@" || return
	configureProxyServer || return
	setupPackageManager || return
	setTimezone || return
	installPackages || return
	createUser || return
	runAsUser || return
	mountPublic || return
	runBootstrap || return
}

runBootstrap()
{
	echo "Bootstraping from $host..."
	export PATH=$bin:$PATH
	$bash bootstrap "$host" "$install"
}

configureProxyServer()
{
	[[ ! $proxy || ! -d /etc/apt/apt.conf.d || -f "/etc/apt/apt.conf.d/proxy" ]] && return

	echo "Setting proxy server to $proxy..."
	printf 'Acquire::http::Proxy "%s";\nAcquire::https::Proxy "%s";\n' "$proxy" "$proxy" | $sudo tee "/etc/apt/apt.conf.d/proxy"
}

createUser()
{
	isMac || [[ ! $user ]] || grep "$user" /etc/passwd >& /dev/null && return

	echo "Creating user $user..."
	sudo adduser "$user" --gecos "" || return
	sudo usermod -aG sudo $user || return
}

runAsUser()
{
	[[ $user && "$USER" == "$user" ]] && return
	
	local script="${BASH_SOURCE[0]}"

	echo "Running $script as $user..."
	cd /tmp || return
	sudo chmod ugo+rwx "$script" || return
	sudo --preserve-env --user=$user --set-home "$script" # preserve entire environment so wslpath works properly
	exit
}

setTimezone()
{
	# macOS bash 3.2 - cannot use |& to redirect standard error, must use 2>&1
	( isMac || [[ ! $timezone ]] || cat "/etc/timezone" 2>&1 | grep "$timezone" > /dev/null ) && return

	sudo DEBIAN_FRONTEND=noninteractive apt install -y tzdata || return
	[[ ! -f "/usr/share/zoneinfo/$timezone" ]] && return
	sudo ln -snf "/usr/share/zoneinfo/$timezone" "/etc/localtime" || return
	echo "$timezone" | sudo tee "/etc/timezone" || return
	sudo dpkg-reconfigure -f noninteractive tzdata || return
}

#
# Helper Functions
#

isMac() { [[ "$PLATFORM" == "mac" ]]; }
isWin() { [[ "$PLATFORM" == "win" ]]; }
inPath () { which "$1" &> /dev/null; }
pause() { local response; read -n 1 -s -p "${*-Press any key when ready...}"; echo; }

#
# Mount
#

mountPublic() 
{ 
	[[ -d "$bin" ]] && return

	isWin && isMountedDrive && { mountWinDrive "$host" || return; }

	echo "Mounting //$host/public..."
	mkdir -p "$mount" || return
	mountPublic-$PLATFORM || return
}

mountPublic-debian()
{
	local line="//$host/public $HOME/Volumes/public cifs username=$USER,noauto,rw,users 0 0"
	! grep "$line" /etc/fstab >& /dev/null && { echo "$line" | sudo tee -a //etc/fstab || return; }
	echo mount.cifs "//$host/public" "$HOME/Volumes/public" -o user=$USER sec=ntlmsspi || return
}

mountPublic-mac() { mount_smbfs -s "smb://$USER@$host/public" "$mount" || return; }
mountPublic-win() { sudo mount -t drvfs "//$host/public" "$HOME/Volumes/public"; }

mountWinDrive() # dir - mounted directory for the drive, must start with /mnt, i.e. /mnt/d
{ 
	local dir="$1" drive="${dir/\/mnt\//}"
	[[ ! -d "$dir" ]] && { sudo mkdir "$dir" || return 1; }
	mount 2>&1 | grep "$drive: on $dir type drvfs" &> /dev/null && return 0;
	sudo mount -t drvfs "$drive:" "$dir" &> /dev/null
}

#
# Packages
#

installPackages()
{
	which rsync >& /dev/null && return

	installPackages-$PLATFORM || return
	installPackages-common || return
}

installPackages-common() { package dialog expect findutils gawk rsync; }

installPackages-debian()
{	
	package ubuntu-standard cifs-utils iputils-ping net-tools openssh-server resolvconf xclip

	# credential management - except for Raspberry Pi which is typically headless
	if [[ "$ID" != "raspbian" ]]; then
		sudo apt-get install -y gnome-keyring libsecret-tools || return
	fi

	return 0
}

installPackages-mac() 
{
	package bash coreutils dialog gnu-sed;

	grep '/usr/local/bin/bash' /etc/shells >& /dev/null && return
	echo -n "/usr/local/bin/bash" | pbcopy || return
	sudo nano /etc/shells || return
	chpass -s "/usr/local/bin/bash" || return 
}

installPackages-win() 
{ 
	package ubuntu-standard iputils-ping ubuntu-wsl || return
	inPath apt && { apt update || return; } # fix "Could not find command-not-found database" in WSL
}

package()
{
	case $PLATFORM in
		debian|win) sudo apt install -y "$@";;
		mac) brew install "$@";;
	esac
}

setupPackageManager() { setupPackageManager-$PLATFORM; }

setupPackageManager-mac()
{
	which brew >& /dev/null && return
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
}

setupPackageManager-win() { setupPackageManager-debian; }

setupPackageManager-debian()
{
	local motd="/etc/update-motd.d/60-unminimize"

	[[ ! -f "$motd" ]] && return

	unminimizeDebianDoc || return

	if  [ "$(dpkg-divert --truename /usr/bin/man)" = "/usr/bin/man.REAL" ]; then
		rm -f "/usr/bin/man" || return
		dpkg-divert --quiet --remove --rename "/usr/bin/man" || return
	fi

	apt update && apt dist-upgrade -y && apt install sudo && rm -f "$motd"
}

unminimizeDebianDoc() # from /usr/local/sbin/unminimize
{
	local config="/etc/dpkg/dpkg.cfg.d/excludes" configTmp="/etc/dpkg/dpkg.cfg.d/excludes.dpkg-tmp" motd="/etc/update-motd.d/60-unminimize"

	[[ ! -f "$config" && ! -f "$configTmp" && ! -f "$motd" ]] && return
	[[ -f "$config" ]] && { $sudo mv "$config" "$configTmp" || return; }

  $sudo apt-get update || return
  $sudo apt-get upgrade -y || return
  dpkg -S /usr/share/man/ |sed 's|, |\n|g;s|: [^:]*$||' | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return
  dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return
  dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/locale/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return

  if $sudo dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {exit 1}'; then
  	$sudo rm -f "$configTmp" "$motd" || return
  fi

  return 0
}

#
# other
#

isMountedDrive() { [[ -d "$host/public" ]] || [[ "$host" =~ ^/mnt ]]; }

init()
{
	. "${BASH_SOURCE[0]%/*}/bootstrap-config.sh" || return

	# PLATFORM=debian|mac|win
	PLATFORM=debian
	[[ "$(uname)" == "Darwin" ]] && PLATFORM=mac
	[[ $(uname -r)  =~ [Mm]icrosoft ]] && PLATFORM=win

	# ID=ubuntu|raspian
	[[ -f /etc/os-release ]] && eval $(cat /etc/os-release)

	# variables
	bash=""; isMac && bash="/usr/local/bin/bash"
	mount="$HOME/Volumes/public"; isMountedDrive && mount="$host/public"
	bin="$mount/documents/data/bin"
	install="$mount/Documents/data/install"
	sudo="sudo"; ! inPath sudo && sudo=""

	return 0
}

run "$@"
