#!/usr/bin/env bash
# bootstrap-init [CONFIG_FILE] [--restart|-r] [BIN_UNC] - bootstrap a local system with no dependencies
# - bootstrap-remote -> bootstrap-init -> bootstrap -> inst
# - mac - |& does not work on fresh install, use 2>&1 |

shopt -s extglob expand_aliases
shopt -u nocaseglob nocasematch

run()
{
	init "$@" || return	
	configureNetwork || return
	configureProxyServer || return
	setupPackageManager || return
	installPackages || return
	configureOs || return
	createUser || return
	createUserHome || return	
	runAsUser || return
	binSetup || return
	runBootstrap || return
}

# binSetup - setup the bin directory
binSetup()
{
	# initialize
	local data="/usr/local/data" udata="$HOME/data" 
	local binDir="$data/bin"
	
	# setup
	if isBinLocal; then binLocal || return
	else binNetwork || return
	fi

 	# configure
 	hilight "Using bin directory '$binDir'..."
	export PATH="$binDir:$PATH"
	log1 "PATH=$PATH"
}

isBinLocal() { [[ -f "$bootstrapDir/SyncBin.zip" || -f "$bootstrapDir/SyncPlatform.zip" || -f "$bootstrapDir/SyncSetup.zip" || -f "$bootstrapDir/SyncUserBin.zip" || -f "$bootstrapDir/SyncUserProfile.zip" || -f "$bootstrapDir/SyncUserSsh.zip" ]]; }
binLocal() { binDir && platformDir && setupDir && userBinDir && userProfileDir && userSshDir; }

# binDir - get bin directory from compressed files in a directory
binDir()
{
	# check
	[[ -d "$data/bin" || ! -f "$bootstrapDir/SyncBin.zip" ]] && return
	hilight "Restoring bin directory..."

	# directory
	sudo mkdir --parents "$data" || return
	sudo chown --recursive "$user" "$data" || return

	# restore
	unzip "$bootstrapDir/SyncBin.zip" -d "$data/bin" && chmod +x "$data/bin"/* && chmod -x "$data/bin/"*.sh
}

# platformDir - get platform directory from compressed files in a directory
platformDir()
{
	[[ -d "$data/platform" || ! -f "$bootstrapDir/SyncPlatform.zip" ]] && return
	hilight "Restoring platform directory..."
	unzip "$bootstrapDir/SyncPlatform.zip" -d "$data/platform"
}

# setupDir - get setup directory from compressed files in a directory
setupDir()
{
	[[ -d "$data/setup" || ! -f "$bootstrapDir/SyncSetup.zip" ]] && return
	hilight "Restoring setup directory..."
	unzip "$bootstrapDir/SyncSetup.zip" -d "$data/setup"
}

# userBinDir - get user bin directory from compressed files in a directory
userBinDir()
{
	[[ -d "$udata/bin" || ! -f "$bootstrapDir/SyncUserBin.zip" ]] && return
	hilight "Restoring user bin directory..."
	mkdir --parents "$udata" || return
	unzip "$bootstrapDir/SyncUserBin.zip" -d "$udata/bin"
}

# userProfileDir - get user profile directory from compressed files in a directory
userProfileDir()
{
	[[ -d "$udata/profile/default" || ! -f "$bootstrapDir/SyncUserProfile.zip" ]] && return
	hilight "Restoring user default profile directory..."
	mkdir --parents "$udata/profile/default" || return
	unzip "$bootstrapDir/SyncUserProfile.zip" -d "$udata/profile/default"
}

# userSshDir - get user SSH directory from compressed files in a directory
userSshDir()
{
	[[ -d "$HOME/.ssh" || ! -f "$bootstrapDir/SyncUserSsh.zip" ]] && return
	hilight "Restoring user SSH directory..."
	mkdir --parents "$HOME/.ssh" || return
	unzip "$bootstrapDir/SyncUserSsh.zip" -d "$HOME/.ssh"
}

# binNetwork - mount bin directory from network
binNetwork()
{
	# check
	[[ -d "$binDir" ]] && return
	[[ ! $binUnc ]] && { echoErr "no bin UNC specified"; return 1; }; 
	
	# mount	
	mountUnc "$binUnc" || return
	binDir="$mountDir/$dirs"
}

configureNetwork() { RunFunction configureNetwork-$platform; }

configureNetwork-win()
{
	# remove resolv.conf if name resolution fails
	[[ -f "/etc/resolv.conf" ]] && ! dnsTestWin && sudo rm "/etc/resolv.conf"

	# remove resolve.conf link
	[[ -L "/etc/resolv.conf" ]] && { sudo rm "/etc/resolv.conf" || return; }

	# return if resolv.conf is present
	[[ -f "/etc/resolv.conf" ]] && return

	# configure
	cat <<-EOF | sudo tee -a "/etc/resolv.conf" || return
		nameserver $(configGet "${domain}Dns1")
		nameserver $(configGet "${domain}Dns2")
		search $(configGet "${domain}DnsSearch")
		EOF

	# test
	! dnsTestWin && { echoErr "unable to configure a DNS server"; return 1; }

	return 0
}

dnsTestWin() { nslookup -retry=1 -timeout=1 "www.ubuntu.com" > /dev/null; }

configureProxyServer()
{
	local proxy="$(configGet "${domain}ProxyServer")"; [[ ! $proxy ]] && return

	# return if the proxy server is not available
	if ! isAvailable "$(echo "$proxy" | cut -d":" -f1)"; then
		hilight "Skipping proxy server configuration ($proxy is not available)..."
		return
	fi

	# header
	proxy="http://$proxy"
	hilight "Setting the proxy server to $proxy..."

	# set proxy variables
	export {HTTP_PROXY,HTTPS_PROXY,http_proxy,https_proxy}="$proxy"
	export {NO_PROXY,no_proxy}="$(configGet "${domain}NoProxy")"

	return 0
}

# createUser - create the user as administrator
createUser()
{
	[[ ! $user ]] && return

	# check if user exists
	if isMac; then dscl . -list "/Users" | grep --quiet "^${user}$" && return
	else grep "^$user:" "/etc/passwd" >& /dev/null && return
	fi

	# create user
	hilight "Creating user $user..."
	if isMac; then
		sudo dscl . create "/Users/$user" IsHidden 0 && sudo dscl . create "/Groups/admin" GroupMembership "$user"
	else
		sudo adduser "$user" --gecos "" && sudo usermod -aG sudo $user
	fi
}

# createUserHome - create user home directory, not applicable on mac
createUserHome()
{
	isMac || [[ ! $user ]] && return

	local dir="$(grep "$user" /etc/passwd | cut -d: -f 6)"
	[[ -d "$dir" ]] && return

	hilight "Creating user $user home directory..."
	sudo mkhomedir_helper $user || return
}

rebootCheck() { [[ ! -f /var/run/reboot-required ]] && return; rebootDo; }

rebootDo()
{
	hilight "Rebooting..."
	isWin && { sync; exit 2; }
	$sudo reboot now; sleep 1; exit
}

runBootstrap()
{
	local args=()
	local host="$(GetUncServer "$binUnc")" || return
	[[ $host ]] && args+=(--host "$host")
	[[ $installUnc ]] && args+=(--install "$installUnc")

	hilight "Running bootstrap..."
	log1 "bootstrap ${args[@]} ${globalArgs[@]}"
	echo; bootstrap "${args[@]}" "${globalArgs[@]}" || return
}

# runAsUser - run bootstrap-init as the target user
runAsUser()
{
	[[ $user && "$USER" == "$user" ]] && return

	[[ $restart ]] && { hilight "Restarting to run as '$user'..."; exit 1; }
	
	# new user may not have access to the current directory so change out of it an dnd copy core files 
	cd "$updateDir" || return

	local file files=(bootstrap-init bootstrap-config.sh) src="${BASH_SOURCE[0]}"
	for file in "${files[@]}"; do
		[[ ! -f "$file" ]] && { cp "$src/$file" "$updateDir" || return; }
	done
	
	# run bootstrap-init as the new user, preserving the entire environment so wslpath works properly and WSL_ environment variables are passed
	hilight "Running 'bootstrap-init' as '$user'..."	
	sudo --preserve-env --user=$user --set-home "$updateDir/bootstrap-init" "${globalArgs[@]}"
	exit
}

#
# Configure OS
#

configureOs() 
{
	! updateNeeded "os" && return

	hilight "Configuring the operating system..."
	RunFunction configure-$platform || return
	updateDone "os" || return
}

configure-entware()
{
	sudo chmod u+s "/usr/bin/mount.cifs" || return	# allow mount.cifs without sudo

	# mute mount.cifs "sh: /bin/systemd-ask-password: No such file or directory" error
	local file="/bin/systemd-ask-password"
	sudo touch "$file" || return
	sudo chmod +x "$file" || return
}

configure-win()
{
	inPath apt && { $sudo apt update || return; } # fix "Could not find command-not-found database" in WSL
	return
}

#
# Initialize
#

init()
{
	unset -v binUnc uncUser server share dirs
	initColor || return
	header "bootstrap-init ($USER)"

	# variables
	export functionConfigFileCache="${BASH_SOURCE[0]%/*}/bootstrap-config.sh"
	export updateDir="/tmp/bootstrap"; [[ ! -d "$updateDir" ]] && { mkdir "$updateDir" || return; }

	# arguments
	unset -v force noPrompt quiet restart test verbose verboseLevel wait
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-f|--force) force="--force";;
			-np|--no-prompt) noPrompt="--no-prompt";;
			-q|--quiet) quiet="--quiet";;
			-r|--restart) restart="--restart";;
			-t|--test) test="--test";;
			-v|--verbose) verbose="-v"; verboseLevel=1;;
			-vv) verbose="-vv"; verboseLevel=2;;
			-vvv) verbose="-vvv"; verboseLevel=3;;
			-vvvv) verbose="-vvvv"; verboseLevel=4;;
			-vvvvv) verbose="-vvvvv"; verboseLevel=5;;
			-w|--wait) wait="--wait";;
			*) 
				[[ -f "$1" ]] && { export functionConfigFileCache="$1"; shift; continue; }
				[[ "$1" && ! $binUnc ]] && { binUnc="$1"; shift; continue; }
				echoErr "invalid argument '$1'"; return 1;
		esac
		shift
	done
	globalArgs=($force $noPrompt $quiet $verbose)

	# variables
	initVariables || return

	# sudo
	sudo="sudo"; ! inPath sudo && sudo=""
	[[ ! $sudo && "$USER" != "root" ]] && { echoErr "sudo is not installed and user is not root"; return 1; }

	# bootstrap directory
	if [[ ! -d "$updateDir" ]]; then
		mkdir "$updateDir" || return
		chmod -R o+w "$updateDir" || return
	fi

	# ping
	ping="ping"
	isQnap && ping="/opt/bin/ping"

	# path - debian only includes sbin directories in the root users path
	isDebian && PATH="/usr/local/sbin:/usr/sbin:/sbin:$PATH" 

	# logging
	log1 "\n	config=$functionConfigFileCache\n	user=$user\n	binUnc=$binUnc\n	bootstrapDir=$bootstrapDir\n	install=$installUnc"

	return 0
}

initVariables()
{
	# virtualization
	chroot=""; [[ -f /etc/debian_chroot ]] && chroot="$(cat "/etc/debian_chroot")"
	container=""; inPath systemd-detect-virt && [[ "$(systemd-detect-virt --container)" != "none" ]] && container="true"

	# platform_kernel
	platform_kernel="linux"
	if [[ "$(uname -r)" =~ .*-Microsoft$ ]]; then platform_kernel="wsl1"
	elif [[ "$(uname -r)" =~ .*-microsoft-standard.* ]]; then platform_kernel="wsl2"
	fi

	# platform=debian|entware|mac|win
	platform=debian; inPath "lsb_release" && codeName="$(lsb_release -cs)"
	[[ "$(uname)" == "Darwin" ]] && platform=mac
	! isChroot && [[ "$platform_kernel" == @(wsl1|wsl2) ]] && platform=win

	# platform_like=qnap|synology
	! isContainer && [[ $(uname -r) =~ .*-qnap ]] && { platform="entware" platform_like="qnap"; }
	! isContainer && [[ -f /proc/syno_platform ]] && { platform="entware" platform_like="synology"; }

	# ID=ubuntu|raspbian|qts
	[[ -f /etc/os-release ]] && eval $(cat /etc/os-release)

	# network
	domain=""; [[ "$platform" == "win" ]] && domain="$(cmd.exe /c 'echo %USERDOMAIN%' 2> /dev/null | RemoveCarriageReturn | RemoveNewline | LowerCase)"
	[[ "$(hostname | LowerCase)" == "$domain" ]] && domain="$(configGet "defaultDomain")"
	dnsBaseDomain="$(configGet "${domain}DnsBaseDomain")"

	# configuration
	user="$(configGet "${domain}User")"; isMac && user="$USER" # if we are on a mac bootstrap as the current user
	installUnc="$(configGet "${domain}InstallUnc")"
	binUnc="${binUnc:-$(configGet "${domain}BinUnc")}"
	bootstrapDir="$(configGet "${domain}BootstrapDir")"

	# GNU utilities	
	export G=""; inPath "gdate" && isMac && G="g"

	return 0
}

#
# mount
#

# mountUnc UNC - from unc script
mountUnc() 
{
	local unc="$1"

	! IsUncPath "$unc" && { echoErr "'$unc' is not a UNC path"; return 1; }; 		
	GetUncUser "$unc" uncUser; [[ ! $uncUser ]] && uncUser="$user"
	GetUncServer "$unc" server || return; [[ ! $server ]] && { echoErr " UNC '$unc' does not include a server"; return 1; }
	GetUncShare "$unc" share || return; [[ ! $share ]] && share="root" 
	GetUncDirs "$unc" dirs
	local p; GetUncProtocol "$unc" p || return; [[ $p ]] && protocol="$p"

	local shareId="${share%%\$}"
	mountDir="$HOME/Volumes/${server}_${shareId}"

	# return if mounted
	[[ -d "$mountDir/$dirs" ]] && return

	hilight "Mounting $unc..."

	# cleanup existing mount directory
	[[ -d "$mountDir" ]] && { umount "$mountDir" >& /dev/null; rmdir "$mountDir" || return; }

	# prepare mount directory
	${G}mkdir --parents "$mountDir" || return

	# mount 	
	if [[ "$protocol" == "ssh" ]] || IsInteger "$protocol" || ! isAvailable "$server"; then mountPublic-sshfs || return
	elif [[ "$platform_kernel" == "wsl1" ]]; then mountPublic-win || return
	elif [[ "$platform_kernel" == "wsl2" || "$platform" == "entware" ]]; then mountPublic-debian || return
	else mountPublic-$platform || return
	fi

	# validate directory
	[[ ! -d "$mountDir/$dirs" ]] && { echoErr "'$dirs' directory does not exist on '//$server/$share'"; return 1; }
	return 0
}

mountPublic-debian()
{
	# configure fstab - allows writing without sudo
	local unc="//$server/$share"
	local line="$unc $(readlink -f "$mountDir") cifs username=$uncUser,noauto,rw,users 0 0"	
	if ! grep -q "$line" "/etc/fstab"; then
		echo "Updating /etc/fstab..."
		echo "$line" | sudo tee -a "/etc/fstab" || return
	fi

	# mount
	log1 "mounting SMB drive: mount.cifs $unc $mountDir -o user=$uncUser sec=ntlmsspi"
	mount.cifs "$unc" "$mountDir" -o user=$uncUser sec=ntlmsspi || return
}

mountPublic-mac()
{
	log1 "mounting SMB drive: mount_smbfs -s smb://$uncUser@$server/$share $mountDir"
	mount_smbfs -s "smb://$uncUser@$server/$share" "$mountDir" || return
}

mountPublic-sshfs()
{
	# install
	package sshfs || return

	# configure
	local file="/etc/fuse.conf"
	[[ ! "$file" ]] && { echo "user_allow_other" | sudo tee "$file" || return; }
	grep -q "^#user_allow_other" "$file" && { sudo sed -i 's/^#user_allow_other$/user_allow_other/' "$file" || return; }

	# mount
	local port="22"; IsInteger "$protocol" && port="$protocol"
	local sudo; isQnap && sudo="sudo"
	log1 "mounting SSH drive: $sudo sshfs -o allow_other -o follow_symlinks $uncUser@$server:/ $mountDir -p $port"
	$sudo sshfs -o allow_other -o follow_symlinks "$uncUser@$server:/" "$mountDir" -p "$port" || return
}

mountPublic-win()
{
	log1 "mounting SMB drive: sudo mount -t drvfs //$server/$share $mountDir"
	net.exe use '\\'"$server"'\IPC$' || return # drvfs requires and existing Windows connection
	sudo mount -t drvfs "//$server/$share" "$mountDir" || return

	# test reads - try and avoid initial "Invalid argument"
	ls "$mountDir/usr/local/data/bin"; pause
	ls "$mountDir/usr/local/data/bin"; pause
}

#
# Packages
#

installPackages()
{
	! updateNeeded "packages" && return

	hilight "Installing packages..."
	installPackages-pre || return
	installPackages-$platform || return
	installPackages-post || return
	updateDone "packages" || return
}

installPackages-pre()
{
	isUbuntu && isWin && { package ubuntu-standard || return; }
	return 0
}

packageAll="jq"
packageDebWin="acl bc cgroup-tools cifs-utils inotify-tools iputils-ping moreutils ncat unzip" # moreutils (sponge)

installPackages-debian() { package $packageAll $packageDebWin net-tools openssh-server; }
installPackages-entware() { package $packageAll bash coreutils coreutils-ln coreutils-readlink coreutils-realpath coreutils-tac mount-utils nano openssh-client-utils unzip; }
installPackages-mac() { package $packageAll bash coreutils gsed grep nmap unzip; }
installPackages-win() {	package $packageAll $packageDebWin || return; }

installPackages-post()
{
	isWsl2 && { package cifs-utils || return; }
	isUbuntu && isWin && { package ubuntu-wsl || return; }
	package findutils rsync || return
}

package()
{
	packageInstalled "$@" && return

	case $platform in
		debian|win) sudo apt install -y --allow-unauthenticated "$@";;
		mac) brew install "$@";;
		entware) sudo opkg install "$@";;
	esac
}

packageInstalled()
{ 
	if inPath dpkg; then
		# if any one of the packages passed returns "no packages found" then return error 1
		dpkg --get-selections "$@" 2>&1 | grep -q "no packages found" && return 1 || return 0
	else
		# assumes each package name is in the path
		inPath "$@"; return
	fi
}

#
# Package Manager
#

setupPackageManager()
{
	! updateNeeded "PackageManager" && return

	hilight "Setting up the package manager..."
	RunFunction setupPackageManager-$platform || return
	updateDone "PackageManager" || return
}

setupPackageManager-win() { setupPackageManager-debian; }

setupPackageManager-debian()
{	
	RunFunction setupPackageManager-debian-$domain || return
	debianUnminimizeDoc || return
	debianFixMan || return
	debianPackageProxy || return
	debianPackageUpdate || return
	debianPackageCore || return
	return 0
}

setupPackageManager-debian-sandia()
{
	# sources
	local file="/etc/apt/sources.list"	
	if ! ${G}grep --quiet "deb.sandia.gov" "$file"; then
		cat <<-EOF | sudo tee "$file" || return
			# This is taken from https://deb.sandia.gov
			deb https://deb.sandia.gov/ubuntu/ubuntu $codeName main restricted universe multiverse
			deb https://deb.sandia.gov/ubuntu/ubuntu $codeName-security main restricted universe multiverse
			deb https://deb.sandia.gov/ubuntu/ubuntu $codeName-updates main restricted universe multiverse
			deb https://deb.sandia.gov/ubuntu/ubuntu $codeName-backports main restricted universe multiverse 
			EOF
	fi

	# ignore SSL errors - remove when deb.sandia.gov certificate is fixed (not expired)
	local file="/etc/apt/apt.conf.d/80ssl"	
	if ! [[ -f "$file" ]]; then
		cat <<-EOF | sudo tee -a "$file" || return
			// Do not verify peer certificate
			Acquire::https::Verify-Peer "false";
			// Do not verify that certificate name matches server name
			Acquire::https::Verify-Host "false";
			EOF
	fi

	return 0
}

setupPackageManager-entware()
{
	export PATH=/opt/bin:$PATH
	[[ ! -d "/opt/bin" ]] && { wget -O - "http://bin.entware.net/x64-k3.2/installer/generic.sh" | sudo /bin/sh || return; }
	[[ ! -f "/opt/bin/stat" ]] && { sudo opkg install coreutils-stat || return; }
	return 0
}

setupPackageManager-mac()
{
	local brew="/usr/local/bin/brew"; bash="/usr/local/bin/bash" 
	isArm && brew="/opt/homebrew/bin/brew" bash="/opt/bin/bash"

	[[ ! -f "$brew" ]] && { /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || return; }
	eval "$($brew shellenv)"
	! brew list bash >& /dev/null && { brew install bash || return; }
	! which -p gmkdir >&/dev/null && { brew install coreutils || return; }
	G="g"
}

debianPackageCore()
{
	inPath "sudo" && return
	apt install sudo -y || return
}

debianPackageProxy()
{
	# check
	[[ ! $HTTP_PROXY ]] && return # no proxy server
	grep --quiet "$dnsBaseDomain" "/etc/apt/sources.list" && return # using an internally hosted source
	[[ ! -d /etc/apt/apt.conf.d || -f "/etc/apt/apt.conf.d/proxy" ]] && return # already configured

	# configure
	printf 'Acquire::http::Proxy "%s";\nAcquire::https::Proxy "%s";\n' "$HTTP_PROXY" "$HTTP_PROXY" | $sudo tee "/etc/apt/apt.conf.d/proxy"
}

debianPackageUpdate()
{
	rebootCheck || return # unattended upgrade may require a reboot

	hilight "Updating package database..."
	$sudo apt update -y || return

	hilight "Upgrading packages..."
	$sudo apt upgrade -y || return

	rebootCheck || return

	hilight "Upgrading packages with dependencies..."
	$sudo apt dist-upgrade -y || return

	hilight "Removing unneeded packages..."
	$sudo apt autoremove -y || return

	rebootCheck || return

	return 0
}

# debianUnminimizeDoc - restore documents by removing documentation excludes and re-installing packages
# from /usr/local/sbin/unminimize
debianUnminimizeDoc() 
{
	# assume unminimize is done if sudo is installed
	[[ $sudo ]] && return 

	local config="/etc/dpkg/dpkg.cfg.d/excludes" configTmp="/etc/dpkg/dpkg.cfg.d/excludes.dpkg-tmp" motd="/etc/update-motd.d/60-unminimize"

	[[ ! -f "$config" && ! -f "$configTmp" && ! -f "$motd" ]] && return
	[[ -f "$config" ]] && { $sudo mv "$config" "$configTmp" || return; }

	hilight "Restoring documentation..."
	apt-get update || return
	DEBIAN_FRONTEND=noninteractive apt-get upgrade -y || return
	dpkg -S /usr/share/man/ | sed 's|, |\n|g;s|: [^:]*$||' | DEBIAN_FRONTEND=noninteractive xargs apt-get install --reinstall -y || return
	dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs apt-get install --reinstall -y || return
	dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/locale/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs apt-get install --reinstall -y || return

	# return 1 if there are any unminimized documents  
	if dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {exit 1}'; then
		rm -f "$configTmp" "$motd" || return
	else
		dpkg --verify | grep '^..5......   /usr/share/doc'
		echoErr "unable to unminimize the listed documentation"
		return 1
	fi

  return 0
}

debianFixMan()
{
	[[ "$(dpkg-divert --truename /usr/bin/man)" != "/usr/bin/man.REAL" ]] && return

	$sudo rm -f "/usr/bin/man" || return
	$sudo dpkg-divert --quiet --remove --rename "/usr/bin/man" || return
}

#
# helper
#

configGet() { (. "$functionConfigFileCache"; eval echo "\$$1"); }
getDateStamp() { ${G}date '+%Y%m%d'; }
getFileDateStamp() { ${G}stat 2>&1 | grep "BusyBox" >& /dev/null && return; ${G}date '+%Y%m%d' -d "$(${G}stat --format="%y" "$1")"; }
echoErr() { echo -e "bootstrap-init: $@" >&2; }
header() { printf "${RB_BLUE}*************** ${RB_INDIGO}$1${RB_BLUE} ***************${RESET}\n"; }
hilight() { printf "${GREEN}$1${RESET}\n"; }
initColor() { GREEN=$(printf '\033[32m'); RB_BLUE=$(printf '\033[38;5;021m') RB_INDIGO=$(printf '\033[38;5;093m') RESET=$(printf '\033[m'); }
inPath() { local f; for f in "$@"; do ! which "$f" >& /dev/null && return 1; done; return 0; }
isArm() { uname -a | grep -q arm; }
isAvailable() { "$ping" -c 2 -W 2 "$1" &> /dev/null; }
isChroot() { [[ $chroot ]]; }
isContainer() { [[ $container ]]; }
isDebian() { [[ "$platform" == "debian" ]]; }
isMac() { [[ "$platform" == "mac" ]]; }
isPi() { [[ "$ID" == "raspbian" ]]; }
isUbuntu() { [[ "$ID" == "ubuntu" ]]; }
isWin() { [[ "$platform" == "win" ]]; }
isWsl2() { [[ "$(uname -r)" =~ .*-microsoft-standard$ ]]; }
isQnap() { [[ "$platform_like" == "qnap" ]]; }
log1() { ! (( verboseLevel >= 1 )) && return; echoErr "$@"; }
pause() { local response; read -n 1 -s -p "${*-Press any key when ready...}"; echo; }
updateNeeded() { isMac && [[ ! $G ]] && return; [[ $force || ! -f "$updateDir/$1" || "$(getDateStamp)" != "$(getFileDateStamp "$updateDir/$1")" ]]; }
updateDone() { touch "$updateDir/$1"; }

#
# from function.sh
#

# arguments
alias GetArgs='[[ $# == 0 ]] && set -- "$(cat)"'
r() { [[ $# == 1 ]] && echo "$1" || eval "$2=""\"${1//\"/\\\"}\""; } # result VALUE VAR - echo value or set var to value (faster), r "- '''\"\"\"-" a; echo $a

# functions
IsFunction() { declare -f "$1" >& /dev/null; }
RunFunction() { local f="$1"; shift; ! IsFunction "$f" && return; "$f" "$@"; }

# integer
IsInteger() { [[ "$1" =~ ^[0-9]+$ ]]; }

# string
LowerCase() { tr '[:upper:]' '[:lower:]'; }
RemoveCarriageReturn()  { sed 's/\r//g'; }
RemoveNewline()  { tr -d '\n'; }

# network
IsInDomain() { [[ "$(echo "$1" | LowerCase)" == "$domain" ]]; }

# network - UNC Shares - //[USER@]SERVER/SHARE[/DIRS][:PROTOCOL]
CheckNetworkProtocol() { [[ "$1" == @(|nfs|smb|ssh) ]] || IsInteger "$1"; }
GetUncRoot() { GetArgs; r "//$(GetUncServer "$1")/$(GetUncShare "$1")" $2; }															# //SERVER/SHARE
GetUncServer() { GetArgs; local gus="${1#*( )//}"; gus="${gus#*@}"; r "${gus%%/*}" $2; }									# SERVER
GetUncShare() { GetArgs; local gus="${1#*( )//*/}"; gus="${gus%%/*}"; r "${gus%:*}" $2; }									# SHARE
GetUncDirs() { GetArgs; local gud="${1#*( )//*/*/}"; [[ "$gud" == "$1" ]] && gud=""; r "${gud%:*}" $2; } 	# DIRS
IsUncPath() { [[ "$1" =~ ^\ *//.* ]]; }

GetUncUser()
{
	GetArgs; ! [[ "$1" =~ .*\@.* ]] && { r "$USER" $2; return; }
	local guu="${1#*( )//}"; guu="${guu%%@*}" || guu="$USER"; r "$guu" $2
}

# GetUncProtocol UNC - PROTOCOL=NFS|SMB|SSH|INTEGER - INTEGER is a custom SSH port
GetUncProtocol()
{
	GetArgs; local gup="${1#*:}"; [[ "$gup" == "$1" ]] && gup=""; r "$gup" $2
	CheckNetworkProtocol "$gup" || { echoErr "'$gup' is not a valid network protocol"; return 1; }
}

run "$@"
