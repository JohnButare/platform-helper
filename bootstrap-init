#!/usr/bin/env bash
# bootstrap-init - bootstrap a local system

run()
{
	init "$@" || return
	configureProxyServer || return
	setupPackageManager || return
	setTimezone || return
	installPackages || return
	configureOs || return
	createUser || return
	createUserHome || return
	runAsUser || return
	mountPublic || return
	runBootstrap || return
}

configureProxyServer()
{
	[[ ! $proxy ]] && return

	echo "Setting proxy server to $proxy..."
	export {HTTP_PROXY,HTTPS_PROXY}="$proxy"

	[[ ! -d /etc/apt/apt.conf.d || -f "/etc/apt/apt.conf.d/proxy" ]] && return
	printf 'Acquire::http::Proxy "%s";\nAcquire::https::Proxy "%s";\n' "$proxy" "$proxy" | $sudo tee "/etc/apt/apt.conf.d/proxy"
}

setTimezone()
{
	# macOS bash 3.2 - cannot use |& to redirect standard error, must use 2>&1
	( isMac || [[ ! $timezone ]] || cat "/etc/timezone" 2>&1 | grep "$timezone" > /dev/null ) && return

	$sudo DEBIAN_FRONTEND=noninteractive apt install -y tzdata || return
	[[ ! -f "/usr/share/zoneinfo/$timezone" ]] && return
	$sudo ln -snf "/usr/share/zoneinfo/$timezone" "/etc/localtime" || return
	echo "$timezone" | sudo tee "/etc/timezone" || return
	$sudo dpkg-reconfigure -f noninteractive tzdata || return
}

createUser()
{
	isMac || [[ ! $user ]] || grep "$user" /etc/passwd >& /dev/null && return

	echo "Creating user $user..."
	sudo adduser "$user" --gecos "" || return
	sudo usermod -aG sudo $user || return
}

createUserHome()
{
	isMac || [[ ! $user ]] && return

	local dir="$(grep "$user" /etc/passwd | cut -d: -f 6)"
	[[ -d "$dir" ]] && return

	echo "Creating user $user home directory..."
	sudo mkhomedir_helper $user || return
}

runAsUser()
{
	[[ $user && "$USER" == "$user" ]] && return

	[[ $restart ]] && { echo "Restarting to run as the $USER..."; return 1; }
	
	local script="${BASH_SOURCE[0]}"

	echo "Running $script as $user..."
	cd /tmp || return
	sudo chmod ugo+rwx "$script" || return
	sudo --preserve-env --user=$user --set-home "$script" # preserve entire environment so wslpath works properly
	exit
}

runBootstrap()
{
	echo "Bootstraping from $host..."
	export PATH=$bin:$PATH
	$bash bootstrap "$host" "$install"
}

#
# Configure OS
#

configureOs() { configure-$platform; }
configure-debian() { :; }

configure-entware()
{
	if isQnap; then
		mkdir /usr/etc/sudoers.d || return
		echo "jjbutare ALL=(ALL) ALL" > /usr/etc/sudoers.d/jjbutare || return
	fi
	
	echo "Change shell to /opt/bin/bash for all shells with /share/homes home directory..."
	nano /etc/passwd 
	pause
}

configure-mac()
{
	grep '/usr/local/bin/bash' /etc/shells >& /dev/null && return
	echo -n "/usr/local/bin/bash" | pbcopy || return
	sudo nano /etc/shells || return
	chpass -s "/usr/local/bin/bash" || return 
}

configure-win()
{
	InPath apt && { $sudo apt update || return; } # fix "Could not find command-not-found database" in WSL
	return
}

#
# Initialize
#

init()
{
	[[ "$1" == "--restart" ]] && { restart="true"; shift; }

	initPlatform || return

	. "${BASH_SOURCE[0]%/*}/bootstrap-config.sh" || return

	bash=""; isMac && bash="/usr/local/bin/bash"
	mount="$HOME/Volumes/public"; isMountedDrive && mount="$host/public"
	bin="$mount/documents/data/bin"
	install="$mount/Documents/data/install"
	sudo="sudo"; ! InPath sudo && sudo=""

	# debian only includes sbin directories in the root users path
	PATH="/usr/local/sbin:/usr/sbin:/sbin:$PATH" 

	return 0
}

initPlatform()
{
	chroot=""; [[ -f /etc/debian_chroot ]] && chroot="$(cat "/etc/debian_chroot")"

	platform_kernel="linux"
	if [[ "$(uname -r)" =~ .*-Microsoft$ ]]; then platform_kernel="wsl1"
	elif [[ "$(uname -r)" =~ .*-microsoft-standard$ ]]; then platform_kernel="wsl2"
	fi

	# platform=debian|entware|mac|win
	platform=debian
	[[ "$(uname)" == "Darwin" ]] && platform=mac
	[[ ! $chroot && "$platform_kernel" == @(wsl1|wsl2) ]] && platform=win

	# platform_like=qnap|synology
	[[ $(uname -r) =~ .*-qnap ]] && { platform="entware" platform_like="qnap"; }
	[[ -f /proc/syno_platform ]] && { platform="entware" platform_like="synology"; }

	# ID=ubuntu|raspbian
	[[ -f /etc/os-release ]] && eval $(cat /etc/os-release)

	return 0
}

#
# Mount Public
#

mountPublic() 
{ 
	[[ -d "$bin" ]] && return

	isWin && isMountedDrive && { mountWinDrive "$host" || return; }

	echo "Mounting //$host/public..."
	mkdir -p "$mount" || return

	if [[ "$platform_kernel" == "wsl1" ]]; then mountPublic-win
	elif [[ "$platform_kernel" == "wsl2" || "$platform" == "entware" ]]; then mountPublic-debian
	else mountPublic-$platform
	fi
}

mountPublic-debian()
{
	local line="//$host/public $HOME/Volumes/public cifs username=$USER,noauto,rw,users 0 0"
	! grep "$line" /etc/fstab >& /dev/null && { echo "$line" | sudo tee -a /etc/fstab || return; }
	mount.cifs "//$host/public" "$HOME/Volumes/public" -o user=$USER sec=ntlmsspi || return
}

mountPublic-mac() { mount_smbfs -s "smb://$USER@$host/public" "$mount" || return; }
mountPublic-win() { sudo mount -t drvfs "//$host/public" "$HOME/Volumes/public"; }

mountWinDrive() # dir - mounted directory for the drive, must start with /mnt, i.e. /mnt/d
{ 
	local dir="$1" drive="${dir/\/mnt\//}"
	[[ ! -d "$dir" ]] && { sudo mkdir "$dir" || return 1; }
	mount 2>&1 | grep "$drive: on $dir type drvfs" &> /dev/null && return 0;
	sudo mount -t drvfs "$drive:" "$dir" &> /dev/null
}

#
# Packages
#

installPackages()
{
	installPackages-pre || return
	installPackages-$platform || return
	installPackages-post || return
}

installPackages-debian() { package cifs-utils iputils-ping net-tools openssh-server; }
installPackages-entware() { package bash coreutils coreutils-ln coreutils-readlink nano; }
installPackages-mac() { package bash coreutils gnu-sed; }
installPackages-win() { package iputils-ping; }

installPackages-pre()
{
	isUbuntu && isWin && { package ubuntu-standard || return; }
	return 0
}

installPackages-post()
{
	isWsl2 && { package cifs-utils || return; }
	isUbuntu && isWin && { package ubuntu-wsl || return; }
	package findutils rsync || return
}

package()
{
	packageInstalled "$@" && return
	case $platform in
		debian|win) sudo apt install -y --allow-unauthenticated "$@";;
		mac) brew install "$@";;
		qnap|snyology) opkg install "$@";;
	esac
}

packageInstalled() { ! InPath dpkg && return 1; ! dpkg --get-selections "$@" |& grep "no packages found" > /dev/null && return; }

setupPackageManager() { setupPackageManager-$platform; }
setupPackageManager-entware() { wget -O - "http://bin.entware.net/x64-k3.2/installer/generic.sh" | /bin/sh; }
setupPackageManager-win() { setupPackageManager-debian; }

setupPackageManager-mac()
{
	which brew >& /dev/null && return
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
}

setupPackageManager-debian()
{
	debianUnminimizeDoc || return
	debianFixMan || return
	debianPackageUpdate || return
	debianPackageCore || return
	return 0
}

debianPackageCore()
{
	InPath "sudo" && return
	apt install sudo -y || return
}

debianPackageUpdate()
{ 
	$sudo apt update -y || return
	$sudo apt dist-upgrade -y || return
	$sudo apt autoremove -y || return

	[[ -f /var/run/reboot-required ]] && { echo "Rebooting...."; $sudo reboot now; exit 1; }

	return 0
}

debianUnminimizeDoc() # from /usr/local/sbin/unminimize
{
	local config="/etc/dpkg/dpkg.cfg.d/excludes" configTmp="/etc/dpkg/dpkg.cfg.d/excludes.dpkg-tmp" motd="/etc/update-motd.d/60-unminimize"

	[[ ! -f "$config" && ! -f "$configTmp" && ! -f "$motd" ]] && return
	[[ -f "$config" ]] && { $sudo mv "$config" "$configTmp" || return; }

  $sudo apt-get update || return
  $sudo apt-get upgrade -y || return
  dpkg -S /usr/share/man/ |sed 's|, |\n|g;s|: [^:]*$||' | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return
  dpkg --verif y--verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return
  dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/locale/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return

  if $sudo dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {exit 1}'; then
  	$sudo rm -f "$configTmp" "$motd" || return
  fi

  return 0
}

debianFixMan()
{
	[[ "$(dpkg-divert --truename /usr/bin/man)" != "/usr/bin/man.REAL" ]] && return

	$sudo rm -f "/usr/bin/man" || return
	$sudo dpkg-divert --quiet --remove --rename "/usr/bin/man" || return
}

#
# helper
#

isChroot() { [[ $chroot ]]; }
isDebian() { [[ "$platform" == "debian" ]]; }
isMac() { [[ "$platform" == "mac" ]]; }
isPi() { [[ "$ID" == "raspbian" ]]; }
isUbuntu() { [[ "$ID" == "ubuntu" ]]; }
isWin() { [[ "$platform" == "win" ]]; }
isWsl2() { [[ "$(uname -r)" =~ .*-microsoft-standard$ ]]; }
isQnap() { [[ "$platform_like" == "qnap" ]]; }

isMountedDrive() { [[ -d "$host/public" ]] || [[ "$host" =~ ^/mnt ]]; }
InPath () { which "$1" &> /dev/null; }
pause() { local response; read -n 1 -s -p "${*-Press any key when ready...}"; echo; }

run "$@"
