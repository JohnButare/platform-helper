#!/usr/bin/env bash
# bootstrap-init - bootstrap a local system

run()
{
	init "$@" || return	
	configureProxyServer || return
	setupPackageManager || return
	setTimezone || return
	installPackages || return
	configureOs || return
	createUser || return
	createUserHome || return
	runAsUser || return
	mountPublic || return
	runBootstrap || return
}

configureProxyServer()
{
	[[ ! $proxy ]] && return

	[[ ! $HTTP_PROXY ]] && export {HTTP_PROXY,HTTPS_PROXY}="$proxy"

	if [[ -d /etc/apt/apt.conf.d && ! -f "/etc/apt/apt.conf.d/proxy" ]]; then
		hilight "Setting proxy server to $proxy..."
		printf 'Acquire::http::Proxy "%s";\nAcquire::https::Proxy "%s";\n' "$proxy" "$proxy" | $sudo tee "/etc/apt/apt.conf.d/proxy"
	fi

	return 0
}

setTimezone()
{
	! IsDebian && return

	( [[ ! $timezone ]] || cat "/etc/timezone" |& grep "$timezone" > /dev/null ) && return

	$sudo DEBIAN_FRONTEND=noninteractive apt install -y tzdata || return
	[[ ! -f "/usr/share/zoneinfo/$timezone" ]] && return
	$sudo ln -snf "/usr/share/zoneinfo/$timezone" "/etc/localtime" || return
	echo "$timezone" | sudo tee "/etc/timezone" || return
	$sudo dpkg-reconfigure -f noninteractive tzdata || return
}

createUser()
{
	IsMac || [[ ! $user ]] || grep "$user" /etc/passwd >& /dev/null && return

	hilight "Creating user $user"
	sudo adduser "$user" --gecos "" || return
	sudo usermod -aG sudo $user || return
}

createUserHome()
{
	IsMac || [[ ! $user ]] && return

	local dir="$(grep "$user" /etc/passwd | cut -d: -f 6)"
	[[ -d "$dir" ]] && return

	hilight "Creating user $user home directory..."
	sudo mkhomedir_helper $user || return
}

runAsUser()
{
	[[ $user && "$USER" == "$user" ]] && return

	[[ $restart ]] && { hilight "Restarting to run as $user..."; return 100; }
	
	local script="${BASH_SOURCE[0]}"

	hilight "Running $script as $user..."
	cd /tmp || return
	sudo chmod ugo+rwx "$script" || return
	sudo --preserve-env --user=$user --set-home "$script" # preserve entire environment so wslpath works properly and WSL_ environment variables are passed
	exit
}

runBootstrap()
{
	local desc=" from $host"; [[ ! $host ]] && desc="" 
	hilight "Bootstraping$desc..."
	export PATH=$bin:$PATH
	$bash bootstrap "$host" "$install"
}

doReboot()
{
	hilight "Rebooting..."

	IsWin && { sync; wsl.exe --shutdown; exit 100; }

	# cache sudo credentials
	[[ $sudo ]] && $sudo -v 

	# reboot with a delay to allow exit
	{ nohup bash -c "sleep 1; sudo reboot now" & } >& /dev/null

	# status 100 indicates a retry to bootstrap-init
	exit 100 
}

#
# Configure OS
#

configureOs() 
{
	! UpdateNeeded "os" && return

	hilight "Configuring the operating system..."
	configure-$platform || return
	UpdateDone "os" || return
}

configure-debian() { :; }

configure-entware()
{
	if IsQnap; then
		[[ ! -d "/usr/etc/sudoers.d" ]] && { mkdir /usr/etc/sudoers.d || return; }
		[[ ! -f "/usr/etc/sudoers.d/$user" ]] && { echo "$user ALL=(ALL) ALL" > /usr/etc/sudoers.d/$user || return; }
	fi

	return 0	
}

configure-mac()
{
	grep '/usr/local/bin/bash' /etc/shells >& /dev/null && return
	echo -n "/usr/local/bin/bash" | pbcopy || return
	sudo nano "/etc/shells" || return
	chpass -s "/usr/local/bin/bash" || return 
}

configure-win()
{
	InPath apt && { $sudo apt update || return; } # fix "Could not find command-not-found database" in WSL
	return
}

#
# Initialize
#

init()
{	
	# bootstrap variables
	. "${BASH_SOURCE[0]%/*}/bootstrap-config.sh" || return

	# variables
	GREEN=$(printf '\033[32m') RESET=$(printf '\033[m')

	# arguments
	[[ "$1" == "--force" ]] && { force="true"; shift; }
	[[ "$1" == "--restart" ]] && { restart="true"; shift; }

	# update directory
	UpdateInit "/tmp/bootstrap" || return

	# platform variables
	initPlatform || return
	bash=""; IsMac && bash="/usr/local/bin/bash"
	mount="$HOME/Volumes/public"; IsMountedDrive && mount="$host/public"
	[[ -d "/share/Public/documents/data/install" ]] && { host=""; mount="/share/Public"; } # local install source
	bin="$mount/documents/data/bin"
	install="$mount/Documents/data/install"

	# sudo
	sudo="sudo"; ! InPath sudo && sudo=""
	[[ ! $sudo && "$USER" != "root" ]] && { echo "bootstrap-init: sudo is not present and user is not root"; return 1; }

	# debian only includes sbin directories in the root users path
	PATH="/usr/local/sbin:/usr/sbin:/sbin:$PATH" 

	return 0
}

initPlatform()
{
	chroot=""; [[ -f /etc/debian_chroot ]] && chroot="$(cat "/etc/debian_chroot")"
	container=""; InPath systemd-detect-virt && [[ "$(systemd-detect-virt --container)" != "none" ]] && container="true"

	platform_kernel="linux"
	if [[ "$(uname -r)" =~ .*-Microsoft$ ]]; then platform_kernel="wsl1"
	elif [[ "$(uname -r)" =~ .*-microsoft-standard$ ]]; then platform_kernel="wsl2"
	fi

	# platform=debian|entware|mac|win
	platform=debian
	[[ "$(uname)" == "Darwin" ]] && platform=mac
	! IsChroot && [[ "$platform_kernel" == @(wsl1|wsl2) ]] && platform=win

	# platform_like=qnap|synology
	! IsContainer && [[ $(uname -r) =~ .*-qnap ]] && { platform="entware" platform_like="qnap"; }
	! IsContainer && [[ -f /proc/syno_platform ]] && { platform="entware" platform_like="synology"; }

	# ID=ubuntu|raspbian|qts
	[[ -f /etc/os-release ]] && eval $(cat /etc/os-release)
	
	return 0
}

#
# Mount Public
#

mountPublic() 
{ 
	[[ -d "$bin" ]] && return

	IsWin && IsMountedDrive && { mountWinDrive "$host" || return; }

	hilight "Mounting //$host/public..."
	mkdir -p "$mount" || return

	if [[ "$platform_kernel" == "wsl1" ]]; then mountPublic-win
	elif [[ "$platform_kernel" == "wsl2" || "$platform" == "entware" ]]; then mountPublic-debian
	else mountPublic-$platform
	fi
}

mountPublic-debian()
{
	local line="//$host/public $HOME/Volumes/public cifs username=$USER,noauto,rw,users 0 0"
	! grep "$line" /etc/fstab >& /dev/null && { echo "$line" | sudo tee -a /etc/fstab || return; }
	mount.cifs "//$host/public" "$HOME/Volumes/public" -o user=$USER sec=ntlmsspi || return
}

mountPublic-mac() { mount_smbfs -s "smb://$USER@$host/public" "$mount" || return; }
mountPublic-win() { sudo mount -t drvfs "//$host/public" "$HOME/Volumes/public"; }

mountWinDrive() # dir - mounted directory for the drive, must start with /mnt, i.e. /mnt/d
{ 
	local dir="$1" drive="${dir/\/mnt\//}"
	[[ ! -d "$dir" ]] && { sudo mkdir "$dir" || return 1; }
	mount 2>&1 | grep "$drive: on $dir type drvfs" &> /dev/null && return 0;
	sudo mount -t drvfs "$drive:" "$dir" &> /dev/null
}

#
# Packages
#

installPackages()
{
	! UpdateNeeded "packages" && return

	hilight "Installing packages..."
	installPackages-pre || return
	installPackages-$platform || return
	installPackages-post || return
	UpdateDone "packages" || return
}

installPackages-pre()
{
	IsUbuntu && IsWin && { package ubuntu-standard || return; }
	return 0
}

installPackages-debian() { package cgroup-tools cifs-utils iputils-ping net-tools openssh-server; }
installPackages-entware() { package bash coreutils coreutils-ln coreutils-readlink mount-utils nano; }
installPackages-mac() { package bash coreutils gnu-sed; }

installPackages-win()
{
	package cgroup-tools cifs-utils iputils-ping || retgurn;

	# using Ubuntu-20.04 WSL image dpg --get-selections returns nothing
	! InPath mount-cifs && { sudo apt install -y cifs-utils || return; }

	return 0
}

installPackages-post()
{
	IsWsl2 && { package cifs-utils || return; }
	IsUbuntu && IsWin && { package ubuntu-wsl || return; }
	package findutils rsync || return
}

package()
{
	packageInstalled "$@" && return

	case $platform in
		debian|win) sudo apt install -y --allow-unauthenticated "$@";;
		mac) brew install "$@";;
		entware) sudo opkg install "$@";;
	esac
}

packageInstalled() # return 0 if all passed packages are installed
{ 
	! InPath dpkg && return 1

	# if any one of the packages passed returns "no packages found" then return 1
	dpkg --get-selections "$@" |& grep "no packages found" > /dev/null && return 1
	return 0
}

#
# Package Manager
#

setupPackageManager()
{
	! UpdateNeeded "PackageManager" && return

	hilight "Setting up the package manager..."
	setupPackageManager-$platform || return
	UpdateDone "PackageManager" || return
}

setupPackageManager-win() { setupPackageManager-debian; }

setupPackageManager-mac()
{
	which brew >& /dev/null && return
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
}

setupPackageManager-debian()
{
	debianUnminimizeDoc || return
	debianFixMan || return
	debianPackageUpdate || return
	debianPackageCore || return
	return 0
}

setupPackageManager-entware()
{
	[[ ! -d "/opt/bin" ]] && { wget -O - "http://bin.entware.net/x64-k3.2/installer/generic.sh" | sudo /bin/sh || return; }
	[[ ! -f "/opt/bin/stat" ]] && { sudo opkg install coreutils-stat || return; } # we need stat now
	export PATH=/opt/bin:$PATH
}

debianPackageCore()
{
	InPath "sudo" && return
	apt install sudo -y || return
}

debianPackageUpdate()
{
	hilight "Updating packages..."
	$sudo apt update -y || return
	$sudo apt dist-upgrade -y || return
	$sudo apt autoremove -y || return

	[[ -f /var/run/reboot-required ]] && doReboot

	return 0
}

debianUnminimizeDoc() # from /usr/local/sbin/unminimize
{
	local config="/etc/dpkg/dpkg.cfg.d/excludes" configTmp="/etc/dpkg/dpkg.cfg.d/excludes.dpkg-tmp" motd="/etc/update-motd.d/60-unminimize"

	[[ ! -f "$config" && ! -f "$configTmp" && ! -f "$motd" ]] && return
	[[ -f "$config" ]] && { $sudo mv "$config" "$configTmp" || return; }

	hilight "Restoring documentation..."
  $sudo apt-get update || return
  $sudo apt-get upgrade -y || return
  dpkg -S /usr/share/man/ |sed 's|, |\n|g;s|: [^:]*$||' | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return
  dpkg --verif y--verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return
  dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/locale/ {print $2}' | sed 's|/[^/]*$||' | sort |uniq | xargs dpkg -S | sed 's|, |\n|g;s|: [^:]*$||' | uniq | DEBIAN_FRONTEND=noninteractive xargs $sudo apt-get install --reinstall -y || return

  if $sudo dpkg --verify --verify-format rpm | awk '/..5......   \/usr\/share\/doc/ {exit 1}'; then
  	$sudo rm -f "$configTmp" "$motd" || return
  fi

  return 0
}

debianFixMan()
{
	[[ "$(dpkg-divert --truename /usr/bin/man)" != "/usr/bin/man.REAL" ]] && return

	$sudo rm -f "/usr/bin/man" || return
	$sudo dpkg-divert --quiet --remove --rename "/usr/bin/man" || return
}

#
# helper
#

IsChroot() { [[ $chroot ]]; }
IsContainer() { [[ $container ]]; }
IsDebian() { [[ "$platform" == "debian" ]]; }
IsMac() { [[ "$platform" == "mac" ]]; }
IsPi() { [[ "$ID" == "raspbian" ]]; }
IsUbuntu() { [[ "$ID" == "ubuntu" ]]; }
IsWin() { [[ "$platform" == "win" ]]; }
IsWsl2() { [[ "$(uname -r)" =~ .*-microsoft-standard$ ]]; }
IsQnap() { [[ "$platform_like" == "qnap" ]]; }

hilight() { printf "${GREEN}$1${RESET}\n"; }
InPath () { which "$1" &> /dev/null; }
IsMountedDrive() { [[ -d "$host/public" ]] || [[ "$host" =~ ^/mnt ]]; }
pause() { local response; read -n 1 -s -p "${*-Press any key when ready...}"; echo; }

UpdateInit() { updateDir="$1"; [[ -d "$updateDir" ]] && return; mkdir --parents "$updateDir"; }
UpdateNeeded() { [[ $force || ! -f "$updateDir/$1" || "$(GetDateStamp)" != "$(GetFileDateStamp "$updateDir/$1")" ]]; }
UpdateDone() { sudo touch "$updateDir/$1"; }

GetDateStamp() { ${G}date '+%Y%m%d'; }

GetFileDateStamp()
{ 
	stat |& grep "BusyBox" >& /dev/null && return # wait until better stat is installed
	${G}date '+%Y%m%d' -d "$(${G}stat --format="%y" "$1")"
}

run "$@"
