#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
Additional SSH commands.
	
	config HOST VALUE		return SSH configuration value for HOST
	connect HOST				connect to a host using SSH
	permission USER			fix SSH permissions for user"
}

init() { defaultCommand="connect"; }
argStart() { unset -v file force; }

#
# Config Command
#

configUsage()
{
	echot "Usage: $(ScriptName) config HOST VALUE
Return the SSH configuration value for HOST from the SSH configuration."
}

configArgStart() { host="" value=""; }
configArgs() { ScriptArgGet "host" -- "$@"; shift; ScriptArgGet "value" -- "$@"; shift; }
configCommand() { getConfig "$host" "$value"; }

#
# Connect Command
#

connectUsage()
{
	echot "Usage: $(ScriptName) connect HOST
Connect to a HOST using SSH.

	-a, --all							resolve host using all methods (DNS, MDNS)
	-c, --commands CMDS		bash commands to run
	-i, --interactive			start an interactive shell
	-m, --mosh						connecting using mosh
	-p, --password				supply password if needed
	-x, --x-forwarding  	connect with X forwarding
	-w, --wait						wait for SSH to become available"
}

connectArgStart() { unset -v all commandsArg interactive mosh password pseudoTerminal x wait; unset host; }

connectOpt() 
{
	case "$1" in
		-a|--all) all="--resolve-all";;
		-c|--commands) ScriptOptGet "commandsArg" "commands" "$@";;
		-i|--interactive) interactive="-i";;
		-m|--mosh) mosh="--mosh";;
		-p|--password) ScriptOptGet "password" "$@";;
		-t|--pseudo-terminal) pseudoTerminal="-t";;
		-x|--x-forwarding) x="--x-forwarding";;
		-w|--wait) wait="--wait";;
		*) return 1
	esac
}

connectArgs() 
{
	ScriptArgGet "host" -- "$@"; shift
	otherArgs=( "$@" "${otherArgs[@]}" ); (( shift+=$# )); true
}

connectCommand()
{	
	# SSH Agent
	if [[ "$USER" != "homebridge" ]]; then
		SshAgent check keys && { SshAgentStart --quiet --verbose --log || return; }
	fi

	# parse host, format USER@HOST:PORT
	local port user
	port="$(GetSshPort "$host")" 
	user="$(GetSshUser "$host")"
	host="$(GetSshHost "$host")"

	# connect to the IP unless the host is in ~/.ssh/config to use additional name resolution methods such as MDNS
	local hostOrig="$host" inSshConfig="yes" ip
	if ! IsInSshConfig "$host"; then
		ip="$(GetIpAddress $all --vm "$host")" || return
		host="$ip" inSshConfig="no"
	fi
	
	# get the port from configuration if none was specified so we can check if host is available
	[[ ! $port ]] && { port="$(getConfig "$host" "port")" || return; }

	# logging
	[[ $verbose ]] && PrintErr "inSshConfig=$inSshConfig host=%s hostOrig=$hostOrig port=$port user=%s\n" \
		"${ip:-$(getConfig "$host" "hostname")}" \
		"${user:-$(getConfig "$host" "user")}"

	# wait for SSH to become available if needed
	if [[ $wait ]]; then
		[[ ! $port ]] && { port="$(portCommand)" || return; }
		WaitForPort "$host" "$port" || return

	# the host is not available on the specified port
	elif [[ $port ]] && ! IsAvailablePort "$host" "$port"; then
		local desc="$hostOrig"; [[ $ip ]] && desc+=" ($ip)"
		EchoErr "ssh: $desc is not responding on port $port"
		return 1
	fi

	# arguments
	args=()
	[[ $user ]] && args+=("$user@$host") || args+="$host"
	[[ $port ]] && args+=(-p "$port")
	[[ ! $mosh ]] && args+=(-q) # supresses warnings

	if [[ $commandsArg ]]; then
		args+=(-- bash $interactive -c "\"$commandsArg\"" "${otherArgs[@]}")
	elif [[ $interactive && $otherArgs ]]; then
		args+=(-- bash -i "${otherArgs[@]}")
	else
		args+=("${otherArgs[@]}")
	fi

	set -- "${args[@]}"

	# WSL 1 does not support X sockets over ssh and requires localhost
	IsPlatform wsl1 && export DISPLAY="localhost:0"
	
	# get the SSH command
	local command
	if [[ $mosh ]]; then
		command="mosh"
	elif [[ ! $x ]]; then
		command="ssh $pseudoTerminal"
	elif IsPlatform mac,wsl2; then # WSL2 and macOS XQuartz requires trusted X11 forwarding (X programs are trusted to use all X features on the host)
		command="ssh -Y $pseudoTerminal"
	else # for everything else, use untrusted X Forwarding, where X programs are not trusted to use all X features on the host
		command="ssh -X $pseudoTerminal"
	fi

	[[ $verbose ]] && { EchoErr "$command $@"; }
	[[ $test ]] && return

	if [[ "$password" ]]; then
		command="spawn -noecho $command $@; expect \"password:\"; send \"DpqZ9qa3p6Z19G92\r\"; interact"
		expect -c "$command"
	else
		$command "$@"
	fi
}

#
# Permission Command
#

permissionArgStart() { user=""; }
permissionArgs() { ScriptArgGet "user" -- "$@"; shift; }

permissionCommand()
{
	sudoc bash -l <<-EOF
		find "$USERS/$user/.ssh" | ${G}xargs chown $user || exit
		find "$USERS/$user/.ssh" | sudo xargs chgrp "$user" || exit
		sudo chmod 700 "$USERS/$user/.ssh" || exit

		[[ -f "$USERS/$user/.ssh/config" ]] && sudo chmod 700 "$USERS/$user/.ssh/config" || exit
		[[ -f "$USERS/$user/.ssh/authorized_keys" ]] && sudo chmod 700 "$USERS/$user/.ssh/authorized_keys" || exit
		[[ -f "$USERS/$user/.ssh/id_rsa" ]] && sudo chmod 700 "$USERS/$user/.ssh/id_rsa" || exit
		[[ -f "$USERS/$user/.ssh/id_ed25519" ]] && sudo chmod 700 "$USERS/$user/.ssh/id_ed25519" || exit
	EOF
}

#
# helper
#

getConfig() { local host="$1" value="$2"; ssh -G "$host" | grep "^$value " | head -1 | cut -d" " -f2; }

ScriptRun "$@"
