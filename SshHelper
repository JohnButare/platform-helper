#!/usr/bin/env bash
. script.sh || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [COMMAND]...
SSH helper commands.
	
	connect HOST				connect to a HOST using SSH
	permission USER			fix SSH permissions for USER
	port HOST						return the SSH port to connect to a HOST"
}

init() { defaultCommand="connect"; }
argStart() { unset -v file force; }

#
# Connect Command
#

connectUsage()
{
	echot "Usage: $(ScriptName) connect HOST
Connect to a HOST using SSH.

	-c, --commands CMDS	bash commands to run
	-i, --interactive		start an interactive shell
	-m, --mosh					connecting using mosh
	-x, --x-forwarding  connect with X forwarding
	-w, --wait					wait for SSH to become available"
}

connectArgStart() { unset -v commandsArg interactive mosh pseudoTerminal x wait; unset host; }

connectOpt() 
{
	case "$1" in
		-c|--commands) ScriptOptGet "commandsArg" "commands" "$@";;
		-i|--interactive) interactive="-i";;
		-m|--mosh) mosh="true";;
		-t|--pseudo-terminal) pseudoTerminal="-t";;
		-x|--x-forwarding) x="true";;
		-w|--wait) wait="--wait";;
		*) return 1
	esac
}

connectArgs() 
{
	ScriptArgGet "host" -- "$@"; shift
	otherArgs=( "$@" "${otherArgs[@]}" ); (( shift+=$# )); true
}

connectCommand()
{	
	# SSH Agent
	SshAgentCheck || return

	# port - get a port specified in the host and remove it from the name, format USER@HOST:PORT
	local ip port user
	port="$(GetSshPort "$host")" 
	user="$(GetSshUser "$host")"
	host="$(GetSshHost "$host")"

	# identify port and IP if the host is not in ~/.ssh/config 	
	if ! IsInSshConfig "$host"; then

		# get the port from configuration if none was specified
		[[ ! $port ]] && { port="$(portCommand)" || return; }

		# resolve the host using DNS or mDNS
		ip="$(GetIpAddress --all "$host")" || { HostUnknown "$host"; return 1; } && host="$ip"
	fi

	# wait for SSH to become available if needed
	if [[ $wait ]]; then
		[[ ! $port ]] && { port="$(portCommand)" || return; }
		WaitForPort "$host" "$port" || return

	# the host is not available on the specified port
	elif [[ $port ]] && ! IsAvailablePort "$host" "$port"; then
		EchoErr "ssh: $host ($ip) is not responding on port $port"
		return 1
	fi

	# arguments
	args=()
	[[ $user ]] && args+=("$user@$host") || args+="$host"
	[[ $port ]] && args+=(-p "$port")
	[[ ! $mosh ]] && args+=(-q) # supresses warnings

	if [[ $commandsArg ]]; then
		args+=(-- bash $interactive -c "\"$commandsArg\"" "${otherArgs[@]}")
	elif [[ $interactive && $otherArgs ]]; then
		args+=(-- bash -i "${otherArgs[@]}")
	else
		args+=("${otherArgs[@]}")
	fi

	set -- "${args[@]}"

	# connect using ssh
	if [[ $mosh ]]; then
		mosh "$@"
	elif [[ ! $x ]]; then
		ssh $pseudoTerminal "$@"
	elif IsPlatform wsl1; then # WSL 1 does not support X sockets over ssh and requires localhost
		DISPLAY=localhost:0 ssh -X $pseudoTerminal "$@"
	elif IsPlatform mac,wsl2; then # WSL2 and macOS XQuartz requires trusted X11 forwarding (X programs are trusted to use all X features on the host)
		ssh -Y $pseudoTerminal "${args[@]}"
	else # for everything else, use untrusted X Forwarding, where X programs are not trusted to use all X features on the host
		ssh -X $pseudoTerminal "$@"
	fi
}

#
# Port Command
#

portArgStart() { host=""; }
portArgs() { ScriptArgGet "host" -- "$@"; shift; }

portCommand()
{
	# find the protocol in configuration in case it is not defined in ~/.ssh/config
	if [[ "$host" == "$(ConfigGet "fs")" ]]; then
		local protocol; protocol="$(ConfigGet "fsProtocol")" || return
		IsInteger "$protocol" && { echo "$protocol"; return; }
	fi

	# get th protocol from ~/.ssh/config
	ssh -G "$host" | grep "^port " | cut -d" " -f2
}

#
# Permission Command
#

permissionArgStart() { user=""; }
permissionArgs() { ScriptArgGet "user" -- "$@"; shift; }

permissionCommand()
{
	sudoc bash -l <<-EOF
		find "$USERS/$user/.ssh" | xargs chown $user || exit
		find "$USERS/$user/.ssh" | sudo xargs chgrp "$user" || exit
		sudo chmod 700 "$USERS/$user/.ssh" || exit

		[[ -f "$USERS/$user/.ssh/config" ]] && sudo chmod 700 "$USERS/$user/.ssh/config" || exit
		[[ -f "$USERS/$user/.ssh/authorized_keys" ]] && sudo chmod 700 "$USERS/$user/.ssh/authorized_keys" || exit
		[[ -f "$USERS/$user/.ssh/id_rsa" ]] && sudo chmod 700 "$USERS/$user/.ssh/id_rsa" || exit
		[[ -f "$USERS/$user/.ssh/id_ed25519" ]] && sudo chmod 700 "$USERS/$user/.ssh/id_ed25519" || exit
	EOF
}

#
# helper
#

ScriptRun "$@"
