#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" app script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [1|2|4](4) [COMMAND](cd)
  cd|MachineConfig|gac|gacCd|GacUtil|clr
  sNet|name|version|RuntimeVersion|FrameworkVersion|target <executable or assembly>
  register <assemblies> - register assemblies in the current directory, supports wildcards"
}

init()
{ 
	program="$(FindInPath "dotnet")"
	version="4"
	
	frameworkRootDir="$WINDIR/Microsoft.NET/Framework"
	frameworkDir="$WINDIR/Microsoft.NET/Framework/$version"
	frameworkFileVersion=( v4.0 3.5 3.0 2.0 1.1 1.0 )

	gacDir="$WINDIR/assembly"
	gacPhysicalDir="$WINDIR/assembly/gac"
	gacUtil="$frameworkRootDir/v1.1.4322/gacUtil.exe"

	installUtil="$frameworkDir/installUtil.exe"

	msBuild="$P32/MSBuild/14.0/bin/MSBuild.exe"
	[[ ! -f "$msBuild" ]] && msBuild="$P32/MSBuild/12.0/bin/MSBuild.exe"
	[[ ! -f "$msBuild" ]] && msBuild="$frameworkDir/msBuild.exe"

	return 0
}
 
cdCommand() { echo "$frameworkDir"; }
gacCommand() { start explorer "$gacDir"; }
gacCdCommand() { echo "$gacPhysicalDir"; }
gacUtilCommand() { "$gacUtil" /nologo "$@"; }
isInstalledCommand() { [[ -e "$program" ]]; }
versionCommand() { AppInstallCheck && AppVersion "$program"; }

buildCommand()
{ 
	export -n PLATFORM # msbuild uses PLATFORM variable
	start "$msBuild" "$@"
	result=$?
	export PLATFORM
	exit $result
}

machineConfigCommand()
{
	file="$frameworkDir/CONFIG/machine.config"
	[[ ! -f "$file" ]] && { ScriptErr "'machine configuration file $file' does not exist"; return 1; }
	elevate TextEdit "$file"
}

ScriptRun "$@"
