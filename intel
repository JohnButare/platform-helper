#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: intel [startup|close](cd)
  AddPrinter|update
  ControlCenter|RapidStorage|DesktopUtilities|SsdToolbox|tuning|SetProxy|FixVideo
  BigFi [start|stop|status|auto|enable|demand|disable](status)
  IsIntelHost [host]							  Determine if host is an Intel
  OnIntelNetwork									  Determine if connected to Intel network 
  isc 															Intel Security Checker
  iss [<product>|web]								Intel Software Supply
  service start|stop|auto|demand		Intel Services
  vpn [on|off|connect|disconnect|close|status|gui|hosts|cleanup](gui)
  -b, --brief 											brief status messages"
	exit $1
}

init() 
{
	command='cd'
	title='Cisco AnyConnect Secure Mobility Client'

	IntelApps=""
	IntelDomains="AMR"
	IntelNetworkApps="" # lync cctray
	IntelWigginNetworkApps=""
	NonIntelNetworkApps=""
	IntelHosts=""
	AdHosts=""

	ControlCenterProgram="$P32/Intel/Intel Control Center/IntelControlCenter.exe"
	RapidStorageProgram="$P32/Intel/Intel(R) Rapid Storage Technology/IAStorUI.exe"
	DesktopUtilitiesProgram="$P32/Intel/Intel Desktop Utilities/intelmain.exe"
	SsdToolboxProgram="$P32/Intel/Intel(R) Solid-State Drive Toolbox/Intel SSD Toolbox.exe"
	TuningProgram="$P32/Intel/Intel Ext#e Tuning/Client/PerfTune.exe"
	TuningProgram3="$P32/Intel/Ext#e Tuning Utility/Client/PerfTune.exe"

	# Connect - "AMR Folsom CA" (best speed Circuit/ease, Sharepoint in OR), " IntelNetwork" must have a leading space
	ConnectTo="AMR Folsom CA"

	# Intel connection using Cisco VPN from Hawthorn suites required 2000ms (was 300ms)
	NetworkCheckDelay=3000

	VpnGui="$P32/Cisco/Cisco AnyConnect Secure Mobility Client/vpnui.exe"
	VpnCli="$P32/Cisco/Cisco AnyConnect Secure Mobility Client/vpncli.exe"

	IntelSecuirtyChecker="$P32/BigFix Enterprise/Intel Security Checker/TriggerClientUI.exe"

	# Intel Software Supply - amr.corp.intel.com, was amr, fmsisslan02, rrsisslan02
	iss="//amr.corp.intel.com/iss/Olwnprod/WinOs/Apps"
	IssTest="//rrsisslan02/isstest/WinOs/Apps"
}

args()
{
	unset -v brief
	while [ "$1" != "" ]; do
		case "$1" in
			-b|--brief) brief="--brief";;
			-h|--help) usage 0;;
			AddPrinter) command="AddPrinter";; ControlCenter) command="ControlCenter";;
			IsIntelHost) command="IsIntelHost";; OnIntelNetwork) command="OnIntelNetwork";;
			SetProxy) command="SetProxy";; # case insensitive commands
			FixVideo) command="FixVideo";; # case insensitive commands
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(vpn|service|IsIntelHost) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

startupCommand()
{
	app $brief startup $IntelApps || return

	[[ $brief ]] && printf "." || printf "Checking for Wiggin network..."
	if network check Wiggin $NetworkCheckDelay; then
		[[ $brief ]] && printf "Intel..." || echo "present"
		app $brief startup $IntelWigginNetworkApps
	else
	  [[ ! $brief ]] && echo "not present"
		app $brief close $IntelWigginNetworkApps
	fi

	[[ $brief ]] && printf "." || printf "Checking for Intel network..."
	if network check Intel $NetworkCheckDelay; then
	  [[ $brief ]] && printf "Wiggin..." || echo "present"
		app $brief close $NonIntelNetworkApps
		app $brief startup $IntelNetworkApps
	else
	  [[ ! $brief ]] && echo "not present"
		app $brief close $IntelNetworkApps
		app $brief startup $NonIntelNetworkApps 
	fi

	network initialize
}

closeCommand()
{
	app $brief close $IntelApps
	app $brief close $IntelNetworkApps
	app $brief close $NonIntelNetworkApps 
}

OnIntelNetworkCommand() 
{ 
	local ip="$(GetPrimaryIpAddress)"; network="${ip%%.*}"
	(( network == 10 ))
	#intel IsIntelHost && HostUtil available -t 1000 10.14.32.2;
}

IsIntelHostCommand()
{
	[[ $# > 1 ]] && usage 1
	local domain host="${1-$HOSTNAME}"

	[[ "$host" == "$HOSTNAME" ]] && { [[ "$USERDOMAIN" == @($IntelDomains) ]]; return $?; }
	[[ "$host" == @(dfs|jjbutare-wvm2) ]] && return 0
	[[ "$(HostUtil info "$host" network)" == "Intel" ]]; return $?

	# USERDOMAIN is not set properly when connecting over ssh, so use net config
	#domain=$(ssh "$host" 'net config workstation | grep "^Workstation domain" | cut -c38-')
}

iscCommand() { start "$IntelSecuirtyChecker"; }

AddPrinterCommand()
{

echo "/
- Enter a Printer Address...
- Printer Address=10.14.32.211 (rrp53b4pbbs.rr.intel.com)
- Check Add this printer to my Printers and Faxes folder
- Name=rr5, Job Storage PINT to print=0000"

	rundll32.exe printui.dll,PrintUIEntry /p /n"HP Universal Printing PCL 5"
	start "$P32/Intel/AddaPrinter/AddaPrinter.exe"
}

BigFixCommand()
{
	pause "BigFix: not implemented"
	return 1

	# BigFix()
	# {

	# if $@ServiceExist[besclient] == 0 return 1

	# command=Status
	# if $# gt 0; then
	# 	command=$1
	# 	shift
	# fi
	# if not IsLabel BigFix$command goto usage

	# gosub BigFix$command
	# return $_?

	# :BigFixStart
	# :BigFixStatus
	# :BigFixStop
	# :BigFixAuto
	# :BigFixDemand
	# :BigFixDisable
	# service $command besclient
	# return
}

#
# Services
#

serviceCommand()
{ 
	echo "service: not implenented"
	return 1

	# # Only stop services if required to, ensure disconnected from all networks 
	# stop()
	# {
	# 	VirusScan service stop
	# 	intel BigFix stop
	# 	intel iss stop
	# } 

	# start()
	# {
	# VirusScan service start
	# intel BigFix start
	# intel iss start
	# return

	# auto()
	# {
	# VirusScan service auto
	# VirusScan hip on
	# intel BigFix auto
	# intel iss auto
	# return

	# :demand
	# VirusScan service demand
	# VirusScan hip off
	# intel BigFix demand
	# intel iss demand
	# return	
}

#
# ISS (Interl Software Supply)
#

issCommand()
{
	pause "iss: not implemented"
	return 1

	# 	iss()
	# {

	# dir=$iss
	# if "$1" == "test"; then
	# 	dir=$IssTest
	# 	shift
	# fi

	# if $# == 0; then 
	# 	cde "$dir"
	# 	endlocal /d
	# 	return 0
	# fi

	# command=$1
	# shift

	# if IsLabel Iss$command; then
	# 	gosub Iss$command
	# else
	# 	gosub IssProduct
	# fi

	# return $_?

	# IssProduct()
	# {

	# product=$command
	# dir=$dir/$product

	# if IsDir "$dir"; then
	#   cdd $dir
	# else
	#   echo ISS application $product does not exist.
	#   return 1
	# fi

	# EndLocal /d

	# return 0

	# IssWeb()
	# {
	# gosub BigFixStart
	# InternetExplorer http://iss.intel.com
	# return 0
}

#
# VPN
#

vpnCommand()
{
	command="Gui"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Vpn${s}Command && { command="$s"; shift; }
	[[ $# != 0 && "$command" != @(connect) ]] && usage
	Vpn${command}Command "$@"
}

VpnCloseCommand() { VpnDisconnectCommand; ProcessKill "$VpnUi"; }
VpnDisconnectCommand() { "$VpnCli" disconnect; }
VpnHostsCommand() { "$VpnCli" hosts; }
VpnStatusCommand() { "$VpnCli" status; }
VpnGuiCommand() { start "$VpnGui"; VpnCleanupCommand; }

VpnConnectCommand()
{
	local password

	[[ $# == 1 ]] && { password="${1}{ENTER}"; shift; }
	[[ $# != 0 ]] && usage 1

	# Key the connection information and  connect
	[[ $password ]] && ( sleep 5; SendKeys "$password{ENTER}" ) &
	console "$VpnCli" connect "$ConnectTo"
}

VpnCleanupCommand()
{
	# Delete Cisco AnyConnect VPN Agent for Windows - "C:/Program Files (x86)/Cisco/Cisco AnyConnect VPN Client/vpnui.exe" -autolaunched
	# Hold on cleanup - is this causing VPN reissues after wake?
	# registry 32 delete "HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Run/Cisco AnyConnect VPN Agent for Windows"
	return 0
}

VpnOnCommand()
{
	if ! network check Intel $NetworkCheckDelay; then
		VpnCloseCommand
		VpnConnectCommand

		# Wait for connect
		#network info Intel -> returns ip
		#HostUtil available $ip 500 wait 60
	fi
	startupCommand
}

VpnOffCommand()
{
	network check Intel $NetworkCheckDelay &&	VpnDisconnectCommand
	startupCommand
}

#
# Intel Applications
#

ControlCenterCommand() { start "$ControlCenterProgram"; }
RapidStorageCommand() { start "$RapidStorageProgram"; }
SsdToolboxCommand() { start "$SsdToolboxProgram"; }

DesktopUtilitiesCommand()
{
	# Start services - normally stopped to prevent audio stutter
	service start "Intel(R) Desktop Boards FSC Application Service"
	service start "IduService"

	start "$DesktopUtilitiesProgram"
	pause 

	# Start services - normally stopped to prevent audio stutter
	service stop "Intel(R) Desktop Boards FSC Application Service"
	service stop "IduService"
}

tuningCommand()
{
	service start XTUService

	start "$TuningProgram"
	pause

	service stop XTUService
}

updateCommand()
{
	intel OnIntelNetwork || return 0;
	
	if ask "Intel Security Checker?"; then
		service running BESclient || { service start BESclient; pause; }
		iscCommand || return
	fi

	return 0
}

SetProxyCommand()
{
	local port=911 proxy="proxy-chain.intel.com" # proxy.rr.intel.com

	if HostUtil available "$proxy"; then
		echo "export http_proxy=http://$proxy:$port; export https_proxy=http://$proxy:$port"
	else
		echo "export proxy=; http_proxy=; export https_proxy="
	fi
}

FixVideoCommand()
{
	devcon disable 'PCI\VEN_8086&DEV_191B&SUBSYS_80D5103C&REV_06' # Intel(R) HD Graphics 530
	devcon disable 'PCI\VEN_10DE&DEV_13B1&SUBSYS_80D5103C&REV_A2' # NVIDIA Quadro M1000M
	devcon enable 'PCI\VEN_10DE&DEV_13B1&SUBSYS_80D5103C&REV_A2' # NVIDIA Quadro M1000M

	ask 'Connect external video cable...' --delay 30
	devcon enable 'PCI\VEN_8086&DEV_191B&SUBSYS_80D5103C&REV_06' # Intel(R) HD Graphics 530
}

InstallCore()
{
	printf "**************************************************\n* Intel Core\n**************************************************\n" 
	IsIntelHost || return
	inst Syncplicity VisionApp OfficeFinal WindowsAdministrationTools || return
	InstallIcsDeveloper || return
	cleanup || return
}

InstallIcsDeveloper()
{
	printf "**************************************************\n* Intel Development Core\n**************************************************\n"

	ask "Install applications" && { i DevCore CruiseControlTray SilverlightSdk || return; }
	
	if ask "Install OPC applications"; then
		i MatrikonOpcSimulator GrayboxOpc OpcScout || return
		git clone https://github.com/titanium-as/TitaniumAS.Opc.Client "$CODE/TitaniumAS.Opc.Client"
	fi


	makeDir "$pp/Development/Ics" || return

	if ask "Install Intel Profile Manager"; then
		run "Intel/Profile Manager/ITBAS.zip" "$P/ITBAS" || return

		FindFile "Intel/Profile Manager/ProfileManager.xml" || return
		$cp	"$file" "$WINDIR/system32" || return
		chmod 744 "$WINDIR/system32/ProfileManager.xml" || return
		makeDir "$WINDIR/SysWOW64" || return 
		$cp "$file" "$WINDIR/SysWOW64" || return
		chmod 744 "$WINDIR/SysWOW64/ProfileManager.xml" || return
		$makeShortcut "$P/ITBAS/ProfileManager/ProfileManager.exe" "$pp/Development/Ics/Profile Manager" || return
	fi

	if ask "Install Antidote"; then
		run "Intel/Antidote/setup/Antidote.zip" "$P/Antidote" || return
	fi

	if ask "Update machine.config"; then
		clipw '<appSettings><add key="Environment" value="Development" /></appSettings>'
		echo "- After </configSections> paste the text in the clipboard"
		DotNetHelper 4 MachineConfig || return
		pause
	fi

	if ask "Clone shared projects"; then
		code clone Antidote Errgo Magellan ProfileManager CruiseControlPlugins IntelNuGet || return
	fi

	if ask "Configure Antidote"; then
		local a="$CODE/Antidote"

		chmod +x "$(utw "$CODE/Antidote/deployment/tools/other/nuget.exe")" || return

 		SqlServer service start || return
		antidote verbose App=Antidote BuildType=LocalBuild || return

		cp "$a/deployment/profiles/"*.profile "$P/ITBAS/Profiles" || return
		makeDir "$a/Intel.Antidote.Models.Fixtures/Output" || return

		MakeShortcut "$a/source/Gui/Wpf/AntidoteGui/bin/Debug/AntidoteGui.exe" "$pp/Development/Ics/Antidote" || return
		chmod +x "$a/deployment/tools/other/"* || return
	fi

	if ask "Configure Magellan"; then
		SqlServer service start || return
		antidote verbose App=Magellan BuildType=LocalBuild CacheBrokerAddress=@DatabaseServer@ || return

		cp "$CODE/Magellan/Profiles/"*.profile "$P/ITBAS/Profiles" || return

		chgrp Administrators "$CODE/Magellan/unversioned/SqlData" || return; chmod 777 "$CODE/Magellan/unversioned/SqlData"
	fi

	applications=( ScadaPortal )
	for app in "${applications[@]}"; do 
		if ask "Setup $app"; then

			code clone "$app" || return

			if [[ ! -d "$CODE/${app}Test" ]]; then
				echo "Copying repository to $CODE/${app}Test..."
				cp -rp "$CODE/$app" "$CODE/${app}Test" || return
			fi

			antidote verbose App=$app BuildType=LocalBuild || return
		fi
	done

	# SCADA Portal
	makeDir "$P/Scada/Web/Log"
}

cleanup()
{
	ask 'Cleanup icons' && { IntelIcons || return; }

	if ask 'Cleanup file system'; then

		$rmd "$_root/Intel/"* "$_root/Scripts" "$uhome/mcafee dlp quarantined files"
		$rm  "$_root/build.ini" "$_root/DFSInfo.txt" "$_root/wpm_log.txt"
		$hide "$_root/Intel"
		$hide "$_root/Quarantine"
		$hide "$uhome/.cisco"
		
		makeDir "$udata/McAfee/Quarantine" || return
		makeLink --merge --hide "$udata/McAfee/Quarantine" "$uhome/mcafee dlp quarantined files" || return
	fi

	if ask 'Cleanup startup programs'; then

		$registry 32 delete "run/AgentUiRunKey" # "C:\Program Files (x86)\Autonomy\Connected BackupPC\Agent.exe" -ni -sss -e http://localhost:16386/
		$registry 32 delete "run/McAfeeUpdaterUI"
		$registry 32 delete "run/ShStatEXE"
		$registry 32 delete "run/MNEBalloon" # "C:\Program Files (x86)\McAfee\Management of Native Encryption\toast32.exe"
		$registry 32 delete "run/SunJavaUpdateSched"
		$registry 32 delete "run/Cisco AnyConnect Secure Mobility Agent for Windows" # "C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpnui.exe" -autolaunched
		$registry 32 delete "run/IMSS" # "C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IMSS\PIconStartup.exe" "C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IMSS\PrivacyIconClient.exe" 60
		$registry 32 delete "run/IntelSMSystray" # C:\Program Files (x86)\IntelSM\IntelSMSystray\IntelSMSystemTray.exe
		$registry 32 delete "run/WAATService" # C:\windows\SysWOW64\waatservice.exe -install, http://www.file.net/process/waatservice.exe.html

		$registry delete "run/ErmTray" # "C:/Program Files/Intel/Security/ERM/Win64/ErmTray.exe"
		$registry delete "run/IntelErmOfficeConfig" # C:\Program Files\Intel\Enterprise Rights Management\IntelErmOfficeConfig.exe -gm2 -check
		$registry delete "run/ShadowPlay" # "C:\windows\system32\rundll32.exe" C:\windows\system32\nvspcap64.dll,ShadowPlayOnSystemStart
		$registry delete "run/Syncplicity" # "C:\Program Files\Syncplicity\Syncplicity.exe" silent
		$registry delete "run/McAfee Host Intrusion Prevention Tray" # C:/Program Files/McAfee/Host Intrusion Prevention/FireTray.exe
		$registry delete "run/EpeFprTrainer" # "C:\Program Files\McAfee\Endpoint Encryption\EpeFprTrainer.exe"
		$registry delete "run/MfeEpePcMonitor" # "C:\Program Files\McAfee\Endpoint Encryption\EpePcMonitor.exe"
		$registry delete "run/SysTrayApp" # C:\Program Files\IDT\WDM\sttray64.exe
		$registry delete "urun/test"

		$rm "$up/Startup/Send to OneNote.lnk" || return

	fi
}

CleanupIcons()
{
	printf "Updating Intel icons..."
	! intel IsIntelHost && return 0

	ChromeIcons || return
	FoxitReaderIcons || return
	nVidiaIcons || return
	JavaIcons || return

	local d="$oo/Intel"
	makeDir "$d" || return
	mergeDir --rename "$pp/Intel" "$d" || return
	mergeDir --rename "$up/Intel" "$d" || return

	# AnyConnect
	mergeDir "$up/Cisco" "$oo" || return
	mergeDir "$pp/Cisco" "$oo" || return
	$mv "$pd/AnyConnect User Guide 3_1.lnk" "$oo/Cisco/Cisco AnyConnect Secure Mobility Client" || return
	$mv "$pd/AnyConnect_Health_Check_Tool.lnk" "$oo/Cisco/Cisco AnyConnect Secure Mobility Client" || return
	$rm "$pd/AnyConnect"*.lnk || return

	# Application Migration
	$mv "$pp/Application Migration.lnk" "$oo/Intel" || return
	$rm "$pd/Application Migration.lnk" || return

	# IBM BigFix
	$mv "$up/IBM BigFix.lnk" "$pp/Operating System" || return

	# Intel Graphics
	$mv "$pp/Intel(R) HD Graphics Control Panel.lnk" "$pp/Operating System" || return
	$rm "$pd/Intel(R) HD Graphics Control Panel.lnk" || return

	# Intel Software Market
	$mv "$pp/Intel Software Market.lnk" "$oo/Intel" || return
	$rm "$pd/Intel Software Market.lnk" || return

	# Intel WiFi
	mergeDir "$pp/Intel PROSet Wireless" "$oo/Intel" || return
	$rm "$pd/IT Wireless Utilities.lnk" || return
	$rm "$pd/WiFi Health Advisor.lnk" || return
	$rm "$ud/WiFi Health Advisor.lnk" || return

	# Intel other
	mergeDir "$pp/Thunderbolt(TM) Software" "$oo/Intel" || return
	$mv "$pd/Intel Unite"*".lnk" "$pp/Operating SystemOther" || return
	$mv "$pd/Intel AddaPrinter.lnk" "$oo/Intel" || return
	$mv "$psm/Intel Security Checker.lnk" "$oo/Intel" || return
	$rm "$pd/Intel Security Checker.lnk" || return

	# McAfee
	mergeDir "$pp/McAfee" "$oo" || return
	mergeDir "$up/Pledge" "$oo/McAfee" || return
	$mv "$up/McAfee Management of Native Encryption.lnk" "$oo/McAfee" || return
	$mv "$up/McAfee VirusScan Scan Messages.lnk" "$oo/McAfee" || return

	# Virtual Assistance Center
	mergeDir "$pp/Virtual Assistance Center" "$oo/Intel" || return
	mergeDir "$up/Virtual Assistance Center" "$oo/Intel" || return
	$rm "$ud/IT Virtual Assistance Center.lnk" || return

	# Wellnomics WorkPace
	mergeDir "$pp/Wellnomics WorkPace" "$pp/Applications/Other/Intel" || return
	$rm "$pd/Wellnomics WorkPace 5.0.4.lnk" || return	

	# other
	mergeDir "$pp/Fixlet Debugger" "$oo" || return
	mergeDir "$pp/Microsoft System Center" "$oo" || return
	mergeDir "$pp/Syncplicity" "$oo" || return

	# device
	mergeDir "$pp/Music, Photos and Videos" "$pp/Applications/Other/Intel" || return
	
	echo "done"
	return
}

run "$@"
