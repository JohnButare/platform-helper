#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: intel [startup|close](cd)
  AddPrinter|update
  ControlCenter|RapidStorage|DesktopUtilities|SsdToolbox|tuning|SetProxy
  BigFix [start|stop|status|auto|enable|demand|disable](status)
  IsIntelHost [host]							  Determine if host is an Intel 
  isc 															Intel Security Checker
  iss [<product>|web]								Intel Software Supply
  service start|stop|auto|demand		Intel Services
  vpn [on|off|connect|disconnect|close|status|gui|hosts|cleanup](gui)
  -b, --brief 											brief status messages"
	exit $1
}

init() 
{
	command='cd'
	title='Cisco AnyConnect Secure Mobility Client'

	IntelApps=""
	IntelDomains="AMR"
	IntelNetworkApps="" # lync CruiseControlTray
	IntelWigginNetworkApps=""
	NonIntelNetworkApps=""
	IntelHosts=""
	AdHosts=""

	ControlCenterProgram="$P32/Intel/Intel Control Center/IntelControlCenter.exe"
	RapidStorageProgram="$P32/Intel/Intel(R) Rapid Storage Technology/IAStorUI.exe"
	DesktopUtilitiesProgram="$P32/Intel/Intel Desktop Utilities/intelmain.exe"
	SsdToolboxProgram="$P32/Intel/Intel(R) Solid-State Drive Toolbox/Intel SSD Toolbox.exe"
	TuningProgram="$P32/Intel/Intel Ext#e Tuning/Client/PerfTune.exe"
	TuningProgram3="$P32/Intel/Ext#e Tuning Utility/Client/PerfTune.exe"

	# Connect - "AMR Folsom CA" (best speed Circuit/ease, Sharepoint in OR), " IntelNetwork" must have a leading space
	ConnectTo="AMR Folsom CA"

	# Intel connection using Cisco VPN from Hawthorn suites required 2000ms (was 300ms)
	NetworkCheckDelay=3000

	VpnGui="$P32/Cisco/Cisco AnyConnect Secure Mobility Client/vpnui.exe"
	VpnCli="$P32/Cisco/Cisco AnyConnect Secure Mobility Client/vpncli.exe"

	IntelSecuirtyChecker="$P32/BigFix Enterprise/Intel Security Checker/TriggerClientUI.exe"

	# Intel Software Supply - amr.corp.intel.com, was amr, fmsisslan02, rrsisslan02
	iss="//amr.corp.intel.com/iss/Olwnprod/WinOs/Apps"
	IssTest="//rrsisslan02/isstest/WinOs/Apps"
}

args()
{
	unset -v brief
	while [ "$1" != "" ]; do
		case "$1" in
			-b|--brief) brief="--brief";;
			-h|--help) usage 0;;
			AddPrinter) command="AddPrinter";; ControlCenter) command="ControlCenter";; IsIntelHost) command="IsIntelHost";; SetProxy) command="SetProxy";; # case insensitive commands
			*) 
				IsFunction "${1,,}Command" && { command="${1,,}"; shift; continue; }
				[[ "$command" == @(vpn|service|IsIntelHost) ]] && break
				UnknownOption "$1"
		esac
		shift
	done
	args=( "$@" )
}

run() {	init; args "$@"; ${command}Command "${args[@]}"; }

startupCommand()
{
	app $brief startup $IntelApps || return

	[[ $brief ]] && printf "." || printf "Checking for Wiggin network..."
	if network check Wiggin $NetworkCheckDelay; then
		[[ $brief ]] && printf "Intel..." || echo "present"
		app $brief startup $IntelWigginNetworkApps
	else
	  [[ ! $brief ]] && echo "not present"
		app $brief close $IntelWigginNetworkApps
	fi

	[[ $brief ]] && printf "." || printf "Checking for Intel network..."
	if network check Intel $NetworkCheckDelay; then
	  [[ $brief ]] && printf "Wiggin..." || echo "present"
		app $brief close $NonIntelNetworkApps
		app $brief startup $IntelNetworkApps		
	else
	  [[ ! $brief ]] && echo "not present"
		app $brief close $IntelNetworkApps
		app $brief startup $NonIntelNetworkApps 
	fi

	network initialize
}

closeCommand()
{
	app $brief close $IntelApps
	app $brief close $IntelNetworkApps
	app $brief close $NonIntelNetworkApps 
}

IsIntelHostCommand()
{
	[[ $# > 1 ]] && usage 1
	local domain host="${1-$COMPUTERNAME}"

	[[ "$host" == "$COMPUTERNAME" ]] && { [[ "$USERDOMAIN" == @($IntelDomains) ]]; return $?; }
	[[ "$host" == @(dfs) ]] && return 0
	[[ "$(HostUtil info "$host" network)" == "Intel" ]]; return $?

	# USERDOMAIN is not set properly when connecting over ssh, so use net config
	#domain=$(ssh "$host" 'net config workstation | grep "^Workstation domain" | cut -c38-')
}

iscCommand() { start "$IntelSecuirtyChecker"; }

AddPrinterCommand()
{

echo "/
- Enter a Printer Address...
- Printer Address=10.14.32.211 (rrp53b4pbbs.rr.intel.com)
- Check Add this printer to my Printers and Faxes folder
- Name=rr5, Job Storage PINT to print=0000"

	rundll32.exe printui.dll,PrintUIEntry /p /n"HP Universal Printing PCL 5"
	start "$P32/Intel/AddaPrinter/AddaPrinter.exe"
}

BigFixCommand()
{
	pause "BigFix: not implemented"
	return 1

	# BigFix()
	# {

	# if $@ServiceExist[besclient] == 0 return 1

	# command=Status
	# if $# gt 0; then
	# 	command=$1
	# 	shift
	# fi
	# if not IsLabel BigFix$command goto usage

	# gosub BigFix$command
	# return $_?

	# :BigFixStart
	# :BigFixStatus
	# :BigFixStop
	# :BigFixAuto
	# :BigFixDemand
	# :BigFixDisable
	# service $command besclient
	# return
}

#
# Services
#

serviceCommand()
{ 
	echo "service: not implenented"
	return 1

	# # Only stop services if required to, ensure disconnected from all networks 
	# stop()
	# {
	# 	VirusScan service stop
	# 	intel BigFix stop
	# 	intel iss stop
	# } 

	# start()
	# {
	# VirusScan service start
	# intel BigFix start
	# intel iss start
	# return

	# auto()
	# {
	# VirusScan service auto
	# VirusScan hip on
	# intel BigFix auto
	# intel iss auto
	# return

	# :demand
	# VirusScan service demand
	# VirusScan hip off
	# intel BigFix demand
	# intel iss demand
	# return	
}

#
# ISS (Interl Software Supply)
#

issCommand()
{
	pause "iss: not implemented"
	return 1

	# 	iss()
	# {

	# dir=$iss
	# if "$1" == "test"; then
	# 	dir=$IssTest
	# 	shift
	# fi

	# if $# == 0; then 
	# 	cde "$dir"
	# 	endlocal /d
	# 	return 0
	# fi

	# command=$1
	# shift

	# if IsLabel Iss$command; then
	# 	gosub Iss$command
	# else
	# 	gosub IssProduct
	# fi

	# return $_?

	# IssProduct()
	# {

	# product=$command
	# dir=$dir/$product

	# if IsDir "$dir"; then
	#   cdd $dir
	# else
	#   echo ISS application $product does not exist.
	#   return 1
	# fi

	# EndLocal /d

	# return 0

	# IssWeb()
	# {
	# gosub BigFixStart
	# InternetExplorer http://iss.intel.com
	# return 0
}

#
# VPN
#

vpnCommand()
{
	command="Gui"
	[[ $# > 0 ]] && ProperCase "$1" s; IsFunction Vpn${s}Command && { command="$s"; shift; }
	[[ $# != 0 && "$command" != @(connect) ]] && usage
	Vpn${command}Command "$@"
}

VpnCloseCommand() { VpnDisconnectCommand; ProcessKill "$VpnUi"; }
VpnDisconnectCommand() { "$VpnCli" disconnect; }
VpnHostsCommand() { "$VpnCli" hosts; }
VpnStatusCommand() { "$VpnCli" status; }
VpnGuiCommand() { start "$VpnGui"; VpnCleanupCommand; }

VpnConnectCommand()
{
	local password

	[[ $# == 1 ]] && { password="${1}{ENTER}"; shift; }
	[[ $# != 0 ]] && usage 1

	# Key the connection information and  connect
	[[ $password ]] && ( sleep 5; SendKeys "$password{ENTER}" ) &
	console "$VpnCli" connect "$ConnectTo"
}

VpnCleanupCommand()
{
	# Delete Cisco AnyConnect VPN Agent for Windows - "C:/Program Files (x86)/Cisco/Cisco AnyConnect VPN Client/vpnui.exe" -autolaunched
	# Hold on cleanup - is this causing VPN reissues after wake?
	# registry 32 delete "HKLM/SOFTWARE/Microsoft/Windows/CurrentVersion/Run/Cisco AnyConnect VPN Agent for Windows"
	return 0
}

VpnOnCommand()
{
	if ! network check Intel $NetworkCheckDelay; then
		VpnCloseCommand
		VpnConnectCommand

		# Wait for connect
		#network info Intel -> returns ip
		#HostUtil available $ip 500 wait 60
	fi
	startupCommand
}

VpnOffCommand()
{
	network check Intel $NetworkCheckDelay &&	VpnDisconnectCommand
	startupCommand
}

#
# Intel Applications
#

ControlCenterCommand() { start "$ControlCenterProgram"; }
RapidStorageCommand() { start "$RapidStorageProgram"; }
SsdToolboxCommand() { start "$SsdToolboxProgram"; }

DesktopUtilitiesCommand()
{
	# Start services - normally stopped to prevent audio stutter
	service start "Intel(R) Desktop Boards FSC Application Service"
	service start "IduService"

	start "$DesktopUtilitiesProgram"
	pause 

	# Start services - normally stopped to prevent audio stutter
	service stop "Intel(R) Desktop Boards FSC Application Service"
	service stop "IduService"
}

tuningCommand()
{
	service start XTUService

	start "$TuningProgram"
	pause

	service stop XTUService
}

updateCommand()
{
	if ask "Intel Security Checker?"; then
		service running BESclient || { service start BESclient; pause; }
		iscCommand
	fi
}

SetProxyCommand()
{
	local proxy="proxy-chain.intel.com" # proxy.rr.intel.com
	if HostUtil available "$proxy"; then
		echo "export http_proxy=http://$proxy:911; export https_proxy=http://$proxy:911"
	else
		echo "export http_proxy=; export https_proxy="
	fi
}
run "$@"
