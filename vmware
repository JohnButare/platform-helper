#!/usr/bin/env bash
. app.sh || exit

usage() 
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... [close|dhcp|IsInstalled|IsRunning|program|restart|run|start|startup|SuspendAll](start)
$(ScriptName) commands."
}

init()
{
	defaultCommand="start"
	command="start"
	program="$P32/VMware/VMware Workstation/vmware.exe"
	vmrun="$P32/VMware/VMware Workstation/vmrun.exe"
}

closeCommand() { suspendAllCommand || return; ! isRunningCommand && return 0; ProcessClose "$program"; } 
isInstalledCommand() { [[ -e "$program" ]]; }
isRunningCommand() { IsProcessRunning "$program"; }
profileUsage() { echot "Usage: $(ScriptName) profile dir|SaveDir|save|restore [<profile name>|default](latest)\n$(ScriptName) configuration."; }
profileArgs() { profileArgs=( "$@" ); (( shift+=$# )); return 0; }
profileCommand() { profile $noPrompt --app "$profileName" --method "$profileDir" --files "$profileMask" "${profileArgs[@]}"; }
programCommand() { echo "$program"; }
restartCommand() { closeCommand && startCommand; }
startArgs() { startArgs=( "$@" ); shift="$#"; }
startCommand() { AppInstallCheck && start $wait "$program" "${startArgs[@]}"; }
startupCommand() { AppInstallCheck || return; isRunningCommand && return; start --window-style minimized "$program" "${startArgs[@]}"; }

suspendAllCommand()
{
	getRunning || return
	[[ ${#running[@]} == 0 ]] && return

	printf "Suspending "
	for vm in "${running[@]}"; do
		printf "$(GetFileNameWithoutExtension "$(wtu "$vm")")..."
		"$vmrun" suspend "$vm"
	done	
	echo "done"
}

#
# DHCP Commands
#

dhcpUsage()
{
	echot "Usage: $(ScriptName) dhcp edit|restart
DHCP commands."
}

dhcpCommand() { usage; }

dhcpRestartCommand() { service restart "VMnetDHCP"; }

dhcpEditCommand()
{
	TextEdit "$ALLUSERSPROFILE\Application Data\VMware\vmnetdhcp.conf" || return
	pause "Press any key to restart the VMware DHCP service..."
	DhcpRestartCommand || return
}

#
# Run Command
#

runUsage()
{
	echot "Usage: $(ScriptName) run [COMMAND]...
Run a vmrun command.

	-n,	--name=NAME		name of the Virtual Machine"
}

runArgStart() { unset -v name; }

runOpt() 
{
	case "$1" in
		-n*|--name=*|--name) ScriptOptGet name "$@" || return;;
		*) return 1
	esac
}

runArgs() { runArgs=( "$@" ); shift="$#"; }

runCommand()
{	
	local vm

	[[ ! -f "$vmrun" ]] && { EchoErr "vmrun is not installed"; return 1; }

	[[ $name ]] && { findVm || return; vm="$(utw "$vm")"; }
	"$vmrun" "$name" "$vm" "${runArgs[@]}"
}

#
# helper
#

findVm()
{
	local suffix="$name/$name.vmx"	
	[[ -f "$UDATA/VMware/$suffix" ]] && { vm="$UDATA/VMware/$suffix"; return; }

	local drive drives; IFS=$'\n' ArrayMakeC drives drive mounts || return
	for drive in "${drives[@]}"; do
		[[ -f "$drive/VMware/$suffix" ]] && { vm="$drive/VMware/$suffix"; return; }
		[[ -f "$drive/data/VMware/$suffix" ]] && { vm="$drive/data/VMware/$suffix"; return; }
	done

	EchoErr "Unable to find a virtual machine named $name"
	return 1
}

getRunning() { running=( $("$vmrun" list | ${G}tail --lines=+2 | sed 's/\r//') ); }

ScriptRun "$@"
