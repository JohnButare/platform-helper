#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... ZIP [DESTINATION]($P) -- ZIP_OPTIONS
Install an application from a ZIP file.

	-e, --elevate				in Windows install the application with an elevated (Administrator) token
	-np, --no-prompt		do not prompt for input"
}

init() { defaultCommand="install"; }

opt()
{
	case "$1" in
		-e|--elevate) elevate="--elevate";;
		*) return 1;;
	esac
}

args()
{
	ScriptArgGet "zip" -- "$@" || return; shift
	(( ! $# )) && return; ScriptArgGet "dest" -- "$@"
}

argEnd() { setDest && setSudo; }

setDest()
{
	# remove trailing slash
	dest="$(RemoveTrailingSlash "$dest")"

	# if a destination is not specified use the program directpry ($P)
	[[ ! $dest ]] && dest="$P"

	# if an absolute path is not specified, prepend the program directory ($P)
	[[ $dest && ! "$dest" =~ ^/ ]] && dest="$P/$dest"

	# save the original destination, in case we do not want to append the zip filename (in installMacApp)
	destOrig="$dest"

	# if the destination is just the program directory ($P), append the zip filename
	[[ "$dest" == @(|$(RemoveTrailingSlash "$P")) ]] && dest="$P/$(GetFileNameWithoutExtension "$zip")"

	log2 "dest=$dest destOrig=$destOrig"
}

# setSudo - use sudoc - except for windows drives to prevent a possible credential prompt in a hidden elevated window
setSudo()
{
	sudo="sudoc"; IsPlatform win && drive IsWin "$(GetFilePath "$dest")" && unset sudo 
	return 0; 
}

#
# install
#

installCommand() { RunPlatform install; }

installLinux()
{
	# firefox
	if [[ "$dest" =~ /firefox$ ]]; then
		checkExists "$dest" && extract "$zip" "$(DirEnsure "$dest" | GetParentDir)"; return
	fi

	# other
	checkExists "$dest" && runCommon; 
}

installMac()
{
	local extractDir; extractDir="$(gmktemp -d)" || return

	# get the top level directory in the zip file
	local zipDir="$(zipinfo -1 "$zip" | head -1)" # ignore errors
	[[ ! $zipDir ]] && { ScriptErr "unable to determine the top level directory in '$(GetFileName "$zip")'"; return 1; }
	log2 "zipDir=$zipDir extractDir=$extractDir"

	# install - depends on the format of the zip directory
	if [[ ! "$zipDir" =~ ^.*app/$ ]]; then installMacStandard
	elif [[ "${zipDir,,}" =~ install ]]; then installMacInstaller
	else installMacApp
	fi

	# cleanup and return
	local result="$?"; sudoc rm -fr "$extractDir"; return "$result" # sudoc for 1Password setup on Mac
}

installMacApp()
{
	local appDir="$destOrig/$zipDir"
	checkExists "$appDir" || return
	installMacAppRestore || return

	sudo mv "$extractDir/$zipDir" "$destOrig" || return

	# set permissions
	local user group
	if [[ "$dest" == "$P" ]]; then user="root" group="wheel"
	elif [[ "$dest" == "$PUSER" ]]; then user="$USER" group="staff"
	else return 0
	fi
	
	RunLog sudo gchown "$user" -R "$appDir" && RunLog sudo gchgrp "$group" -R "$appDir" && RunLog sudo xattr -c -r "$appDir"
}

installMacInstaller()
{
	installMacAppRestore || return
	start "$extractDir/$zipDir" || return
	pause "When the installation has finished press any key..."
}

installMacAppRestore() { echo "Restoring $(GetFileName "$zip")..."; RunLog $sudo ditto -kx "$zip" "$extractDir"; } # use ditto to unzip, unzip corrupts some applications (seen with Sublime Merge)

installMacStandard() { checkExists "$dest" && runCommon; }

installWin()
{
	if [[ "$elevate" ]] && ! IsElevated; then
		cleanPrompt "$dest" || return
		RunScript --elevate "${globalArgs[@]}" -- InstallAppFromZip "${globalArgs[@]}" --no-prompt "$zip" "$dest" || return
	else
		checkExists "$dest" && runCommon
	fi
}

#
# helper
#

checkExists() { cleanPrompt "$@" && clean "$@"; }

clean()
{
	local dir="$1"; [[ ! -d "$dir" ]] && return

	# ensure the full path to the program is specified
 	[[ "$(RemoveTrailingSlash "$dir")" == @($P|) ]] && { ScriptErr "cannot install to '$P' directly"; return 1; }

	# clean
	printf "cleaning..."
	$sudo ${G}rm -fr "$dir" || return
	echo "done"
}

cleanPrompt()
{
	local dir="$1"; [[ $noPrompt || ! -d "$dir" ]] && return
	ask "Do you want to delete the existing installation in '$dir'" -dr n
}

runCommon()
{	
	$sudo ${G}mkdir --parents "$dest" || return

	# determine if the archive contains a single driectory assume it is the destination directory
	local dirs=()

	if [[ "$zip" =~ .zip$ ]]; then
		dirs=( $(zipinfo -1 "$zip" | cut -d"/" -f1 | sort | uniq) )
	elif [[ "$zip" =~ [.](tar[.]bz2|tar[.]gz)$ ]]; then
		dirs=( $(tar --list --auto-compress --file="$zip" | cut -d"/" -f1 | sort | uniq) )
	fi	

	extract "$zip" "$dest" || return

	if (( ${#dirs[@]} == 1 )); then
		local dir="${dirs[0]}"
		$sudo mv "$dest/$dir/"* "$dest" || return
		$sudo rmdir "$dest/$dir" || return
	fi

	return 0
}

# extract ZIP DEST
extract()
{
	local zip="$1" dest="$2"

	[[ $verbose ]] && hilight "Installing '$(GetFileName "$zip")'' to '$dest'..." || hilight "Installing..."

	# Windows drive - use 7z.exe
	if drive IsWin "$dest"; then
		UnzipPlatform "$zip" "$dest"

	# tar extract
	elif [[ "$zip" =~ [.](bz2|gz|tar)$ ]]; then
		$sudo tar --extract --verbose --auto-compress --file="$zip" -C "$dest"

	# zip extract
	else
		$sudo unzip -o "$zip" -d "$dest"
	fi
}

ScriptRun "$@"
