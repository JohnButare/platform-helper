#!/usr/bin/env bash
. script.sh

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [OPTION]... ZIP [DESTINATION]($P) -- ZIP_OPTIONS
Install an application from a ZIP file.

	-e, --elevate				in Windows install the application with an elevated (Administrator) token
	-np, --no-prompt		do not prompt for input"
}

init() { defaultCommand="install"; }

opt()
{
	case "$1" in
		-e|--elevate) elevate="--elevate";;
		*) return 1;;
	esac
}

args()
{
	ScriptArgGet "zip" -- "$@"; shift
	ScriptArgGet "dest" -- "$@"; shift
}

argEnd() { [[ ! "$dest" =~ ^/ ]] && dest="$P/$dest"; return 0; }

#
# install
#

installCommand() { RunPlatform install; }

installLinux()
{
	# firefox
	if [[ "$dest" =~ /firefox$ ]]; then
		checkExists "$dest" && extract "$zip" "$(EnsureDir "$dest" | GetParentDir)"; return
	fi

	# other
	checkExists "$dest" && runCommon; 
}

installMac()
{
	# .app directories
	local dir="$(zipinfo -1 "$zip" | head -1)"
	if [[ "$dir" =~ ^.*app/$ ]]; then
		checkExists "$dest/$dir" || return
		sudoc unzip "$zip" -d "$dest" || return
		sudoc gchown root -R "$dest/$dir" || return
		sudoc gchgrp wheel -R "$dest/$dir" || return
		return
	fi

	# other
	checkExists "$dest" && runCommon
}

installWin()
{
	checkExists "$dest" || return
	
	if [[ "$elevate" ]] && ! IsElevated; then
		RunScript --elevate "${globalArgs[@]}" -- InstallAppFromZip "${globalArgs[@]}" --no-prompt "$zip" "$dest" || return
	else
		runCommon || return
	fi
}

#
# helper
#

checkExists()
{
	local dir="$1"

	# return if the directory does not exist
	[[ ! -d "$dir" ]] && return

	# ensure the full path to the program is specified
	[[ "$(RemoveTrailingSlash "$dir")" == "$P" ]] && { ScriptErr "cannot install to '$P' directly"; return 1; }
		
	# prompt to delete an existing installation
	[[ ! $noPrompt ]] && { ask "Do you want to delete the existing installation in \"$dir\"" -dr n || return; }

	printf "cleaning..."
	if IsPlatform win && drive IsWin "$dir" && ! IsElevated; then
		RunScript --elevate "${globalArgs[@]}" -- rm -fr "\"$dir\"" || return
	else
		sudoc ${G}rm -fr "$dir" || return
	fi
	echo "done"

	return 0
}

runCommon()
{
	sudoc ${G}mkdir --parents "$dest" || return

	# determine if the archive contains a single driectory assume it is the destination directory
	local dirs=()

	if [[ "$zip" =~ .zip$ ]]; then
		dirs=( $(zipinfo -1 "$zip" | cut -d"/" -f1 | sort | uniq) )
	elif [[ "$zip" =~ [.](tar[.]bz2|tar[.]gz)$ ]]; then
		dirs=( $(tar --list --auto-compress --file="$zip" | cut -d"/" -f1 | sort | uniq) )
	fi	

	extract "$zip" "$dest" || return

	if (( ${#dirs[@]} == 1 )); then
		local dir="${dirs[0]}"
		sudoc mv "$dest/$dir/"* "$dest" || return
		sudoc rmdir "$dest/$dir" || return
	fi

	return 0
}

# extract ZIP DEST
extract()
{
	local zip="$1" dest="$2"

	[[ $verbose ]] && hilight "Installing '$(GetFileName "$zip")'' to '$dest'..." || hilight "Installing..."

	# use 7z.exe to unzip on Windows drives
	if drive IsWin "$dest"; then
		UnzipPlatform "$zip" "$dest" --sudo

	elif [[ "$zip" =~ [.](bz2|gz|tar)$ ]]; then
		sudoc tar --extract --verbose --auto-compress --file="$zip" -C "$dest"

	else
		sudoc unzip -o "$zip" -d "$dest"
	fi
}

ScriptRun "$@"
