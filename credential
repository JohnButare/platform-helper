#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: credential [ -q ]
	check 													check if we can use credential management
	get attribute value 						get the password specified by attribute and value
	set attribute value password 		set the password specified by attribute and value to password
"
	exit 1
}

args()
{
	unset command attribute value password prefix quiet

	[[ "$1" == "-q" ]] && { quiet="true"; shift; }

	{ [[ $# == 0 ]] || ! IsFunction ${1}Command; } && usage

	case "$command" in
		get) [[ $# != 3 ]] && usage;;
		set) [[ $# != 4 ]] && usage;;
	esac

	command="$1" attribute="$2" value="$3" password="$4"
}

run() {	args "$@"; checkCommand || return; "${command}Command"; }

noCredentialManager()
{
	[[ ! "$quiet" ]] && EchoErr "A credential manager is not available"
	exit 1
}

checkCommand()
{
	local remoteServer

	_platform="$PLATFORM"
	_platformLike="$PLATFORM_LIKE"
	_platformId="$PLATFORM_ID"

	case "$_platform" in
		linux) [[ "$DISPLAY" ]] && which secret-tool >& /dev/null && return;;
		win) which wincred >& /dev/null && return;;
	esac

	if IsSsh && SshAgent check; then
		remoteServer="$(RemoteServer)" ; [[ "$remoteServer" ]] || return
		ScriptEval HostFindInfo "$remoteServer" || return
		prefix="ssh $remoteServer"
		[[ "$_platform" == "win" ]] && noCredentialManager
		return 0
	fi

	noCredentialManager
}

getCommand()
{	
	case "$_platform" in
		linux) $prefix secret-tool lookup "$attribute" "$value";;
		win) $prefix wincred get "$attribute-$value";;
	esac
}

setCommand()
{
	case "$_platform" in
		linux) echo "$password" | $prefix secret-tool store --label "credential for $attribute $value" "$attribute" "$value";;
		win) $prefix wincred set "$attribute-$value" "$USER" "$password";;
	esac
}

run "$@"