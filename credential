#!/usr/bin/env bash
. script.sh || exit

run() {	init && args "$@" && findManager && initManager && "${command}Command"; }

init()
{
	vaultDefaultEngine="secret"

	pathUsage="\
	path		a grouping of credential key/value pairs.   
					For vault the path prefix defaults to \`$vaultDefaultEngine\`."
}

usage()
{
	ScriptUsage "$1" "\
Usage: credential
Interact with a credential store.

Common commands:
	get[s]	get a credential
	set			set a credential

Other commands:
	check		check if a credential manager is installed
	delete  delete a credential
	exists 	check if a credential exists
	list 		list credentials
	manager	show the the GUI manager
	status	show the credential manager status
	type		show the type of the credential manager in use		

Options:
	-e, --engine=ENGINE 	specify the secret engine, defaults to $vaultDefaultEngine (Vault)
	-x, --exclude-managers=MANAGERS	exclude the comma separated list of managers
	-m, --manager					force the use of a specific credential manager
	-f, --force  					force the operation
	-q, --quiet 					minimize informational messages

Environment variables:
	CREDENTIAL_MANAGER		if set use the specified credential manager (see below)
	CREDENTIAL_ENGINE			if set, specify the secret engine to use (Vault)

Credential managers: 
	local|l|remote|r			find a local or remote (network) credential manager
	platform							find a credential manager for the current platform (default)
	none									do not use a credential manager

	mac|win 							use the native credential manager for the platform
	pass|SecretTool				use the pass or SecretTool credential managers
	vault|v		 						use HashiCorp Vault"
}

args()
{
	local args=()
	unset -v engine force quiet type
	unset -v path key
	excludeManagers=()

	# commands
	ScriptCommand "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in
			-e|--engine) ScriptArg engine "$@";;
			-f|--force) force="true";;
			-h|--help) usage 0;;
			-m|--manager|-m*|--manager=*) ScriptArg "type" "manager" "$@";;
			-x|--exclude-managers|-x*|--exclude-managers=*) ScriptArg "excludeManagers" "exclude-managers" "$@"; StringToArray "${excludeManagers,,}" "," excludeManagers;;
			-q|--quiet) quiet="true";;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"

	# other arguments
	ScriptArgs "$@" || return; shift "$shift"

	# initialize
	[[ ! $type && $CREDENTIAL_MANAGER ]] && type="$CREDENTIAL_MANAGER"
 	[[ ! $engine && $CREDENTIAL_ENGINE ]] && engine="$CREDENTIAL_ENGINE" || engine="$vaultDefaultEngine"

	(( $# == 0 )) && return || usage
}

getCredentialArg() # PATH [KEY](default)
{
	ScriptGetArg "path" "$1"; shift
	[[ $1 ]] && { ScriptGetArg "key" "$1"; shift; } || key="default"
}

#
# Commands
#

checkCommand() { return 0; }
typeCommand() { echo "$type"; }

managerCommand()
{
	if IsPlatform win; then 
		control.exe /name Microsoft.CredentialManager
	elif IsPlatform debian; then
		start seahorse
	fi
}

statusCommand()
{
	echo "Credential store is $type"
	
	if [[ "$type" == "vault" ]]; then
		echo; vault status 
	elif findManagerVault; then
		echo "Vault is available"
	fi
		
	return 0
}

#
# Delete Command
#

deleteUsage() { echot "Usage: $(ScriptName) delete PATH [KEY|all](default)
Delete a credential.

If the key is all, all keys at the path are deleted.   If --force is specified,
permanently delete all keys at the path.\n\n$pathUsage"; }

deleteGetArgs() { getCredentialArg "$@"; }

deleteCommand() { RunFunction "delete" "$type" -- "$@"; }
deleteMac() { security delete-generic-password -gwa $USER -s "$path-$key"; }
deletePass() { pass rm "$path-$key"; }
deleteSecretTool() { secret-tool clear "$path" "$key"; }
deleteWin() { wincred.exe delete "$path-$key"; }

deleteVault()
{ 
	# return if already deleted
	if [[ "$key" == "all" ]]; then
		! vaultPathExists "$path" && return
	else
		! vaultKeyExists "$path" "$key" && return
	fi

	# delete a single key by setting it's value to the empty string
	[[ "$key" != "all" ]] && { vault kv patch "$path" "$key"=""; return; }

	# delete all of the keys permanently
	[[ $force ]] && { vault kv metadata delete "$path"; return; }

	# delete latest version of all keys
	vault kv delete "$path"
}

#
# Exist Command
#

existsUsage() { echot "Usage: $(ScriptName) exists PATH [KEY](default)
Return 0 if the specified credential exists.\n\n$pathUsage"; }

existsGetArgs() { getCredentialArg "$@"; }

existsCommand() { RunFunction "exists" "$type" -- "$@"; }
existsMac() { security find-generic-password -gwa $USER -s "$path-$key" >& /dev/null; }
existsPass() { [[ -f "$HOME/.password-store/$path-$key.gpg" ]]; }
existsSecretTool() { secret-tool search $path $key |& grep label >& /dev/null; }
existsVault() { vault kv get -field="$key" "$path" >& /dev/null; }
existsWin() { wincred.exe exists "$path-$key"; }

#
# Get Command
#

getUsage() { echot "Usage: $(ScriptName) get PATH [KEY](default)
Get a credential.\n\n$pathUsage"; }

getGetArgs() { getCredentialArg "$@"; }

getCommand() { RunFunction "get" "$type" -- "$@"; }
getMac() { security find-generic-password -gwa $USER -s "$path-$key" 2> /dev/null; }
getPass() { pass show "$path-$key"; }
getSecretTool() { secret-tool lookup "$path" "$key"; }
getVault() { vault kv get -field="$key" "$path"; }
getWin() { wincred.exe get "$path-$key"; }

getsUsage() { echot "Usage: $(ScriptName) gets PATH [KEY](default)
Get a credential silently (without showing an error).
This is useful if the key does not exist.\n\n$pathUsage"; }

#
# Gets Command
#

getsGetArgs() { getCredentialArg "$@"; }
getsCommand() { RunFunction "get" "$type" -- "$@" 2> /dev/null; return 0; }

#
# List Command
#

listUsage() { echot "Usage: $(ScriptName) list [path]
List all the paths or all keys at the specified path.\n\n$pathUsage"; }

listGetArgs()
{
	[[ $1 ]] && ScriptGetArg "path" "$1"; shift
	return 0
}

listCommand() { RunFunction "list" "$type" -- "$@"; }
listPass() { pass show; } 
listWin() { [[ ! $path ]] && path="*" || path+="-*"; wincred.exe list "$path" | sort; }

listVault()
{	
	[[ ! $path ]] && { vault secret list; return; }

	# list keys at path
	if [[ $(GetWord "$path" 2 /) ]]; then
		vaultPathValidate "$path" || return
		vault kv get "$path"
	fi

	# list available paths
	local paths result
	paths="$(vault kv list "$path" |& tail +3)"; result="$?"

	[[ "$paths" =~ ^"No value found at" ]] && return

	if [[ "$result" != 0 ]]; then
		[[ ! $quiet ]] && EchoErr "$paths"
		return "$result"
	fi

	printf "$paths\n"
}

#
# Set Command
#

setUsage() { echot "Usage: $(ScriptName) set path [key](default) value
Set a credential."; }

setCommand() { RunFunction "set" "$type" -- "$@"; }
setMac() { security add-generic-password -U -a $USER -s "$path-$key" -w "$value"; }
setPass() { pass insert -m --force "$path-$key"<<< "success" 2> /dev/null; }
setSecretTool() { echo "$value" | secret-tool store --label "credential for $path $key" "$path" "$key"; }
setWin() { wincred.exe set "$path-$key" "$value"; }

setVault()
{
	if ! vaultPathExists "$path"; then
		vault kv put "$path" "$key"="$value"
	else
		vault kv patch "$path" "$key"="$value"
	fi
}

#
# Find a Credential Manager
#

findManager()
{
	type="${type,,}"

	# no credential manager was found
	[[ "$type" == "none" ]] && { noCredentialManager; return; }

	# use the specified credential manager
	if [[ $type && "$type" != @(l|local|platform) ]]; then

		# aliases
		[[ "$type" == @(remote|r|v) ]] && type="vault"

 		# ensure correct case
		if [[ "$type" == "secrettool" ]]; then type="SecretTool"
		else type="$(ProperCase "$type")"
		fi

		# see if the specified credential manage is valid
		if ! IsFunction "findManager${type}"; then
			[[ ! $quiet ]] && EchoErr "credential: \`$type\` is not a valid credential manager"
			return 1
		fi

		# ensure the specified credential manager is available
		"findManager${type^}" || noCredentialManager "$type"
		return
	fi

	# find a credential manager based on the platform
	RunPlatform findManagerPlatform || noCredentialManager
}

findManagerPlatformLinux() { findManagerSecretTool || findManagerPass || findManagerVault; }
findManagerPlatformMac() { findManagerMac || findManagerPass || findManagerVault; }
findManagerPlatformWin() { findManagerWin || findManagerSecretTool || findManagerPass || findManagerVault; }

findManagerMac() # MacOS Keychain
{
	{ IsInArray "mac" excludeManagers || ! IsPlatform mac || ! Inpath security; } && return 1	
	type="mac"
}

findManagerPass() 
{
	{ IsInArray "secrettool" excludeManagers || ! InPath pass; } && return 1
	pass insert -m --force test-default<<< "success" >& /dev/null && type="pass"
}

findManagerSecretTool()
{
	# ensure SecretTool is installed and we are using an X display
	{ IsInArray "secrettool" excludeManagers || [[ ! $DISPLAY ]] || ! InPath secret-tool; } && return 1

	# ensure DBUS can be configured correctly over SSH (so we get the Ubuntu Gnome keyring password prompt)
	if IsSsh && InPath dbus-launch dbus-update-activation-environment; then
		local result; result="$(dbus-update-activation-environment --systemd DISPLAY 2>&1)" || return
		[[ "$result" != "" ]] && return 1 # returns error text if there is an issue
	fi 

	echo "success" | secret-tool store --label "test" test default >& /dev/null && type="SecretTool"
}

findManagerVault()
{
	{ IsInArray "vault" excludeManagers || ! InPath vault; } && return 1
	[[ ! $VAULT_ADDR || ! $VAULT_TOKEN ]] && { eval "$(hashi vault config)" || return; }
	[[ $VAULT_ADDR && $VAULT_TOKEN ]] && type="vault"
}

findManagerWin() # Windows Credential Manager
{
	{ IsInArray "win" excludeManagers || ! IsPlatform win || ! InPath "wincred.exe"; } && return 1	
	type="win"
}

#
# Initialize the Credential Manager
#

initManager() { [[ ! $type ]] && return; RunFunction "initManager" "$type"; }

initManagerVault()
{
	# add engine to path
	path="$engine/$path"
}

noCredentialManager()
{
	local desc="a"; [[ $1 ]] && desc="the $1"
	[[ ! "$quiet" ]] && ScriptErr "$desc credential manager is not available"
	[[ "$command" == "type" ]] && echo "none"
	return 1
}

#
# Vault Helper
#

# vaultKeyExists PATH KEY - return 0 if the key exists at path, 1 if it does not
vaultKeyExists() { vault kv get -field="$2" "$1" >& /dev/null; }

# vaultPathExists PATH - return 0 if the path is valid
vaultPathExists() { vault kv get "$1" >& /dev/null; }

# vaultPathValidate PATH - if the path does not exist return an error
vaultPathValidate()
{ 
	vaultPathExists "$path" && return
	[[ ! "$quiet" ]] && ScriptErr "the path ``$path`` does not exist"
	return 1
}

run "$@"