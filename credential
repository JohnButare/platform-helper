#!/usr/bin/env bash
. function.sh

usage()
{
	echot "\
usage: credential manager
	check																			check if a credential manager is installed
	delete attribute [value](default)					clear (delete) the credential
	exists attribute [value](default)					check if a credential exists
	get attribute [value](default)						get the for a credential password 
	set attribute [value](default) password		set the password for a credential

	-q, --quiet 		minimize informational messages
	-v, --vault			force the use of vault even if another credential manager exists"
	exit 1
}

args()
{
	args=() value="default"
	unset command attribute password quiet vault

	# options
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-h|--help) usage 0;;
			-q|--quiet) quiet="true";;
			-v|--vault) vault="true";;
			*) args+=( "$1" )
		esac
		shift
	done

	set -- "${args[@]}"

	# command
	{ [[ $# == 0 ]] || ! IsFunction ${1}Command; } && usage
	command="$1"; shift

	if [[ "$command" == @(delete|exists|get|set) ]]; then
	
		# attribute
		(( $# == 0 )) && usage;
		attribute="$1"; shift

		# value
		case "$command" in
			delete|exists|get) [[ $# == 1 ]] && { value="$1"; shift; };;
			set) [[ $# == 2 ]] && { value="$1"; shift; }; ;;
		esac
		
	fi

	# password
	[[ "$command" == "set" && $# == 1 ]] && { password="$1"; shift; };

	[[ $# != 0 ]] && usage;
}

run() {	args "$@"; checkCommand || return; "${command}Command"; }

noCredentialManager()
{
	local desc="${1:-A credential manager}"
	[[ ! "$quiet" ]] && ScriptErr "$desc is not available"
	exit 1
}

checkCommand()
{
	if [[ $vault ]]; then
		checkVault && return
		noCredentialManager "vault"
	fi

	RunPlatform check && return
	noCredentialManager
}

checkLinux()
{
	[[ $DISPLAY ]] && InPath secret-tool && echo "success" | secret-tool store --label "test" test default >& /dev/null && { type="SecretTool"; return; }
	passCheck && { type="Pass"; return; }	
}

checkMac() { type="Mac"; }
checkVault() { InPath vault && [[ $VAULT_TOKEN ]]; }
checkWin() { ! InPath "wincred.exe" && return 1; type="WinCred"; }

typeCommand() { echo "$type"; }

deleteCommand() { delete$type "$@"; }
deleteMac() { security delete-generic-password -gwa $USER -s "$attribute-$value"; }
deletePass() { pass rm "$attribute-$value"; }
deleteSecretTool() { secret-tool clear "$attribute" "$value"; }
deleteWinCred() { wincred.exe set "$attribute-$value" "$USER" "" 2> /dev/null; }

existsCommand() { exists$type "$@"; }
existsMac() { security find-generic-password -gwa $USER -s "$attribute-$value" >& /dev/null; }
existsPass() { [[ -f "$HOME/.password-store/$attribute-$value.gpg" ]]; }
existsSecretTool() { secret-tool search $attribute $value |& grep label >& /dev/null; }
existsWinCred() { wincred.exe get "$attribute-$value" 2> /dev/null >& /dev/null; }

getCommand() { local pass="$(get$type "$@")"; [[ $pass ]] && echo "$pass" || return 1; }
getMac() { security find-generic-password -gwa $USER -s "$attribute-$value" 2> /dev/null; }
getPass() { pass show "$attribute-$value"; }
getSecretTool() { secret-tool lookup "$attribute" "$value"; }
getWinCred() { wincred.exe get "$attribute-$value" 2> /dev/null; }

setCommand() { set$type "$@"; }
setMac() { security add-generic-password -U -a $USER -s "$attribute-$value" -w "$password"; }
setPass() { passSet; }
setSecretTool() { echo "$password" | secret-tool store --label "credential for $attribute $value" "$attribute" "$value"; }
setWinCred() { wincred.exe set "$attribute-$value" "$USER" "$password" 2> /dev/null; }

managerCommand()
{
	if IsPlatform win; then 
		control.exe /name Microsoft.CredentialManager
	elif IsPlatform debian; then
		start seahorse
	fi
}

# 
# pass helper - put last, causes issues with sublime hilighting
#

passCheck() { InPath pass && pass insert -m --force test-default<<<"success" >& /dev/null; }
passSet() { pass insert -m --force "$attribute-$value"<<<"success" 2> /dev/null; }

run "$@"

