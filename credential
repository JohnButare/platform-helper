#!/usr/bin/env bash
. script.sh || exit

# notes:
# - avoid any calls to credential in the credential unlock flow.   For exmaple, SshAgent uses credential to unlock 
#   the ssh-agent, so this must not be called when this script, or a manager helper script such as hashi or 1PasswordHelper,
#   unlocks a credential manager.  
# - unlock flows:
#   - RunScript → hashi, SshAgent, credential
#   - credential → hashi, 1PasswordHelper
#   - SshAgent → credential
#   - hashi → credential
#   - 1PasswordHelper → credential

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName)
Interact with a credential store.

Common commands:
	exists 		check if a credential exists
	get[s]		get a credential
	ls 				list credentials
	manager		manage credetnial managers
	rm  			remove a credential
	set				set a credential

Common options:
	-F, --fallback			 							fallback to a remote credential manager if possible
	-em, --exclude-managers=MANAGERS	comma separated list of managers to exclude
	-m, --manager=MANAGER							force the use of a specific credential manager
	-ul, --unlock											force unlocking of the credential manager"
}

usageVerbose()
{ 
	ScriptUsageEcho "
Copy commands:
	copy		copy credentials from one path to another
	mirror	mirror credentials from one credential manager to another
	sync		synronize credentials from one credential manager to another

Other commands:
	environment			return environment variables
	gui							show the the GUI manager
	store						manage credential stores

Other options:
	-e, --engine=ENGINE 			physical storage engine for credentials, defaults to secret
	-g, --gui									force a GUI prompt for the password
	-nfp, --no-find-pass			do not search for a password to unlock this manager
	-p, --password=PASSWORD 	password to unlock the credential manager

Environment variables:
	CREDENTIAL_MANAGER		if set use the specified credential manager (see below)
	CREDENTIAL_ENGINE			if set, specify the secret engine to use (Vault)

Credential managers: 
	all										find all credential managers (default)
	local|l|remote|r			find local or remote (network) credential managers
	native								find the native credential manager for the current platform
	none									do not use a credential manager

	mac|win 											the MacOS Keychain or Windows Credential Manager
	1p|1Password|op|OnePassword 	1Password credential manager
	pass													pass credential manager
	gk|GnomeKeyring|st|SecretTool	GNOME Keyring credential manager
	vault|v		 										HashiCorp Vault credential manager"
}

init()
{
	unset -v path key # getCredentialArg
	allManagers=(mac op pass gk vault win)
	sep="-"
	pathUsage="	path		credential location, i.e. folder or /folder1/folder2"
}

argStart() { unset -v engine fallback gui manager managerArg noFindPass password unlock; engineArg=() excludeManagers=() excludeManagersArg=(); }

opt()
{
	case "$1" in
		-e|--engine|-e=*|--engine=*) ScriptOptGet engine "$@"; engineArg=( --engine "$engine" );;
		-em|--exclude-managers|-em=*|--exclude-managers=*) getExcludeManagersOpt "$@";;
		-F|--fallback) fallback="--fallback";;
		-g|--gui) gui="--gui";;
		-m|--manager|-m=*|--manager=*) ScriptOptGet "managerArg" "$@"; manager="$(managerNameValidate "$managerArg")" || exit 1;;
		-nfp|--no-find-pass) noFindPass="--no-find-pass";;
		-p|--password|-p=*|--password=*) ScriptOptGet password "$@";;
		-ul|--unlock) unlock="--unlock";;
		*) return 1;;
	esac
}

argEnd()
{
	# set arguments from environment variables
 	[[ ! $manager ]] && { [[ $CREDENTIAL_MANAGER ]] && manager="$(managerNameValidate "$CREDENTIAL_MANAGER")" || manager="all"; }
 	[[ ! $engine ]] && { [[ $CREDENTIAL_ENGINE ]] && engine="$CREDENTIAL_ENGINE" || engine="secret"; }

	# unlock the manager if we are running a command the requires us to be unlocked
 	[[ "$command" != @(environment|managerAvailable|managerDescription|managerName|lock|unlock|status|manager) ]] && unlock="--unlock";

 	# find a credential manager
 	managerFind
}

getCredentialArg() # PATH [KEY](default)
{
	ScriptArgGet "path" -- "$@"; shift
	[[ $1 ]] && { ScriptArgGet "key" -- "$@"; shift; } || key="default"
}

getExcludeManagersOpt()
{
	ScriptOptGet "excludeManagers" "exclude-managers" "$@"
	excludeManagersArg=( --exclude-managers "$excludeManagers" )
	StringToArray "${excludeManagers,,}" "," excludeManagers

	# validate the managers
	local manager; for manager in "${excludeManagers[@]}"; do
		! isManager "$manager" && { managerInvalid "$manager"; return 1; }
	done

	return 0
}

#
# commands
#

guiCommand() { RunFunction "gui" "$manager"; }
guiOp() { 1PasswordHelper start; }
guiGk() { start seahorse; }
guiWin() { start control.exe /name Microsoft.CredentialManager; }

#
# copy command
#

copyUsage() { echot "Usage: $(ScriptName) copy SRC DEST
Copy credentials from one path to another."; }

copyArgStart() { unset -v src dest; }

copyArgs()
{
	ScriptArgGet "src" -- "$@"; shift
	ScriptArgGet "dest" -- "$@"; shift
}

copyCommand()
{
	log1 "copying path $src to $dest..."
	initPath "$src" || return

	local key keys value; IFS=$'\n' keys=( $(lsCommand) )
	for key in "${keys[@]}"; do
		value="$(getCommand)" || return
		cred set "$dest" "$key" "$value" || return
	done

}

#
# environment command
#

environmentCommand() { environment && environmentManager; }

# environment [MANAGER] - return the environment variables for the manager 
environment()
{
	local manager="${1:-$manager}"

	cat <<-EOF
		export CREDENTIAL_MANAGER="$manager"
		export CREDENTIAL_MANAGER_CHECKED="true"
		export CREDENTIAL_ENGINE="$engine"	
		export CREDENTIAL_USER_PATH=""
		export CREDENTIAL_TMP_PATH="/tmp"
		export CREDENTIAL_UNLOCK_PATH="secure:default"
	EOF

	RunFunction "environment" "$manager" || return
}

environmentOp() { echo "export CREDENTIAL_UNLOCK_PATH=\"1Password:password\""; }
environmentVault() { echo "export CREDENTIAL_UNLOCK_PATH=\"hashi/$(ConfigGet baseDomain)/vault:token\""; }

environmentManager() { RunFunction "environmentManager" "$manager"; }
environmentManagerOp() { 1PasswordHelper environment "${globalArgs[@]}"; }
environmentManagerVault() { hashi vault environment --no-token "${globalArgs[@]}"; }
environmentManagerGk() { gnomeKeyringDaemonEnvironment && echo "export GNOME_KEYRING_CONTROL=\"$GNOME_KEYRING_CONTROL\""; }

#
# exist command
#

existsUsage() { echot "Usage: $(ScriptName) exists PATH [KEY](default)
Return 0 if the specified credential exists.\n\n$pathUsage"; }

existsArgs() { getCredentialArg "$@"; }
existsCommand() { exists "$path" "$key" || existsFallbackRemote "$path" "$key"; }

existsFallbackRemote()
{
	local path="$1" key="$2"; ! canFallbackRemote && return 1
	log1 "credential '$path $key' does not exist in the $(managerDescription) credential store, falling back to a remote store"
	test="" cred exists "$path" "$key" --manager=remote "${globalArgs[@]}"
}

exists()
{
	local path="$1" key="$2"; opInit "exists" "$path" "$key" || return
	local result return; result="$(RunFunction "exists" "$manager" 2>&1)"; return="$?"
	log1 "exists: return=$return result='$result'"; return "$return"
}

existsMac() { security find-generic-password -gwa $USER -s "$managerPathKey"; }
existsOp() { op get item "$managerPathKey" --fields username --cache; }
existsPass() { [[ -f "$HOME/.password-store/$managerPathKey.gpg" ]]; }
existsVault() { vaultKeyExists "$managerPath" "$key"; }
existsWin() { wincred.exe exists "$managerPathKey"; }
existsGk() { secret-tool search "$managerPath" "$key" | ${G}grep --quiet "^label ="; }

#
# get command
#

getUsage() { echot "Usage: $(ScriptName) get [time] PATH [KEY](default)
Get a credential.

$pathUsage
	time					return the UTC time the specified credential was last modified

	-p, --prompt	prompt for the credential if not found"; }

getArgStart() { unset prompt; }
getArgs()  { getCredentialArg "$@"; }

getOpt() 
{
	case "$1" in
		-p|--prompt) prompt="--prompt";;
		*) return 1
	esac
}

getCommand() { get "$path" "$key" || getFallbackRemote "$path" "$key" || getPrompt "$path" "$key"; }

# get PATH KET - get a value from the credential store.
#   The value is not logged since it likely contains a credential.
get()
{
	local path="$1" key="$2"; opInit "get" "$path" "$key" || return
	local return value; value="$(RunFunction "get" "$manager" |& RemoveNewline)"; return="$?"
	log1 "get: return=$return"; (( return != 0 )) && { keyNotFound "$path" "$key"; return 1; }
	echo "$value"
}

getMac() { security find-generic-password -gwa $USER -s "$managerPathKey"; }
getOp() { op get item "$managerPathKey" --fields "password" --cache; }
getPass() { pass show "$managerPathKey"; }
getGk() {	secret-tool lookup "$managerPath" "$key"; }
getVault() { vault kv get -field="$key" "$managerPath"; }
getWin() { wincred.exe get "$managerPathKey"; }

getFallbackRemote()
{
	local path="$1" key="$2"; ! canFallbackRemote && return 1		
	log1 "credential '$path $key' does not exist in the '$(managerDescription)' credential manager, falling back to a remote store"
	test="" cred get "$path" "$key" --manager=remote "${globalArgs[@]}"
}

getPrompt()
{
	local path="$1" key="$2"; shift 2

	[[ ! $prompt ]] && return 1

	# prompt for the credential
	local prompt="${1:-Enter the new credential for $path $key: }"
	read -s -p "$prompt" value; echo
	[[ ! $value ]] && { ScriptErr "no credential specified"; return 1; }

	# set the credential
	log1 "setting credential '$path $key' to '$value'"
	setCommand || return

	# set the credential in the remote credential store if needed
	{ isManagerRemote || [[ ! $fallback ]] || ! isManagerAvailableRemote; } && return
	log1 "setting credential '$path $key' to '$value' in the remote credential store"
	cred set "$path" "$key" "$value" --manager=remote || return

	echo "$value"
}

#
# get time Command
#

getTimeCommand() { getTime "$path" "$key"; }

getTime()
{
	local path="$1" key="$2"; opInit "get time" "$path" "$key" || return
	local time; time="$(RunFunction "getTime" "$manager" 2>&1)"
	[[ ! $time ]] && { ScriptErr "unable to determine '$path $key' modifification time"; return 1; }
	log1 "time: time='$time'"; printf "$time"
}

getTimeVault() { vault kv get --format=json "$managerPath" | jq -r .data.metadata.created_time; }
getTimeWin() { wincred.exe detail "$managerPathKey" | jq -r .[0].LastWriteTimeUtc; }

getTimeMac()
{
	local date; date="$(security find-generic-password -a $USER -s "$managerPathKey" | tgrep "\"mdat\"<timedate>=" | tr -s " " | cut -d" " -f3 | RemoveQuotes | RemoveEnd 'Z\\000')" || return
	[[ ! $date ]] && return
	date -j -f "%Y%m%d%H%M%S%z" "${date}-0000"
}

getTimeGk()
{
	local date; date="$(secret-tool search "$managerPath" "$key" |& tgrep '^modified =' | GetAfter "=" | RemoveSpaceTrim)" || return
	[[ ! $date ]] && return
	date -u --date="$date"
}

#
# ls command
#

lsUsage() { echot "Usage: $(ScriptName) ls [path]
List all the paths or all keys at the specified path.\n\n$pathUsage

	-p, --paths		list paths at specified path and below
	-k, --keys		list only keys at specified path"; }

lsArgStart() { unset onlyPaths onlyKeys; }

lsOpt() 
{
	case "$1" in
		-p|--paths) onlyPaths="true";;
		-k|--keys) onlyKeys="true";;
		*) return 1
	esac
}

lsArgs() 
{
	[[ $1 ]] && ScriptArgGet "path" -- "$@"; shift
	return 0
}

lsCommand() { lsDo "$path"; }

lsDo() { local path="$1"; opInit "ls" "$path" && RunFunction "ls" "$manager"; }
lsMac() { lsWorker "lsMacFilter"; }
lsOp() {	lsWorker "lsOpFilter"; }
lsGk() { lsWorker "lsGkFilter"; }
lsWin() {	lsWorker "lsWinFilter"; }

lsMacFilter() { security dump-keychain -r login.keychain | tgrep '0x00000007 <blob>=' | cut -d= -f2 | RemoveQuotes | tgrep "^$path$sep" | sort | uniq; }
lsOpFilter() { op list items --tags=credential${sep}${path} | jq ".[].overview.title" | RemoveQuotes | sort; }
lsGkFilter() { lssecret | tgrep "^Item:" | cut -d$'\t' -f2 | tgrep "^$path$sep" | sort; }
lsWinFilter() { wincred.exe list "$path$sep*" | RemoveCarriageReturn | sort; }

lsPass()
{
	local path="$(RemoveTrailingSlash "$HOME/.password-store/$managerPath")/"
	[[ ! -d "$path" ]] && return 
	find "$path" -maxdepth 1 -type d | tail +2 | sed 's/^'"$(echo "$path" | QuotePath)"'//' | sed 's/$/\//'
	find "$path" -maxdepth 1 -type f -name "*.gpg" | sed 's/^'"$(echo "$path" | QuotePath)"'//' | sed 's/.gpg$//'
}

lsVault()
{	
	local path="$(RemoveTrim "$managerPath" "/")"

	# paths
	if [[ ! $onlyKeys ]] && vaultPathHasChildren "$path"; then

		if [[ $onlyPaths ]]; then
			local p paths; IFS=$'\n' paths=( $(vault kv list "$path" | tail +3 | sort | sed 's/\/$//' | sed 's/$/\//' | uniq) )
			local origPath="$path"
			local prefix="$origPath/$p"; prefix="${prefix/$engine\//}"
			for p in "${paths[@]}"; do echo "$prefix$p"; path="$origPath/$p"; lsVault; done
			return
		fi

		vault kv list "$path" | tail +3 | sort | sed 's/\/$//' | sed 's/$/\//' | uniq || return
	fi

	# keys
	if [[ ! $onlyPaths ]] && vaultLeafHasData "$path"; then
		vault kv get -format=json "$path" | jq '.data.data|keys|.[]' -r || return
	fi

	return 0	
}

lsWorker()
{
	local filter="$1"
	local path="$(RemoveTrim "$managerPath" "$sep")"

	if [[ $onlyPaths ]]; then lsPathsRecursive
	elif [[ $onlyKeys ]]; then lsKeys
	else lsPaths && lsKeys
	fi
}

lsKeys()
{
	$filter |
		sed "s/^$path$sep//" | 		# remove path prefix
		tgrep -v "$sep" |					# remove child paths 
		sort
}

lsPaths()
{
	$filter |
		tgrep "$sep" |					# include paths
		sed "s/^$path$sep//" | 	# remove path prefix
		tgrep "$sep"	|					# remove keys
		sed "s/$sep.*$//" |			# remove child paths
		sed 's/$/\//'	|					# add / suffix
		uniq
}

lsPathsRecursive()
{	
	$filter |
		sed "s/$sep[^$sep]*$//" | 	# remove leaves
		tgrep -v "^${path}$" |			# remove exact path
		sed "s/^$engine$sep//" | 		# remove engine prefix
		sed "s/$sep/\//g" |					# replace sepator with /
		uniq
}

#
# manager commands
#

managerUsage() { echot "Usage: $(ScriptName) manager all|available|lock|locked|name|password|status|unlock|unlocked|verify\nManage credential engines."; }
managerCommand() { managerDescriptionCommand; }
managerAllUsage() { echot "Usage: $(ScriptName) available\nShow all credential managers."; }
managerAllCommand() { echo -n "${allManagers[@]}"; }
managerNameUsage() { echot "Usage: $(ScriptName) name\nShow the name of the credential manager."; }
managerNameCommand() { local m="${manager:-none}"; echo "${m,,}"; }

isManager() { RunFunctionExists "get" "${1:-$manager}"; } # isManager [MANAGER] - return true if the manager is a credential manager as all must implement the get function
isManagerRemote() { [[ "${manager,,}" == @(op|vault) ]]; }

#
# manager find
#

# managerFind - find and initialize and optionally unlock a credential manager
managerFind()
{
 	# if no credential manager was found and we are forcing, search for any credential manager
	[[ $force && "$manager" == "None" ]] && manager="all"

	# if a manager was specified on the command line use it
	if isManagerExcluded "$manager"; then
		[[ ! $quiet ]] && ScriptErr "the credential manager '$(managerDescription "$manager")' is excluded"
		return 1
	fi

	# find the manager
	if managerFind_${manager^}; then # managerFind may set manager environment variables
		log2 "managerFind: using the $(managerDescription) credential manager ($(managerLockedStatus))"
		return 0
	fi

	# credential manager not available
	if [[ ! $quiet ]]; then
		if [[ "${managerArg,,}" == @(|all|none) ]]; then
			ScriptErr "no credential manager is available"
		else
			local manager="$(managerNameValidate "$managerArg")"
			ScriptErr "the '${manager,,}' credential manager is not available"
		fi
	fi
	
	return 1
}

# managerFind_* - these function names are valid for the name of the credential manager to find
managerFind_All() { log2 "managerFind: all"; managerFind_Local || managerFind_Remote; }
managerFind_Local() { log2 "managerFind: local"; managerFind_Mac || managerFind_Win || managerFind_Gk || managerFind_Pass; }
managerFind_Native() { log2 "managerFind: native"; managerFind_Mac || managerFind_Win; }
managerFind_Remote() { log2 "managerFind: remote"; managerFind_Vault || managerFind_Op; }
managerFind_None() { log2 "managerFind: none"; return 1; }

managerFind_Op() { managerFindUnlock "op"; }
managerFind_Mac() { managerFindUnlock "mac"; }
managerFind_Pass() { managerFindUnlock "pass"; }
managerFind_Gk() { managerFindUnlock "gk"; }
managerFind_Vault() { managerFindUnlock "vault"; }
managerFind_Win() { managerFindUnlock "win"; }

# managerFindUnlock MANAGER - if the manager is available and optionally unlocked return it's name
managerFindUnlock()
{
	manager="$1"

	# check if the manager is available
	! isManagerAvailable${manager^} && return 1
	log2 "managerFind: the $(managerDescription) credential manager is available"

	# return if we do not need to unlock the manager
	[[ ! $unlock ]] && return

	# unlock the manager
	quiet="--quiet" unlock && return
}

# managerPath PATH - return the manager specific path, i.e. : /a/b/ -> $engine-a-b	
managerPath()
{
	RunFunctionExists "managerPath" "$manager" && { RunFunction "managerPath" "$manager" -- "$1"; return; }
	local prefix; [[ $engine ]] && prefix="$engine-"
	echo "$prefix$(RemoveTrim "${1//\//-}" "-")"
}

# managerPathVault PATH: /a/b/ -> /$engine/a/b
managerPathVault() { echo "/$engine/$(RemoveTrim "$1" "/")"; }

# managerPathPass PATH: /a/b/ -> /$engine/a/b
managerPathPass() { echo "$engine/$1"; }

# managerNameAlias ALIAS - return the a credential manager name for an alias
managerNameAlias()
{
	case "${1,,}" in
		1p|1password|op|OnePassword) echo "op";;
		l) echo "local";;
		r) echo "remote";;
		v) echo "vault";;
		gk|gnomekeyring|st|secrettool) echo "gk";;
		*) echo "${1,,}";;
	esac
}

# managerDescription [MANAGER] - return the description of the credential manager 
managerDescription()
{
	local manager="${1:-$manager}"
	case "${manager,,}" in
		gk) printf "GNOME Keyring";;
		mac) printf "Macintosh";;
		op) printf "1Password";;
		pass) printf "Pass";;
		vault) printf "HashiCorp Vault";;
		win) printf "Windows";;
		*) printf "$manager";;
	esac
}

# managerNameValidate (NAME)[local] - validate that the credential manager name is valid and resolve manager alias names
managerNameValidate()
{
	local name="$1" nameOrig="$1"
	[[ $name ]] && name="$(managerNameAlias "$name")"

	# ensure correct case
	name="$(ProperCase "$name")"

	# check if the specified credential manager is valid
	IsFunction "managerFind_${name}" && { echo "$name"; return; }

	# invalid manager
	managerInvalid "$nameOrig"
}

managerInvalid() { [[ ! $quiet ]] && ScriptErr "'$1' is not a valid credential manager"; return 1; }

#
# manager available command
#

managerAvailableUsage() { echot "Usage: $(ScriptName) available\nShow the available credential managers."; }
managerAvailableCommand() { managerAvailable; }

managerAvailable()
{
	local manager available=()
	for manager in "${allManagers[@]}"; do
		 isManagerAvailable "$manager" && available+=($manager)
	done
	echo -n "${available[@]}"
}

isManagerAvailable() { RunFunction "isManagerAvailable" "${1:-$manager}";  } # isManagerAvailable [MANAGER] - return true if the specified manager is available
isManagerAvailableMac() { ! isManagerExcluded mac && IsPlatform mac && InPath security && ! IsSsh; }
isManagerAvailableOp() { ! isManagerExcluded op && InPath op; }
isManagerAvailablePass() { ! isManagerExcluded pass && InPath pass && [[ -d "$HOME/.password-store" ]]; }
isManagerAvailableGk() { ! isManagerExcluded gk && [[ $DISPLAY ]] && InPath gnome-keyring-daemon lssecret secret-tool secret-check; }
isManagerAvailableWin() { ! isManagerExcluded win && IsPlatform win &&  InPath "wincred.exe"; }
isManagerAvailableVault() { ! isManagerExcluded vault && InPath vault; }

isManagerAvailableRemote() { isManagerAvailableOp || isManagerAvailableVault; }
isManagerAvailableLocal() { isManagerAvailableMac || isManagerAvailableWin || isManagerAvailableGk || isManagerAvailablePass; }

#
# manager lock
#

managerLockCommand()
{
	isLocked && return
	lock || { [[ ! $quiet ]] && EchoErr "Unable to lock the $(managerDescription) credential manager."; return 1; }
	[[ ! $quiet ]] && EchoErr "The $(managerDescription) credential manager was locked."
	return 0
}

#
# manager locked
#

managerLockedUsage() { echot "Usage: $(ScriptName) unlocked\nShow the locked credential managers."; }
managerLockedCommand() { managerLocked; }

managerLocked()
{
	local manager locked=()
	for manager in "${allManagers[@]}"; do
		isManagerAvailable "$manager" && isLocked "$manager" && locked+=($manager)
	done
	echo -n "${locked[@]}"
}

isLocked() { ! isUnlocked; }
lock() { RunFunction "lock"; }
lockGk() { RunSilent secret-lock; }
lockOp() { op signout; }
lockPass() { gpgconf --kill gpg-agent; }

#
# manager password
#

managerPasswordUsage() { echot "Usage: $(ScriptName) manager password MANAGER\nGet the password for the specified credential manager."; }
managerPasswordArgStart() { unset -v managerArg; }
managerPasswordArgs() {	ScriptArgGet "managerArg" "manager" -- "$@"; managerArg="$(managerNameValidate "$managerArg")"; }

managerPasswordCommand()
{
	# find the location of the credential manager password
	local unlockPath
	unlockPath="$(
		local environment; environment="$(environment "$managerArg")" || return
		eval "$environment" || return
		echo "$CREDENTIAL_UNLOCK_PATH"
	)"

	local args=(); StringToArray "$unlockPath" ":" args
	log1 "manager password: looking for the '$(managerDescription "$managerArg")' password at '${args[@]}' in '$(managerDescription)'"
	get "${args[@]}"
}

managerPasswordNeeded() {  ! RunFunctionExists "managerPasswordNeeded" "${1:-manager}" || RunFunction "managerPasswordNeeded" "${1:-manager}"; }
managerPasswordNeededWin() { return 1; }
managerPasswordNeededMac() { return 1; }

#
# manager status
#

managerStatusUsage() { echot "Usage: $(ScriptName) status\nShow the credential manager status."; }
managerStatusCommand() { managerStatus; }

managerLockedStatus() { isUnlocked && echo "unlocked" || echo "locked"; }
managerStatus() {	echo "Using the $(managerDescription) credential manager ($(managerLockedStatus))"; }

#
# manager unlocked
#

managerUnlockedUsage() { echot "Usage: $(ScriptName) unlocked\nShow the unlocked credential managers."; }
managerUnlockedCommand() { managerUnlocked; }

managerUnlocked()
{
	local manager unlocked=()
	for manager in "${allManagers[@]}"; do
		isManagerAvailable "$manager" && isUnlocked "$manager" && unlocked+=($manager)
	done
	echo -n "${unlocked[@]}"
}

isUnlocked() { RunFunction "isUnlocked" "$manager"; }
isUnlockedOp() { 1PasswordHelper IsUnlocked; }
isUnlockedPass() { echo -n BOGUS | pass |& grep --quiet -v "gpg: decryption failed: No secret key"; }
isUnlockedGk() { [[ "$(secret-check)" == "unlocked" ]]; }
isUnlockedVault() { [[ $VAULT_TOKEN ]]; }

#
# manager verify
#

managerVerifyUsage() { echot "Usage: $(ScriptName) available\nVerify the credential manager."; }
managerVerifyCommand() { verify; }

# verify - verify using the credential manager specific function, otherwise try and set a value
verify()
{
	log1 "verifying the '$manager' credential manager"

	if RunFunctionExists "verify" "$manager"; then
		RunFunction "verify" "$manager"
	else
		setDo "test" "check" "$manager-success"
	fi
}

verifyVault() { getVaultAddress && verifyVaultServer && verifyVaultUnsealed; }

# getVaultAddress - get the VAULT_ADDR environment variable if needed.  We should not get the token to prevent a credential lookup.
getVaultAddress()
{
	if [[ ! $VAULT_ADD || $force ]]; then
		log2 "getVaultAddress: getting the Vault environment variables"
		eval "$(hashi vault environment --no-token "${globalArgs[@]}")" || return
	fi

	log1 "getVaultAddress: the Vault address is '$VAULT_ADDR'"
	return 0
}

verifyVaultServer()
{
	local server="$(GetUriServer "$VAULT_ADDR")" port="$(GetUriPort "$VAULT_ADDR")"
	
	if IsAvailablePort "$server" "$port"; then
		log1 "the Vault server '$server' is available on port $port"
		return 0 
	else
		ScriptErr "the Vault server '$server' is ${RED}not responding${RESET} on port $port"
		return 1
	fi
}

# verifyVaultUnsealed - check if the Vault is selaed - https://www.vaultproject.io/docs/commands/status
verifyVaultUnsealed()
{
	local result; vault status -format=json >& /dev/null; result="$?" && return
	(( result == 2 )) && { [[ ! $quiet ]] && ScriptErr "Vault is sealed"; return 1; }
	return "$result" # some other error
}

#
# mirror command
#

mirrorUsage()
{
		echot "Usage: $(ScriptName) mirror PATH [KEY]
Mirror keys from one credential manager to another.
This will ensure the 'to' credential manager is identical to 
the 'from' credential manager at the specified PATH and KEY.

	-F,	--from MANAGER	first secret manager, defaults to local
	-T,	--to MANAGER		second secret manager, defaults to remote"
}

mirrorArgStart() { syncArgStart "$@"; }

mirrorOpt() 
{
	case "$1" in
		-F|--from|-F=*|--from=*) ScriptOptGet m1 "$@"; m1="$(managerNameAlias "$m1")";;
		-T|--to|-T=*|--to=*) ScriptOptGet m2 "$@"; m2="$(managerNameAlias "$m2")";;
		*) return 1
	esac
}

mirrorArgs() { syncArgs "$@"; }

mirrorCommand()
{
	log1 "mirroring $path from $m1 to $m2..."

	[[ $key ]] && { mirrorKey; return; }

	[[ ! $force ]] && { ScriptErr "to overwrite all values at '$path' in $m2 --force must be specified."; return 1; }

	# get m1 keys at path
	local key keys; IFS=$'\n' keys=( $(cred1 ls --keys "$path") )
	[[ ! $keys ]] && { ScriptErr "no permission or no keys at '$path' in $m1"; return 1; }
	[[ $verbose ]] && { PrintErr "$m1 keys: "; ArrayShow keys; }

	echo "Deleting all keys at '$path' in $m2..."
	cred2 rm "$path" all || return

	for key in "${keys[@]}"; do
		echo "Adding '$path $key' to $m2..."
		local value; value="$(cred1 get "$path" "$key")" || return
		cred2 set "$path" "$key" "$value" || return
	done
}

cred1() { cred "--manager=$m1" "$@"; }
cred2() { cred "--manager=$m2" "$@"; }

mirrorKey()
{
	! cred1 exists "$path" "$key" && { ScriptErr "'$path $key' does not exist in $m1"; return; }
	local value; value="$(cred1 get "$path" "$key")" || return
	cred2 set "$path" "$key" "$value"
}

#
# rm command
#

rmUsage() { echot "Usage: $(ScriptName) rm PATH [KEY|all](default)
Remove a credential.

If the key is all, all keys at the path are removed.   If --force is specified,
permanently remove all keys at the path.\n\n$pathUsage"; }

rmArgs() { getCredentialArg "$@"; }
rmCommand() { rmDo "$path" "$key" && rmFallbackRemote "$path" "$key"; }

rmFallbackRemote()
{
	local path="$1" key="$2"; ! canFallbackRemote && return
	log1 "removing credential '$path $key' from the remote store"
	cred rm "$path" "$key" --manager=remote || return
}

rmDo()
{
	local path="$1" key="$2"; opInit "rm" "$path" "$key" || return

	# remove a single credential or Vault credentials
	[[ "$key" != "all" || "$manager" == "vault" ]] && { rmWorker; return; }

	# remove all credentials
	local key keys onlyKeys="true"; IFS=$'\n' keys=( $(lsCommand) )
	for key in "${keys[@]}"; do rmWorker || return; done
}

rmWorker()
{
	local result return; result="$(RunFunction "rm" "$manager" 2>&1)"; return="$?"
	log1 "rm: return=$return result='$result'"; return "$return"
}

rmMac() { RunLog security delete-generic-password -a $USER -s "$managerPathKey"; }
rmOp() { RunLog op delete item "$managerPathKey"; }
rmPass() { RunLog pass rm --force "$managerPathKey"; }
rmWin() { RunLog wincred.exe delete "$managerPathKey"; }
rmGk() { RunLog secret-tool clear "$managerPath" "$key"; }

rmVault()
{ 
	local path="$managerPath"

	# remove a single key
	if [[ "$key" != "all" ]]; then
		! vaultKeyExists "$path" "$key" && return
		vault kv get -format=json "$path" | jq ".data.data|del(.$key)" | vault kv put "$path" -
		return
	fi

	# remove all keys at a leaf node
	! vaultIsLeaf "$path" && return

	# permanently remove all keys at the leaf node
	[[ $force ]] && { vault kv metadata delete "$path"; return; }

	# if the leaf node has data remove it
	vaultLeafHasData "$path" && { vault kv delete "$path"; return; }
		
	return 0
}

#
# set command
#

setUsage() { echot "Usage: $(ScriptName) set PATH [KEY](default) value\nSet a credential."; }

setArgs() 
{
	ScriptArgGet "path" -- "$@"; shift
	(( $# > 1 )) && { ScriptArgGet "key" -- "$@"; shift; } || key="default"
	ScriptArgGet "value" -- "$@"; shift
}

setCommand() { setDo "$path" "$key" "$value"; }

setDo()
{ 
	local path="$1" key="$2" value="$3"; opInit "set" "$path" "$key" || return
	local result return; result="$(RunFunction "set" "$manager" 2>&1)"; return="$?"
	log1 "set: return=$return result='$result'"; return "$return"
}


setMac() { security add-generic-password -U -a $USER -s "$managerPathKey" -w "$value"; }
setPass() { echo -n "$value" | pass insert -m --force "$managerPathKey"; }
setGk() { echo -n "$value" | secret-tool store --label "$managerPathKey" "$managerPath" "$key"; }
setWin() { wincred.exe set "$managerPathKey" "$value"; }

setOp()
{
	existsOp && { RunLog op edit item "$managerPathKey" password="$value" --cache; return; }
	RunLog op create item Password --title "$managerPathKey" password="$value" --tags="credential-$engine" --cache
}

setVault()
{	
	local path="$managerPath"

	if ! vaultLeafHasData "$path"; then
		vault kv put "$path" "$key"="$value"
	else
		vault kv patch "$path" "$key"="$value"
	fi
}

#
# store commands
#

storeUsage() { echot "Usage: $(ScriptName) store add|ls
Manage credential stores."; }

storeCommand() { storeLsCommand; }

storeLsCommand() { RunFunction "storeLs" "$manager"; }
storeLsVault() {	vault secrets list; }

storeAddUsage() { echot "Usage: $(ScriptName) store add NAME"; }
storeAddArgs() { ScriptArgGet "name" -- "$@"; shift; }
storeAddCommand() { RunFunction "storeAdd" "$manager"; }
storeAddVault() { vault secrets enable -path="$name" kv-v2; }

#
# sync command
#

syncUsage()
{
		echot "Usage: $(ScriptName) sync PATH [KEY](default)
Syncronize keys betwen the specified credential managers.

	-m1,	--manager1			first secret manager, defaults to local
	-m2,	--manager2			second secret manager, defaults to remote"
}

syncArgStart()
{
	unset -v key path
	m1="local" m2="remote"
}

syncOpt() 
{
	case "$1" in
		-m1|--manager1|-m1=*|--manager1=*) ScriptOptGet m1 "$@"; m1="$(managerNameAlias "$m1")";;
		-m2|--manager2|-m2=*|--manager2=*) ScriptOptGet m2 "$@"; m2="$(managerNameAlias "$m2")";;
		*) return 1
	esac
}

syncArgs()
{
	ScriptArgGet "path" -- "$@"; shift
	[[ $1 ]] && { ScriptArgGet "key" -- "$@"; shift; }
	return 0
}

syncCommand()
{
	log1 "syncing $path from $m1 to $m2"

	[[ $key ]] && { syncKey; return; }
	
	# get all keys at path
	local key keys; IFS=$'\n' keys=( $({ cred1 ls --keys "$path"; cred2 ls --keys "$path"; } | sort | uniq) )
	[[ $verbose ]] && { PrintErr "all keys: "; ArrayShow keys; }

	for key in "${keys[@]}"; do
		header "$path $key"
		cred sync "$path" "$key" "-m1=$m1" "-m2=$m2" || return
	done
}

syncKey()
{
	# key does not exist in m1
	if ! cred1 exists "$path" "$key"; then
		echo "Creating '$path $key' in $m1..."
		local value; value="$(cred2 get "$path" "$key")" || return
		cred1 set "$path" "$key" "$value" || return
		return
	fi

	# key does not exist in m2
	if ! cred2 exists "$path" "$key"; then
		echo "Creating '$path $key' in $m2..."
		local value; value="$(cred1 get "$path" "$key")" || return
		cred2 set "$path" "$key" "$value" || return
		return
	fi

	# compare values
	local value1; value1="$(cred1 get "$path" "$key")" || return
	local value2; value2="$(cred2 get "$path" "$key")" || return

	if [[ "$value1" == "$value2" ]]; then
		echo "$path $key is the same in $m1 and $m2"
		return
	fi

	# compare time
	local time1; time1="$(cred1 get time "$path" "$key" | GetSeconds -)" || return
	local time2; time2="$(cred2 get time "$path" "$key" | GetSeconds -)" || return

	if [[ $verbose ]]; then
		log1 "$m1 modifification time is $(cred1 get time "$path" "$key") ($time1 seconds)"
		log1 "$m2 modifification time is $(cred2 get time "$path" "$key") ($time2 seconds)"
	fi

	if (( $(echo "$time1 > $time2" | bc -l) )); then
		echo "Updating $m2 ($m1 value is newer)..."
		cred2 set "$path" "$key" "$value1" || return
	else
		echo "Updating $m1 ($m2 value is newer)..."
		cred1 set "$path" "$key" "$value2" || return
	fi
}

#
# manager unlock
#

managerUnlockCommand()
{
	isUnlocked && return
	unlock || { [[ ! $quiet ]] && EchoErr "Unable to unlock the $(managerDescription) credential manager."; return 1; }
	[[ ! $quiet ]] && EchoErr "The $(managerDescription) credential manager was unlocked."
	return 0
}

# unlock [MANAGER] - unlock the credential manager
unlock()
{
	# already unlocked
	[[ ! $force ]] && isUnlocked && verify && return

	log1 "unlocking the '$manager' credential manager"

	# try and find a password to unlock the credential manager
	[[ ! $password && ! $noFindPass ]] && { unlockFindPassword || return; }
		
	# unlock the credential manager
	RunFunction "unlock" "$manager" && verify && isUnlocked && return

	# unable to unlock
 	[[ ! $quiet ]] && ScriptErr "unable to unlock the '$(managerDescription)' credential manager"
 	return 1
}

unlockOp() { [[ $password || unlockTerminalCheck ]] && eval "$(1PasswordHelper unlock $password "${args[@]}")"; }
unlockPass() { unlockTerminalCheck && pass | grep --quiet "1"; }

unlockGk()
{

	# start the gnome-keyring-daemon
	gnomeKeyringDaemonStart || return

	# unlock with password argument
  if [[ $password ]]; then
		eval "export $(echo -n "$password" | gnomeKeyringDaemonRun --unlock)" || return

	# unlock with password from console prompt
  elif [[ ! $gui && ! $noPrompt ]] && IsStdIn; then # TODO: disable CLI password for now

  	local i password
		for (( i=1; i<=3; ++i )); do
	  	password="$(askPassword)" || return		
			eval "export $(echo -n "$password" | gnomeKeyringDaemonRun --unlock)"			
			isUnlocked && break
		done

	# unlock with an X Windows dialog, which retries if the password is not correct
	elif [[ $DISPLAY && ! $noPrompt ]]; then
		[[ ! $DISPLAY ]] && { ! [[ $quiet ]] && ScriptErr "a display is required to read the $(managerDescription) password"; return 1; }
		RunSilent secret-unlock || return

	# unable to get a password
	else	
		unlockTerminalRequired || return

	fi
}
 
unlockVault()
{
	# use the password for the Vault token if specified
	[[ $password ]] && export VAULT_TOKEN="$password"

	# Vault is considered unlocked if we have a token for it
	[[ $VAULT_TOKEN ]]
}

# unlockFindPassword - find a password for the credential manager
unlockFindPassword()
{
	log1 "unlockFindPassword: finding the password for the '$manager' credential manager"

	local managerTry
	
	# return if the credential manager doe not need a password
	! managerPasswordNeeded "$manager" && return

	# try to find the password for manager in the unlocked credential managers first
	for managerTry in $(managerUnlocked); do
		unlockFindPasswordTry "$managerTry" && return
	done

	# try to find the password for manager in the locked credential managers in case it can be unlocked without prompted,
	# i.e. with an environment variable like VAULT_TOKEN
	for managerTry in $(managerLocked); do
		unlockFindPasswordTry "$managerTry" && return
	done

	return 1
}

unlockFindPasswordTry()
{
	[[ "$manager" == "$managerTry" ]] && return

	log1 "looking for the '$(managerDescription)' password in '$(managerDescription "$managerTry")'"	
	password="$(RunLog credential manager password "$manager" --manager="$managerTry" "$(excludeManagers "$manager")" --no-find-pass --quiet --no-prompt "${globalArgs[@]}")" || return
	log1 "found the '$(managerDescription)' password in '$(managerDescription "$managerTry")'"
}

unlockTerminalCheck() { IsStdIn || unlockTerminalRequired; }
unlockTerminalRequired() { [[ ! $quiet ]] && ScriptErr "a terminal is required to read the $(managerDescription) password."; return 1; }

#
# helper - GNOME Keyring
#

# gnomeKeyringDaemonRun - run the gnome-keyring-daemon for secrets and pkcs11.
#   Do not use ssh as it interferes with existing SSH agents.
gnomeKeyringDaemonRun() {	RunQuiet gnome-keyring-daemon --components=secrets,pkcs11 --replace "$@"; }

gnomeKeyringDaemonIsHealthy()
{	
	# check running
	if ! IsTaskRunning "gnome-keyring-daemon" --unix --user; then
		log1 "gnome-keyring-daemon is not running"
		return 1
	fi

	# check sockets
	log2 "GNOME_KEYRING_CONTROL=$GNOME_KEYRING_CONTROL SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
	for socket in "$GNOME_KEYRING_CONTROL/control" "$SSH_AUTH_SOCK" "$GNOME_KEYRING_CONTROL/pkcs11"; do
		gnomeKeyringCheckSocket "$socket" || return
	done

	return 0
}

gnomeKeyringCheckSocket()
{
	local socket="$1"
	log2 "checking keyring socket '$socket'"
	! [[ -e "$socket" ]] && { log1 "keyring socket '$socket' missing"; return 1; }
	! [[ -S "$socket" ]] && { log1 "keyring socket '$socket' is not a socket"; return 1; }
	return 0
}

gnomeKeyringDaemonEnvironment()
{
	[[ $GNOME_KEYRING_CONTROL && $SSH_AUTH_SOCK ]] && return

	case "$PLATFORM" in
		linux) export GNOME_KEYRING_CONTROL="/run/user/$(id --user)/keyring";;
		win) export GNOME_KEYRING_CONTROL="/mnt/wslg/runtime-dir/keyring";;
	esac

	export SSH_AUTH_SOCK="$GNOME_KEYRING_CONTROL/ssh"
}

# gnomeKeyringDaemonStart - start the gnome-keyring-daemon and return export variables
gnomeKeyringDaemonStart()
{	
	gnomeKeyringDaemonEnvironment || return

	# start the gnome-keyring-daemon
	{ [[ $force ]] || ! gnomeKeyringDaemonIsHealthy; } && eval "export $(gnomeKeyringDaemonRun)"

	# failed to start 
	! gnomeKeyringDaemonIsHealthy && { [[ ! $quiet ]] && ScriptErr "unable to start the gnome-keyring-daemon"; return 1; }

	# healthy
	return 0
}

#
# helper - vault
#

# vaultIsLeaf PATH - return 0 if the path is a leaf node
vaultIsLeaf() { vault kv get "$1" >& /dev/null; }

# vaultKeyExists PATH KEY - return 0 if the key exists at path, 1 if it does not
vaultKeyExists() { vault kv get -field="$2" "$1" > /dev/null; }

# vaultLeafHasData PATH - leaf node contains data (contains non-deleted keys)
vaultLeafHasData() { vault kv get "$1" |& ${G}grep --quiet --extended-regexp "(=)+ Data (=)+"; }

# PATH - return 0 if the path has children
vaultPathHasChildren() { vault kv list "$1" >& /dev/null; }

#
# helper
#

askPassword() { ask password "Enter the $(managerDescription) credential store password"; }
canFallbackRemote() { ! isManagerRemote && [[ $fallback ]] && isManagerAvailableRemote; }
cred() { RunLog credential --unlock "${engineArg[@]}" "${excludeManagersArg[@]}" $fallback "${globalArgs[@]}" "$@"; }
isManagerExcluded() { IsInArray "${1,,}" excludeManagers; }

# excludeManagers [manager]... - return the --manager-exclude option with the existing plus new excluded managers
excludeManagers()
{
	local excludes=( "${excludeManagers[@]}" "$@" )
	echo -n "--exclude-managers=$(ArrayDelimit excludes)"	
}

keyNotFound()
{ 
	canFallbackRemote && return 1
	[[ ! $quiet ]] && ScriptErr "'$1 $2' does not exist in the '$(managerDescription)' credential store"
	return 1
}

# opInit OPERATION PATH KEY - set managerPathKey and managerKey to the manager specific values for the operation
opInit()
{
	local operation="$1" path="$2" key="$3"; 

	managerPath="$(managerPath "$path")" || return
	managerPathKey="$(managerPath "$path/$key")" || return

	log1 "$operation: manager=${manager,,} path='$path' key='$key' mp='$managerPath' mpk='$managerPathKey'"
}

ScriptRun "$@"
