#!/usr/bin/env bash
. script.sh || exit

run() {	init && args "$@" && findManager && initManager && "${command}Command"; }

init() { :; }

usage()
{
	ScriptUsage "$1" "\
Usage: credential manager|status
Interact with a credential store.

	check															check if a credential manager is installed
	delete path [key|all](default)		delete the key
	exists path [key](default)				check if a key exists
	list [path]												list all the paths or all keys at the specified path
	get|set path [key](default) value	get or set a key to value

	path						a grouping of credentials key/value paris.   
									For vault the path prefix defaults to $vaultDefaultEngine/.

	-e, --engine=ENGINE 	specify the secret engine, defaults to secret (Vault only)
	-m, --manager					force the use of a specific credential manager
	-f, --force  					force the operation
	-q, --quiet 					minimize informational messages

	Environment variables:
	CREDENTIAL_MANAGER		if set use the specified credential manager, one of
	                      find|linux|mac|pass|SecretTool|vault|win
	CREDENTIAL_ENGINE			if set, specifies the secret engine to use (Vault only)"
}

args()
{
	unset engine force quiet type

	# commands
	ScriptCommand "$@" || return

	# options
	set -- "${args[@]}"; args=()
	while (( $# != 0 )); do
		case "$1" in "") : ;;
			-e|--engine) ScriptArg engine "$@";;
			-f|--force) force="true";;
			-h|--help) usage 0;;
			-m*|--manager=*|--manager) ScriptArg "type" "manager" "$@";;
			-q|--quiet) quiet="true";;
			*) ScriptOption "$@";;
		esac
		shift "$shift"; shift=1
	done
	set -- "${args[@]}"

	# other arguments
	ScriptArgs "$@" || return; shift "$shift"

	key="default" path=""	
	[[ ! $type && $CREDENTIAL_MANAGER && "$CREDENTIAL_MANAGER" != "find" ]] && type="$CREDENTIAL_MANAGER"
 	[[ ! $engine && $CREDENTIAL_ENGINE ]] && engine="$CREDENTIAL_ENGINE" || engine="secret"

	if [[ "$command" == @(delete|exists|get|list|set) ]]; then
	
		# path
		(( $# == 0 )) && [[ "$command" != @(list) ]] && usage;
		(( $# > 0 )) && { path="$1"; shift; }

		# key
		case "$command" in
			delete|exists|get) [[ $# == 1 ]] && { key="$1"; shift; };;
			set) [[ $# == 2 ]] && { key="$1"; shift; }; ;;
		esac
		
	fi

	# value
	[[ "$command" == "set" && $# == 1 ]] && { value="$1"; shift; };

	[[ $@ ]] && usage
	
	return 0
}

#
# Commands
#

checkCommand() { return 0; }
typeCommand() { echo "${type}"; }

managerCommand()
{
	if IsPlatform win; then 
		control.exe /name Microsoft.CredentialManager
	elif IsPlatform debian; then
		start seahorse
	fi
}

statusCommand()
{
	echo "Credential store is $type"
	
	if [[ "$type" == "vault" ]]; then
		echo; vault status 
	elif checkVault; then
		echo "Vault is available"
	fi
		
	return 0
}

#
# Delete Command
#

deleteUsage() 
{
	echot "\
usage: credential delete path [key|all](default)		delete the specified key
	If all is specified all, all keys at the path are deleted.  
	If all and --force are specified, permanently delete all keys at the path."
}

deleteCommand() { RunFunction "delete${type^}" -- "$@"; }

deleteMac() { security delete-generic-password -gwa $USER -s "$path-$key"; }
deletePass() { pass rm "$path-$key"; }
deleteSecretTool() { secret-tool clear "$path" "$key"; }
deleteWin() { wincred.exe set "$path-$key" "$USER" "" 2> /dev/null; }

deleteVault()
{ 
	# return if already deleted
	if [[ "$key" == "all" ]]; then
		! vaultPathExists "$path" && return
	else
		! vaultKeyExists "$path" "$key" && return
	fi

	# delete a single key by setting it's value to the empty string
	[[ "$key" != "all" ]] && { vault kv patch "$path" "$key"=""; return; }

	# delete all of the keys permanently
	[[ $force ]] && { vault kv metadata delete "$path"; return; }

	# delete latest version of all keys
	vault kv delete "$path"
}

#
# Exist Command
#

existsCommand() { RunFunction "exists${type^}" -- "$@"; }

existsMac() { security find-generic-password -gwa $USER -s "$path-$key" >& /dev/null; }
existsPass() { [[ -f "$HOME/.password-store/$path-$key.gpg" ]]; }
existsSecretTool() { secret-tool search $path $key |& grep label >& /dev/null; }
existsVault() { vault kv get -field="$key" "$path" >& /dev/null; }
existsWin() { wincred.exe get "$path-$key" 2> /dev/null >& /dev/null; }

#
# Get Command
#

getCommand()
{
	local pass="$(RunFunction "get${type^}" -- "$@")"
	[[ $pass ]] && echo "$pass" || return 1
}

getMac() { security find-generic-password -gwa $USER -s "$path-$key" 2> /dev/null; }
getPass() { pass show "$path-$key"; }
getSecretTool() { secret-tool lookup "$path" "$key"; }
getVault() { vault kv get -field="$key" "$path"; }
getWin() { wincred.exe get "$path-$key" 2> /dev/null; }

#
# List Command
#

listCommand() { RunFunction "list${type^}" -- "$@"; }

listVault()
{	
	# list keys at path
	if [[ $(GetWord "$path" 2 /) ]]; then
		vaultPathValidate "$path" || return
		vault kv get "$path"
	fi

	# list available paths
	local paths result
	paths="$(vault kv list "$path" |& tail +3)"; result="$?"

	[[ "$paths" =~ ^"No value found at" ]] && return

	if [[ "$result" != 0 ]]; then
		[[ ! $quiet ]] && EchoErr "$paths"
		return "$result"
	fi

	printf "$paths\n"
}

#
# Set Command
#

setCommand() { RunFunction "set${type^}" -- "$@"; }

setMac() { security add-generic-password -U -a $USER -s "$path-$key" -w "$value"; }
setPass() { passSet; }
setSecretTool() { echo "$value" | secret-tool store --label "credential for $path $key" "$path" "$key"; }
setWin() { wincred.exe set "$path-$key" "$USER" "$value" 2> /dev/null; }

setVault()
{
	if ! vaultPathExists "$path"; then
		vault kv put "$path" "$key"="$value"
	else
		vault kv patch "$path" "$key"="$value"
	fi
}

#
# Find a Credential Manager
#

findManager()
{
	# use the specified credential manager
	if [[ $type ]]; then

 		# ensure correct case
		type="$(ProperCase "$type")"
		[[ "$type" == "SecretTool" ]] && type="SecretTool"

		# see if the specified credential manage is valid
		if ! IsFunction "findManager${type}"; then
			[[ ! $quiet ]] && EchoErr "credential: \`$type\` is not a valid credential manager"
			return 1
		fi

		# ensure the specified credential manager is available
		"findManager${type^}" && return
		noCredentialManager "$type"
	fi

	# find a credential manager based on the platform
	RunPlatform findManager || noCredentialManager
}

findManagerLinux() { findManagerSecretTool && return; findManagerPass && return; findManagerVault; }
findManagerMac() { IsPlatform mac && type="mac" && return; findManagerVault; }
findManagerPass() { ! passCheck && return 1; type="pass";	}
findManagerSecretTool() { [[ $DISPLAY ]] && InPath secret-tool && echo "success" | secret-tool store --label "test" test default >& /dev/null && type="SecretTool"; }
findManagerWin() { IsPlatform win && InPath "wincred.exe" && type="win"; }

findManagerVault()
{
	! InPath vault return 1
	[[ ! $VAULT_ADDR ]] && { eval "$(hashi vault config)" || return; }
	[[ $VAULT_ADDR && $VAULT_TOKEN ]] && { type="vault"; return; }
	return 1
}

#
# Initialize the Credential Manager
#

initManager() { RunFunction "initManager${type^}"; }

initManagerVault()
{
	# get engine

	# add engine to path
	path="$engine/$path"
}

noCredentialManager()
{
	local desc="A"; [[ $1 ]] && desc="The $1"
	[[ ! "$quiet" ]] && ScriptErr "$desc credential manager is not available"
	exit 1
}

#
# Vault Helper
#

# vaultKeyExists PATH KEY - return 0 if the key exists at path, 1 if it does not
vaultKeyExists() { vault kv get -field="$2" "$1" >& /dev/null; }

# vaultPathExists PATH - return 0 if the path is valid
vaultPathExists() { vault kv get "$1" >& /dev/null; }

# vaultPathValidate PATH - if the path does not exist return an error
vaultPathValidate()
{ 
	vaultPathExists "$path" && return
	[[ ! "$quiet" ]] && ScriptErr "the path ``$path`` does not exist"
	return 1
}

# 
# pass helper - put last, causes issues with sublime hilighting
#

passCheck() { InPath pass && pass insert -m --force test-default<<<"success" >& /dev/null; }
passSet() { pass insert -m --force "$path-$key"<<<"success" 2> /dev/null; }

run "$@"

