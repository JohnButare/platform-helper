#!/usr/bin/env bash
. script.sh || return

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [target](local)
Find host information.

	vars		return host information in variables
	show		show host information"
}

init() { defaultCommand="vars"; }
argStart() { unset -v protocol; }

#
# Show Command
#

showArgStart() { host="localhost"; }

showUsage() { echot "\
Usage: $(ScriptName) show [HOST](localhost)
Show host information."; }

showArgs() {	(( $# == 0 )) && return; ScriptArgGet "host" -- "$@"; }

showCommand()
{
	! IsAvailable "$host" && { ScriptErr "host '$host' is not available"; return 1; }

	# OS
	os version "$host" || return

	# power
	local watts; watts="$(power status watts "$host")" && echo "       watts: $watts"

	# File Sharing
	echo "File Sharing: $(unc get protocols "$host")" || return
}

#
# Vars Command
#

varsUsage() { echot "Usage: $(ScriptName) vars [TARGET|host](localhost)
Return host information in variables.  Target can be a host, directory, or UNC.
If the target is \"host\", find a mounted host such as a virtual machine host of 
a guest virtual machine.

	-d,	--detail			include more detailed information
	-p, --protocol		$(ScriptOptNetworkProtocolUsage)
	-u,	--user USER		the user to find directories for
	-v,	--verbose			display detailed output"
}

varsArgStart() { unset -v detail protocol target verbose; }

varsOpt() 
{
	case "$1" in
		-d|--detail) detail="true";;
		-p|--protocol|-p*|--protocol=*) ScriptOptNetworkProtocol "$@";;
		-u|--user) shift; user="$1";;
		-v|--verbose) verbose="--verbose";;
		*) return 1
	esac
}

varsArgs() {	[[ ! $1 ]] && return; ScriptArgGet "target" -- "$@"; }

varsCommand()
{
	local basicVars=() detailVars=()

	protocol="${protocol:-smb}"

	varsBasic || return
	[[ $detail ]] && { varsDetail || return; }

 	ScriptReturn $verbose "${basicVars[@]}" "${detailVars[@]}"
}

varsBasic()
{	
	# define GetPlatform function
	. bash.bashrc || return 

	# variables
	local var
	basicVars=(_platform _platformLike _platformId _data ) 			# platform
	basicVars+=(_root _media _public _users _user _home _adata)	# directory
	basicVars+=(_protocol)																			# file sharting protocol

	for var in "${basicVars[@]}"; do unset $var; done

	# find target for a mounted host
	if [[ "$target" == "host" ]]; then

			local drive drives; IFS=$'\n' drives=( $(drive mounts) ); unset target
			for drive in "${drives[@]}"; do
				[[ -d "$drive/usr/local" || -d "$drive/Users/Public" ]] && { target="$drive"; break; }
			done

			[[ ! $target ]] && { ScriptErr "unable to find information for host"; return 1; }
	fi

	# local
	if IsLocalHost "$target" || [[ "$target" == "/" ]]; then
		_platform="$PLATFORM" _platformLike="$PLATFORM_LIKE" _platformId="$PLATFORM_ID"
		_root="/" _users="$USERS" _public="$PUB"	_data="$DATA"; [[ ! $_user ]] && _home="$HOME"

	elif [[ -d "$target" ]]; then
		varsBasicDir || return

	else
		varsBasicHost || return

	fi	
	
	# Synology does not support SMB connections
	[[ "$protocol" == "smb" ]] && IsPlatform synology && protocol="ssh";

	# assume QNAP and Synology use port 608 for SSH
	[[ "$protocol" == "ssh" ]] && { IsHostPlatform qnap,synology && _protocol="608"; }

	# standard shares - for QNAP and Synology SMB connections
	if [[ $target && "$protocol" == "smb" ]] && IsHostPlatform qnap,synology; then
		_root="//$target" _users="$_root/homes" _public="$_root/public" _data="$_public/documents/data" _home="$_root/home" _media="$_root/data/media"
	fi

	# _users
	[[ ! $_users && $_root ]] && IsHostPlatform mac,win && _users="$_root/Users"
	[[ ! $_users && $_root ]] && IsHostPlatform linux && _users="$_root/home"

	# _public
	[[ ! $_public && $_users ]] && _public="$_users/Shared"

	# _data
	[[ ! $_data && $_root ]] && _data="$_root/usr/local/data"

	# _user
	_user="${user:-$USER}"

	# _home
	[[ ! $_home && $_users ]] && _home="$_users/$_user"

	# _adata
	[[ ! $_adata && $_home ]] && IsHostPlatform mac && _adata="$_home/Library/Application Support"
	[[ ! $_adata && $_root ]] && IsHostPlatform win && _adata="$_root/mnt/c/Users/$_user/AppData/Roaming"

	# file sharing
	_protocol="$protocol"

	return 0
}

varsBasicDir()
{
	# dir - USB drive with a public and option home directory
	if [[ -d "$target/public" ]]; then
		_public="$target/public" _data="$_public/documents/data"
		[[ -d "$target/home" ]] && _home="$target/home"

	# dir -  public directory
	elif [[ -d "$target/documents/data/platform" ]]; then
		_public="$target" _data="$_public/documents/data"

	# dir - home directory
	elif [[ -d "$target/data/bin" ]]; then
		_home="$target"

	# dir - host root directory
	else

		if [[ -d "$target/mnt/c" ]]; then
			_platform="win"
		elif [[ -d "$target/usr/local" ]]; then
			_platform="linux"
		elif [[ -d "$target/Applications" ]]; then
			_platform="mac"; 
		else
			ScriptErr "unable to find host information in \`$target\` directory"
			return 1
		fi
		_root="$target"

	fi
}

varsBasicHost()
{
	local host="$(RemoveDnsSuffix "$target")"
	local network="$(network current name)"

	# Wiggin hosts - Synology 
	if [[ "$network" == "hagerman" && "$host" == @(nas1) ]]; then
		_platform="linux" _platformLike="synology" _platformId="dsm" _root="//$target/root"
	
	# Wiggin hosts - QNAP
	elif [[ "$network" == "hagerman" && "$host" == @(nas3|nas3.butare.net) ]]; then
		_platform="linux" _platformLike="qnap" _platformId="qts" _root="//$target/root"
	
	# other host - determine platform using SSH
	elif SshAgentConfig && GetPlatform "$target"; then
		_platform="$platform" _platformLike="$platformLike"	_platformId="$platformId" _root="//$target/root"

		# if SMB is not available fall back to SSH 
		[[ "$protocol" == "smb" ]] && ! unc IsAvailable "$target" --protocol="$protocol" && protocol="$(SshHelper config "$target" port)"

	else
		ScriptErr "unable to determine '$target' platform"
		return 1

	fi

	return 0
}

varsDetail()
{
	# variables
	local var; detailVars=( pd ud udoc uhome udata adata)
	for var in "${detailVars[@]}"; do unset $var; done

	# additional directory information
	pd="$_public/Desktop"
	ud="$_home/Desktop"
	udoc="$_home/Documents"
	uhome="$_home"
	udata="$uhome/data"
	adata="$_adata"

	#
	# platform information
	#
	case "$_platform" in

		win)
			detailVars+=( psm pp ao adata usm up )
			psm="$_root/mnt/c/ProgramData/Microsoft/Windows/Start Menu"
			pp="$psm/Programs"
			ao="$pp/Applications/Other"
			usm="$adata/Microsoft/Windows/Start Menu"	
			up="$usm/Programs"
			;;

		mac)
			detailVars+=( si la ula )
			si="/Library/StartupItems"
			la="/Library/LaunchAgents"
			ula="$HOME/Library/LaunchAgents"
			;;

	esac

	#
	# host specific information
	#
	local vars=( _minimalInstall )
	unset "${vars[@]}"
	detailVars+=( "${vars[@]}" )
		
	# limit what is installed on embedded systems such as Raspberry Pi, nas, and docker systems
	IsHostPlatform pi,pikernel && _minimalInstall="true" 
	[[ ! $target ]] && IsPlatform docker && _minimalInstall="true"

	return 0
}

ScriptRun "$@"
