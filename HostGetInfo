#!/usr/bin/env bash
. "${BASH_SOURCE[0]%/*}/function.sh" script || exit

usage()
{
	ScriptUsage "$1" "\
Usage: $(ScriptName) [TARGET|host](localhost)
Return host information in variables.  Target can be a host, directory, or UNC.
If the target is \"host\", find a mounted host such as a virtual machine host of 
a guest virtual machine.

	-d,	--detail			include more detailed information
	-l,	--local				return local paths (not UNCs)
	-p, --protocol		$(ScriptOptNetworkProtocolUsage)
	-s, --show				show variables names (for use in another script)
	-T, --trust				trust host identification ignoring possible security issues
	-u,	--user USER		the user to find directories for"
}

init() { defaultCommand="vars"; }
argStart() { unset -v protocol; }

#
# Vars Command
#

varsArgStart() { unset -v detail local protocol show target trust user verbose; }

varsOpt() 
{
	case "$1" in
		--detail|-d) detail="true";;
		--local|-l) local="true";;
		--protocol|--protocol=*|-p|-p=*) ScriptOptNetworkProtocol "$@";;
		--show|-s) show="--trust";;
		--trust|-T) trust="--trust";;
		--user|-u) user="$1";;
		*) return 1
	esac
}

varsArgs() {	[[ ! $1 ]] && return; ScriptArgGet "target" -- "$@"; }

varsCommand()
{
	local basicVars=() detailVars=() protocolArg="$protocol"

	protocol="${protocol:-smb}"

	# get variables
	varsBasic || return
	[[ $detail ]] && { varsDetail || return; }

	# return results
	if [[ $show ]]; then
		echo -n "${basicVars[@]}" "${detailVars[@]}"
	elif [[ $local ]]; then
		ScriptReturn "${basicVars[@]}" "${detailVars[@]}" | ${G}sed "s/$(echo "$_root" | QuoteForwardslashes)//g"
	else
 		ScriptReturn "${basicVars[@]}" "${detailVars[@]}"
 	fi
}

varsBasic()
{	
	# define GetPlatform function
	. bash.bashrc || return 

	# variables
	local var	
	basicVars=(_platformTarget _platformLocal	_platformOs _platformIdMain _platformIdLike _platformIdDetail _platformKernel _machine _data)
	basicVars+=(_root _media _public _users _user _wuser _home)	# directory and user
	basicVars+=(_protocol _rootSmb _rootSsh)										# file sharting protocol
	basicVars+=(_busybox _chroot _wsl)													# other

	for var in "${basicVars[@]}"; do unset $var; done

	# find target for a mounted host
	if [[ "$target" == "host" ]]; then

			local drive drives; IFS=$'\n' ArrayMake drives "$(drive mounts)"; unset target
			for drive in "${drives[@]}"; do
				[[ -d "$drive/usr/local" || -d "$drive/Users/Public" ]] && { target="$drive"; break; }
			done

			[[ ! $target ]] && { ScriptErr "unable to find information for host"; return 1; }
	fi
	_platformTarget="$target"

	# local
	if IsLocalHost "$target" || [[ "$target" == "/" ]]; then
		_platformTarget="localhost"
		_platformLocal="true"
		_platformOs="$PLATFORM_OS" _platformIdMain="$PLATFORM_ID_MAIN" _platformIdLike="$PLATFORM_ID_LIKE" _platformIdDetail="$PLATFORM_ID_DETAIL" _platformKernel="$PLATFORM_KERNEL" _machine="$MACHINE"
		_root="/" _users="$USERS" _public="$PUB"	_data="$DATA"; [[ ! $_user ]] && _home="$HOME"
		_busybox="$(IsBusyBox && echo "$true")" _chroot="$(IsChroot && echo "true")" _wsl="$WSL"
		_user="$USER" _wuser="$WIN_USER"

	# directory
	elif [[ -d "$target" ]]; then
		varsBasicDir || return

	# host
	else
		varsBasicHost || return

	fi

	# override standard shares if needed
	if [[ $target && "$protocol" == "smb" ]] && IsPlatform qnap,synology --host; then
		_root="//$target" _users="$_root/homes" _public="$_root/public" _data="$_public/documents/data" _home="$_root/home" _media="$_root/data/media"
	fi

	# _users
	if [[ ! $_users && $_root ]]; then		
		if isProtocolSsh && IsPlatform win --host; then _users="$_root/home"
		elif IsPlatform mac,win --host; then _users="$_root/Users"
		elif IsPlatform qnap --host; then _users="$_root/share/homes"
		elif IsPlatform linux --host; then _users="$_root/home"
		fi
	fi

	# _public
	[[ ! $_public && $_users ]] && _public="$_users/Shared"

	# _data
	[[ ! $_data && $_root ]] && _data="$_root/usr/local/data"

	# _user
	_user="${_user:-$(SshUser "$target")}" || return
	_wuser="${_wuser:-$_user}" || return
	
	# _home
	[[ ! $_home && $_users ]] && _home="$_users/$_user"

	# file sharing
	_protocol="$protocol"

	return 0
}

varsBasicDir()
{
	# dir - USB drive with a public and option home directory
	if [[ -d "$target/public" ]]; then
		_public="$target/public" _data="$_public/documents/data"
		[[ -d "$target/home" ]] && _home="$target/home"

	# dir -  public directory
	elif [[ -d "$target/documents/data/platform" ]]; then
		_public="$target" _data="$_public/documents/data"

	# dir - home directory
	elif [[ -d "$target/data/bin" ]]; then
		_home="$target"

	# dir - host root directory
	else

		if [[ -d "$target/mnt/c" ]]; then
			_platform="win"
		elif [[ -d "$target/usr/local" ]]; then
			_platform="linux"
		elif [[ -d "$target/Applications" ]]; then
			_platform="mac"; 
		else
			ScriptErr "unable to find host information in \`$target\` directory"
			return 1
		fi
		_root="$target"

	fi
}

varsBasicHost()
{
	local host="$(RemoveDnsSuffix "$target")"
	local network="$(network current name)"

	# determine platform using cached data or SSH
	local vars=(busybox chroot platformOs platformId platformIdLike platformIdDetail platformKernel machine wsl)
	local cache="host-info-${host,,}" script

	if script="$(UpdateGet "$cache")"; then
		eval "$script"
	elif SshAgentConf --quiet "${globalArgs[@]}" && GetPlatform "$target" --quiet $trust $verbose; then
		UpdateSet "$cache" "$(ScriptReturn "${vars[@]}")"
	else
		ScriptErrQuiet "unable to determine '$target' platform"
		return 1
	fi

	_platformOs="$platformOs" _platformIdMain="$platformIdMain" _platformIdLike="$platformIdLike" _platformIdDetail="$platformIdDetail" _platformKernel="$platformKernel" _machine="$machine"
	_busybox="$busybox" _chroot="$chroot" _wsl="$wsl"

	# _root _rootSmb _rootSsh
	_root="//$target/root"; _rootSmb="$_root" _rootSsh="$_root"
	if IsPlatformAll mac,arm --host; then _rootSmb="//$target/system"
	elif IsPlatformAll mac,x86 --host; then _rootSmb="//$target/system/volumes/data"
	elif IsPlatform win --host; then _rootSmb="//$target/c$"
	fi

	# if the protocol was not explicitly set, use SSH instead of SMB if needed
	if [[ ! $protocolArg && "$protocol" == "smb" ]] && InPath sshfs; then			
		if IsPlatform win --host; then protocol="ssh" 													# allow access to WSL file system, i.e. /usr/local/data/bin
		elif IsPlatform synology; then protocol="ssh" 													# Synology does not support SMB
		elif ! unc IsAvailable "$target" --protocol="smb"; then protocol="ssh"; # SMB is not available
		fi
	fi

	# set _root to the appropriate location for the selected protocol
	if [[ "$protocol" == "smb" ]]; then _root="$_rootSmb"
	elif [[ "$protocol" == "ssh" ]]; then _root="$_rootSsh" protocol="$(SshHelper config get "$target" port)"
	fi

	return 0
}

varsDetail()
{
	# variables
	local var; detailVars=( pd ud udoc uhome udata)
	for var in "${detailVars[@]}"; do unset $var; done

	# additional directory information
	pd="$_public/Desktop"
	ud="$_home/Desktop"
	udoc="$_home/Documents"
	uhome="$_home"
	udata="$uhome/data"

	#
	# platform information
	#
	case "$_platformOs" in

		win)
			detailVars+=( wroot psm pp ao whome usm up )
			wroot="$_root/mnt/c"
			psm="$wroot/ProgramData/Microsoft/Windows/Start Menu"
			pp="$psm/Programs"
			ao="$pp/Applications/Other"
			whome="$wroot/Users/$_wuser"
			usm="$whome/AppData/Roaming/Microsoft/Windows/Start Menu"	
			up="$usm/Programs"
			;;

		mac)
			detailVars+=( si la ula )
			si="/Library/StartupItems"
			la="/Library/LaunchAgents"
			ula="$HOME/Library/LaunchAgents"
			;;

	esac

	#
	# host specific information
	#
	local vars=( _minimalInstall )
	unset "${vars[@]}"
	detailVars+=( "${vars[@]}" )
		
	# minimal install except for systems with a window manager, and always for containers and embedded systems (NAS, Raspberry Pi, Rock)
	_minimalInstall="true"
	IsPlatform wm --host && ! IsPlatform container,embedded && _minimalInstall="" 

	return 0
}

#
# helper
#

isProtocolSsh() { [[ "$protocol" == "ssh" ]] || IsInteger "$protocol"; }

ScriptRun "$@"
